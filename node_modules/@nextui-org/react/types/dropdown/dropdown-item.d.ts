import type { FocusableProps } from "@react-types/shared";
import type { SimpleColors, NormalWeights, DropdownVariants } from "../utils/prop-types";
import React, { ReactNode, Key } from "react";
import { Node } from "@react-types/shared";
import { TreeState } from "@react-stately/tree";
import { CSS } from "../theme/stitches.config";
interface Props<T> extends FocusableProps {
    item: Node<T>;
    state: TreeState<T>;
    color?: SimpleColors;
    variant?: DropdownVariants;
    textColor?: SimpleColors;
    isVirtualized?: boolean;
    withDivider?: boolean;
    command?: string;
    description?: string;
    icon?: ReactNode;
    dividerWeight?: NormalWeights;
    as?: keyof JSX.IntrinsicElements;
    /**
     * Whether the item description should be truncated or not.
     */
    showFullDescription?: boolean;
    onAction?: (key: Key) => void;
}
declare type NativeAttrs = Omit<React.HTMLAttributes<unknown>, keyof Props<object>>;
export declare type DropdownItemProps<T = object> = Props<T> & NativeAttrs & {
    css?: CSS;
};
declare const DropdownItem: {
    <T extends object>({ as, css, item, state, color, icon, command, description, textColor, variant, autoFocus, isVirtualized, withDivider, dividerWeight, showFullDescription, className, onAction, }: DropdownItemProps<T>): JSX.Element;
    displayName: string;
    toString(): string;
};
export default DropdownItem;
