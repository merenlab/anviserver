/// <reference types="react" />
import { MenuTriggerType } from "@react-types/menu";
import { PopoverProps } from "../popover";
export interface UseDropdownProps extends Omit<PopoverProps, "children"> {
    type?: "menu" | "listbox";
    /**
     * Whether menu trigger is disabled.
     * @default false
     */
    isDisabled?: boolean;
    /**
     * How the menu is triggered.
     * @default 'press'
     */
    trigger?: MenuTriggerType;
    /**
     * Whether the trigger should show a pressed animation when the menu is open.
     * @default false
     */
    disableTriggerPressedAnimation?: boolean;
    /**
     * Whether the Menu closes when a selection is made.
     * @default true
     */
    closeOnSelect?: boolean;
}
/**
 * @internal
 */
export declare function useDropdown(props?: UseDropdownProps): {
    popoverProps: {
        offset?: number | undefined;
        ref?: import("react").RefObject<HTMLElement> | undefined;
        isFocusVisible?: boolean | "true" | "false" | ({
            "@xs"?: boolean | "true" | "false" | undefined;
            "@sm"?: boolean | "true" | "false" | undefined;
            "@md"?: boolean | "true" | "false" | undefined;
            "@lg"?: boolean | "true" | "false" | undefined;
            "@xl"?: boolean | "true" | "false" | undefined;
            "@dark"?: boolean | "true" | "false" | undefined;
            "@light"?: boolean | "true" | "false" | undefined;
            "@hover"?: boolean | "true" | "false" | undefined;
            "@motion"?: boolean | "true" | "false" | undefined;
            "@xsMin"?: boolean | "true" | "false" | undefined;
            "@smMin"?: boolean | "true" | "false" | undefined;
            "@mdMin"?: boolean | "true" | "false" | undefined;
            "@lgMin"?: boolean | "true" | "false" | undefined;
            "@xlMin"?: boolean | "true" | "false" | undefined;
            "@xsMax"?: boolean | "true" | "false" | undefined;
            "@smMax"?: boolean | "true" | "false" | undefined;
            "@mdMax"?: boolean | "true" | "false" | undefined;
            "@lgMax"?: boolean | "true" | "false" | undefined;
            "@xlMax"?: boolean | "true" | "false" | undefined;
            "@safari"?: boolean | "true" | "false" | undefined;
            "@initial"?: boolean | "true" | "false" | undefined;
        } & {
            [x: string]: boolean | "true" | "false" | undefined;
        }) | undefined;
        placement?: import("../popover").PopoverPlacement | undefined;
        onClose?: (() => void) | undefined;
        disableShadow?: boolean | "true" | ({
            "@xs"?: boolean | "true" | undefined;
            "@sm"?: boolean | "true" | undefined;
            "@md"?: boolean | "true" | undefined;
            "@lg"?: boolean | "true" | undefined;
            "@xl"?: boolean | "true" | undefined;
            "@dark"?: boolean | "true" | undefined;
            "@light"?: boolean | "true" | undefined;
            "@hover"?: boolean | "true" | undefined;
            "@motion"?: boolean | "true" | undefined;
            "@xsMin"?: boolean | "true" | undefined;
            "@smMin"?: boolean | "true" | undefined;
            "@mdMin"?: boolean | "true" | undefined;
            "@lgMin"?: boolean | "true" | undefined;
            "@xlMin"?: boolean | "true" | undefined;
            "@xsMax"?: boolean | "true" | undefined;
            "@smMax"?: boolean | "true" | undefined;
            "@mdMax"?: boolean | "true" | undefined;
            "@lgMax"?: boolean | "true" | undefined;
            "@xlMax"?: boolean | "true" | undefined;
            "@safari"?: boolean | "true" | undefined;
            "@initial"?: boolean | "true" | undefined;
        } & {
            [x: string]: boolean | "true" | undefined;
        }) | undefined;
        isBordered?: boolean | "true" | ({
            "@xs"?: boolean | "true" | undefined;
            "@sm"?: boolean | "true" | undefined;
            "@md"?: boolean | "true" | undefined;
            "@lg"?: boolean | "true" | undefined;
            "@xl"?: boolean | "true" | undefined;
            "@dark"?: boolean | "true" | undefined;
            "@light"?: boolean | "true" | undefined;
            "@hover"?: boolean | "true" | undefined;
            "@motion"?: boolean | "true" | undefined;
            "@xsMin"?: boolean | "true" | undefined;
            "@smMin"?: boolean | "true" | undefined;
            "@mdMin"?: boolean | "true" | undefined;
            "@lgMin"?: boolean | "true" | undefined;
            "@xlMin"?: boolean | "true" | undefined;
            "@xsMax"?: boolean | "true" | undefined;
            "@smMax"?: boolean | "true" | undefined;
            "@mdMax"?: boolean | "true" | undefined;
            "@lgMax"?: boolean | "true" | undefined;
            "@xlMax"?: boolean | "true" | undefined;
            "@safari"?: boolean | "true" | undefined;
            "@initial"?: boolean | "true" | undefined;
        } & {
            [x: string]: boolean | "true" | undefined;
        }) | undefined;
        isPositioned?: boolean | "true" | "false" | ({
            "@xs"?: boolean | "true" | "false" | undefined;
            "@sm"?: boolean | "true" | "false" | undefined;
            "@md"?: boolean | "true" | "false" | undefined;
            "@lg"?: boolean | "true" | "false" | undefined;
            "@xl"?: boolean | "true" | "false" | undefined;
            "@dark"?: boolean | "true" | "false" | undefined;
            "@light"?: boolean | "true" | "false" | undefined;
            "@hover"?: boolean | "true" | "false" | undefined;
            "@motion"?: boolean | "true" | "false" | undefined;
            "@xsMin"?: boolean | "true" | "false" | undefined;
            "@smMin"?: boolean | "true" | "false" | undefined;
            "@mdMin"?: boolean | "true" | "false" | undefined;
            "@lgMin"?: boolean | "true" | "false" | undefined;
            "@xlMin"?: boolean | "true" | "false" | undefined;
            "@xsMax"?: boolean | "true" | "false" | undefined;
            "@smMax"?: boolean | "true" | "false" | undefined;
            "@mdMax"?: boolean | "true" | "false" | undefined;
            "@lgMax"?: boolean | "true" | "false" | undefined;
            "@xlMax"?: boolean | "true" | "false" | undefined;
            "@safari"?: boolean | "true" | "false" | undefined;
            "@initial"?: boolean | "true" | "false" | undefined;
        } & {
            [x: string]: boolean | "true" | "false" | undefined;
        }) | undefined;
        scrollRef?: import("react").RefObject<HTMLElement> | undefined;
        shouldFlip?: boolean | undefined;
        isDismissable?: boolean | undefined;
        triggerType?: "grid" | "dialog" | "menu" | "listbox" | "tree" | undefined;
        shouldCloseOnBlur?: boolean | undefined;
        isKeyboardDismissDisabled?: boolean | undefined;
        shouldCloseOnInteractOutside?: ((element: HTMLElement) => boolean) | undefined;
    };
    state: import("@react-stately/menu").MenuTriggerState;
    ref: import("react").RefObject<HTMLUListElement>;
    onClose: () => void;
    autoFocus: import("@react-types/shared/src/selection").FocusStrategy;
    disableAnimation: boolean;
    disableTriggerPressedAnimation: boolean;
    menuRef: import("react").RefObject<HTMLUListElement>;
    borderWeight: "light" | "normal" | "bold" | "extrabold" | "black" | ({
        "@xs"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@sm"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@md"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lg"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xl"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@dark"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@light"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@hover"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@motion"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xsMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@smMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@mdMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lgMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xlMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xsMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@smMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@mdMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lgMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xlMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@safari"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@initial"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    } & {
        [x: string]: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    }) | undefined;
    menuPopoverRef: import("react").RefObject<HTMLDivElement>;
    menuTriggerRef: import("react").RefObject<HTMLElement>;
    closeOnSelect: boolean | undefined;
    getMenuTriggerProps: (props?: any, _ref?: any) => any;
    isVirtualized?: boolean | undefined;
    keyboardDelegate?: import("@react-types/shared/src/collections").KeyboardDelegate | undefined;
    id?: string | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    selectionMode?: import("@react-types/shared/src/selection").SelectionMode | undefined;
    items?: Iterable<unknown> | undefined;
    disabledKeys?: Iterable<import("react").Key> | undefined;
    disallowEmptySelection?: boolean | undefined;
    selectedKeys?: "all" | Iterable<import("react").Key> | undefined;
    defaultSelectedKeys?: "all" | Iterable<import("react").Key> | undefined;
    onSelectionChange?: ((keys: import("@react-types/shared/src/selection").Selection) => any) | undefined;
    shouldFocusWrap?: boolean | undefined;
    onAction?: ((key: import("react").Key) => void) | undefined;
};
export declare type UseDropdownReturn = ReturnType<typeof useDropdown>;
