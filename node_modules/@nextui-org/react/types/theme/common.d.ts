import type * as Stitches from "@stitches/react";
export declare const defaultTokens: {
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
};
export declare const defaultColors: {
    white: string;
    black: string;
    primaryLight: string;
    primaryLightHover: string;
    primaryLightActive: string;
    primaryLightContrast: string;
    primary: string;
    primaryBorder: string;
    primaryBorderHover: string;
    primarySolidHover: string;
    primarySolidContrast: string;
    primaryShadow: string;
    secondaryLight: string;
    secondaryLightHover: string;
    secondaryLightActive: string;
    secondaryLightContrast: string;
    secondary: string;
    secondaryBorder: string;
    secondaryBorderHover: string;
    secondarySolidHover: string;
    secondarySolidContrast: string;
    secondaryShadow: string;
    successLight: string;
    successLightHover: string;
    successLightActive: string;
    successLightContrast: string;
    success: string;
    successBorder: string;
    successBorderHover: string;
    successSolidHover: string;
    successSolidContrast: string;
    successShadow: string;
    warningLight: string;
    warningLightHover: string;
    warningLightActive: string;
    warningLightContrast: string;
    warning: string;
    warningBorder: string;
    warningBorderHover: string;
    warningSolidHover: string;
    warningSolidContrast: string;
    warningShadow: string;
    errorLight: string;
    errorLightHover: string;
    errorLightActive: string;
    errorLightContrast: string;
    error: string;
    errorBorder: string;
    errorBorderHover: string;
    errorSolidHover: string;
    errorSolidContrast: string;
    errorShadow: string;
    neutralLight: string;
    neutralLightHover: string;
    neutralLightActive: string;
    neutralLightContrast: string;
    neutral: string;
    neutralBorder: string;
    neutralBorderHover: string;
    neutralSolidHover: string;
    neutralSolidContrast: string;
    neutralShadow: string;
    gradient: string;
    accents0: string;
    accents1: string;
    accents2: string;
    accents3: string;
    accents4: string;
    accents5: string;
    accents6: string;
    accents7: string;
    accents8: string;
    accents9: string;
};
export declare const defaultMedia: {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
};
export declare const defaultUtils: {
    p: (value: Stitches.PropertyValue<"padding">) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: Stitches.PropertyValue<"paddingRight">) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: Stitches.PropertyValue<"paddingBottom">) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: Stitches.PropertyValue<"paddingLeft">) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: Stitches.PropertyValue<"paddingTop">) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: Stitches.PropertyValue<"margin">) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: Stitches.PropertyValue<"marginRight">) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: Stitches.PropertyValue<"marginBottom">) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: Stitches.PropertyValue<"marginLeft">) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: Stitches.PropertyValue<"marginTop">) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: Stitches.PropertyValue<"textAlign">) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: Stitches.PropertyValue<"textTransform">) => {
        textTransform: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        };
    };
    to: (value: Stitches.PropertyValue<"textOverflow">) => {
        textOverflow: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: Stitches.PropertyValue<"display">) => {
        display: {
            readonly [Stitches.$$PropertyValue]: "display";
        };
    };
    dflex: (value: Stitches.PropertyValue<"alignItems">) => {
        display: string;
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: Stitches.PropertyValue<"flexDirection">) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: Stitches.PropertyValue<"flexWrap">) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: Stitches.PropertyValue<"alignItems">) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: Stitches.PropertyValue<"alignContent">) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: Stitches.PropertyValue<"justifyContent">) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: Stitches.PropertyValue<"alignSelf">) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: Stitches.PropertyValue<"flexGrow">) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: Stitches.PropertyValue<"fontSize">) => {
        fontSize: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: Stitches.PropertyValue<"flexBasis">) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: Stitches.PropertyValue<"backgroundColor">) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: Stitches.PropertyValue<"backdropFilter">) => {
        backdropFilter: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: Stitches.PropertyValue<"backgroundColor">) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: Stitches.PropertyValue<"backgroundColor">) => {
        bf: string;
        bg: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: Stitches.PropertyValue<"backgroundColor">) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: Stitches.PropertyValue<"backgroundClip">) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: Stitches.PropertyValue<"borderRadius">) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: Stitches.PropertyValue<"borderWidth">) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: Stitches.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: Stitches.PropertyValue<"boxShadow">) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: Stitches.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: Stitches.PropertyValue<"boxShadow">) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: Stitches.PropertyValue<"boxShadow">) => {
        filter: string;
    };
    normalShadow: (value: Stitches.PropertyValue<"backgroundColor">) => {
        boxShadow: string;
    };
    normalShadowVar: (value: Stitches.PropertyValue<"backgroundColor">) => {
        boxShadow: string;
    };
    lh: (value: Stitches.PropertyValue<"lineHeight">) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: Stitches.PropertyValue<"overflow">) => {
        overflow: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        };
    };
    ox: (value: Stitches.PropertyValue<"overflowX">) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: Stitches.PropertyValue<"overflowY">) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: Stitches.PropertyValue<"pointerEvents">) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: Stitches.PropertyValue<"pointerEvents">) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: Stitches.PropertyValue<"userSelect">) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    w: (value: Stitches.PropertyValue<"width">) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    h: (value: Stitches.PropertyValue<"height">) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    mw: (value: Stitches.PropertyValue<"maxWidth">) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: Stitches.PropertyValue<"maxWidth">) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: Stitches.PropertyValue<"maxHeight">) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: Stitches.PropertyValue<"maxHeight">) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: Stitches.PropertyValue<"width">) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minSize: (value: Stitches.PropertyValue<"width">) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: Stitches.PropertyValue<"width">) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    maxSize: (value: Stitches.PropertyValue<"width">) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: Stitches.PropertyValue<"width">) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: Stitches.PropertyValue<"appearance">) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    scale: (value: Stitches.PropertyValue<"scale">) => {
        transform: string;
    };
    linearGradient: (value: Stitches.PropertyValue<"backgroundImage">) => {
        backgroundImage: string;
    };
    tdl: (value: Stitches.PropertyValue<"textDecorationLine">) => {
        textDecorationLine: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: Stitches.PropertyValue<"width">) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: Stitches.PropertyValue<"backgroundImage">) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
};
export declare const defaultThemeMap: {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
};
declare const _default: {
    prefix: string;
    theme: {
        colors: {
            white: string;
            black: string;
            primaryLight: string;
            primaryLightHover: string;
            primaryLightActive: string;
            primaryLightContrast: string;
            primary: string;
            primaryBorder: string;
            primaryBorderHover: string;
            primarySolidHover: string;
            primarySolidContrast: string;
            primaryShadow: string;
            secondaryLight: string;
            secondaryLightHover: string;
            secondaryLightActive: string;
            secondaryLightContrast: string;
            secondary: string;
            secondaryBorder: string;
            secondaryBorderHover: string;
            secondarySolidHover: string;
            secondarySolidContrast: string;
            secondaryShadow: string;
            successLight: string;
            successLightHover: string;
            successLightActive: string;
            successLightContrast: string;
            success: string;
            successBorder: string;
            successBorderHover: string;
            successSolidHover: string;
            successSolidContrast: string;
            successShadow: string;
            warningLight: string;
            warningLightHover: string;
            warningLightActive: string;
            warningLightContrast: string;
            warning: string;
            warningBorder: string;
            warningBorderHover: string;
            warningSolidHover: string;
            warningSolidContrast: string;
            warningShadow: string;
            errorLight: string;
            errorLightHover: string;
            errorLightActive: string;
            errorLightContrast: string;
            error: string;
            errorBorder: string;
            errorBorderHover: string;
            errorSolidHover: string;
            errorSolidContrast: string;
            errorShadow: string;
            neutralLight: string;
            neutralLightHover: string;
            neutralLightActive: string;
            neutralLightContrast: string;
            neutral: string;
            neutralBorder: string;
            neutralBorderHover: string;
            neutralSolidHover: string;
            neutralSolidContrast: string;
            neutralShadow: string;
            gradient: string;
            accents0: string;
            accents1: string;
            accents2: string;
            accents3: string;
            accents4: string;
            accents5: string;
            accents6: string;
            accents7: string;
            accents8: string;
            accents9: string;
        };
        shadows: {};
        dropShadows: {};
        fonts: {
            sans: string;
            mono: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
            "9xl": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
            black: number;
        };
        lineHeights: {
            xs: number;
            sm: number;
            base: number;
            md: number;
            lg: number;
            xl: number;
            "2xl": number;
            "3xl": number;
            "4xl": number;
            "5xl": number;
            "6xl": number;
            "7xl": number;
            "8xl": number;
            "9xl": number;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        space: {
            0: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
            "9xl": string;
            min: string;
            max: string;
            fit: string;
            screen: string;
            full: string;
            px: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        radii: {
            xs: string;
            sm: string;
            md: string;
            base: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            squared: string;
            rounded: string;
            pill: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            10: string;
            max: string;
        };
        borderWeights: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
        };
        transitions: {
            default: string;
            button: string;
            avatar: string;
            card: string;
            dropdownItem: string;
        };
        breakpoints: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xsMin: string;
        smMin: string;
        mdMin: string;
        lgMin: string;
        xlMin: string;
        xsMax: string;
        smMax: string;
        mdMax: string;
        lgMax: string;
        xlMax: string;
        motion: string;
        safari: string;
        hover: string;
        dark: string;
        light: string;
    };
    utils: {
        p: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        }) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        }) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        py: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        m: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        }) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        }) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        my: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        ta: (value: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        }) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        tt: (value: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        }) => {
            textTransform: {
                readonly [Stitches.$$PropertyValue]: "textTransform";
            };
        };
        to: (value: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        }) => {
            textOverflow: {
                readonly [Stitches.$$PropertyValue]: "textOverflow";
            };
        };
        d: (value: {
            readonly [Stitches.$$PropertyValue]: "display";
        }) => {
            display: {
                readonly [Stitches.$$PropertyValue]: "display";
            };
        };
        dflex: (value: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        }) => {
            display: string;
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        fd: (value: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        }) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        }) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        }) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        }) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        }) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        }) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        }) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        }) => {
            fontSize: {
                readonly [Stitches.$$PropertyValue]: "fontSize";
            };
        };
        fb: (value: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        }) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bf: (value: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        }) => {
            backdropFilter: {
                readonly [Stitches.$$PropertyValue]: "backdropFilter";
            };
        };
        bg: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bgBlur: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            bf: string;
            bg: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bgColor: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        backgroundClip: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        bgClip: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        br: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        bw: (value: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        }) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        btrr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        }) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        }) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        }) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        ds: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            dropShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        shadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        dshadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            dropShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        dropShadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            filter: string;
        };
        normalShadow: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            boxShadow: string;
        };
        normalShadowVar: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            boxShadow: string;
        };
        lh: (value: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        }) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ov: (value: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        }) => {
            overflow: {
                readonly [Stitches.$$PropertyValue]: "overflow";
            };
        };
        ox: (value: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        }) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        }) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        events: (value: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        w: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        h: (value: {
            readonly [Stitches.$$PropertyValue]: "height";
        }) => {
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
        };
        mw: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        maxW: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        mh: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        maxH: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        size: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        sizeMin: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        maxSize: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        sizeMax: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        appearance: (value: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        }) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        scale: (value: {
            readonly [Stitches.$$PropertyValue]: "scale";
        }) => {
            transform: string;
        };
        linearGradient: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundImage";
        }) => {
            backgroundImage: string;
        };
        tdl: (value: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        }) => {
            textDecorationLine: {
                readonly [Stitches.$$PropertyValue]: "textDecorationLine";
            };
        };
        truncateText: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            whiteSpace: string;
            overflow: string;
            textOverflow: string;
        };
        textGradient: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundImage";
        }) => {
            backgroundImage: string;
            WebkitBackgroundClip: string;
            WebkitTextFillColor: string;
            "&::selection": {
                WebkitTextFillColor: string;
            };
        };
    };
    themeMap: {
        width: string;
        height: string;
        minWidth: string;
        maxWidth: string;
        minHeight: string;
        maxHeight: string;
        flexBasis: string;
        gridTemplateColumns: string;
        gridTemplateRows: string;
        blockSize: string;
        minBlockSize: string;
        maxBlockSize: string;
        inlineSize: string;
        minInlineSize: string;
        maxInlineSize: string;
        borderWidth: string;
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
};
export default _default;
