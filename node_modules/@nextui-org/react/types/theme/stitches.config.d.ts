/// <reference types="react" />
import type * as Stitches from "@stitches/react";
import { Theme, BaseTheme } from "./types";
export declare const getStitchesTheme: (targetTheme: BaseTheme) => BaseTheme;
export declare const createThemeBase: <Argument0 extends string | ({
    shadows?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
    dropShadows?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
    colors?: {
        textLight?: string | number | boolean | undefined;
        text?: string | number | boolean | undefined;
        linkLight?: string | number | boolean | undefined;
        link?: string | number | boolean | undefined;
        codeLight?: string | number | boolean | undefined;
        code?: string | number | boolean | undefined;
        selection?: string | number | boolean | undefined;
        border?: string | number | boolean | undefined;
        gray50?: string | number | boolean | undefined;
        gray100?: string | number | boolean | undefined;
        gray200?: string | number | boolean | undefined;
        gray300?: string | number | boolean | undefined;
        gray400?: string | number | boolean | undefined;
        gray500?: string | number | boolean | undefined;
        gray600?: string | number | boolean | undefined;
        gray700?: string | number | boolean | undefined;
        gray800?: string | number | boolean | undefined;
        gray900?: string | number | boolean | undefined;
        pink50?: string | number | boolean | undefined;
        pink100?: string | number | boolean | undefined;
        pink200?: string | number | boolean | undefined;
        pink300?: string | number | boolean | undefined;
        pink400?: string | number | boolean | undefined;
        pink500?: string | number | boolean | undefined;
        pink600?: string | number | boolean | undefined;
        pink700?: string | number | boolean | undefined;
        pink800?: string | number | boolean | undefined;
        pink900?: string | number | boolean | undefined;
        cyan50?: string | number | boolean | undefined;
        cyan100?: string | number | boolean | undefined;
        cyan200?: string | number | boolean | undefined;
        cyan300?: string | number | boolean | undefined;
        cyan400?: string | number | boolean | undefined;
        cyan500?: string | number | boolean | undefined;
        cyan600?: string | number | boolean | undefined;
        cyan700?: string | number | boolean | undefined;
        cyan800?: string | number | boolean | undefined;
        cyan900?: string | number | boolean | undefined;
        red50?: string | number | boolean | undefined;
        red100?: string | number | boolean | undefined;
        red200?: string | number | boolean | undefined;
        red300?: string | number | boolean | undefined;
        red400?: string | number | boolean | undefined;
        red500?: string | number | boolean | undefined;
        red600?: string | number | boolean | undefined;
        red700?: string | number | boolean | undefined;
        red800?: string | number | boolean | undefined;
        red900?: string | number | boolean | undefined;
        yellow50?: string | number | boolean | undefined;
        yellow100?: string | number | boolean | undefined;
        yellow200?: string | number | boolean | undefined;
        yellow300?: string | number | boolean | undefined;
        yellow400?: string | number | boolean | undefined;
        yellow500?: string | number | boolean | undefined;
        yellow600?: string | number | boolean | undefined;
        yellow700?: string | number | boolean | undefined;
        yellow800?: string | number | boolean | undefined;
        yellow900?: string | number | boolean | undefined;
        green50?: string | number | boolean | undefined;
        green100?: string | number | boolean | undefined;
        green200?: string | number | boolean | undefined;
        green300?: string | number | boolean | undefined;
        green400?: string | number | boolean | undefined;
        green500?: string | number | boolean | undefined;
        green600?: string | number | boolean | undefined;
        green700?: string | number | boolean | undefined;
        green800?: string | number | boolean | undefined;
        green900?: string | number | boolean | undefined;
        purple50?: string | number | boolean | undefined;
        purple100?: string | number | boolean | undefined;
        purple200?: string | number | boolean | undefined;
        purple300?: string | number | boolean | undefined;
        purple400?: string | number | boolean | undefined;
        purple500?: string | number | boolean | undefined;
        purple600?: string | number | boolean | undefined;
        purple700?: string | number | boolean | undefined;
        purple800?: string | number | boolean | undefined;
        purple900?: string | number | boolean | undefined;
        blue50?: string | number | boolean | undefined;
        blue100?: string | number | boolean | undefined;
        blue200?: string | number | boolean | undefined;
        blue300?: string | number | boolean | undefined;
        blue400?: string | number | boolean | undefined;
        blue500?: string | number | boolean | undefined;
        blue600?: string | number | boolean | undefined;
        blue700?: string | number | boolean | undefined;
        blue800?: string | number | boolean | undefined;
        blue900?: string | number | boolean | undefined;
        background?: string | number | boolean | undefined;
        backgroundAlpha?: string | number | boolean | undefined;
        foreground?: string | number | boolean | undefined;
        backgroundContrast?: string | number | boolean | undefined;
        white?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        primaryLight?: string | number | boolean | undefined;
        primaryLightHover?: string | number | boolean | undefined;
        primaryLightActive?: string | number | boolean | undefined;
        primaryLightContrast?: string | number | boolean | undefined;
        primary?: string | number | boolean | undefined;
        primaryBorder?: string | number | boolean | undefined;
        primaryBorderHover?: string | number | boolean | undefined;
        primarySolidHover?: string | number | boolean | undefined;
        primarySolidContrast?: string | number | boolean | undefined;
        primaryShadow?: string | number | boolean | undefined;
        secondaryLight?: string | number | boolean | undefined;
        secondaryLightHover?: string | number | boolean | undefined;
        secondaryLightActive?: string | number | boolean | undefined;
        secondaryLightContrast?: string | number | boolean | undefined;
        secondary?: string | number | boolean | undefined;
        secondaryBorder?: string | number | boolean | undefined;
        secondaryBorderHover?: string | number | boolean | undefined;
        secondarySolidHover?: string | number | boolean | undefined;
        secondarySolidContrast?: string | number | boolean | undefined;
        secondaryShadow?: string | number | boolean | undefined;
        successLight?: string | number | boolean | undefined;
        successLightHover?: string | number | boolean | undefined;
        successLightActive?: string | number | boolean | undefined;
        successLightContrast?: string | number | boolean | undefined;
        success?: string | number | boolean | undefined;
        successBorder?: string | number | boolean | undefined;
        successBorderHover?: string | number | boolean | undefined;
        successSolidHover?: string | number | boolean | undefined;
        successSolidContrast?: string | number | boolean | undefined;
        successShadow?: string | number | boolean | undefined;
        warningLight?: string | number | boolean | undefined;
        warningLightHover?: string | number | boolean | undefined;
        warningLightActive?: string | number | boolean | undefined;
        warningLightContrast?: string | number | boolean | undefined;
        warning?: string | number | boolean | undefined;
        warningBorder?: string | number | boolean | undefined;
        warningBorderHover?: string | number | boolean | undefined;
        warningSolidHover?: string | number | boolean | undefined;
        warningSolidContrast?: string | number | boolean | undefined;
        warningShadow?: string | number | boolean | undefined;
        errorLight?: string | number | boolean | undefined;
        errorLightHover?: string | number | boolean | undefined;
        errorLightActive?: string | number | boolean | undefined;
        errorLightContrast?: string | number | boolean | undefined;
        error?: string | number | boolean | undefined;
        errorBorder?: string | number | boolean | undefined;
        errorBorderHover?: string | number | boolean | undefined;
        errorSolidHover?: string | number | boolean | undefined;
        errorSolidContrast?: string | number | boolean | undefined;
        errorShadow?: string | number | boolean | undefined;
        neutralLight?: string | number | boolean | undefined;
        neutralLightHover?: string | number | boolean | undefined;
        neutralLightActive?: string | number | boolean | undefined;
        neutralLightContrast?: string | number | boolean | undefined;
        neutral?: string | number | boolean | undefined;
        neutralBorder?: string | number | boolean | undefined;
        neutralBorderHover?: string | number | boolean | undefined;
        neutralSolidHover?: string | number | boolean | undefined;
        neutralSolidContrast?: string | number | boolean | undefined;
        neutralShadow?: string | number | boolean | undefined;
        gradient?: string | number | boolean | undefined;
        accents0?: string | number | boolean | undefined;
        accents1?: string | number | boolean | undefined;
        accents2?: string | number | boolean | undefined;
        accents3?: string | number | boolean | undefined;
        accents4?: string | number | boolean | undefined;
        accents5?: string | number | boolean | undefined;
        accents6?: string | number | boolean | undefined;
        accents7?: string | number | boolean | undefined;
        accents8?: string | number | boolean | undefined;
        accents9?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        sans?: string | number | boolean | undefined;
        mono?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
        "7xl"?: string | number | boolean | undefined;
        "8xl"?: string | number | boolean | undefined;
        "9xl"?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        hairline?: string | number | boolean | undefined;
        thin?: string | number | boolean | undefined;
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        semibold?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
        extrabold?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
        "7xl"?: string | number | boolean | undefined;
        "8xl"?: string | number | boolean | undefined;
        "9xl"?: string | number | boolean | undefined;
    } | undefined;
    letterSpacings?: {
        tighter?: string | number | boolean | undefined;
        tight?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        wide?: string | number | boolean | undefined;
        wider?: string | number | boolean | undefined;
        widest?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        0?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
        "7xl"?: string | number | boolean | undefined;
        "8xl"?: string | number | boolean | undefined;
        "9xl"?: string | number | boolean | undefined;
        min?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
        fit?: string | number | boolean | undefined;
        screen?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
        px?: string | number | boolean | undefined;
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        11?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        13?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        15?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        17?: string | number | boolean | undefined;
        18?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        28?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        36?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        44?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        52?: string | number | boolean | undefined;
        56?: string | number | boolean | undefined;
        60?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        96?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        squared?: string | number | boolean | undefined;
        rounded?: string | number | boolean | undefined;
        pill?: string | number | boolean | undefined;
    } | undefined;
    zIndices?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
    } | undefined;
    borderWeights?: {
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
        extrabold?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
    } | undefined;
    transitions?: {
        default?: string | number | boolean | undefined;
        button?: string | number | boolean | undefined;
        avatar?: string | number | boolean | undefined;
        card?: string | number | boolean | undefined;
        dropdownItem?: string | number | boolean | undefined;
    } | undefined;
    breakpoints?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    shadows?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
    dropShadows?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
    colors?: {
        textLight?: string | number | boolean | undefined;
        text?: string | number | boolean | undefined;
        linkLight?: string | number | boolean | undefined;
        link?: string | number | boolean | undefined;
        codeLight?: string | number | boolean | undefined;
        code?: string | number | boolean | undefined;
        selection?: string | number | boolean | undefined;
        border?: string | number | boolean | undefined;
        gray50?: string | number | boolean | undefined;
        gray100?: string | number | boolean | undefined;
        gray200?: string | number | boolean | undefined;
        gray300?: string | number | boolean | undefined;
        gray400?: string | number | boolean | undefined;
        gray500?: string | number | boolean | undefined;
        gray600?: string | number | boolean | undefined;
        gray700?: string | number | boolean | undefined;
        gray800?: string | number | boolean | undefined;
        gray900?: string | number | boolean | undefined;
        pink50?: string | number | boolean | undefined;
        pink100?: string | number | boolean | undefined;
        pink200?: string | number | boolean | undefined;
        pink300?: string | number | boolean | undefined;
        pink400?: string | number | boolean | undefined;
        pink500?: string | number | boolean | undefined;
        pink600?: string | number | boolean | undefined;
        pink700?: string | number | boolean | undefined;
        pink800?: string | number | boolean | undefined;
        pink900?: string | number | boolean | undefined;
        cyan50?: string | number | boolean | undefined;
        cyan100?: string | number | boolean | undefined;
        cyan200?: string | number | boolean | undefined;
        cyan300?: string | number | boolean | undefined;
        cyan400?: string | number | boolean | undefined;
        cyan500?: string | number | boolean | undefined;
        cyan600?: string | number | boolean | undefined;
        cyan700?: string | number | boolean | undefined;
        cyan800?: string | number | boolean | undefined;
        cyan900?: string | number | boolean | undefined;
        red50?: string | number | boolean | undefined;
        red100?: string | number | boolean | undefined;
        red200?: string | number | boolean | undefined;
        red300?: string | number | boolean | undefined;
        red400?: string | number | boolean | undefined;
        red500?: string | number | boolean | undefined;
        red600?: string | number | boolean | undefined;
        red700?: string | number | boolean | undefined;
        red800?: string | number | boolean | undefined;
        red900?: string | number | boolean | undefined;
        yellow50?: string | number | boolean | undefined;
        yellow100?: string | number | boolean | undefined;
        yellow200?: string | number | boolean | undefined;
        yellow300?: string | number | boolean | undefined;
        yellow400?: string | number | boolean | undefined;
        yellow500?: string | number | boolean | undefined;
        yellow600?: string | number | boolean | undefined;
        yellow700?: string | number | boolean | undefined;
        yellow800?: string | number | boolean | undefined;
        yellow900?: string | number | boolean | undefined;
        green50?: string | number | boolean | undefined;
        green100?: string | number | boolean | undefined;
        green200?: string | number | boolean | undefined;
        green300?: string | number | boolean | undefined;
        green400?: string | number | boolean | undefined;
        green500?: string | number | boolean | undefined;
        green600?: string | number | boolean | undefined;
        green700?: string | number | boolean | undefined;
        green800?: string | number | boolean | undefined;
        green900?: string | number | boolean | undefined;
        purple50?: string | number | boolean | undefined;
        purple100?: string | number | boolean | undefined;
        purple200?: string | number | boolean | undefined;
        purple300?: string | number | boolean | undefined;
        purple400?: string | number | boolean | undefined;
        purple500?: string | number | boolean | undefined;
        purple600?: string | number | boolean | undefined;
        purple700?: string | number | boolean | undefined;
        purple800?: string | number | boolean | undefined;
        purple900?: string | number | boolean | undefined;
        blue50?: string | number | boolean | undefined;
        blue100?: string | number | boolean | undefined;
        blue200?: string | number | boolean | undefined;
        blue300?: string | number | boolean | undefined;
        blue400?: string | number | boolean | undefined;
        blue500?: string | number | boolean | undefined;
        blue600?: string | number | boolean | undefined;
        blue700?: string | number | boolean | undefined;
        blue800?: string | number | boolean | undefined;
        blue900?: string | number | boolean | undefined;
        background?: string | number | boolean | undefined;
        backgroundAlpha?: string | number | boolean | undefined;
        foreground?: string | number | boolean | undefined;
        backgroundContrast?: string | number | boolean | undefined;
        white?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        primaryLight?: string | number | boolean | undefined;
        primaryLightHover?: string | number | boolean | undefined;
        primaryLightActive?: string | number | boolean | undefined;
        primaryLightContrast?: string | number | boolean | undefined;
        primary?: string | number | boolean | undefined;
        primaryBorder?: string | number | boolean | undefined;
        primaryBorderHover?: string | number | boolean | undefined;
        primarySolidHover?: string | number | boolean | undefined;
        primarySolidContrast?: string | number | boolean | undefined;
        primaryShadow?: string | number | boolean | undefined;
        secondaryLight?: string | number | boolean | undefined;
        secondaryLightHover?: string | number | boolean | undefined;
        secondaryLightActive?: string | number | boolean | undefined;
        secondaryLightContrast?: string | number | boolean | undefined;
        secondary?: string | number | boolean | undefined;
        secondaryBorder?: string | number | boolean | undefined;
        secondaryBorderHover?: string | number | boolean | undefined;
        secondarySolidHover?: string | number | boolean | undefined;
        secondarySolidContrast?: string | number | boolean | undefined;
        secondaryShadow?: string | number | boolean | undefined;
        successLight?: string | number | boolean | undefined;
        successLightHover?: string | number | boolean | undefined;
        successLightActive?: string | number | boolean | undefined;
        successLightContrast?: string | number | boolean | undefined;
        success?: string | number | boolean | undefined;
        successBorder?: string | number | boolean | undefined;
        successBorderHover?: string | number | boolean | undefined;
        successSolidHover?: string | number | boolean | undefined;
        successSolidContrast?: string | number | boolean | undefined;
        successShadow?: string | number | boolean | undefined;
        warningLight?: string | number | boolean | undefined;
        warningLightHover?: string | number | boolean | undefined;
        warningLightActive?: string | number | boolean | undefined;
        warningLightContrast?: string | number | boolean | undefined;
        warning?: string | number | boolean | undefined;
        warningBorder?: string | number | boolean | undefined;
        warningBorderHover?: string | number | boolean | undefined;
        warningSolidHover?: string | number | boolean | undefined;
        warningSolidContrast?: string | number | boolean | undefined;
        warningShadow?: string | number | boolean | undefined;
        errorLight?: string | number | boolean | undefined;
        errorLightHover?: string | number | boolean | undefined;
        errorLightActive?: string | number | boolean | undefined;
        errorLightContrast?: string | number | boolean | undefined;
        error?: string | number | boolean | undefined;
        errorBorder?: string | number | boolean | undefined;
        errorBorderHover?: string | number | boolean | undefined;
        errorSolidHover?: string | number | boolean | undefined;
        errorSolidContrast?: string | number | boolean | undefined;
        errorShadow?: string | number | boolean | undefined;
        neutralLight?: string | number | boolean | undefined;
        neutralLightHover?: string | number | boolean | undefined;
        neutralLightActive?: string | number | boolean | undefined;
        neutralLightContrast?: string | number | boolean | undefined;
        neutral?: string | number | boolean | undefined;
        neutralBorder?: string | number | boolean | undefined;
        neutralBorderHover?: string | number | boolean | undefined;
        neutralSolidHover?: string | number | boolean | undefined;
        neutralSolidContrast?: string | number | boolean | undefined;
        neutralShadow?: string | number | boolean | undefined;
        gradient?: string | number | boolean | undefined;
        accents0?: string | number | boolean | undefined;
        accents1?: string | number | boolean | undefined;
        accents2?: string | number | boolean | undefined;
        accents3?: string | number | boolean | undefined;
        accents4?: string | number | boolean | undefined;
        accents5?: string | number | boolean | undefined;
        accents6?: string | number | boolean | undefined;
        accents7?: string | number | boolean | undefined;
        accents8?: string | number | boolean | undefined;
        accents9?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        sans?: string | number | boolean | undefined;
        mono?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
        "7xl"?: string | number | boolean | undefined;
        "8xl"?: string | number | boolean | undefined;
        "9xl"?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        hairline?: string | number | boolean | undefined;
        thin?: string | number | boolean | undefined;
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        semibold?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
        extrabold?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
        "7xl"?: string | number | boolean | undefined;
        "8xl"?: string | number | boolean | undefined;
        "9xl"?: string | number | boolean | undefined;
    } | undefined;
    letterSpacings?: {
        tighter?: string | number | boolean | undefined;
        tight?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        wide?: string | number | boolean | undefined;
        wider?: string | number | boolean | undefined;
        widest?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        0?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
        "7xl"?: string | number | boolean | undefined;
        "8xl"?: string | number | boolean | undefined;
        "9xl"?: string | number | boolean | undefined;
        min?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
        fit?: string | number | boolean | undefined;
        screen?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
        px?: string | number | boolean | undefined;
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        11?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        13?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        15?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        17?: string | number | boolean | undefined;
        18?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        28?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        36?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        44?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        52?: string | number | boolean | undefined;
        56?: string | number | boolean | undefined;
        60?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        96?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        squared?: string | number | boolean | undefined;
        rounded?: string | number | boolean | undefined;
        pill?: string | number | boolean | undefined;
    } | undefined;
    zIndices?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
    } | undefined;
    borderWeights?: {
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
        extrabold?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
    } | undefined;
    transitions?: {
        default?: string | number | boolean | undefined;
        button?: string | number | boolean | undefined;
        avatar?: string | number | boolean | undefined;
        card?: string | number | boolean | undefined;
        dropdownItem?: string | number | boolean | undefined;
    } | undefined;
    breakpoints?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? import("@stitches/react/types/stitches").ThemeTokens<Argument1, string> : import("@stitches/react/types/stitches").ThemeTokens<Argument0, string>);
export declare const styled: <Type extends keyof JSX.IntrinsicElements | import("react").ComponentType<any> | import("@stitches/react/types/util").Function, Composers extends (string | import("react").ComponentType<any> | import("@stitches/react/types/util").Function | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [Stitches.$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [Stitches.$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [Stitches.$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [Stitches.$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [Stitches.$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [Stitches.$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [Stitches.$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [Stitches.$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [Stitches.$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [Stitches.$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [Stitches.$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [Stitches.$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [Stitches.$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [Stitches.$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [Stitches.$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [Stitches.$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [Stitches.$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [Stitches.$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [Stitches.$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [Stitches.$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [Stitches.$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [Stitches.$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [Stitches.$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [Stitches.$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [Stitches.$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [Stitches.$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [Stitches.$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [Stitches.$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [Stitches.$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [Stitches.$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [Stitches.$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("react").ComponentType<any> | import("@stitches/react/types/util").Function ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; }; }) => import("@stitches/react/types/styled-component").StyledComponent<Type, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [Stitches.$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [Stitches.$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [Stitches.$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [Stitches.$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [Stitches.$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [Stitches.$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [Stitches.$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [Stitches.$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [Stitches.$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [Stitches.$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [Stitches.$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [Stitches.$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [Stitches.$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [Stitches.$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [Stitches.$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [Stitches.$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [Stitches.$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [Stitches.$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [Stitches.$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [Stitches.$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [Stitches.$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [Stitches.$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [Stitches.$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [Stitches.$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [Stitches.$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [Stitches.$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [Stitches.$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [Stitches.$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [Stitches.$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [Stitches.$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [Stitches.$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>;
export declare const css: <Composers extends (string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [Stitches.$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [Stitches.$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [Stitches.$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [Stitches.$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [Stitches.$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [Stitches.$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [Stitches.$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [Stitches.$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [Stitches.$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [Stitches.$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [Stitches.$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [Stitches.$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [Stitches.$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [Stitches.$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [Stitches.$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [Stitches.$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [Stitches.$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [Stitches.$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [Stitches.$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [Stitches.$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [Stitches.$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [Stitches.$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [Stitches.$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [Stitches.$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [Stitches.$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [Stitches.$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [Stitches.$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [Stitches.$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [Stitches.$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [Stitches.$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [Stitches.$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; }; }) => import("@stitches/react/types/styled-component").CssComponent<import("@stitches/react/types/styled-component").StyledComponentType<Composers>, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, CSS_1>;
export declare const globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? import("@stitches/react/types/css").AtRule.FontFace | import("@stitches/react/types/css").AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: import("@stitches/react/types/css-util").CSS<{
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xsMin: string;
        smMin: string;
        mdMin: string;
        lgMin: string;
        xlMin: string;
        xsMax: string;
        smMax: string;
        mdMax: string;
        lgMax: string;
        xlMax: string;
        motion: string;
        safari: string;
        hover: string;
        dark: string;
        light: string;
    }, {
        shadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        dropShadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        colors: {
            textLight: string;
            text: string;
            linkLight: string;
            link: string;
            codeLight: string;
            code: string;
            selection: string;
            border: string;
            gray50: string;
            gray100: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            gray900: string;
            pink50: string;
            pink100: string;
            pink200: string;
            pink300: string;
            pink400: string;
            pink500: string;
            pink600: string;
            pink700: string;
            pink800: string;
            pink900: string;
            cyan50: string;
            cyan100: string;
            cyan200: string;
            cyan300: string;
            cyan400: string;
            cyan500: string;
            cyan600: string;
            cyan700: string;
            cyan800: string;
            cyan900: string;
            red50: string;
            red100: string;
            red200: string;
            red300: string;
            red400: string;
            red500: string;
            red600: string;
            red700: string;
            red800: string;
            red900: string;
            yellow50: string;
            yellow100: string;
            yellow200: string;
            yellow300: string;
            yellow400: string;
            yellow500: string;
            yellow600: string;
            yellow700: string;
            yellow800: string;
            yellow900: string;
            green50: string;
            green100: string;
            green200: string;
            green300: string;
            green400: string;
            green500: string;
            green600: string;
            green700: string;
            green800: string;
            green900: string;
            purple50: string;
            purple100: string;
            purple200: string;
            purple300: string;
            purple400: string;
            purple500: string;
            purple600: string;
            purple700: string;
            purple800: string;
            purple900: string;
            blue50: string;
            blue100: string;
            blue200: string;
            blue300: string;
            blue400: string;
            blue500: string;
            blue600: string;
            blue700: string;
            blue800: string;
            blue900: string;
            background: string;
            backgroundAlpha: string;
            foreground: string;
            backgroundContrast: string;
            white: string;
            black: string;
            primaryLight: string;
            primaryLightHover: string;
            primaryLightActive: string;
            primaryLightContrast: string;
            primary: string;
            primaryBorder: string;
            primaryBorderHover: string;
            primarySolidHover: string;
            primarySolidContrast: string;
            primaryShadow: string;
            secondaryLight: string;
            secondaryLightHover: string;
            secondaryLightActive: string;
            secondaryLightContrast: string;
            secondary: string;
            secondaryBorder: string;
            secondaryBorderHover: string;
            secondarySolidHover: string;
            secondarySolidContrast: string;
            secondaryShadow: string;
            successLight: string;
            successLightHover: string;
            successLightActive: string;
            successLightContrast: string;
            success: string;
            successBorder: string;
            successBorderHover: string;
            successSolidHover: string;
            successSolidContrast: string;
            successShadow: string;
            warningLight: string;
            warningLightHover: string;
            warningLightActive: string;
            warningLightContrast: string;
            warning: string;
            warningBorder: string;
            warningBorderHover: string;
            warningSolidHover: string;
            warningSolidContrast: string;
            warningShadow: string;
            errorLight: string;
            errorLightHover: string;
            errorLightActive: string;
            errorLightContrast: string;
            error: string;
            errorBorder: string;
            errorBorderHover: string;
            errorSolidHover: string;
            errorSolidContrast: string;
            errorShadow: string;
            neutralLight: string;
            neutralLightHover: string;
            neutralLightActive: string;
            neutralLightContrast: string;
            neutral: string;
            neutralBorder: string;
            neutralBorderHover: string;
            neutralSolidHover: string;
            neutralSolidContrast: string;
            neutralShadow: string;
            gradient: string;
            accents0: string;
            accents1: string;
            accents2: string;
            accents3: string;
            accents4: string;
            accents5: string;
            accents6: string;
            accents7: string;
            accents8: string;
            accents9: string;
        };
        fonts: {
            sans: string;
            mono: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
            "9xl": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
            black: number;
        };
        lineHeights: {
            xs: number;
            sm: number;
            base: number;
            md: number;
            lg: number;
            xl: number;
            "2xl": number;
            "3xl": number;
            "4xl": number;
            "5xl": number;
            "6xl": number;
            "7xl": number;
            "8xl": number;
            "9xl": number;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        space: {
            0: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
            "9xl": string;
            min: string;
            max: string;
            fit: string;
            screen: string;
            full: string;
            px: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        radii: {
            xs: string;
            sm: string;
            md: string;
            base: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            squared: string;
            rounded: string;
            pill: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            10: string;
            max: string;
        };
        borderWeights: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
        };
        transitions: {
            default: string;
            button: string;
            avatar: string;
            card: string;
            dropdownItem: string;
        };
        breakpoints: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    }, {
        width: string;
        height: string;
        minWidth: string;
        maxWidth: string;
        minHeight: string;
        maxHeight: string;
        flexBasis: string;
        gridTemplateColumns: string;
        gridTemplateRows: string;
        blockSize: string;
        minBlockSize: string;
        maxBlockSize: string;
        inlineSize: string;
        minInlineSize: string;
        maxInlineSize: string;
        borderWidth: string;
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        p: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        }) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        }) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        py: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        m: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        }) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        }) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        my: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        ta: (value: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        }) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        tt: (value: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        }) => {
            textTransform: {
                readonly [Stitches.$$PropertyValue]: "textTransform";
            };
        };
        to: (value: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        }) => {
            textOverflow: {
                readonly [Stitches.$$PropertyValue]: "textOverflow";
            };
        };
        d: (value: {
            readonly [Stitches.$$PropertyValue]: "display";
        }) => {
            display: {
                readonly [Stitches.$$PropertyValue]: "display";
            };
        };
        dflex: (value: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        }) => {
            display: string;
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        fd: (value: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        }) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        }) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        }) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        }) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        }) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        }) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        }) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        }) => {
            fontSize: {
                readonly [Stitches.$$PropertyValue]: "fontSize";
            };
        };
        fb: (value: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        }) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bf: (value: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        }) => {
            backdropFilter: {
                readonly [Stitches.$$PropertyValue]: "backdropFilter";
            };
        };
        bg: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bgBlur: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            bf: string;
            bg: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bgColor: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        backgroundClip: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        bgClip: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        br: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        bw: (value: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        }) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        btrr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        }) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        }) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        }) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        ds: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            dropShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        shadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        dshadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            dropShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        dropShadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            filter: string;
        };
        normalShadow: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            boxShadow: string;
        };
        normalShadowVar: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            boxShadow: string;
        };
        lh: (value: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        }) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ov: (value: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        }) => {
            overflow: {
                readonly [Stitches.$$PropertyValue]: "overflow";
            };
        };
        ox: (value: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        }) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        }) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        events: (value: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        w: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        h: (value: {
            readonly [Stitches.$$PropertyValue]: "height";
        }) => {
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
        };
        mw: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        maxW: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        mh: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        maxH: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        size: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        sizeMin: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        maxSize: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        sizeMax: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        appearance: (value: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        }) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        scale: (value: {
            readonly [Stitches.$$PropertyValue]: "scale";
        }) => {
            transform: string;
        };
        linearGradient: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundImage";
        }) => {
            backgroundImage: string;
        };
        tdl: (value: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        }) => {
            textDecorationLine: {
                readonly [Stitches.$$PropertyValue]: "textDecorationLine";
            };
        };
        truncateText: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            whiteSpace: string;
            overflow: string;
            textOverflow: string;
        };
        textGradient: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundImage";
        }) => {
            backgroundImage: string;
            WebkitBackgroundClip: string;
            WebkitTextFillColor: string;
            "&::selection": {
                WebkitTextFillColor: string;
            };
        };
    }>;
} : K extends `@property ${string}` ? import("@stitches/react/types/css").AtRule.Property : import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [Stitches.$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [Stitches.$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [Stitches.$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [Stitches.$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [Stitches.$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [Stitches.$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [Stitches.$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [Stitches.$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [Stitches.$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [Stitches.$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [Stitches.$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [Stitches.$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [Stitches.$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [Stitches.$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [Stitches.$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [Stitches.$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [Stitches.$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [Stitches.$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [Stitches.$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [Stitches.$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [Stitches.$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [Stitches.$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [Stitches.$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [Stitches.$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [Stitches.$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [Stitches.$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [Stitches.$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [Stitches.$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [Stitches.$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [Stitches.$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [Stitches.$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [Stitches.$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>; })[]) => () => string;
export declare const keyframes: (style: {
    [offset: string]: import("@stitches/react/types/css-util").CSS<{
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xsMin: string;
        smMin: string;
        mdMin: string;
        lgMin: string;
        xlMin: string;
        xsMax: string;
        smMax: string;
        mdMax: string;
        lgMax: string;
        xlMax: string;
        motion: string;
        safari: string;
        hover: string;
        dark: string;
        light: string;
    }, {
        shadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        dropShadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        colors: {
            textLight: string;
            text: string;
            linkLight: string;
            link: string;
            codeLight: string;
            code: string;
            selection: string;
            border: string;
            gray50: string;
            gray100: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            gray900: string;
            pink50: string;
            pink100: string;
            pink200: string;
            pink300: string;
            pink400: string;
            pink500: string;
            pink600: string;
            pink700: string;
            pink800: string;
            pink900: string;
            cyan50: string;
            cyan100: string;
            cyan200: string;
            cyan300: string;
            cyan400: string;
            cyan500: string;
            cyan600: string;
            cyan700: string;
            cyan800: string;
            cyan900: string;
            red50: string;
            red100: string;
            red200: string;
            red300: string;
            red400: string;
            red500: string;
            red600: string;
            red700: string;
            red800: string;
            red900: string;
            yellow50: string;
            yellow100: string;
            yellow200: string;
            yellow300: string;
            yellow400: string;
            yellow500: string;
            yellow600: string;
            yellow700: string;
            yellow800: string;
            yellow900: string;
            green50: string;
            green100: string;
            green200: string;
            green300: string;
            green400: string;
            green500: string;
            green600: string;
            green700: string;
            green800: string;
            green900: string;
            purple50: string;
            purple100: string;
            purple200: string;
            purple300: string;
            purple400: string;
            purple500: string;
            purple600: string;
            purple700: string;
            purple800: string;
            purple900: string;
            blue50: string;
            blue100: string;
            blue200: string;
            blue300: string;
            blue400: string;
            blue500: string;
            blue600: string;
            blue700: string;
            blue800: string;
            blue900: string;
            background: string;
            backgroundAlpha: string;
            foreground: string;
            backgroundContrast: string;
            white: string;
            black: string;
            primaryLight: string;
            primaryLightHover: string;
            primaryLightActive: string;
            primaryLightContrast: string;
            primary: string;
            primaryBorder: string;
            primaryBorderHover: string;
            primarySolidHover: string;
            primarySolidContrast: string;
            primaryShadow: string;
            secondaryLight: string;
            secondaryLightHover: string;
            secondaryLightActive: string;
            secondaryLightContrast: string;
            secondary: string;
            secondaryBorder: string;
            secondaryBorderHover: string;
            secondarySolidHover: string;
            secondarySolidContrast: string;
            secondaryShadow: string;
            successLight: string;
            successLightHover: string;
            successLightActive: string;
            successLightContrast: string;
            success: string;
            successBorder: string;
            successBorderHover: string;
            successSolidHover: string;
            successSolidContrast: string;
            successShadow: string;
            warningLight: string;
            warningLightHover: string;
            warningLightActive: string;
            warningLightContrast: string;
            warning: string;
            warningBorder: string;
            warningBorderHover: string;
            warningSolidHover: string;
            warningSolidContrast: string;
            warningShadow: string;
            errorLight: string;
            errorLightHover: string;
            errorLightActive: string;
            errorLightContrast: string;
            error: string;
            errorBorder: string;
            errorBorderHover: string;
            errorSolidHover: string;
            errorSolidContrast: string;
            errorShadow: string;
            neutralLight: string;
            neutralLightHover: string;
            neutralLightActive: string;
            neutralLightContrast: string;
            neutral: string;
            neutralBorder: string;
            neutralBorderHover: string;
            neutralSolidHover: string;
            neutralSolidContrast: string;
            neutralShadow: string;
            gradient: string;
            accents0: string;
            accents1: string;
            accents2: string;
            accents3: string;
            accents4: string;
            accents5: string;
            accents6: string;
            accents7: string;
            accents8: string;
            accents9: string;
        };
        fonts: {
            sans: string;
            mono: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
            "9xl": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
            black: number;
        };
        lineHeights: {
            xs: number;
            sm: number;
            base: number;
            md: number;
            lg: number;
            xl: number;
            "2xl": number;
            "3xl": number;
            "4xl": number;
            "5xl": number;
            "6xl": number;
            "7xl": number;
            "8xl": number;
            "9xl": number;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        space: {
            0: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
            "9xl": string;
            min: string;
            max: string;
            fit: string;
            screen: string;
            full: string;
            px: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        radii: {
            xs: string;
            sm: string;
            md: string;
            base: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            squared: string;
            rounded: string;
            pill: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            10: string;
            max: string;
        };
        borderWeights: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
        };
        transitions: {
            default: string;
            button: string;
            avatar: string;
            card: string;
            dropdownItem: string;
        };
        breakpoints: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    }, {
        width: string;
        height: string;
        minWidth: string;
        maxWidth: string;
        minHeight: string;
        maxHeight: string;
        flexBasis: string;
        gridTemplateColumns: string;
        gridTemplateRows: string;
        blockSize: string;
        minBlockSize: string;
        maxBlockSize: string;
        inlineSize: string;
        minInlineSize: string;
        maxInlineSize: string;
        borderWidth: string;
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        p: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        }) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        }) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        py: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        m: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        }) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        }) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        my: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        ta: (value: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        }) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        tt: (value: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        }) => {
            textTransform: {
                readonly [Stitches.$$PropertyValue]: "textTransform";
            };
        };
        to: (value: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        }) => {
            textOverflow: {
                readonly [Stitches.$$PropertyValue]: "textOverflow";
            };
        };
        d: (value: {
            readonly [Stitches.$$PropertyValue]: "display";
        }) => {
            display: {
                readonly [Stitches.$$PropertyValue]: "display";
            };
        };
        dflex: (value: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        }) => {
            display: string;
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        fd: (value: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        }) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        }) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        }) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        }) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        }) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        }) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        }) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        }) => {
            fontSize: {
                readonly [Stitches.$$PropertyValue]: "fontSize";
            };
        };
        fb: (value: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        }) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bf: (value: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        }) => {
            backdropFilter: {
                readonly [Stitches.$$PropertyValue]: "backdropFilter";
            };
        };
        bg: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bgBlur: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            bf: string;
            bg: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bgColor: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        backgroundClip: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        bgClip: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        br: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        bw: (value: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        }) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        btrr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        }) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        }) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        }) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        ds: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            dropShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        shadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        dshadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            dropShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        dropShadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            filter: string;
        };
        normalShadow: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            boxShadow: string;
        };
        normalShadowVar: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            boxShadow: string;
        };
        lh: (value: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        }) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ov: (value: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        }) => {
            overflow: {
                readonly [Stitches.$$PropertyValue]: "overflow";
            };
        };
        ox: (value: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        }) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        }) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        events: (value: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        w: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        h: (value: {
            readonly [Stitches.$$PropertyValue]: "height";
        }) => {
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
        };
        mw: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        maxW: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        mh: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        maxH: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        size: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        sizeMin: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        maxSize: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        sizeMax: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        appearance: (value: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        }) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        scale: (value: {
            readonly [Stitches.$$PropertyValue]: "scale";
        }) => {
            transform: string;
        };
        linearGradient: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundImage";
        }) => {
            backgroundImage: string;
        };
        tdl: (value: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        }) => {
            textDecorationLine: {
                readonly [Stitches.$$PropertyValue]: "textDecorationLine";
            };
        };
        truncateText: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            whiteSpace: string;
            overflow: string;
            textOverflow: string;
        };
        textGradient: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundImage";
        }) => {
            backgroundImage: string;
            WebkitBackgroundClip: string;
            WebkitTextFillColor: string;
            "&::selection": {
                WebkitTextFillColor: string;
            };
        };
    }>;
}) => {
    (): string;
    name: string;
};
export declare const getCssText: () => string;
export declare const theme: string & {
    className: string;
    selector: string;
} & {
    shadows: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "shadows", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "shadows", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "shadows", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "shadows", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "shadows", string>;
    };
    dropShadows: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "dropShadows", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "dropShadows", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "dropShadows", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "dropShadows", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "dropShadows", string>;
    };
    colors: {
        textLight: import("@stitches/react/types/theme").Token<"textLight", string, "colors", string>;
        text: import("@stitches/react/types/theme").Token<"text", string, "colors", string>;
        linkLight: import("@stitches/react/types/theme").Token<"linkLight", string, "colors", string>;
        link: import("@stitches/react/types/theme").Token<"link", string, "colors", string>;
        codeLight: import("@stitches/react/types/theme").Token<"codeLight", string, "colors", string>;
        code: import("@stitches/react/types/theme").Token<"code", string, "colors", string>;
        selection: import("@stitches/react/types/theme").Token<"selection", string, "colors", string>;
        border: import("@stitches/react/types/theme").Token<"border", string, "colors", string>;
        gray50: import("@stitches/react/types/theme").Token<"gray50", string, "colors", string>;
        gray100: import("@stitches/react/types/theme").Token<"gray100", string, "colors", string>;
        gray200: import("@stitches/react/types/theme").Token<"gray200", string, "colors", string>;
        gray300: import("@stitches/react/types/theme").Token<"gray300", string, "colors", string>;
        gray400: import("@stitches/react/types/theme").Token<"gray400", string, "colors", string>;
        gray500: import("@stitches/react/types/theme").Token<"gray500", string, "colors", string>;
        gray600: import("@stitches/react/types/theme").Token<"gray600", string, "colors", string>;
        gray700: import("@stitches/react/types/theme").Token<"gray700", string, "colors", string>;
        gray800: import("@stitches/react/types/theme").Token<"gray800", string, "colors", string>;
        gray900: import("@stitches/react/types/theme").Token<"gray900", string, "colors", string>;
        pink50: import("@stitches/react/types/theme").Token<"pink50", string, "colors", string>;
        pink100: import("@stitches/react/types/theme").Token<"pink100", string, "colors", string>;
        pink200: import("@stitches/react/types/theme").Token<"pink200", string, "colors", string>;
        pink300: import("@stitches/react/types/theme").Token<"pink300", string, "colors", string>;
        pink400: import("@stitches/react/types/theme").Token<"pink400", string, "colors", string>;
        pink500: import("@stitches/react/types/theme").Token<"pink500", string, "colors", string>;
        pink600: import("@stitches/react/types/theme").Token<"pink600", string, "colors", string>;
        pink700: import("@stitches/react/types/theme").Token<"pink700", string, "colors", string>;
        pink800: import("@stitches/react/types/theme").Token<"pink800", string, "colors", string>;
        pink900: import("@stitches/react/types/theme").Token<"pink900", string, "colors", string>;
        cyan50: import("@stitches/react/types/theme").Token<"cyan50", string, "colors", string>;
        cyan100: import("@stitches/react/types/theme").Token<"cyan100", string, "colors", string>;
        cyan200: import("@stitches/react/types/theme").Token<"cyan200", string, "colors", string>;
        cyan300: import("@stitches/react/types/theme").Token<"cyan300", string, "colors", string>;
        cyan400: import("@stitches/react/types/theme").Token<"cyan400", string, "colors", string>;
        cyan500: import("@stitches/react/types/theme").Token<"cyan500", string, "colors", string>;
        cyan600: import("@stitches/react/types/theme").Token<"cyan600", string, "colors", string>;
        cyan700: import("@stitches/react/types/theme").Token<"cyan700", string, "colors", string>;
        cyan800: import("@stitches/react/types/theme").Token<"cyan800", string, "colors", string>;
        cyan900: import("@stitches/react/types/theme").Token<"cyan900", string, "colors", string>;
        red50: import("@stitches/react/types/theme").Token<"red50", string, "colors", string>;
        red100: import("@stitches/react/types/theme").Token<"red100", string, "colors", string>;
        red200: import("@stitches/react/types/theme").Token<"red200", string, "colors", string>;
        red300: import("@stitches/react/types/theme").Token<"red300", string, "colors", string>;
        red400: import("@stitches/react/types/theme").Token<"red400", string, "colors", string>;
        red500: import("@stitches/react/types/theme").Token<"red500", string, "colors", string>;
        red600: import("@stitches/react/types/theme").Token<"red600", string, "colors", string>;
        red700: import("@stitches/react/types/theme").Token<"red700", string, "colors", string>;
        red800: import("@stitches/react/types/theme").Token<"red800", string, "colors", string>;
        red900: import("@stitches/react/types/theme").Token<"red900", string, "colors", string>;
        yellow50: import("@stitches/react/types/theme").Token<"yellow50", string, "colors", string>;
        yellow100: import("@stitches/react/types/theme").Token<"yellow100", string, "colors", string>;
        yellow200: import("@stitches/react/types/theme").Token<"yellow200", string, "colors", string>;
        yellow300: import("@stitches/react/types/theme").Token<"yellow300", string, "colors", string>;
        yellow400: import("@stitches/react/types/theme").Token<"yellow400", string, "colors", string>;
        yellow500: import("@stitches/react/types/theme").Token<"yellow500", string, "colors", string>;
        yellow600: import("@stitches/react/types/theme").Token<"yellow600", string, "colors", string>;
        yellow700: import("@stitches/react/types/theme").Token<"yellow700", string, "colors", string>;
        yellow800: import("@stitches/react/types/theme").Token<"yellow800", string, "colors", string>;
        yellow900: import("@stitches/react/types/theme").Token<"yellow900", string, "colors", string>;
        green50: import("@stitches/react/types/theme").Token<"green50", string, "colors", string>;
        green100: import("@stitches/react/types/theme").Token<"green100", string, "colors", string>;
        green200: import("@stitches/react/types/theme").Token<"green200", string, "colors", string>;
        green300: import("@stitches/react/types/theme").Token<"green300", string, "colors", string>;
        green400: import("@stitches/react/types/theme").Token<"green400", string, "colors", string>;
        green500: import("@stitches/react/types/theme").Token<"green500", string, "colors", string>;
        green600: import("@stitches/react/types/theme").Token<"green600", string, "colors", string>;
        green700: import("@stitches/react/types/theme").Token<"green700", string, "colors", string>;
        green800: import("@stitches/react/types/theme").Token<"green800", string, "colors", string>;
        green900: import("@stitches/react/types/theme").Token<"green900", string, "colors", string>;
        purple50: import("@stitches/react/types/theme").Token<"purple50", string, "colors", string>;
        purple100: import("@stitches/react/types/theme").Token<"purple100", string, "colors", string>;
        purple200: import("@stitches/react/types/theme").Token<"purple200", string, "colors", string>;
        purple300: import("@stitches/react/types/theme").Token<"purple300", string, "colors", string>;
        purple400: import("@stitches/react/types/theme").Token<"purple400", string, "colors", string>;
        purple500: import("@stitches/react/types/theme").Token<"purple500", string, "colors", string>;
        purple600: import("@stitches/react/types/theme").Token<"purple600", string, "colors", string>;
        purple700: import("@stitches/react/types/theme").Token<"purple700", string, "colors", string>;
        purple800: import("@stitches/react/types/theme").Token<"purple800", string, "colors", string>;
        purple900: import("@stitches/react/types/theme").Token<"purple900", string, "colors", string>;
        blue50: import("@stitches/react/types/theme").Token<"blue50", string, "colors", string>;
        blue100: import("@stitches/react/types/theme").Token<"blue100", string, "colors", string>;
        blue200: import("@stitches/react/types/theme").Token<"blue200", string, "colors", string>;
        blue300: import("@stitches/react/types/theme").Token<"blue300", string, "colors", string>;
        blue400: import("@stitches/react/types/theme").Token<"blue400", string, "colors", string>;
        blue500: import("@stitches/react/types/theme").Token<"blue500", string, "colors", string>;
        blue600: import("@stitches/react/types/theme").Token<"blue600", string, "colors", string>;
        blue700: import("@stitches/react/types/theme").Token<"blue700", string, "colors", string>;
        blue800: import("@stitches/react/types/theme").Token<"blue800", string, "colors", string>;
        blue900: import("@stitches/react/types/theme").Token<"blue900", string, "colors", string>;
        background: import("@stitches/react/types/theme").Token<"background", string, "colors", string>;
        backgroundAlpha: import("@stitches/react/types/theme").Token<"backgroundAlpha", string, "colors", string>;
        foreground: import("@stitches/react/types/theme").Token<"foreground", string, "colors", string>;
        backgroundContrast: import("@stitches/react/types/theme").Token<"backgroundContrast", string, "colors", string>;
        white: import("@stitches/react/types/theme").Token<"white", string, "colors", string>;
        black: import("@stitches/react/types/theme").Token<"black", string, "colors", string>;
        primaryLight: import("@stitches/react/types/theme").Token<"primaryLight", string, "colors", string>;
        primaryLightHover: import("@stitches/react/types/theme").Token<"primaryLightHover", string, "colors", string>;
        primaryLightActive: import("@stitches/react/types/theme").Token<"primaryLightActive", string, "colors", string>;
        primaryLightContrast: import("@stitches/react/types/theme").Token<"primaryLightContrast", string, "colors", string>;
        primary: import("@stitches/react/types/theme").Token<"primary", string, "colors", string>;
        primaryBorder: import("@stitches/react/types/theme").Token<"primaryBorder", string, "colors", string>;
        primaryBorderHover: import("@stitches/react/types/theme").Token<"primaryBorderHover", string, "colors", string>;
        primarySolidHover: import("@stitches/react/types/theme").Token<"primarySolidHover", string, "colors", string>;
        primarySolidContrast: import("@stitches/react/types/theme").Token<"primarySolidContrast", string, "colors", string>;
        primaryShadow: import("@stitches/react/types/theme").Token<"primaryShadow", string, "colors", string>;
        secondaryLight: import("@stitches/react/types/theme").Token<"secondaryLight", string, "colors", string>;
        secondaryLightHover: import("@stitches/react/types/theme").Token<"secondaryLightHover", string, "colors", string>;
        secondaryLightActive: import("@stitches/react/types/theme").Token<"secondaryLightActive", string, "colors", string>;
        secondaryLightContrast: import("@stitches/react/types/theme").Token<"secondaryLightContrast", string, "colors", string>;
        secondary: import("@stitches/react/types/theme").Token<"secondary", string, "colors", string>;
        secondaryBorder: import("@stitches/react/types/theme").Token<"secondaryBorder", string, "colors", string>;
        secondaryBorderHover: import("@stitches/react/types/theme").Token<"secondaryBorderHover", string, "colors", string>;
        secondarySolidHover: import("@stitches/react/types/theme").Token<"secondarySolidHover", string, "colors", string>;
        secondarySolidContrast: import("@stitches/react/types/theme").Token<"secondarySolidContrast", string, "colors", string>;
        secondaryShadow: import("@stitches/react/types/theme").Token<"secondaryShadow", string, "colors", string>;
        successLight: import("@stitches/react/types/theme").Token<"successLight", string, "colors", string>;
        successLightHover: import("@stitches/react/types/theme").Token<"successLightHover", string, "colors", string>;
        successLightActive: import("@stitches/react/types/theme").Token<"successLightActive", string, "colors", string>;
        successLightContrast: import("@stitches/react/types/theme").Token<"successLightContrast", string, "colors", string>;
        success: import("@stitches/react/types/theme").Token<"success", string, "colors", string>;
        successBorder: import("@stitches/react/types/theme").Token<"successBorder", string, "colors", string>;
        successBorderHover: import("@stitches/react/types/theme").Token<"successBorderHover", string, "colors", string>;
        successSolidHover: import("@stitches/react/types/theme").Token<"successSolidHover", string, "colors", string>;
        successSolidContrast: import("@stitches/react/types/theme").Token<"successSolidContrast", string, "colors", string>;
        successShadow: import("@stitches/react/types/theme").Token<"successShadow", string, "colors", string>;
        warningLight: import("@stitches/react/types/theme").Token<"warningLight", string, "colors", string>;
        warningLightHover: import("@stitches/react/types/theme").Token<"warningLightHover", string, "colors", string>;
        warningLightActive: import("@stitches/react/types/theme").Token<"warningLightActive", string, "colors", string>;
        warningLightContrast: import("@stitches/react/types/theme").Token<"warningLightContrast", string, "colors", string>;
        warning: import("@stitches/react/types/theme").Token<"warning", string, "colors", string>;
        warningBorder: import("@stitches/react/types/theme").Token<"warningBorder", string, "colors", string>;
        warningBorderHover: import("@stitches/react/types/theme").Token<"warningBorderHover", string, "colors", string>;
        warningSolidHover: import("@stitches/react/types/theme").Token<"warningSolidHover", string, "colors", string>;
        warningSolidContrast: import("@stitches/react/types/theme").Token<"warningSolidContrast", string, "colors", string>;
        warningShadow: import("@stitches/react/types/theme").Token<"warningShadow", string, "colors", string>;
        errorLight: import("@stitches/react/types/theme").Token<"errorLight", string, "colors", string>;
        errorLightHover: import("@stitches/react/types/theme").Token<"errorLightHover", string, "colors", string>;
        errorLightActive: import("@stitches/react/types/theme").Token<"errorLightActive", string, "colors", string>;
        errorLightContrast: import("@stitches/react/types/theme").Token<"errorLightContrast", string, "colors", string>;
        error: import("@stitches/react/types/theme").Token<"error", string, "colors", string>;
        errorBorder: import("@stitches/react/types/theme").Token<"errorBorder", string, "colors", string>;
        errorBorderHover: import("@stitches/react/types/theme").Token<"errorBorderHover", string, "colors", string>;
        errorSolidHover: import("@stitches/react/types/theme").Token<"errorSolidHover", string, "colors", string>;
        errorSolidContrast: import("@stitches/react/types/theme").Token<"errorSolidContrast", string, "colors", string>;
        errorShadow: import("@stitches/react/types/theme").Token<"errorShadow", string, "colors", string>;
        neutralLight: import("@stitches/react/types/theme").Token<"neutralLight", string, "colors", string>;
        neutralLightHover: import("@stitches/react/types/theme").Token<"neutralLightHover", string, "colors", string>;
        neutralLightActive: import("@stitches/react/types/theme").Token<"neutralLightActive", string, "colors", string>;
        neutralLightContrast: import("@stitches/react/types/theme").Token<"neutralLightContrast", string, "colors", string>;
        neutral: import("@stitches/react/types/theme").Token<"neutral", string, "colors", string>;
        neutralBorder: import("@stitches/react/types/theme").Token<"neutralBorder", string, "colors", string>;
        neutralBorderHover: import("@stitches/react/types/theme").Token<"neutralBorderHover", string, "colors", string>;
        neutralSolidHover: import("@stitches/react/types/theme").Token<"neutralSolidHover", string, "colors", string>;
        neutralSolidContrast: import("@stitches/react/types/theme").Token<"neutralSolidContrast", string, "colors", string>;
        neutralShadow: import("@stitches/react/types/theme").Token<"neutralShadow", string, "colors", string>;
        gradient: import("@stitches/react/types/theme").Token<"gradient", string, "colors", string>;
        accents0: import("@stitches/react/types/theme").Token<"accents0", string, "colors", string>;
        accents1: import("@stitches/react/types/theme").Token<"accents1", string, "colors", string>;
        accents2: import("@stitches/react/types/theme").Token<"accents2", string, "colors", string>;
        accents3: import("@stitches/react/types/theme").Token<"accents3", string, "colors", string>;
        accents4: import("@stitches/react/types/theme").Token<"accents4", string, "colors", string>;
        accents5: import("@stitches/react/types/theme").Token<"accents5", string, "colors", string>;
        accents6: import("@stitches/react/types/theme").Token<"accents6", string, "colors", string>;
        accents7: import("@stitches/react/types/theme").Token<"accents7", string, "colors", string>;
        accents8: import("@stitches/react/types/theme").Token<"accents8", string, "colors", string>;
        accents9: import("@stitches/react/types/theme").Token<"accents9", string, "colors", string>;
    };
    fonts: {
        sans: import("@stitches/react/types/theme").Token<"sans", string, "fonts", string>;
        mono: import("@stitches/react/types/theme").Token<"mono", string, "fonts", string>;
    };
    fontSizes: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "fontSizes", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "fontSizes", string>;
        base: import("@stitches/react/types/theme").Token<"base", string, "fontSizes", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "fontSizes", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "fontSizes", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "fontSizes", string>;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "fontSizes", string>;
        "3xl": import("@stitches/react/types/theme").Token<"3xl", string, "fontSizes", string>;
        "4xl": import("@stitches/react/types/theme").Token<"4xl", string, "fontSizes", string>;
        "5xl": import("@stitches/react/types/theme").Token<"5xl", string, "fontSizes", string>;
        "6xl": import("@stitches/react/types/theme").Token<"6xl", string, "fontSizes", string>;
        "7xl": import("@stitches/react/types/theme").Token<"7xl", string, "fontSizes", string>;
        "8xl": import("@stitches/react/types/theme").Token<"8xl", string, "fontSizes", string>;
        "9xl": import("@stitches/react/types/theme").Token<"9xl", string, "fontSizes", string>;
    };
    fontWeights: {
        hairline: import("@stitches/react/types/theme").Token<"hairline", string, "fontWeights", string>;
        thin: import("@stitches/react/types/theme").Token<"thin", string, "fontWeights", string>;
        light: import("@stitches/react/types/theme").Token<"light", string, "fontWeights", string>;
        normal: import("@stitches/react/types/theme").Token<"normal", string, "fontWeights", string>;
        medium: import("@stitches/react/types/theme").Token<"medium", string, "fontWeights", string>;
        semibold: import("@stitches/react/types/theme").Token<"semibold", string, "fontWeights", string>;
        bold: import("@stitches/react/types/theme").Token<"bold", string, "fontWeights", string>;
        extrabold: import("@stitches/react/types/theme").Token<"extrabold", string, "fontWeights", string>;
        black: import("@stitches/react/types/theme").Token<"black", string, "fontWeights", string>;
    };
    lineHeights: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "lineHeights", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "lineHeights", string>;
        base: import("@stitches/react/types/theme").Token<"base", string, "lineHeights", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "lineHeights", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "lineHeights", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "lineHeights", string>;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "lineHeights", string>;
        "3xl": import("@stitches/react/types/theme").Token<"3xl", string, "lineHeights", string>;
        "4xl": import("@stitches/react/types/theme").Token<"4xl", string, "lineHeights", string>;
        "5xl": import("@stitches/react/types/theme").Token<"5xl", string, "lineHeights", string>;
        "6xl": import("@stitches/react/types/theme").Token<"6xl", string, "lineHeights", string>;
        "7xl": import("@stitches/react/types/theme").Token<"7xl", string, "lineHeights", string>;
        "8xl": import("@stitches/react/types/theme").Token<"8xl", string, "lineHeights", string>;
        "9xl": import("@stitches/react/types/theme").Token<"9xl", string, "lineHeights", string>;
    };
    letterSpacings: {
        tighter: import("@stitches/react/types/theme").Token<"tighter", string, "letterSpacings", string>;
        tight: import("@stitches/react/types/theme").Token<"tight", string, "letterSpacings", string>;
        normal: import("@stitches/react/types/theme").Token<"normal", string, "letterSpacings", string>;
        wide: import("@stitches/react/types/theme").Token<"wide", string, "letterSpacings", string>;
        wider: import("@stitches/react/types/theme").Token<"wider", string, "letterSpacings", string>;
        widest: import("@stitches/react/types/theme").Token<"widest", string, "letterSpacings", string>;
    };
    space: {
        0: import("@stitches/react/types/theme").Token<"0", string, "space", string>;
        xs: import("@stitches/react/types/theme").Token<"xs", string, "space", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "space", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "space", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "space", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "space", string>;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "space", string>;
        "3xl": import("@stitches/react/types/theme").Token<"3xl", string, "space", string>;
        "4xl": import("@stitches/react/types/theme").Token<"4xl", string, "space", string>;
        "5xl": import("@stitches/react/types/theme").Token<"5xl", string, "space", string>;
        "6xl": import("@stitches/react/types/theme").Token<"6xl", string, "space", string>;
        "7xl": import("@stitches/react/types/theme").Token<"7xl", string, "space", string>;
        "8xl": import("@stitches/react/types/theme").Token<"8xl", string, "space", string>;
        "9xl": import("@stitches/react/types/theme").Token<"9xl", string, "space", string>;
        min: import("@stitches/react/types/theme").Token<"min", string, "space", string>;
        max: import("@stitches/react/types/theme").Token<"max", string, "space", string>;
        fit: import("@stitches/react/types/theme").Token<"fit", string, "space", string>;
        screen: import("@stitches/react/types/theme").Token<"screen", string, "space", string>;
        full: import("@stitches/react/types/theme").Token<"full", string, "space", string>;
        px: import("@stitches/react/types/theme").Token<"px", string, "space", string>;
        1: import("@stitches/react/types/theme").Token<"1", string, "space", string>;
        2: import("@stitches/react/types/theme").Token<"2", string, "space", string>;
        3: import("@stitches/react/types/theme").Token<"3", string, "space", string>;
        4: import("@stitches/react/types/theme").Token<"4", string, "space", string>;
        5: import("@stitches/react/types/theme").Token<"5", string, "space", string>;
        6: import("@stitches/react/types/theme").Token<"6", string, "space", string>;
        7: import("@stitches/react/types/theme").Token<"7", string, "space", string>;
        8: import("@stitches/react/types/theme").Token<"8", string, "space", string>;
        9: import("@stitches/react/types/theme").Token<"9", string, "space", string>;
        10: import("@stitches/react/types/theme").Token<"10", string, "space", string>;
        11: import("@stitches/react/types/theme").Token<"11", string, "space", string>;
        12: import("@stitches/react/types/theme").Token<"12", string, "space", string>;
        13: import("@stitches/react/types/theme").Token<"13", string, "space", string>;
        14: import("@stitches/react/types/theme").Token<"14", string, "space", string>;
        15: import("@stitches/react/types/theme").Token<"15", string, "space", string>;
        16: import("@stitches/react/types/theme").Token<"16", string, "space", string>;
        17: import("@stitches/react/types/theme").Token<"17", string, "space", string>;
        18: import("@stitches/react/types/theme").Token<"18", string, "space", string>;
        20: import("@stitches/react/types/theme").Token<"20", string, "space", string>;
        24: import("@stitches/react/types/theme").Token<"24", string, "space", string>;
        28: import("@stitches/react/types/theme").Token<"28", string, "space", string>;
        32: import("@stitches/react/types/theme").Token<"32", string, "space", string>;
        36: import("@stitches/react/types/theme").Token<"36", string, "space", string>;
        40: import("@stitches/react/types/theme").Token<"40", string, "space", string>;
        44: import("@stitches/react/types/theme").Token<"44", string, "space", string>;
        48: import("@stitches/react/types/theme").Token<"48", string, "space", string>;
        52: import("@stitches/react/types/theme").Token<"52", string, "space", string>;
        56: import("@stitches/react/types/theme").Token<"56", string, "space", string>;
        60: import("@stitches/react/types/theme").Token<"60", string, "space", string>;
        64: import("@stitches/react/types/theme").Token<"64", string, "space", string>;
        72: import("@stitches/react/types/theme").Token<"72", string, "space", string>;
        80: import("@stitches/react/types/theme").Token<"80", string, "space", string>;
        96: import("@stitches/react/types/theme").Token<"96", string, "space", string>;
    };
    radii: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "radii", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "radii", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "radii", string>;
        base: import("@stitches/react/types/theme").Token<"base", string, "radii", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "radii", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "radii", string>;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "radii", string>;
        "3xl": import("@stitches/react/types/theme").Token<"3xl", string, "radii", string>;
        squared: import("@stitches/react/types/theme").Token<"squared", string, "radii", string>;
        rounded: import("@stitches/react/types/theme").Token<"rounded", string, "radii", string>;
        pill: import("@stitches/react/types/theme").Token<"pill", string, "radii", string>;
    };
    zIndices: {
        1: import("@stitches/react/types/theme").Token<"1", string, "zIndices", string>;
        2: import("@stitches/react/types/theme").Token<"2", string, "zIndices", string>;
        3: import("@stitches/react/types/theme").Token<"3", string, "zIndices", string>;
        4: import("@stitches/react/types/theme").Token<"4", string, "zIndices", string>;
        5: import("@stitches/react/types/theme").Token<"5", string, "zIndices", string>;
        10: import("@stitches/react/types/theme").Token<"10", string, "zIndices", string>;
        max: import("@stitches/react/types/theme").Token<"max", string, "zIndices", string>;
    };
    borderWeights: {
        light: import("@stitches/react/types/theme").Token<"light", string, "borderWeights", string>;
        normal: import("@stitches/react/types/theme").Token<"normal", string, "borderWeights", string>;
        bold: import("@stitches/react/types/theme").Token<"bold", string, "borderWeights", string>;
        extrabold: import("@stitches/react/types/theme").Token<"extrabold", string, "borderWeights", string>;
        black: import("@stitches/react/types/theme").Token<"black", string, "borderWeights", string>;
    };
    transitions: {
        default: import("@stitches/react/types/theme").Token<"default", string, "transitions", string>;
        button: import("@stitches/react/types/theme").Token<"button", string, "transitions", string>;
        avatar: import("@stitches/react/types/theme").Token<"avatar", string, "transitions", string>;
        card: import("@stitches/react/types/theme").Token<"card", string, "transitions", string>;
        dropdownItem: import("@stitches/react/types/theme").Token<"dropdownItem", string, "transitions", string>;
    };
    breakpoints: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "breakpoints", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "breakpoints", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "breakpoints", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "breakpoints", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "breakpoints", string>;
    };
};
export declare const config: {
    prefix: string;
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xsMin: string;
        smMin: string;
        mdMin: string;
        lgMin: string;
        xlMin: string;
        xsMax: string;
        smMax: string;
        mdMax: string;
        lgMax: string;
        xlMax: string;
        motion: string;
        safari: string;
        hover: string;
        dark: string;
        light: string;
    };
    theme: {
        shadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        dropShadows: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        colors: {
            textLight: string;
            text: string;
            linkLight: string;
            link: string;
            codeLight: string;
            code: string;
            selection: string;
            border: string;
            gray50: string;
            gray100: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            gray900: string;
            pink50: string;
            pink100: string;
            pink200: string;
            pink300: string;
            pink400: string;
            pink500: string;
            pink600: string;
            pink700: string;
            pink800: string;
            pink900: string;
            cyan50: string;
            cyan100: string;
            cyan200: string;
            cyan300: string;
            cyan400: string;
            cyan500: string;
            cyan600: string;
            cyan700: string;
            cyan800: string;
            cyan900: string;
            red50: string;
            red100: string;
            red200: string;
            red300: string;
            red400: string;
            red500: string;
            red600: string;
            red700: string;
            red800: string;
            red900: string;
            yellow50: string;
            yellow100: string;
            yellow200: string;
            yellow300: string;
            yellow400: string;
            yellow500: string;
            yellow600: string;
            yellow700: string;
            yellow800: string;
            yellow900: string;
            green50: string;
            green100: string;
            green200: string;
            green300: string;
            green400: string;
            green500: string;
            green600: string;
            green700: string;
            green800: string;
            green900: string;
            purple50: string;
            purple100: string;
            purple200: string;
            purple300: string;
            purple400: string;
            purple500: string;
            purple600: string;
            purple700: string;
            purple800: string;
            purple900: string;
            blue50: string;
            blue100: string;
            blue200: string;
            blue300: string;
            blue400: string;
            blue500: string;
            blue600: string;
            blue700: string;
            blue800: string;
            blue900: string;
            background: string;
            backgroundAlpha: string;
            foreground: string;
            backgroundContrast: string;
            white: string;
            black: string;
            primaryLight: string;
            primaryLightHover: string;
            primaryLightActive: string;
            primaryLightContrast: string;
            primary: string;
            primaryBorder: string;
            primaryBorderHover: string;
            primarySolidHover: string;
            primarySolidContrast: string;
            primaryShadow: string;
            secondaryLight: string;
            secondaryLightHover: string;
            secondaryLightActive: string;
            secondaryLightContrast: string;
            secondary: string;
            secondaryBorder: string;
            secondaryBorderHover: string;
            secondarySolidHover: string;
            secondarySolidContrast: string;
            secondaryShadow: string;
            successLight: string;
            successLightHover: string;
            successLightActive: string;
            successLightContrast: string;
            success: string;
            successBorder: string;
            successBorderHover: string;
            successSolidHover: string;
            successSolidContrast: string;
            successShadow: string;
            warningLight: string;
            warningLightHover: string;
            warningLightActive: string;
            warningLightContrast: string;
            warning: string;
            warningBorder: string;
            warningBorderHover: string;
            warningSolidHover: string;
            warningSolidContrast: string;
            warningShadow: string;
            errorLight: string;
            errorLightHover: string;
            errorLightActive: string;
            errorLightContrast: string;
            error: string;
            errorBorder: string;
            errorBorderHover: string;
            errorSolidHover: string;
            errorSolidContrast: string;
            errorShadow: string;
            neutralLight: string;
            neutralLightHover: string;
            neutralLightActive: string;
            neutralLightContrast: string;
            neutral: string;
            neutralBorder: string;
            neutralBorderHover: string;
            neutralSolidHover: string;
            neutralSolidContrast: string;
            neutralShadow: string;
            gradient: string;
            accents0: string;
            accents1: string;
            accents2: string;
            accents3: string;
            accents4: string;
            accents5: string;
            accents6: string;
            accents7: string;
            accents8: string;
            accents9: string;
        };
        fonts: {
            sans: string;
            mono: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
            "9xl": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
            black: number;
        };
        lineHeights: {
            xs: number;
            sm: number;
            base: number;
            md: number;
            lg: number;
            xl: number;
            "2xl": number;
            "3xl": number;
            "4xl": number;
            "5xl": number;
            "6xl": number;
            "7xl": number;
            "8xl": number;
            "9xl": number;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        space: {
            0: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
            "9xl": string;
            min: string;
            max: string;
            fit: string;
            screen: string;
            full: string;
            px: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
            13: string;
            14: string;
            15: string;
            16: string;
            17: string;
            18: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        radii: {
            xs: string;
            sm: string;
            md: string;
            base: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            squared: string;
            rounded: string;
            pill: string;
        };
        zIndices: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            10: string;
            max: string;
        };
        borderWeights: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
        };
        transitions: {
            default: string;
            button: string;
            avatar: string;
            card: string;
            dropdownItem: string;
        };
        breakpoints: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    themeMap: {
        width: string;
        height: string;
        minWidth: string;
        maxWidth: string;
        minHeight: string;
        maxHeight: string;
        flexBasis: string;
        gridTemplateColumns: string;
        gridTemplateRows: string;
        blockSize: string;
        minBlockSize: string;
        maxBlockSize: string;
        inlineSize: string;
        minInlineSize: string;
        maxInlineSize: string;
        borderWidth: string;
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
    utils: {
        p: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        }) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        }) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        py: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        m: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        }) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        }) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        my: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        ta: (value: {
            readonly [Stitches.$$PropertyValue]: "textAlign";
        }) => {
            textAlign: {
                readonly [Stitches.$$PropertyValue]: "textAlign";
            };
        };
        tt: (value: {
            readonly [Stitches.$$PropertyValue]: "textTransform";
        }) => {
            textTransform: {
                readonly [Stitches.$$PropertyValue]: "textTransform";
            };
        };
        to: (value: {
            readonly [Stitches.$$PropertyValue]: "textOverflow";
        }) => {
            textOverflow: {
                readonly [Stitches.$$PropertyValue]: "textOverflow";
            };
        };
        d: (value: {
            readonly [Stitches.$$PropertyValue]: "display";
        }) => {
            display: {
                readonly [Stitches.$$PropertyValue]: "display";
            };
        };
        dflex: (value: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        }) => {
            display: string;
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        fd: (value: {
            readonly [Stitches.$$PropertyValue]: "flexDirection";
        }) => {
            flexDirection: {
                readonly [Stitches.$$PropertyValue]: "flexDirection";
            };
        };
        fw: (value: {
            readonly [Stitches.$$PropertyValue]: "flexWrap";
        }) => {
            flexWrap: {
                readonly [Stitches.$$PropertyValue]: "flexWrap";
            };
        };
        ai: (value: {
            readonly [Stitches.$$PropertyValue]: "alignItems";
        }) => {
            alignItems: {
                readonly [Stitches.$$PropertyValue]: "alignItems";
            };
        };
        ac: (value: {
            readonly [Stitches.$$PropertyValue]: "alignContent";
        }) => {
            alignContent: {
                readonly [Stitches.$$PropertyValue]: "alignContent";
            };
        };
        jc: (value: {
            readonly [Stitches.$$PropertyValue]: "justifyContent";
        }) => {
            justifyContent: {
                readonly [Stitches.$$PropertyValue]: "justifyContent";
            };
        };
        as: (value: {
            readonly [Stitches.$$PropertyValue]: "alignSelf";
        }) => {
            alignSelf: {
                readonly [Stitches.$$PropertyValue]: "alignSelf";
            };
        };
        fg: (value: {
            readonly [Stitches.$$PropertyValue]: "flexGrow";
        }) => {
            flexGrow: {
                readonly [Stitches.$$PropertyValue]: "flexGrow";
            };
        };
        fs: (value: {
            readonly [Stitches.$$PropertyValue]: "fontSize";
        }) => {
            fontSize: {
                readonly [Stitches.$$PropertyValue]: "fontSize";
            };
        };
        fb: (value: {
            readonly [Stitches.$$PropertyValue]: "flexBasis";
        }) => {
            flexBasis: {
                readonly [Stitches.$$PropertyValue]: "flexBasis";
            };
        };
        bc: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bf: (value: {
            readonly [Stitches.$$PropertyValue]: "backdropFilter";
        }) => {
            backdropFilter: {
                readonly [Stitches.$$PropertyValue]: "backdropFilter";
            };
        };
        bg: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bgBlur: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            bf: string;
            bg: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        bgColor: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "backgroundColor";
            };
        };
        backgroundClip: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        bgClip: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundClip";
        }) => {
            WebkitBackgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
            backgroundClip: {
                readonly [Stitches.$$PropertyValue]: "backgroundClip";
            };
        };
        br: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        bw: (value: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        }) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        btrr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
        }) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopRightRadius";
            };
        };
        bbrr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
        }) => {
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomRightRadius";
            };
        };
        bblr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
        }) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderBottomLeftRadius";
            };
        };
        btlr: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderTopLeftRadius";
            };
        };
        bs: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        ds: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            dropShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        shadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        dshadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            dropShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        dropShadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            filter: string;
        };
        normalShadow: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            boxShadow: string;
        };
        normalShadowVar: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundColor";
        }) => {
            boxShadow: string;
        };
        lh: (value: {
            readonly [Stitches.$$PropertyValue]: "lineHeight";
        }) => {
            lineHeight: {
                readonly [Stitches.$$PropertyValue]: "lineHeight";
            };
        };
        ov: (value: {
            readonly [Stitches.$$PropertyValue]: "overflow";
        }) => {
            overflow: {
                readonly [Stitches.$$PropertyValue]: "overflow";
            };
        };
        ox: (value: {
            readonly [Stitches.$$PropertyValue]: "overflowX";
        }) => {
            overflowX: {
                readonly [Stitches.$$PropertyValue]: "overflowX";
            };
        };
        oy: (value: {
            readonly [Stitches.$$PropertyValue]: "overflowY";
        }) => {
            overflowY: {
                readonly [Stitches.$$PropertyValue]: "overflowY";
            };
        };
        pe: (value: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        events: (value: {
            readonly [Stitches.$$PropertyValue]: "pointerEvents";
        }) => {
            pointerEvents: {
                readonly [Stitches.$$PropertyValue]: "pointerEvents";
            };
        };
        us: (value: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        userSelect: (value: {
            readonly [Stitches.$$PropertyValue]: "userSelect";
        }) => {
            WebkitUserSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
            userSelect: {
                readonly [Stitches.$$PropertyValue]: "userSelect";
            };
        };
        w: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        h: (value: {
            readonly [Stitches.$$PropertyValue]: "height";
        }) => {
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
        };
        mw: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        maxW: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        mh: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        maxH: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        size: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        minSize: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        sizeMin: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        maxSize: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        sizeMax: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        appearance: (value: {
            readonly [Stitches.$$PropertyValue]: "appearance";
        }) => {
            WebkitAppearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
            appearance: {
                readonly [Stitches.$$PropertyValue]: "appearance";
            };
        };
        scale: (value: {
            readonly [Stitches.$$PropertyValue]: "scale";
        }) => {
            transform: string;
        };
        linearGradient: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundImage";
        }) => {
            backgroundImage: string;
        };
        tdl: (value: {
            readonly [Stitches.$$PropertyValue]: "textDecorationLine";
        }) => {
            textDecorationLine: {
                readonly [Stitches.$$PropertyValue]: "textDecorationLine";
            };
        };
        truncateText: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            maxWidth: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            whiteSpace: string;
            overflow: string;
            textOverflow: string;
        };
        textGradient: (value: {
            readonly [Stitches.$$PropertyValue]: "backgroundImage";
        }) => {
            backgroundImage: string;
            WebkitBackgroundClip: string;
            WebkitTextFillColor: string;
            "&::selection": {
                WebkitTextFillColor: string;
            };
        };
    };
};
export declare const createTheme: ({ type, theme, className }: Theme) => string & {
    className: string;
    selector: string;
} & import("@stitches/react/types/stitches").ThemeTokens<any, string>;
export declare type StitchesConfig = typeof config;
export declare type VariantProps<T> = Stitches.VariantProps<T>;
export declare type PropertyValue<T extends keyof Stitches.CSSProperties> = Stitches.PropertyValue<T>;
export declare type ScaleValue<T> = Stitches.ScaleValue<T>;
export declare type CSSProperties = Stitches.CSSProperties;
export declare type CSS = Stitches.CSS<StitchesConfig>;
export declare type StitchesTheme = typeof theme;
export declare type Spaces = StitchesConfig["theme"]["space"];
export declare type FontSizes = StitchesConfig["theme"]["fontSizes"];
export declare type Fonts = StitchesConfig["theme"]["fonts"];
export declare type FontWeights = StitchesConfig["theme"]["fontWeights"];
export declare type LineHeights = StitchesConfig["theme"]["lineHeights"];
export declare type LetterSpacings = StitchesConfig["theme"]["letterSpacings"];
export declare type Colors = StitchesConfig["theme"]["colors"];
export declare type Radii = StitchesConfig["theme"]["radii"];
export declare type zIndices = StitchesConfig["theme"]["zIndices"];
export declare type BorderWeights = StitchesConfig["theme"]["borderWeights"];
export declare type Tranistions = StitchesConfig["theme"]["transitions"];
export declare type Breakpoints = StitchesConfig["theme"]["breakpoints"];
