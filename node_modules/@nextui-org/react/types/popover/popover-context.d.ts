/// <reference types="react" />
export declare const PopoverProvider: import("react").Provider<{
    state: import("@react-stately/overlays").OverlayTriggerState;
    exited: boolean;
    overlayRef: import("react").RefObject<HTMLElement>;
    triggerRef: import("react").RefObject<HTMLElement>;
    placement: import("./utils").PopoverPlacement;
    disableShadow: boolean | "true" | ({
        "@xs"?: boolean | "true" | undefined;
        "@sm"?: boolean | "true" | undefined;
        "@md"?: boolean | "true" | undefined;
        "@lg"?: boolean | "true" | undefined;
        "@xl"?: boolean | "true" | undefined;
        "@dark"?: boolean | "true" | undefined;
        "@light"?: boolean | "true" | undefined;
        "@hover"?: boolean | "true" | undefined;
        "@motion"?: boolean | "true" | undefined;
        "@xsMin"?: boolean | "true" | undefined;
        "@smMin"?: boolean | "true" | undefined;
        "@mdMin"?: boolean | "true" | undefined;
        "@lgMin"?: boolean | "true" | undefined;
        "@xlMin"?: boolean | "true" | undefined;
        "@xsMax"?: boolean | "true" | undefined;
        "@smMax"?: boolean | "true" | undefined;
        "@mdMax"?: boolean | "true" | undefined;
        "@lgMax"?: boolean | "true" | undefined;
        "@xlMax"?: boolean | "true" | undefined;
        "@safari"?: boolean | "true" | undefined;
        "@initial"?: boolean | "true" | undefined;
    } & {
        [x: string]: boolean | "true" | undefined;
    }) | undefined;
    disableAnimation: boolean;
    shouldCloseOnBlur: boolean;
    isDismissable: boolean;
    isBordered: boolean | "true" | ({
        "@xs"?: boolean | "true" | undefined;
        "@sm"?: boolean | "true" | undefined;
        "@md"?: boolean | "true" | undefined;
        "@lg"?: boolean | "true" | undefined;
        "@xl"?: boolean | "true" | undefined;
        "@dark"?: boolean | "true" | undefined;
        "@light"?: boolean | "true" | undefined;
        "@hover"?: boolean | "true" | undefined;
        "@motion"?: boolean | "true" | undefined;
        "@xsMin"?: boolean | "true" | undefined;
        "@smMin"?: boolean | "true" | undefined;
        "@mdMin"?: boolean | "true" | undefined;
        "@lgMin"?: boolean | "true" | undefined;
        "@xlMin"?: boolean | "true" | undefined;
        "@xsMax"?: boolean | "true" | undefined;
        "@smMax"?: boolean | "true" | undefined;
        "@mdMax"?: boolean | "true" | undefined;
        "@lgMax"?: boolean | "true" | undefined;
        "@xlMax"?: boolean | "true" | undefined;
        "@safari"?: boolean | "true" | undefined;
        "@initial"?: boolean | "true" | undefined;
    } & {
        [x: string]: boolean | "true" | undefined;
    }) | undefined;
    borderWeight: "light" | "normal" | "bold" | "extrabold" | "black" | ({
        "@xs"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@sm"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@md"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lg"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xl"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@dark"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@light"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@hover"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@motion"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xsMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@smMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@mdMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lgMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xlMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xsMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@smMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@mdMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lgMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xlMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@safari"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@initial"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    } & {
        [x: string]: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    }) | undefined;
    isKeyboardDismissDisabled: boolean;
    shouldCloseOnInteractOutside: ((element: HTMLElement) => boolean) | undefined;
    isOpen: boolean;
    onClose: () => void;
    onExited: () => void;
    onEntered: () => void;
    triggerProps: import("@react-types/button").AriaButtonProps<"button">;
    overlayProps: import("@react-types/shared/src/dom").DOMAttributes<import("@react-types/shared/src/dom").FocusableElement>;
    positionProps: import("@react-types/shared/src/dom").DOMAttributes<import("@react-types/shared/src/dom").FocusableElement>;
    getTriggerProps: (props?: any, _ref?: any) => any;
    getPopoverProps: (props?: any, css?: any) => any;
    isPositioned: boolean;
}>, usePopoverContext: () => {
    state: import("@react-stately/overlays").OverlayTriggerState;
    exited: boolean;
    overlayRef: import("react").RefObject<HTMLElement>;
    triggerRef: import("react").RefObject<HTMLElement>;
    placement: import("./utils").PopoverPlacement;
    disableShadow: boolean | "true" | ({
        "@xs"?: boolean | "true" | undefined;
        "@sm"?: boolean | "true" | undefined;
        "@md"?: boolean | "true" | undefined;
        "@lg"?: boolean | "true" | undefined;
        "@xl"?: boolean | "true" | undefined;
        "@dark"?: boolean | "true" | undefined;
        "@light"?: boolean | "true" | undefined;
        "@hover"?: boolean | "true" | undefined;
        "@motion"?: boolean | "true" | undefined;
        "@xsMin"?: boolean | "true" | undefined;
        "@smMin"?: boolean | "true" | undefined;
        "@mdMin"?: boolean | "true" | undefined;
        "@lgMin"?: boolean | "true" | undefined;
        "@xlMin"?: boolean | "true" | undefined;
        "@xsMax"?: boolean | "true" | undefined;
        "@smMax"?: boolean | "true" | undefined;
        "@mdMax"?: boolean | "true" | undefined;
        "@lgMax"?: boolean | "true" | undefined;
        "@xlMax"?: boolean | "true" | undefined;
        "@safari"?: boolean | "true" | undefined;
        "@initial"?: boolean | "true" | undefined;
    } & {
        [x: string]: boolean | "true" | undefined;
    }) | undefined;
    disableAnimation: boolean;
    shouldCloseOnBlur: boolean;
    isDismissable: boolean;
    isBordered: boolean | "true" | ({
        "@xs"?: boolean | "true" | undefined;
        "@sm"?: boolean | "true" | undefined;
        "@md"?: boolean | "true" | undefined;
        "@lg"?: boolean | "true" | undefined;
        "@xl"?: boolean | "true" | undefined;
        "@dark"?: boolean | "true" | undefined;
        "@light"?: boolean | "true" | undefined;
        "@hover"?: boolean | "true" | undefined;
        "@motion"?: boolean | "true" | undefined;
        "@xsMin"?: boolean | "true" | undefined;
        "@smMin"?: boolean | "true" | undefined;
        "@mdMin"?: boolean | "true" | undefined;
        "@lgMin"?: boolean | "true" | undefined;
        "@xlMin"?: boolean | "true" | undefined;
        "@xsMax"?: boolean | "true" | undefined;
        "@smMax"?: boolean | "true" | undefined;
        "@mdMax"?: boolean | "true" | undefined;
        "@lgMax"?: boolean | "true" | undefined;
        "@xlMax"?: boolean | "true" | undefined;
        "@safari"?: boolean | "true" | undefined;
        "@initial"?: boolean | "true" | undefined;
    } & {
        [x: string]: boolean | "true" | undefined;
    }) | undefined;
    borderWeight: "light" | "normal" | "bold" | "extrabold" | "black" | ({
        "@xs"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@sm"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@md"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lg"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xl"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@dark"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@light"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@hover"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@motion"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xsMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@smMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@mdMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lgMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xlMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xsMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@smMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@mdMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lgMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xlMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@safari"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@initial"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    } & {
        [x: string]: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    }) | undefined;
    isKeyboardDismissDisabled: boolean;
    shouldCloseOnInteractOutside: ((element: HTMLElement) => boolean) | undefined;
    isOpen: boolean;
    onClose: () => void;
    onExited: () => void;
    onEntered: () => void;
    triggerProps: import("@react-types/button").AriaButtonProps<"button">;
    overlayProps: import("@react-types/shared/src/dom").DOMAttributes<import("@react-types/shared/src/dom").FocusableElement>;
    positionProps: import("@react-types/shared/src/dom").DOMAttributes<import("@react-types/shared/src/dom").FocusableElement>;
    getTriggerProps: (props?: any, _ref?: any) => any;
    getPopoverProps: (props?: any, css?: any) => any;
    isPositioned: boolean;
};
