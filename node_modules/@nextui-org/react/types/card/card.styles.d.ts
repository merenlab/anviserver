import { VariantProps } from "../theme/stitches.config";
export declare const StyledCardBody: import("@stitches/react/types/styled-component").StyledComponent<"div", {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>;
export declare const StyledCard: import("@stitches/react/types/styled-component").StyledComponent<"div", import("@stitches/react/types/styled-component").StyledComponentProps<[{
    [x: string]: string | number | ({
        isPressed: true;
        disableAnimation: false;
        css: {
            transform: string;
            dropShadow?: undefined;
            "@safari"?: undefined;
            "@-moz-document url-prefix()"?: undefined;
        };
        isHovered?: undefined;
        variant?: undefined;
    } | {
        isHovered: true;
        disableAnimation: false;
        css: {
            transform: string;
            dropShadow?: undefined;
            "@safari"?: undefined;
            "@-moz-document url-prefix()"?: undefined;
        };
        isPressed?: undefined;
        variant?: undefined;
    } | {
        isHovered: true;
        variant: string;
        css: {
            dropShadow: string;
            "@safari": {
                boxShadow: string;
                dropShadow: string;
            };
            "@-moz-document url-prefix()": {
                boxShadow: string;
                dropShadow: string;
            };
            transform?: undefined;
        };
        isPressed?: undefined;
        disableAnimation?: undefined;
    })[] | {
        transition: string;
        width?: undefined;
        zIndex?: undefined;
        ".nextui-drip-filler"?: undefined;
        variant?: undefined;
        borderWeight?: undefined;
        disableAnimation?: undefined;
        isPressable?: undefined;
        isPressed?: undefined;
        isHovered?: undefined;
    } | {
        width: string;
        transition?: undefined;
        zIndex?: undefined;
        ".nextui-drip-filler"?: undefined;
        variant?: undefined;
        borderWeight?: undefined;
        disableAnimation?: undefined;
        isPressable?: undefined;
        isPressed?: undefined;
        isHovered?: undefined;
    } | {
        zIndex: string;
        ".nextui-drip-filler": {
            opacity: number;
            fill: string;
        };
        transition?: undefined;
        width?: undefined;
        variant?: undefined;
        borderWeight?: undefined;
        disableAnimation?: undefined;
        isPressable?: undefined;
        isPressed?: undefined;
        isHovered?: undefined;
    } | {
        variant: {
            flat: {
                bg: string;
            };
            shadow: {
                dropShadow: string;
                "@safari": {
                    boxShadow: string;
                    dropShadow: string;
                };
                "@-moz-document url-prefix()": {
                    boxShadow: string;
                    dropShadow: string;
                };
            };
            bordered: {
                borderStyle: string;
                borderColor: string;
            };
        };
        borderWeight: {
            light: {
                bw: string;
            };
            normal: {
                bw: string;
            };
            bold: {
                bw: string;
            };
            extrabold: {
                bw: string;
            };
            black: {
                bw: string;
            };
        };
        disableAnimation: {
            true: {
                transition: string;
            };
            false: {
                transition: string;
            };
        };
        isPressable: {
            true: {
                cursor: string;
                us: string;
                WebkitTapHighlightColor: string;
            };
        };
        isPressed: {
            true: {};
        };
        isHovered: {
            true: {
                dropShadow: string;
                "@safari": {
                    boxShadow: string;
                    dropShadow: string;
                };
                "@-moz-document url-prefix()": {
                    boxShadow: string;
                    dropShadow: string;
                };
            };
        };
        transition?: undefined;
        width?: undefined;
        zIndex?: undefined;
        ".nextui-drip-filler"?: undefined;
    };
    $$cardColor: string;
    $$cardTextColor: string;
    m: number;
    p: number;
    br: string;
    bg: string;
    color: string;
    position: string;
    display: string;
    overflow: string;
    fd: string;
    width: string;
    height: string;
    boxSizing: string;
    "@motion": {
        transition: string;
    };
    ".nextui-image": {
        width: string;
    };
    variants: {
        variant: {
            flat: {
                bg: string;
            };
            shadow: {
                dropShadow: string;
                "@safari": {
                    boxShadow: string;
                    dropShadow: string;
                };
                "@-moz-document url-prefix()": {
                    boxShadow: string;
                    dropShadow: string;
                };
            };
            bordered: {
                borderStyle: string;
                borderColor: string;
            };
        };
        borderWeight: {
            light: {
                bw: string;
            };
            normal: {
                bw: string;
            };
            bold: {
                bw: string;
            };
            extrabold: {
                bw: string;
            };
            black: {
                bw: string;
            };
        };
        disableAnimation: {
            true: {
                transition: string;
            };
            false: {
                transition: string;
            };
        };
        isPressable: {
            true: {
                cursor: string;
                us: string;
                WebkitTapHighlightColor: string;
            };
        };
        isPressed: {
            true: {};
        };
        isHovered: {
            true: {
                dropShadow: string;
                "@safari": {
                    boxShadow: string;
                    dropShadow: string;
                };
                "@-moz-document url-prefix()": {
                    boxShadow: string;
                    dropShadow: string;
                };
            };
        };
    };
    compoundVariants: ({
        isPressed: true;
        disableAnimation: false;
        css: {
            transform: string;
            dropShadow?: undefined;
            "@safari"?: undefined;
            "@-moz-document url-prefix()"?: undefined;
        };
        isHovered?: undefined;
        variant?: undefined;
    } | {
        isHovered: true;
        disableAnimation: false;
        css: {
            transform: string;
            dropShadow?: undefined;
            "@safari"?: undefined;
            "@-moz-document url-prefix()"?: undefined;
        };
        isPressed?: undefined;
        variant?: undefined;
    } | {
        isHovered: true;
        variant: string;
        css: {
            dropShadow: string;
            "@safari": {
                boxShadow: string;
                dropShadow: string;
            };
            "@-moz-document url-prefix()": {
                boxShadow: string;
                dropShadow: string;
            };
            transform?: undefined;
        };
        isPressed?: undefined;
        disableAnimation?: undefined;
    })[];
}, import("@stitches/react/types/styled-component").CssComponent<never, {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>, import("@stitches/react/types/styled-component").CssComponent<never, {
    isFocusVisible?: boolean | "true" | "false" | undefined;
}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>]>, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>;
export declare const StyledCardHeader: import("@stitches/react/types/styled-component").StyledComponent<"div", {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>;
export declare const StyledCardFooter: import("@stitches/react/types/styled-component").StyledComponent<"div", {
    isBlurred?: boolean | "true" | undefined;
}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    dropShadows: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    colors: {
        textLight: string;
        text: string;
        linkLight: string;
        link: string;
        codeLight: string;
        code: string;
        selection: string;
        border: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        pink50: string;
        pink100: string;
        pink200: string;
        pink300: string;
        pink400: string;
        pink500: string;
        pink600: string;
        pink700: string;
        pink800: string;
        pink900: string;
        cyan50: string;
        cyan100: string;
        cyan200: string;
        cyan300: string;
        cyan400: string;
        cyan500: string;
        cyan600: string;
        cyan700: string;
        cyan800: string;
        cyan900: string;
        red50: string;
        red100: string;
        red200: string;
        red300: string;
        red400: string;
        red500: string;
        red600: string;
        red700: string;
        red800: string;
        red900: string;
        yellow50: string;
        yellow100: string;
        yellow200: string;
        yellow300: string;
        yellow400: string;
        yellow500: string;
        yellow600: string;
        yellow700: string;
        yellow800: string;
        yellow900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
        purple50: string;
        purple100: string;
        purple200: string;
        purple300: string;
        purple400: string;
        purple500: string;
        purple600: string;
        purple700: string;
        purple800: string;
        purple900: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        background: string;
        backgroundAlpha: string;
        foreground: string;
        backgroundContrast: string;
        white: string;
        black: string;
        primaryLight: string;
        primaryLightHover: string;
        primaryLightActive: string;
        primaryLightContrast: string;
        primary: string;
        primaryBorder: string;
        primaryBorderHover: string;
        primarySolidHover: string;
        primarySolidContrast: string;
        primaryShadow: string;
        secondaryLight: string;
        secondaryLightHover: string;
        secondaryLightActive: string;
        secondaryLightContrast: string;
        secondary: string;
        secondaryBorder: string;
        secondaryBorderHover: string;
        secondarySolidHover: string;
        secondarySolidContrast: string;
        secondaryShadow: string;
        successLight: string;
        successLightHover: string;
        successLightActive: string;
        successLightContrast: string;
        success: string;
        successBorder: string;
        successBorderHover: string;
        successSolidHover: string;
        successSolidContrast: string;
        successShadow: string;
        warningLight: string;
        warningLightHover: string;
        warningLightActive: string;
        warningLightContrast: string;
        warning: string;
        warningBorder: string;
        warningBorderHover: string;
        warningSolidHover: string;
        warningSolidContrast: string;
        warningShadow: string;
        errorLight: string;
        errorLightHover: string;
        errorLightActive: string;
        errorLightContrast: string;
        error: string;
        errorBorder: string;
        errorBorderHover: string;
        errorSolidHover: string;
        errorSolidContrast: string;
        errorShadow: string;
        neutralLight: string;
        neutralLightHover: string;
        neutralLightActive: string;
        neutralLightContrast: string;
        neutral: string;
        neutralBorder: string;
        neutralBorderHover: string;
        neutralSolidHover: string;
        neutralSolidContrast: string;
        neutralShadow: string;
        gradient: string;
        accents0: string;
        accents1: string;
        accents2: string;
        accents3: string;
        accents4: string;
        accents5: string;
        accents6: string;
        accents7: string;
        accents8: string;
        accents9: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        xs: number;
        sm: number;
        base: number;
        md: number;
        lg: number;
        xl: number;
        "2xl": number;
        "3xl": number;
        "4xl": number;
        "5xl": number;
        "6xl": number;
        "7xl": number;
        "8xl": number;
        "9xl": number;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        0: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        "9xl": string;
        min: string;
        max: string;
        fit: string;
        screen: string;
        full: string;
        px: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        xs: string;
        sm: string;
        md: string;
        base: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        squared: string;
        rounded: string;
        pill: string;
    };
    zIndices: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        10: string;
        max: string;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
        button: string;
        avatar: string;
        card: string;
        dropdownItem: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    width: string;
    height: string;
    minWidth: string;
    maxWidth: string;
    minHeight: string;
    maxHeight: string;
    flexBasis: string;
    gridTemplateColumns: string;
    gridTemplateRows: string;
    blockSize: string;
    minBlockSize: string;
    maxBlockSize: string;
    inlineSize: string;
    minInlineSize: string;
    maxInlineSize: string;
    borderWidth: string;
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
        marginRight: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    ta: (value: {
        readonly [$$PropertyValue]: "textAlign";
    }) => {
        textAlign: {
            readonly [$$PropertyValue]: "textAlign";
        };
    };
    tt: (value: {
        readonly [$$PropertyValue]: "textTransform";
    }) => {
        textTransform: {
            readonly [$$PropertyValue]: "textTransform";
        };
    };
    to: (value: {
        readonly [$$PropertyValue]: "textOverflow";
    }) => {
        textOverflow: {
            readonly [$$PropertyValue]: "textOverflow";
        };
    };
    d: (value: {
        readonly [$$PropertyValue]: "display";
    }) => {
        display: {
            readonly [$$PropertyValue]: "display";
        };
    };
    dflex: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        display: string;
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
        justifyContent: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    fd: (value: {
        readonly [$$PropertyValue]: "flexDirection";
    }) => {
        flexDirection: {
            readonly [$$PropertyValue]: "flexDirection";
        };
    };
    fw: (value: {
        readonly [$$PropertyValue]: "flexWrap";
    }) => {
        flexWrap: {
            readonly [$$PropertyValue]: "flexWrap";
        };
    };
    ai: (value: {
        readonly [$$PropertyValue]: "alignItems";
    }) => {
        alignItems: {
            readonly [$$PropertyValue]: "alignItems";
        };
    };
    ac: (value: {
        readonly [$$PropertyValue]: "alignContent";
    }) => {
        alignContent: {
            readonly [$$PropertyValue]: "alignContent";
        };
    };
    jc: (value: {
        readonly [$$PropertyValue]: "justifyContent";
    }) => {
        justifyContent: {
            readonly [$$PropertyValue]: "justifyContent";
        };
    };
    as: (value: {
        readonly [$$PropertyValue]: "alignSelf";
    }) => {
        alignSelf: {
            readonly [$$PropertyValue]: "alignSelf";
        };
    };
    fg: (value: {
        readonly [$$PropertyValue]: "flexGrow";
    }) => {
        flexGrow: {
            readonly [$$PropertyValue]: "flexGrow";
        };
    };
    fs: (value: {
        readonly [$$PropertyValue]: "fontSize";
    }) => {
        fontSize: {
            readonly [$$PropertyValue]: "fontSize";
        };
    };
    fb: (value: {
        readonly [$$PropertyValue]: "flexBasis";
    }) => {
        flexBasis: {
            readonly [$$PropertyValue]: "flexBasis";
        };
    };
    bc: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bf: (value: {
        readonly [$$PropertyValue]: "backdropFilter";
    }) => {
        backdropFilter: {
            readonly [$$PropertyValue]: "backdropFilter";
        };
    };
    bg: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        background: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgBlur: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        bf: string;
        bg: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "backgroundColor";
        };
    };
    backgroundClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    bgClip: (value: {
        readonly [$$PropertyValue]: "backgroundClip";
    }) => {
        WebkitBackgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
        backgroundClip: {
            readonly [$$PropertyValue]: "backgroundClip";
        };
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    bw: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    btrr: (value: {
        readonly [$$PropertyValue]: "borderTopRightRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderTopRightRadius";
        };
    };
    bbrr: (value: {
        readonly [$$PropertyValue]: "borderBottomRightRadius";
    }) => {
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderBottomRightRadius";
        };
    };
    bblr: (value: {
        readonly [$$PropertyValue]: "borderBottomLeftRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderBottomLeftRadius";
        };
    };
    btlr: (value: {
        readonly [$$PropertyValue]: "borderTopLeftRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderTopLeftRadius";
        };
    };
    bs: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    ds: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dshadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        dropShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    dropShadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        filter: string;
    };
    normalShadow: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    normalShadowVar: (value: {
        readonly [$$PropertyValue]: "backgroundColor";
    }) => {
        boxShadow: string;
    };
    lh: (value: {
        readonly [$$PropertyValue]: "lineHeight";
    }) => {
        lineHeight: {
            readonly [$$PropertyValue]: "lineHeight";
        };
    };
    ov: (value: {
        readonly [$$PropertyValue]: "overflow";
    }) => {
        overflow: {
            readonly [$$PropertyValue]: "overflow";
        };
    };
    ox: (value: {
        readonly [$$PropertyValue]: "overflowX";
    }) => {
        overflowX: {
            readonly [$$PropertyValue]: "overflowX";
        };
    };
    oy: (value: {
        readonly [$$PropertyValue]: "overflowY";
    }) => {
        overflowY: {
            readonly [$$PropertyValue]: "overflowY";
        };
    };
    pe: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    events: (value: {
        readonly [$$PropertyValue]: "pointerEvents";
    }) => {
        pointerEvents: {
            readonly [$$PropertyValue]: "pointerEvents";
        };
    };
    us: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    userSelect: (value: {
        readonly [$$PropertyValue]: "userSelect";
    }) => {
        WebkitUserSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
        userSelect: {
            readonly [$$PropertyValue]: "userSelect";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    mw: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    mh: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMin: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "width";
        };
        minHeight: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    maxSize: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    sizeMax: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        maxHeight: {
            readonly [$$PropertyValue]: "width";
        };
    };
    appearance: (value: {
        readonly [$$PropertyValue]: "appearance";
    }) => {
        WebkitAppearance: {
            readonly [$$PropertyValue]: "appearance";
        };
        appearance: {
            readonly [$$PropertyValue]: "appearance";
        };
    };
    scale: (value: {
        readonly [$$PropertyValue]: "scale";
    }) => {
        transform: string;
    };
    linearGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
    };
    tdl: (value: {
        readonly [$$PropertyValue]: "textDecorationLine";
    }) => {
        textDecorationLine: {
            readonly [$$PropertyValue]: "textDecorationLine";
        };
    };
    truncateText: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        maxWidth: {
            readonly [$$PropertyValue]: "width";
        };
        whiteSpace: string;
        overflow: string;
        textOverflow: string;
    };
    textGradient: (value: {
        readonly [$$PropertyValue]: "backgroundImage";
    }) => {
        backgroundImage: string;
        WebkitBackgroundClip: string;
        WebkitTextFillColor: string;
        "&::selection": {
            WebkitTextFillColor: string;
        };
    };
}>>;
export declare type CardVariantsProps = VariantProps<typeof StyledCard>;
export declare type CardFooterVariantsProps = VariantProps<typeof StyledCardFooter>;
