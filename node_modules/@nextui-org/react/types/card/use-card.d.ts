import type { PressEvents, PressEvent, FocusableProps } from "@react-types/shared";
import type { ReactRef } from "./../utils/refs";
import type { NormalWeights, CardVariants } from "./../utils/prop-types";
import React from "react";
interface Props extends PressEvents, FocusableProps {
    ref: ReactRef<HTMLDivElement | null>;
    variant?: CardVariants;
    borderWeight?: NormalWeights;
    isPressable?: boolean;
    isHoverable?: boolean;
    disableRipple?: boolean;
    disableAnimation?: boolean;
    /** Whether text selection should be enabled on the pressable element. */
    allowTextSelectionOnPress?: boolean;
}
declare type NativeAttrs = Omit<React.HTMLAttributes<unknown>, keyof Props>;
export declare type UseCardProps = Props & NativeAttrs;
/**
 * @internal
 */
export declare const useCard: (props: UseCardProps) => {
    cardRef: React.RefObject<HTMLDivElement>;
    variant: "flat" | "shadow" | "bordered";
    borderWeight: "light" | "normal" | "bold" | "extrabold" | "black";
    isPressable: boolean;
    isHovered: boolean;
    isPressed: boolean;
    disableAnimation: boolean;
    disableRipple: boolean;
    dripBindings: {
        visible: boolean;
        x: number;
        y: number;
        onCompleted: () => void;
    };
    onDripClickHandler: (event: Event | React.MouseEvent<HTMLElement, MouseEvent> | PressEvent) => void;
    isFocusVisible: boolean;
    getCardProps: (props?: any) => any;
};
export declare type UseCardReturn = ReturnType<typeof useCard>;
export {};
