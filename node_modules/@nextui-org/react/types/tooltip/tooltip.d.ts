import type { CSS } from "../theme/stitches.config";
import React from "react";
import { Placement, TriggerTypes } from "../utils/prop-types";
import { TooltipContentProps } from "./tooltip-content";
import { TooltipContentVariantsProps } from "./tooltip.styles";
export declare type TooltipOnVisibleChange = (visible: boolean) => void;
interface Props {
    content: string | React.ReactNode;
    placement?: Placement;
    visible?: boolean;
    shadow?: boolean;
    rounded?: boolean;
    initialVisible?: boolean;
    animated?: boolean;
    hideArrow?: boolean;
    trigger?: TriggerTypes;
    enterDelay?: number;
    leaveDelay?: number;
    offset?: number;
    className?: string;
    keepMounted?: boolean;
    isDisabled?: boolean;
    portalClassName?: string;
    onClick?: () => void;
    onVisibleChange?: TooltipOnVisibleChange;
    as?: keyof JSX.IntrinsicElements;
    triggerCss?: CSS;
    children?: React.ReactNode;
}
declare const defaultProps: {
    initialVisible: boolean;
    hideArrow: boolean;
    animated: boolean;
    shadow: boolean;
    rounded: boolean;
    keepMounted: boolean;
    isDisabled: boolean;
    trigger: "hover" | "click";
    enterDelay: number;
    leaveDelay: number;
    className: string;
    portalClassName: string;
    onVisibleChange: TooltipOnVisibleChange;
};
declare type NativeAttrs = Omit<React.HTMLAttributes<any>, keyof Props>;
export declare type TooltipProps = Props & typeof defaultProps & NativeAttrs & Pick<TooltipContentVariantsProps, "color" | "contentColor"> & Pick<TooltipContentProps, "css">;
declare const _default: React.ComponentType<Partial<{
    initialVisible: boolean;
    hideArrow: boolean;
    animated: boolean;
    shadow: boolean;
    rounded: boolean;
    keepMounted: boolean;
    isDisabled: boolean;
    trigger: "hover" | "click";
    enterDelay: number;
    leaveDelay: number;
    className: string;
    portalClassName: string;
    onVisibleChange: TooltipOnVisibleChange;
}> & Omit<TooltipProps, "rounded" | "shadow" | "className" | "animated" | "isDisabled" | "hideArrow" | "initialVisible" | "trigger" | "enterDelay" | "leaveDelay" | "keepMounted" | "portalClassName" | "onVisibleChange">>;
export default _default;
