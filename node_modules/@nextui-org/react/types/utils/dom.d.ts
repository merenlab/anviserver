import { DOMRefValue, FocusableRef, FocusableRefValue } from "@react-types/shared";
import { Ref, RefObject, MutableRefObject } from "react";
export declare function canUseDOM(): boolean;
export declare const isBrowser: boolean;
declare function getUserAgentBrowser(navigator: Navigator): "Chrome for iOS" | "Edge" | "Silk" | "Chrome" | "Firefox" | "AOSP" | "IE" | "Safari" | "WebKit" | null;
export declare type UserAgentBrowser = NonNullable<ReturnType<typeof getUserAgentBrowser>>;
declare function getUserAgentOS(navigator: Navigator): "Android" | "iOS" | "Windows" | "Mac" | "Chrome OS" | "Firefox OS" | null;
export declare type UserAgentOS = NonNullable<ReturnType<typeof getUserAgentOS>>;
export declare function detectDeviceType(navigator: Navigator): "tablet" | "phone" | "desktop";
export declare type UserAgentDeviceType = NonNullable<ReturnType<typeof detectDeviceType>>;
export declare function detectOS(os: UserAgentOS): boolean;
export declare function detectBrowser(browser: UserAgentBrowser): boolean;
export declare function detectTouch(): boolean;
export declare function createDOMRef<T extends HTMLElement = HTMLElement>(ref: RefObject<T>): DOMRefValue<T>;
export declare function createFocusableRef<T extends HTMLElement = HTMLElement>(domRef: RefObject<T>, focusableRef?: RefObject<HTMLElement>): FocusableRefValue<T>;
export declare function useDOMRef<T extends HTMLElement = HTMLElement>(ref?: RefObject<T | null> | Ref<T | null>): RefObject<T>;
export declare function useFocusableRef<T extends HTMLElement = HTMLElement>(ref: FocusableRef<T>, focusableRef?: RefObject<HTMLElement>): RefObject<T>;
export interface ContextValue<T> {
    ref?: MutableRefObject<T>;
}
export declare function useSyncRef<T>(context: ContextValue<T | null>, ref: RefObject<T>): void;
export {};
