import { Key } from "react";
export declare const isObject: (target: unknown) => unknown;
export interface MergeObject {
    [key: string]: any;
}
export declare const renameProp: (oldProp: string, newProp: string, { [oldProp]: old, ...others }: {
    [x: string]: any;
}) => {
    [x: string]: any;
};
export declare const copyObject: (obj: any) => any;
export declare const omitObject: (obj: any, omitKeys: string[]) => any;
export declare const cleanObject: (obj: any) => any;
export declare const cleanObjectKeys: (obj: any, keys?: string[]) => any;
export declare const getKeyValue: (obj: any, key: Key) => any;
/**
 * Get value from a deeply nested object using a string path.
 * Memorizes the value.
 * @param obj - the object
 * @param path - the string path
 * @param fallback  - the fallback value
 */
export declare const getProp: (obj: Record<string, any>, path: string | number, fallback?: any, index?: number | undefined) => any;
/**
 * Converting an array of objects into a single object.
 * @param arr - the array of objects
 * @returns the single object
 */
export declare const arrayToObject: (arr: any[]) => any;
