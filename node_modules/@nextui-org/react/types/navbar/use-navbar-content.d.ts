/// <reference types="react" />
import { CSSGapUnit } from "../theme";
import { HTMLNextUIProps } from "../utils/system";
import { NavbarItemVariantsProps, NavbarContentVariantsProps } from "./navbar.styles";
interface Props extends Omit<HTMLNextUIProps<"ul">, "color"> {
    /**
     * The gap between each item
     * @default "$space$10 = 1.5rem" and "0px" (for highlight variants)
     */
    gap?: CSSGapUnit;
    /**
     * The active color of the navbar content items.
     * @default "default"
     */
    activeColor?: NavbarItemVariantsProps["activeColor"];
    /**
     * The height of the navbar content items's underline.
     * @default "normal = 4px"
     */
    underlineHeight?: NavbarItemVariantsProps["underlineHeight"];
    /**
     * Whether the navbar content highlighted cursor should be rounded.
     * @default "false"
     */
    isCursorHighlightRounded?: boolean;
    /**
     * The variant of the navbar content items.
     * @default "default"
     */
    variant?: NavbarItemVariantsProps["variant"];
}
export declare type UseNavbarContentProps = Props & NavbarContentVariantsProps;
/**
 * @internal
 */
export declare function useNavbarContent(props?: UseNavbarContentProps): {
    css: import("../theme").CSS | undefined;
    gap: string | (string & import("@stitches/react/types/css").OnlyObject) | (number & import("@stitches/react/types/css").OnlyObject) | import("@stitches/react/types/theme").ScaleValue;
    variant: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | ({
        "@xs"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@sm"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@md"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@lg"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@xl"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@dark"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@light"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@hover"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@motion"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@xsMin"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@smMin"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@mdMin"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@lgMin"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@xlMin"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@xsMax"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@smMax"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@mdMax"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@lgMax"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@xlMax"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@safari"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
        "@initial"?: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
    } & {
        [x: string]: "default" | "underline" | "underline-rounded" | "highlight" | "highlight-solid" | "highlight-rounded" | "highlight-solid-rounded" | undefined;
    });
    activeColor: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | ({
        "@xs"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@sm"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@md"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@lg"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@xl"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@dark"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@light"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@hover"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@motion"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@xsMin"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@smMin"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@mdMin"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@lgMin"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@xlMin"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@xsMax"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@smMax"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@mdMax"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@lgMax"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@xlMax"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@safari"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
        "@initial"?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
    } & {
        [x: string]: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "neutral" | undefined;
    });
    activeItem: HTMLElement | null;
    updateActiveItem: (item: HTMLElement) => void;
    highlightedItem: HTMLElement | null;
    underlineHeight: "light" | "normal" | "bold" | "extrabold" | "black" | ({
        "@xs"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@sm"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@md"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lg"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xl"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@dark"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@light"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@hover"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@motion"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xsMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@smMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@mdMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lgMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xlMin"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xsMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@smMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@mdMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@lgMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@xlMax"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@safari"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
        "@initial"?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    } & {
        [x: string]: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    });
    cursorHighlightRef: import("react").RefObject<HTMLLIElement>;
    isRounded: boolean;
    isHighlightVariant: boolean;
    isHighlightSolidVariant: boolean;
    isCursorHighlightRounded: boolean;
    enableCursorHighlight: boolean | "true" | ({
        "@xs"?: boolean | "true" | undefined;
        "@sm"?: boolean | "true" | undefined;
        "@md"?: boolean | "true" | undefined;
        "@lg"?: boolean | "true" | undefined;
        "@xl"?: boolean | "true" | undefined;
        "@dark"?: boolean | "true" | undefined;
        "@light"?: boolean | "true" | undefined;
        "@hover"?: boolean | "true" | undefined;
        "@motion"?: boolean | "true" | undefined;
        "@xsMin"?: boolean | "true" | undefined;
        "@smMin"?: boolean | "true" | undefined;
        "@mdMin"?: boolean | "true" | undefined;
        "@lgMin"?: boolean | "true" | undefined;
        "@xlMin"?: boolean | "true" | undefined;
        "@xsMax"?: boolean | "true" | undefined;
        "@smMax"?: boolean | "true" | undefined;
        "@mdMax"?: boolean | "true" | undefined;
        "@lgMax"?: boolean | "true" | undefined;
        "@xlMax"?: boolean | "true" | undefined;
        "@safari"?: boolean | "true" | undefined;
        "@initial"?: boolean | "true" | undefined;
    } & {
        [x: string]: boolean | "true" | undefined;
    });
    cursorHighlightCss: {
        transitionDuration: string;
        opacity: string;
        width: string;
        transform: string;
        left: string;
    } | {
        transitionDuration?: undefined;
        opacity?: undefined;
        width?: undefined;
        transform?: undefined;
        left?: undefined;
    };
    repositionHighlight: (event: React.MouseEvent<HTMLElement>, item: HTMLElement) => void;
    resetHighlight: () => void;
    wrapperRef: import("react").RefObject<HTMLUListElement>;
    className: string | undefined;
    style: import("react").CSSProperties & {
        "--nextui--transitionDuration": string;
        "--nextui--opacity": number;
        "--nextui--width": string;
        "--nextui--transform": string | null | undefined;
        "--nextui--left": string;
    };
    otherProps: {
        as?: import("../utils/system").As<any> | undefined;
        slot?: string | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        hidden?: boolean | undefined;
        prefix?: string | undefined;
        children?: import("react").ReactNode;
        dir?: string | undefined;
        id?: string | undefined;
        onChange?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "inline" | "both" | "list" | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "mixed" | "true" | "false" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "true" | "false" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "true" | "false" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "true" | "false" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLUListElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLUListElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLUListElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLUListElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLUListElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLUListElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLUListElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLUListElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLUListElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLUListElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLUListElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLUListElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLUListElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLUListElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLUListElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLUListElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLUListElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLUListElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLUListElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLUListElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLUListElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLUListElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLUListElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLUListElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLUListElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLUListElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLUListElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLUListElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLUListElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLUListElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLUListElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLUListElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLUListElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLUListElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLUListElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLUListElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLUListElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLUListElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLUListElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLUListElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLUListElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLUListElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLUListElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLUListElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLUListElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLUListElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLUListElement> | undefined;
        hideIn?: "xs" | "sm" | "md" | "lg" | "xl" | ({
            "@xs"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@sm"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@md"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@lg"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xl"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@dark"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@light"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@hover"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@motion"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xsMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@smMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@mdMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@lgMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xlMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xsMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@smMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@mdMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@lgMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xlMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@safari"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@initial"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
        } & {
            [x: string]: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
        }) | undefined;
        showIn?: "xs" | "sm" | "md" | "lg" | "xl" | ({
            "@xs"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@sm"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@md"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@lg"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xl"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@dark"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@light"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@hover"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@motion"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xsMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@smMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@mdMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@lgMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xlMin"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xsMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@smMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@mdMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@lgMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@xlMax"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@safari"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
            "@initial"?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
        } & {
            [x: string]: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
        }) | undefined;
    };
};
export declare type UseNavbarContentReturn = ReturnType<typeof useNavbarContent>;
export {};
