import React from "react";
import { CopyTypes, TooltipColors } from "../utils/prop-types";
import { CSS } from "../theme/stitches.config";
import { SnippetVariantsProps } from "./snippet.styles";
interface Props {
    text?: string | string[];
    symbol?: string;
    showTooltip?: boolean;
    tooltipCopyText?: string;
    tooltipCopiedText?: string;
    copy?: CopyTypes;
    tooltipColor?: TooltipColors;
    as?: keyof JSX.IntrinsicElements;
    children?: React.ReactNode;
}
declare const defaultProps: {
    symbol: string;
    showTooltip: boolean;
    copy: "default" | "slient" | "prevent";
    tooltipColor: string;
    tooltipCopyText: string;
    tooltipCopiedText: string;
};
declare type NativeAttrs = Omit<React.HTMLAttributes<unknown>, keyof Props>;
export declare type SnippetProps = Props & typeof defaultProps & NativeAttrs & SnippetVariantsProps & {
    css?: CSS;
};
declare const _default: React.ComponentType<Partial<{
    symbol: string;
    showTooltip: boolean;
    copy: "default" | "slient" | "prevent";
    tooltipColor: string;
    tooltipCopyText: string;
    tooltipCopiedText: string;
}> & Omit<Props & {
    symbol: string;
    showTooltip: boolean;
    copy: "default" | "slient" | "prevent";
    tooltipColor: string;
    tooltipCopyText: string;
    tooltipCopiedText: string;
} & NativeAttrs & import("@stitches/react/types/styled-component").TransformProps<{
    color?: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "invert" | undefined;
    borderWeight?: "light" | "normal" | "bold" | "extrabold" | "black" | undefined;
    bordered?: boolean | "true" | undefined;
    filled?: boolean | "true" | undefined;
}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xsMin: string;
    smMin: string;
    mdMin: string;
    lgMin: string;
    xlMin: string;
    xsMax: string;
    smMax: string;
    mdMax: string;
    lgMax: string;
    xlMax: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}> & {
    css?: CSS | undefined;
}, "symbol" | "copy" | "showTooltip" | "tooltipCopyText" | "tooltipCopiedText" | "tooltipColor">>;
export default _default;
