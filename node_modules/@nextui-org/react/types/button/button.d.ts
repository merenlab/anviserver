import type { AriaButtonProps } from "@react-types/button";
import type { CSS } from "../theme/stitches.config";
import React, { PropsWithoutRef, RefAttributes } from "react";
import { NormalColors } from "../utils/prop-types";
import { HTMLNextUIProps } from "../utils/system";
import ButtonGroup from "./button-group";
import { ButtonVariantsProps } from "./button.styles";
export interface Props extends AriaButtonProps {
    light?: boolean;
    color?: NormalColors;
    flat?: boolean;
    animated?: boolean;
    disabled?: boolean;
    ghost?: boolean;
    bordered?: boolean;
    auto?: boolean;
    ripple?: boolean;
    icon?: React.ReactNode;
    iconRight?: React.ReactNode;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    className?: string;
    children?: React.ReactNode | undefined;
    iconLeftCss?: CSS;
    iconRightCss?: CSS;
}
declare type VariantProps = Omit<ButtonVariantsProps, "isPressed" | "isHovered" | "isChildLess">;
export declare type ButtonProps = Props & Omit<HTMLNextUIProps<"button">, keyof VariantProps> & VariantProps;
declare type ButtonComponent<T, P = {}> = React.ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> & {
    Group: typeof ButtonGroup;
};
declare const _default: ButtonComponent<HTMLElement, ButtonProps>;
export default _default;
