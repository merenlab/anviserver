(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["NextUI"] = factory(require("react"), require("react-dom"));
	else
		root["NextUI"] = factory(root["React"], root["ReactDOM"]);
})(self, (__WEBPACK_EXTERNAL_MODULE__787__, __WEBPACK_EXTERNAL_MODULE__156__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 889:
/***/ ((module) => {

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/



/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }

    // Detect buggy property enumeration order in older V8 versions.

    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}
module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};

/***/ }),

/***/ 767:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/** @license React v17.0.2
 * react-jsx-dev-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


__webpack_require__(889);
__webpack_require__(787);
exports.Fragment = 60107;
if ("function" === typeof Symbol && Symbol.for) {
  var a = Symbol.for;
  exports.Fragment = a("react.fragment");
}
exports.jsxDEV = void 0;

/***/ }),

/***/ 904:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(767);
} else {}

/***/ }),

/***/ 787:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__787__;

/***/ }),

/***/ 156:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__156__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Avatar": () => (/* reexport */ src_avatar),
  "Backdrop": () => (/* reexport */ src_backdrop),
  "Badge": () => (/* reexport */ src_badge),
  "Button": () => (/* reexport */ src_button),
  "Card": () => (/* reexport */ src_card),
  "Checkbox": () => (/* reexport */ src_checkbox),
  "Code": () => (/* reexport */ src_code),
  "Col": () => (/* reexport */ src_col),
  "Collapse": () => (/* reexport */ src_collapse),
  "Container": () => (/* reexport */ src_container),
  "CssBaseline": () => (/* reexport */ css_baseline),
  "Divider": () => (/* reexport */ src_divider),
  "Drip": () => (/* reexport */ drip),
  "Dropdown": () => (/* reexport */ src_dropdown),
  "Grid": () => (/* reexport */ src_grid),
  "Image": () => (/* reexport */ src_image),
  "Input": () => (/* reexport */ src_input),
  "KeyCode": () => (/* reexport */ KeyCode),
  "KeyMod": () => (/* reexport */ KeyMod),
  "Link": () => (/* reexport */ src_link),
  "Loading": () => (/* reexport */ src_loading),
  "Modal": () => (/* reexport */ src_modal),
  "Navbar": () => (/* reexport */ src_navbar),
  "NextUIProvider": () => (/* reexport */ theme_provider),
  "Pagination": () => (/* reexport */ src_pagination),
  "Popover": () => (/* reexport */ src_popover),
  "Progress": () => (/* reexport */ src_progress),
  "Radio": () => (/* reexport */ src_radio),
  "Row": () => (/* reexport */ src_row),
  "Snippet": () => (/* reexport */ src_snippet),
  "Spacer": () => (/* reexport */ src_spacer),
  "Spinner": () => (/* reexport */ loading_spinner),
  "StyledAvatar": () => (/* reexport */ StyledAvatar),
  "StyledAvatarGroup": () => (/* reexport */ StyledAvatarGroup),
  "StyledAvatarGroupCount": () => (/* reexport */ StyledAvatarGroupCount),
  "StyledBackdrop": () => (/* reexport */ StyledBackdrop),
  "StyledBackdropContent": () => (/* reexport */ StyledBackdropContent),
  "StyledBackdropLayer": () => (/* reexport */ StyledBackdropLayer),
  "StyledBadge": () => (/* reexport */ StyledBadge),
  "StyledBadgePoints": () => (/* reexport */ StyledBadgePoints),
  "StyledBadgeRoot": () => (/* reexport */ StyledBadgeRoot),
  "StyledBaseNavbarItem": () => (/* reexport */ StyledBaseNavbarItem),
  "StyledBaseNavbarList": () => (/* reexport */ StyledBaseNavbarList),
  "StyledButton": () => (/* reexport */ StyledButton),
  "StyledButtonGroup": () => (/* reexport */ StyledButtonGroup),
  "StyledButtonIcon": () => (/* reexport */ StyledButtonIcon),
  "StyledCard": () => (/* reexport */ StyledCard),
  "StyledCardBody": () => (/* reexport */ StyledCardBody),
  "StyledCardFooter": () => (/* reexport */ StyledCardFooter),
  "StyledCardHeader": () => (/* reexport */ StyledCardHeader),
  "StyledCheckboxContainer": () => (/* reexport */ StyledCheckboxContainer),
  "StyledCheckboxGroup": () => (/* reexport */ StyledCheckboxGroup),
  "StyledCheckboxLabel": () => (/* reexport */ StyledCheckboxLabel),
  "StyledCheckboxMask": () => (/* reexport */ StyledCheckboxMask),
  "StyledCheckboxText": () => (/* reexport */ StyledCheckboxText),
  "StyledCode": () => (/* reexport */ StyledCode),
  "StyledCol": () => (/* reexport */ StyledCol),
  "StyledCollapse": () => (/* reexport */ StyledCollapse),
  "StyledCollapseContent": () => (/* reexport */ StyledCollapseContent),
  "StyledCollapseGroup": () => (/* reexport */ StyledCollapseGroup),
  "StyledCollapseIcon": () => (/* reexport */ StyledCollapseIcon),
  "StyledCollapseView": () => (/* reexport */ StyledCollapseView),
  "StyledContainer": () => (/* reexport */ StyledContainer),
  "StyledDivider": () => (/* reexport */ StyledDivider),
  "StyledDividerText": () => (/* reexport */ StyledDividerText),
  "StyledDropdownItem": () => (/* reexport */ StyledDropdownItem),
  "StyledDropdownItemContent": () => (/* reexport */ StyledDropdownItemContent),
  "StyledDropdownItemContentWrapper": () => (/* reexport */ StyledDropdownItemContentWrapper),
  "StyledDropdownItemDescription": () => (/* reexport */ StyledDropdownItemDescription),
  "StyledDropdownItemIconWrapper": () => (/* reexport */ StyledDropdownItemIconWrapper),
  "StyledDropdownItemKbd": () => (/* reexport */ StyledDropdownItemKbd),
  "StyledDropdownMenu": () => (/* reexport */ StyledDropdownMenu),
  "StyledDropdownSection": () => (/* reexport */ StyledDropdownSection),
  "StyledDropdownSectionTitle": () => (/* reexport */ StyledDropdownSectionTitle),
  "StyledDropdownSectionWrapper": () => (/* reexport */ StyledDropdownSectionWrapper),
  "StyledGridContainer": () => (/* reexport */ StyledGridContainer),
  "StyledGridItem": () => (/* reexport */ StyledGridItem),
  "StyledHelperText": () => (/* reexport */ StyledHelperText),
  "StyledHelperTextContainer": () => (/* reexport */ StyledHelperTextContainer),
  "StyledIconCheck": () => (/* reexport */ StyledIconCheck),
  "StyledIconCheckFirstLine": () => (/* reexport */ StyledIconCheckFirstLine),
  "StyledIconCheckSecondLine": () => (/* reexport */ StyledIconCheckSecondLine),
  "StyledImage": () => (/* reexport */ StyledImage),
  "StyledImageContainer": () => (/* reexport */ StyledImageContainer),
  "StyledImageSkeleton": () => (/* reexport */ StyledImageSkeleton),
  "StyledInput": () => (/* reexport */ StyledInput),
  "StyledInputBlockLabel": () => (/* reexport */ StyledInputBlockLabel),
  "StyledInputClearButton": () => (/* reexport */ StyledInputClearButton),
  "StyledInputContainer": () => (/* reexport */ StyledInputContainer),
  "StyledInputContent": () => (/* reexport */ StyledInputContent),
  "StyledInputLabel": () => (/* reexport */ StyledInputLabel),
  "StyledInputMainContainer": () => (/* reexport */ StyledInputMainContainer),
  "StyledInputPlaceholder": () => (/* reexport */ StyledInputPlaceholder),
  "StyledInputWrapper": () => (/* reexport */ StyledInputWrapper),
  "StyledLink": () => (/* reexport */ StyledLink),
  "StyledLinkIcon": () => (/* reexport */ StyledLinkIcon),
  "StyledLoading": () => (/* reexport */ StyledLoading),
  "StyledLoadingContainer": () => (/* reexport */ StyledLoadingContainer),
  "StyledLoadingLabel": () => (/* reexport */ StyledLoadingLabel),
  "StyledModal": () => (/* reexport */ StyledModal),
  "StyledModalBody": () => (/* reexport */ StyledModalBody),
  "StyledModalCloseButton": () => (/* reexport */ StyledModalCloseButton),
  "StyledModalFooter": () => (/* reexport */ StyledModalFooter),
  "StyledModalHeader": () => (/* reexport */ StyledModalHeader),
  "StyledModalHideTab": () => (/* reexport */ StyledModalHideTab),
  "StyledNavbar": () => (/* reexport */ StyledNavbar),
  "StyledNavbarBrand": () => (/* reexport */ StyledNavbarBrand),
  "StyledNavbarCollapse": () => (/* reexport */ StyledNavbarCollapse),
  "StyledNavbarCollapseItem": () => (/* reexport */ StyledNavbarCollapseItem),
  "StyledNavbarCollapseWrapper": () => (/* reexport */ StyledNavbarCollapseWrapper),
  "StyledNavbarContainer": () => (/* reexport */ StyledNavbarContainer),
  "StyledNavbarContent": () => (/* reexport */ StyledNavbarContent),
  "StyledNavbarItem": () => (/* reexport */ StyledNavbarItem),
  "StyledNavbarToggle": () => (/* reexport */ StyledNavbarToggle),
  "StyledNavbarToggleIconContainer": () => (/* reexport */ StyledNavbarToggleIconContainer),
  "StyledPagination": () => (/* reexport */ StyledPagination),
  "StyledPaginationEllipsis": () => (/* reexport */ StyledPaginationEllipsis),
  "StyledPaginationHighlight": () => (/* reexport */ StyledPaginationHighlight),
  "StyledPaginationIcon": () => (/* reexport */ StyledPaginationIcon),
  "StyledPaginationItem": () => (/* reexport */ StyledPaginationItem),
  "StyledPaginationItemContent": () => (/* reexport */ StyledPaginationItemContent),
  "StyledPopoverContent": () => (/* reexport */ StyledPopoverContent),
  "StyledPre": () => (/* reexport */ StyledPre),
  "StyledProgress": () => (/* reexport */ StyledProgress),
  "StyledProgressBar": () => (/* reexport */ StyledProgressBar),
  "StyledRadioContainer": () => (/* reexport */ StyledRadioContainer),
  "StyledRadioDescription": () => (/* reexport */ StyledRadioDescription),
  "StyledRadioGroup": () => (/* reexport */ StyledRadioGroup),
  "StyledRadioGroupContainer": () => (/* reexport */ StyledRadioGroupContainer),
  "StyledRadioLabel": () => (/* reexport */ StyledRadioLabel),
  "StyledRadioPoint": () => (/* reexport */ StyledRadioPoint),
  "StyledRadioText": () => (/* reexport */ StyledRadioText),
  "StyledRow": () => (/* reexport */ StyledRow),
  "StyledSnippetCopyButton": () => (/* reexport */ StyledSnippetCopyButton),
  "StyledSnippetCopyButtonIcon": () => (/* reexport */ StyledSnippetCopyButtonIcon),
  "StyledSnippetPre": () => (/* reexport */ StyledSnippetPre),
  "StyledSpacer": () => (/* reexport */ StyledSpacer),
  "StyledSpinner": () => (/* reexport */ StyledSpinner),
  "StyledSpinnerContainer": () => (/* reexport */ StyledSpinnerContainer),
  "StyledSpinnerSpan": () => (/* reexport */ StyledSpinnerSpan),
  "StyledSwitch": () => (/* reexport */ StyledSwitch),
  "StyledSwitchCircle": () => (/* reexport */ StyledSwitchCircle),
  "StyledSwitchContainer": () => (/* reexport */ StyledSwitchContainer),
  "StyledSwitchInput": () => (/* reexport */ StyledSwitchInput),
  "StyledTable": () => (/* reexport */ StyledTable),
  "StyledTableCell": () => (/* reexport */ StyledTableCell),
  "StyledTableHeaderCell": () => (/* reexport */ StyledTableHeaderCell),
  "StyledTableRow": () => (/* reexport */ StyledTableRow),
  "StyledText": () => (/* reexport */ StyledText),
  "StyledTooltip": () => (/* reexport */ StyledTooltip),
  "StyledTooltipArrow": () => (/* reexport */ StyledTooltipArrow),
  "StyledTooltipContent": () => (/* reexport */ StyledTooltipContent),
  "StyledTooltipTrigger": () => (/* reexport */ StyledTooltipTrigger),
  "StyledUser": () => (/* reexport */ StyledUser),
  "StyledUserDesc": () => (/* reexport */ StyledUserDesc),
  "StyledUserInfo": () => (/* reexport */ StyledUserInfo),
  "StyledUserName": () => (/* reexport */ StyledUserName),
  "Switch": () => (/* reexport */ src_switch),
  "Table": () => (/* reexport */ src_table),
  "Text": () => (/* reexport */ src_text),
  "Textarea": () => (/* reexport */ src_textarea),
  "Tooltip": () => (/* reexport */ src_tooltip),
  "User": () => (/* reexport */ src_user),
  "blue": () => (/* reexport */ blue),
  "blueDark": () => (/* reexport */ blueDark),
  "changeTheme": () => (/* reexport */ changeTheme),
  "config": () => (/* reexport */ config),
  "createTheme": () => (/* reexport */ createTheme),
  "css": () => (/* reexport */ css),
  "cssFocusVisible": () => (/* reexport */ cssFocusVisible),
  "cssHideIn": () => (/* reexport */ cssHideIn),
  "cssHideShowIn": () => (/* reexport */ cssHideShowIn),
  "cssNoBlurriness": () => (/* reexport */ cssNoBlurriness),
  "cssShowIn": () => (/* reexport */ cssShowIn),
  "cyan": () => (/* reexport */ cyan),
  "cyanDark": () => (/* reexport */ cyanDark),
  "defaultTheme": () => (/* reexport */ theme),
  "excludedInputPropsForTextarea": () => (/* reexport */ excludedInputPropsForTextarea),
  "extendedColors": () => (/* reexport */ extendedColors),
  "extendedColorsNoGradient": () => (/* reexport */ extendedColorsNoGradient),
  "extraColors": () => (/* reexport */ extraColors),
  "getCssText": () => (/* reexport */ getCssText),
  "getDocumentTheme": () => (/* reexport */ getDocumentTheme),
  "getTokenValue": () => (/* reexport */ getTokenValue),
  "globalCss": () => (/* reexport */ globalCss),
  "gray": () => (/* reexport */ gray),
  "grayDark": () => (/* reexport */ grayDark),
  "green": () => (/* reexport */ green),
  "greenDark": () => (/* reexport */ greenDark),
  "keyframes": () => (/* reexport */ keyframes),
  "normalColors": () => (/* reexport */ normalColors),
  "normalLoaders": () => (/* reexport */ normalLoaders),
  "normalWeights": () => (/* reexport */ normalWeights),
  "pink": () => (/* reexport */ pink),
  "pinkDark": () => (/* reexport */ pinkDark),
  "purple": () => (/* reexport */ purple),
  "purpleDark": () => (/* reexport */ purpleDark),
  "red": () => (/* reexport */ red),
  "redDark": () => (/* reexport */ redDark),
  "sharedFocus": () => (/* reexport */ sharedFocus),
  "sharedVisuallyHidden": () => (/* reexport */ sharedVisuallyHidden),
  "simpleColors": () => (/* reexport */ prop_types_simpleColors),
  "stitchesConfig": () => (/* reexport */ config),
  "styled": () => (/* reexport */ styled),
  "textTransforms": () => (/* reexport */ textTransforms),
  "textWeights": () => (/* reexport */ textWeights),
  "theme": () => (/* reexport */ theme),
  "tuple": () => (/* reexport */ tuple),
  "useAsyncList": () => (/* reexport */ $f86e6c1ec7da6ebb$export$bc3384a35de93d66),
  "useBodyScroll": () => (/* reexport */ src_use_body_scroll),
  "useClickAnywhere": () => (/* reexport */ src_use_click_anywhere),
  "useClickAway": () => (/* reexport */ src_use_click_away),
  "useClipboard": () => (/* reexport */ src_use_clipboard),
  "useCollator": () => (/* reexport */ $325a3faab7a68acd$export$a16aca283550c30d),
  "useCurrentState": () => (/* reexport */ src_use_current_state),
  "useDrip": () => (/* reexport */ src_use_drip),
  "useInput": () => (/* reexport */ src_use_input),
  "useIntersectionObserver": () => (/* reexport */ src_use_intersection_observer),
  "useKeyboard": () => (/* reexport */ src_use_keyboard),
  "useModal": () => (/* reexport */ use_modal),
  "usePagination": () => (/* reexport */ use_pagination),
  "usePortal": () => (/* reexport */ src_use_portal),
  "useRealShape": () => (/* reexport */ src_use_real_shape),
  "useResize": () => (/* reexport */ src_use_resize),
  "useSSR": () => (/* reexport */ src_use_ssr),
  "useScrollPosition": () => (/* reexport */ src_use_scroll_position),
  "useTheme": () => (/* reexport */ src_use_theme),
  "yellow": () => (/* reexport */ yellow),
  "yellowDark": () => (/* reexport */ yellowDark)
});

;// CONCATENATED MODULE: ./src/utils/prop-types.ts
const tuple = (...args) => args;
const normalSizes = tuple("xs", "sm", "md", "lg", "xl");
const normalColors = tuple("default", "primary", "secondary", "success", "warning", "error", "gradient");
const prop_types_simpleColors = tuple("default", "primary", "secondary", "success", "warning", "error");
const extendedColors = tuple("default", "primary", "secondary", "success", "warning", "error", "invert", "gradient");
const extendedColorsNoGradient = tuple("default", "primary", "secondary", "success", "warning", "error", "invert");
const extraColors = tuple("default", "primary", "secondary", "success", "warning", "error", "dark", "lite", "alert", "purple", "violet", "gradient", "cyan");
const normalLoaders = tuple("default", "points", "points-opacity", "gradient", "spinner");
const normalWeights = tuple("light", "normal", "bold", "extrabold", "black");
const textWeights = tuple( /* Keyword values */
"normal", "bold", /* Keyword values relative to the parent */
"lighter", "bolder", /* Global values */
"inherit", "initial", "revert", "unset");
const textTransforms = tuple( /* Keyword values */
"none", "capitalize", "uppercase", "lowercase", "full-width", "full-size-kana", /* Global values */
"inherit", "initial", "revert", "unset");
const copyTypes = tuple("default", "slient", "prevent");
const triggerTypes = tuple("hover", "click");
const placement = tuple("top", "topStart", "topEnd", "left", "leftStart", "leftEnd", "bottom", "bottomStart", "bottomEnd", "right", "rightStart", "rightEnd");
const position = tuple("static", "relative", "absolute", "fixed", "sticky", /* Global values */
"inherit", "initial", "revert", "unset");
const objectFit = tuple("contain", "cover", "fill", "none", "scale-down", /* Global values */
"inherit", "initial", "revert", "unset");
const dividerAlign = tuple("start", "center", "end", "left", "right");
const justify = tuple("flex-start", "center", "flex-end", "space-between", "space-around", "space-evenly");
const alignItems = tuple("flex-start", "flex-end", "center", "stretch", "baseline");
const alignContent = tuple("stretch", "center", "flex-start", "flex-end", "space-between", "space-around");
const direction = tuple("row", "row-reverse", "column", "column-reverse");
const wrap = tuple("nowrap", "wrap", "wrap-reverse");
const display = tuple("flex", "block", "grid", "inline", "inline-block", "inline-flex", "inline-grid");
const contentPosition = tuple("left", "right");
const normalAlignments = tuple("start", "center", "end");
const excludedInputPropsForTextarea = tuple("clearable", "as", "rounded", "labelLeft", "labelRight", "contentLeft", "contentRight", "contentClickable", "contentLeftStyling", "contentRightStyling", "onContentClick", "onClearClick", "css");
const selectionBehavior = tuple("toggle", "replace");
const selectionMode = tuple("none", "single", "multiple");
const dropdownVariants = tuple("flat", "light", "solid", "shadow");
const cardVariants = tuple("flat", "bordered", "shadow");
// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external_root_React_commonjs2_react_commonjs_react_amd_react_ = __webpack_require__(787);
var external_root_React_commonjs2_react_commonjs_react_amd_react_default = /*#__PURE__*/__webpack_require__.n(external_root_React_commonjs2_react_commonjs_react_amd_react_);
;// CONCATENATED MODULE: ./src/use-current-state/use-current-state.ts

const useCurrentState = initialState => {
  const [state, setState] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => {
    return typeof initialState === "function" ? initialState() : initialState;
  });
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(initialState);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    ref.current = state;
  }, [state]);
  const setValue = val => {
    const result = typeof val === "function" ? val(ref.current) : val;
    ref.current = result;
    setState(result);
  };
  return [state, setValue, ref];
};
/* harmony default export */ const use_current_state = (useCurrentState);
;// CONCATENATED MODULE: ./src/use-current-state/index.ts

/* harmony default export */ const src_use_current_state = (use_current_state);
;// CONCATENATED MODULE: ./src/use-real-shape/use-real-shape.ts

const getCSSStyleVal = (str, parentNum) => {
  if (!str) return 0;
  const strVal = str.includes("px") ? +str.split("px")[0] : str.includes("%") ? +str.split("%")[0] * parentNum * 0.01 : str;
  return Number.isNaN(+strVal) ? 0 : +strVal;
};
const getRealShape = el => {
  const defaultShape = {
    width: 0,
    height: 0
  };
  if (!el || typeof window === "undefined") return defaultShape;
  const rect = el.getBoundingClientRect();
  const {
    width,
    height
  } = window.getComputedStyle(el);
  return {
    width: getCSSStyleVal(`${width}`, rect.width),
    height: getCSSStyleVal(`${height}`, rect.height)
  };
};
const useRealShape = ref => {
  const [state, setState] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)({
    width: 0,
    height: 0
  });
  const update = () => {
    const {
      width,
      height
    } = getRealShape(ref.current);
    setState({
      width,
      height
    });
  };
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => update(), [ref.current]);
  return [state, update];
};
/* harmony default export */ const use_real_shape = (useRealShape);
;// CONCATENATED MODULE: ./src/use-real-shape/index.ts

/* harmony default export */ const src_use_real_shape = (use_real_shape);
;// CONCATENATED MODULE: ./src/use-resize/use-resize.ts

const useResize = (callback, immediatelyInvoke = true) => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const fn = () => callback();
    if (immediatelyInvoke) {
      fn();
    }
    window.addEventListener("resize", fn);
    return () => window.removeEventListener("resize", fn);
  }, []);
};
/* harmony default export */ const use_resize = (useResize);
;// CONCATENATED MODULE: ./src/use-resize/index.ts

/* harmony default export */ const src_use_resize = (use_resize);
;// CONCATENATED MODULE: ../../node_modules/@stitches/react/dist/index.mjs
var e="colors",t="sizes",r="space",n={gap:r,gridGap:r,columnGap:r,gridColumnGap:r,rowGap:r,gridRowGap:r,inset:r,insetBlock:r,insetBlockEnd:r,insetBlockStart:r,insetInline:r,insetInlineEnd:r,insetInlineStart:r,margin:r,marginTop:r,marginRight:r,marginBottom:r,marginLeft:r,marginBlock:r,marginBlockEnd:r,marginBlockStart:r,marginInline:r,marginInlineEnd:r,marginInlineStart:r,padding:r,paddingTop:r,paddingRight:r,paddingBottom:r,paddingLeft:r,paddingBlock:r,paddingBlockEnd:r,paddingBlockStart:r,paddingInline:r,paddingInlineEnd:r,paddingInlineStart:r,top:r,right:r,bottom:r,left:r,scrollMargin:r,scrollMarginTop:r,scrollMarginRight:r,scrollMarginBottom:r,scrollMarginLeft:r,scrollMarginX:r,scrollMarginY:r,scrollMarginBlock:r,scrollMarginBlockEnd:r,scrollMarginBlockStart:r,scrollMarginInline:r,scrollMarginInlineEnd:r,scrollMarginInlineStart:r,scrollPadding:r,scrollPaddingTop:r,scrollPaddingRight:r,scrollPaddingBottom:r,scrollPaddingLeft:r,scrollPaddingX:r,scrollPaddingY:r,scrollPaddingBlock:r,scrollPaddingBlockEnd:r,scrollPaddingBlockStart:r,scrollPaddingInline:r,scrollPaddingInlineEnd:r,scrollPaddingInlineStart:r,fontSize:"fontSizes",background:e,backgroundColor:e,backgroundImage:e,borderImage:e,border:e,borderBlock:e,borderBlockEnd:e,borderBlockStart:e,borderBottom:e,borderBottomColor:e,borderColor:e,borderInline:e,borderInlineEnd:e,borderInlineStart:e,borderLeft:e,borderLeftColor:e,borderRight:e,borderRightColor:e,borderTop:e,borderTopColor:e,caretColor:e,color:e,columnRuleColor:e,fill:e,outline:e,outlineColor:e,stroke:e,textDecorationColor:e,fontFamily:"fonts",fontWeight:"fontWeights",lineHeight:"lineHeights",letterSpacing:"letterSpacings",blockSize:t,minBlockSize:t,maxBlockSize:t,inlineSize:t,minInlineSize:t,maxInlineSize:t,width:t,minWidth:t,maxWidth:t,height:t,minHeight:t,maxHeight:t,flexBasis:t,gridTemplateColumns:t,gridTemplateRows:t,borderWidth:"borderWidths",borderTopWidth:"borderWidths",borderRightWidth:"borderWidths",borderBottomWidth:"borderWidths",borderLeftWidth:"borderWidths",borderStyle:"borderStyles",borderTopStyle:"borderStyles",borderRightStyle:"borderStyles",borderBottomStyle:"borderStyles",borderLeftStyle:"borderStyles",borderRadius:"radii",borderTopLeftRadius:"radii",borderTopRightRadius:"radii",borderBottomRightRadius:"radii",borderBottomLeftRadius:"radii",boxShadow:"shadows",textShadow:"shadows",transition:"transitions",zIndex:"zIndices"},i=(e,t)=>"function"==typeof t?{"()":Function.prototype.toString.call(t)}:t,o=()=>{const e=Object.create(null);return(t,r,...n)=>{const o=(e=>JSON.stringify(e,i))(t);return o in e?e[o]:e[o]=r(t,...n)}},l=Symbol.for("sxs.internal"),s=(e,t)=>Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)),a=e=>{for(const t in e)return!0;return!1},{hasOwnProperty:c}=Object.prototype,d=e=>e.includes("-")?e:e.replace(/[A-Z]/g,(e=>"-"+e.toLowerCase())),g=/\s+(?![^()]*\))/,p=e=>t=>e(..."string"==typeof t?String(t).split(g):[t]),u={appearance:e=>({WebkitAppearance:e,appearance:e}),backfaceVisibility:e=>({WebkitBackfaceVisibility:e,backfaceVisibility:e}),backdropFilter:e=>({WebkitBackdropFilter:e,backdropFilter:e}),backgroundClip:e=>({WebkitBackgroundClip:e,backgroundClip:e}),boxDecorationBreak:e=>({WebkitBoxDecorationBreak:e,boxDecorationBreak:e}),clipPath:e=>({WebkitClipPath:e,clipPath:e}),content:e=>({content:e.includes('"')||e.includes("'")||/^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e)?e:`"${e}"`}),hyphens:e=>({WebkitHyphens:e,hyphens:e}),maskImage:e=>({WebkitMaskImage:e,maskImage:e}),maskSize:e=>({WebkitMaskSize:e,maskSize:e}),tabSize:e=>({MozTabSize:e,tabSize:e}),textSizeAdjust:e=>({WebkitTextSizeAdjust:e,textSizeAdjust:e}),userSelect:e=>({WebkitUserSelect:e,userSelect:e}),marginBlock:p(((e,t)=>({marginBlockStart:e,marginBlockEnd:t||e}))),marginInline:p(((e,t)=>({marginInlineStart:e,marginInlineEnd:t||e}))),maxSize:p(((e,t)=>({maxBlockSize:e,maxInlineSize:t||e}))),minSize:p(((e,t)=>({minBlockSize:e,minInlineSize:t||e}))),paddingBlock:p(((e,t)=>({paddingBlockStart:e,paddingBlockEnd:t||e}))),paddingInline:p(((e,t)=>({paddingInlineStart:e,paddingInlineEnd:t||e})))},h=/([\d.]+)([^]*)/,f=(e,t)=>e.length?e.reduce(((e,r)=>(e.push(...t.map((e=>e.includes("&")?e.replace(/&/g,/[ +>|~]/.test(r)&&/&.*&/.test(e)?`:is(${r})`:r):r+" "+e))),e)),[]):t,m=(e,t)=>e in b&&"string"==typeof t?t.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/,((t,r,n,i)=>r+("stretch"===n?`-moz-available${i};${d(e)}:${r}-webkit-fill-available`:`-moz-fit-content${i};${d(e)}:${r}fit-content`)+i)):String(t),b={blockSize:1,height:1,inlineSize:1,maxBlockSize:1,maxHeight:1,maxInlineSize:1,maxWidth:1,minBlockSize:1,minHeight:1,minInlineSize:1,minWidth:1,width:1},S=e=>e?e+"-":"",k=(e,t,r)=>e.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g,((e,n,i,o,l)=>"$"==o==!!i?e:(n||"--"==o?"calc(":"")+"var(--"+("$"===o?S(t)+(l.includes("$")?"":S(r))+l.replace(/\$/g,"-"):l)+")"+(n||"--"==o?"*"+(n||"")+(i||"1")+")":""))),y=/\s*,\s*(?![^()]*\))/,B=Object.prototype.toString,$=(e,t,r,n,i)=>{let o,l,s;const a=(e,t,r)=>{let c,g;const p=e=>{for(c in e){const R=64===c.charCodeAt(0),z=R&&Array.isArray(e[c])?e[c]:[e[c]];for(g of z){const e=/[A-Z]/.test($=c)?$:$.replace(/-[^]/g,(e=>e[1].toUpperCase())),z="object"==typeof g&&g&&g.toString===B&&(!n.utils[e]||!t.length);if(e in n.utils&&!z){const t=n.utils[e];if(t!==l){l=t,p(t(g)),l=null;continue}}else if(e in u){const t=u[e];if(t!==s){s=t,p(t(g)),s=null;continue}}if(R&&(b=c.slice(1)in n.media?"@media "+n.media[c.slice(1)]:c,c=b.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g,((e,t,r,n,i,o)=>{const l=h.test(t),s=.0625*(l?-1:1),[a,c]=l?[n,t]:[t,n];return"("+("="===r[0]?"":">"===r[0]===l?"max-":"min-")+a+":"+("="!==r[0]&&1===r.length?c.replace(h,((e,t,n)=>Number(t)+s*(">"===r?1:-1)+n)):c)+(i?") and ("+(">"===i[0]?"min-":"max-")+a+":"+(1===i.length?o.replace(h,((e,t,r)=>Number(t)+s*(">"===i?-1:1)+r)):o):"")+")"}))),z){const e=R?r.concat(c):[...r],n=R?[...t]:f(t,c.split(y));void 0!==o&&i(x(...o)),o=void 0,a(g,n,e)}else void 0===o&&(o=[[],t,r]),c=R||36!==c.charCodeAt(0)?c:`--${S(n.prefix)}${c.slice(1).replace(/\$/g,"-")}`,g=z?g:"number"==typeof g?g&&e in I?String(g)+"px":String(g):k(m(e,null==g?"":g),n.prefix,n.themeMap[e]),o[0].push(`${R?`${c} `:`${d(c)}:`}${g}`)}}var b,$};p(e),void 0!==o&&i(x(...o)),o=void 0};a(e,t,r)},x=(e,t,r)=>`${r.map((e=>`${e}{`)).join("")}${t.length?`${t.join(",")}{`:""}${e.join(";")}${t.length?"}":""}${Array(r.length?r.length+1:0).join("}")}`,I={animationDelay:1,animationDuration:1,backgroundSize:1,blockSize:1,border:1,borderBlock:1,borderBlockEnd:1,borderBlockEndWidth:1,borderBlockStart:1,borderBlockStartWidth:1,borderBlockWidth:1,borderBottom:1,borderBottomLeftRadius:1,borderBottomRightRadius:1,borderBottomWidth:1,borderEndEndRadius:1,borderEndStartRadius:1,borderInlineEnd:1,borderInlineEndWidth:1,borderInlineStart:1,borderInlineStartWidth:1,borderInlineWidth:1,borderLeft:1,borderLeftWidth:1,borderRadius:1,borderRight:1,borderRightWidth:1,borderSpacing:1,borderStartEndRadius:1,borderStartStartRadius:1,borderTop:1,borderTopLeftRadius:1,borderTopRightRadius:1,borderTopWidth:1,borderWidth:1,bottom:1,columnGap:1,columnRule:1,columnRuleWidth:1,columnWidth:1,containIntrinsicSize:1,flexBasis:1,fontSize:1,gap:1,gridAutoColumns:1,gridAutoRows:1,gridTemplateColumns:1,gridTemplateRows:1,height:1,inlineSize:1,inset:1,insetBlock:1,insetBlockEnd:1,insetBlockStart:1,insetInline:1,insetInlineEnd:1,insetInlineStart:1,left:1,letterSpacing:1,margin:1,marginBlock:1,marginBlockEnd:1,marginBlockStart:1,marginBottom:1,marginInline:1,marginInlineEnd:1,marginInlineStart:1,marginLeft:1,marginRight:1,marginTop:1,maxBlockSize:1,maxHeight:1,maxInlineSize:1,maxWidth:1,minBlockSize:1,minHeight:1,minInlineSize:1,minWidth:1,offsetDistance:1,offsetRotate:1,outline:1,outlineOffset:1,outlineWidth:1,overflowClipMargin:1,padding:1,paddingBlock:1,paddingBlockEnd:1,paddingBlockStart:1,paddingBottom:1,paddingInline:1,paddingInlineEnd:1,paddingInlineStart:1,paddingLeft:1,paddingRight:1,paddingTop:1,perspective:1,right:1,rowGap:1,scrollMargin:1,scrollMarginBlock:1,scrollMarginBlockEnd:1,scrollMarginBlockStart:1,scrollMarginBottom:1,scrollMarginInline:1,scrollMarginInlineEnd:1,scrollMarginInlineStart:1,scrollMarginLeft:1,scrollMarginRight:1,scrollMarginTop:1,scrollPadding:1,scrollPaddingBlock:1,scrollPaddingBlockEnd:1,scrollPaddingBlockStart:1,scrollPaddingBottom:1,scrollPaddingInline:1,scrollPaddingInlineEnd:1,scrollPaddingInlineStart:1,scrollPaddingLeft:1,scrollPaddingRight:1,scrollPaddingTop:1,shapeMargin:1,textDecoration:1,textDecorationThickness:1,textIndent:1,textUnderlineOffset:1,top:1,transitionDelay:1,transitionDuration:1,verticalAlign:1,width:1,wordSpacing:1},R=e=>String.fromCharCode(e+(e>25?39:97)),z=e=>(e=>{let t,r="";for(t=Math.abs(e);t>52;t=t/52|0)r=R(t%52)+r;return R(t%52)+r})(((e,t)=>{let r=t.length;for(;r;)e=33*e^t.charCodeAt(--r);return e})(5381,JSON.stringify(e))>>>0),W=["themed","global","styled","onevar","resonevar","allvar","inline"],j=e=>{if(e.href&&!e.href.startsWith(location.origin))return!1;try{return!!e.cssRules}catch(e){return!1}},E=e=>{let t;const r=()=>{const{cssRules:e}=t.sheet;return[].map.call(e,((r,n)=>{const{cssText:i}=r;let o="";if(i.startsWith("--sxs"))return"";if(e[n-1]&&(o=e[n-1].cssText).startsWith("--sxs")){if(!r.cssRules.length)return"";for(const e in t.rules)if(t.rules[e].group===r)return`--sxs{--sxs:${[...t.rules[e].cache].join(" ")}}${i}`;return r.cssRules.length?`${o}${i}`:""}return i})).join("")},n=()=>{if(t){const{rules:e,sheet:r}=t;if(!r.deleteRule){for(;3===Object(Object(r.cssRules)[0]).type;)r.cssRules.splice(0,1);r.cssRules=[]}for(const t in e)delete e[t]}const i=Object(e).styleSheets||[];for(const e of i)if(j(e)){for(let i=0,o=e.cssRules;o[i];++i){const l=Object(o[i]);if(1!==l.type)continue;const s=Object(o[i+1]);if(4!==s.type)continue;++i;const{cssText:a}=l;if(!a.startsWith("--sxs"))continue;const c=a.slice(14,-3).trim().split(/\s+/),d=W[c[0]];d&&(t||(t={sheet:e,reset:n,rules:{},toString:r}),t.rules[d]={group:s,index:i,cache:new Set(c)})}if(t)break}if(!t){const i=(e,t)=>({type:t,cssRules:[],insertRule(e,t){this.cssRules.splice(t,0,i(e,{import:3,undefined:1}[(e.toLowerCase().match(/^@([a-z]+)/)||[])[1]]||4))},get cssText(){return"@media{}"===e?`@media{${[].map.call(this.cssRules,(e=>e.cssText)).join("")}}`:e}});t={sheet:e?(e.head||e).appendChild(document.createElement("style")).sheet:i("","text/css"),rules:{},reset:n,toString:r}}const{sheet:o,rules:l}=t;for(let e=W.length-1;e>=0;--e){const t=W[e];if(!l[t]){const r=W[e+1],n=l[r]?l[r].index:o.cssRules.length;o.insertRule("@media{}",n),o.insertRule(`--sxs{--sxs:${e}}`,n),l[t]={group:o.cssRules[n+1],index:n,cache:new Set([e])}}v(l[t])}};return n(),t},v=e=>{const t=e.group;let r=t.cssRules.length;e.apply=e=>{try{t.insertRule(e,r),++r}catch(e){}}},T=Symbol(),w=o(),M=(e,t)=>w(e,(()=>(...r)=>{let n={type:null,composers:new Set};for(const t of r)if(null!=t)if(t[l]){null==n.type&&(n.type=t[l].type);for(const e of t[l].composers)n.composers.add(e)}else t.constructor!==Object||t.$$typeof?null==n.type&&(n.type=t):n.composers.add(C(t,e));return null==n.type&&(n.type="span"),n.composers.size||n.composers.add(["PJLV",{},[],[],{},[]]),P(e,n,t)})),C=({variants:e,compoundVariants:t,defaultVariants:r,...n},i)=>{const o=`${S(i.prefix)}c-${z(n)}`,l=[],s=[],d=Object.create(null),g=[];for(const e in r)d[e]=String(r[e]);if("object"==typeof e&&e)for(const t in e){p=d,u=t,c.call(p,u)||(d[t]="undefined");const r=e[t];for(const e in r){const n={[t]:String(e)};"undefined"===String(e)&&g.push(t);const i=r[e],o=[n,i,!a(i)];l.push(o)}}var p,u;if("object"==typeof t&&t)for(const e of t){let{css:t,...r}=e;t="object"==typeof t&&t||{};for(const e in r)r[e]=String(r[e]);const n=[r,t,!a(t)];s.push(n)}return[o,n,l,s,d,g]},P=(e,t,r)=>{const[n,i,o,a]=L(t.composers),c="function"==typeof t.type||t.type.$$typeof?(e=>{function t(){for(let r=0;r<t[T].length;r++){const[n,i]=t[T][r];e.rules[n].apply(i)}return t[T]=[],null}return t[T]=[],t.rules={},W.forEach((e=>t.rules[e]={apply:r=>t[T].push([e,r])})),t})(r):null,d=(c||r).rules,g=`.${n}${i.length>1?`:where(.${i.slice(1).join(".")})`:""}`,p=l=>{l="object"==typeof l&&l||A;const{css:s,...p}=l,u={};for(const e in o)if(delete p[e],e in l){let t=l[e];"object"==typeof t&&t?u[e]={"@initial":o[e],...t}:(t=String(t),u[e]="undefined"!==t||a.has(e)?t:o[e])}else u[e]=o[e];const h=new Set([...i]);for(const[n,i,o,l]of t.composers){r.rules.styled.cache.has(n)||(r.rules.styled.cache.add(n),$(i,[`.${n}`],[],e,(e=>{d.styled.apply(e)})));const t=O(o,u,e.media),s=O(l,u,e.media,!0);for(const i of t)if(void 0!==i)for(const[t,o,l]of i){const i=`${n}-${z(o)}-${t}`;h.add(i);const s=(l?r.rules.resonevar:r.rules.onevar).cache,a=l?d.resonevar:d.onevar;s.has(i)||(s.add(i),$(o,[`.${i}`],[],e,(e=>{a.apply(e)})))}for(const t of s)if(void 0!==t)for(const[i,o]of t){const t=`${n}-${z(o)}-${i}`;h.add(t),r.rules.allvar.cache.has(t)||(r.rules.allvar.cache.add(t),$(o,[`.${t}`],[],e,(e=>{d.allvar.apply(e)})))}}if("object"==typeof s&&s){const t=`${n}-i${z(s)}-css`;h.add(t),r.rules.inline.cache.has(t)||(r.rules.inline.cache.add(t),$(s,[`.${t}`],[],e,(e=>{d.inline.apply(e)})))}for(const e of String(l.className||"").trim().split(/\s+/))e&&h.add(e);const f=p.className=[...h].join(" ");return{type:t.type,className:f,selector:g,props:p,toString:()=>f,deferredInjector:c}};return s(p,{className:n,selector:g,[l]:t,toString:()=>(r.rules.styled.cache.has(n)||p(),n)})},L=e=>{let t="";const r=[],n={},i=[];for(const[o,,,,l,s]of e){""===t&&(t=o),r.push(o),i.push(...s);for(const e in l){const t=l[e];(void 0===n[e]||"undefined"!==t||s.includes(t))&&(n[e]=t)}}return[t,r,n,new Set(i)]},O=(e,t,r,n)=>{const i=[];e:for(let[o,l,s]of e){if(s)continue;let e,a=0,c=!1;for(e in o){const n=o[e];let i=t[e];if(i!==n){if("object"!=typeof i||!i)continue e;{let e,t,o=0;for(const l in i){if(n===String(i[l])){if("@initial"!==l){const e=l.slice(1);(t=t||[]).push(e in r?r[e]:l.replace(/^@media ?/,"")),c=!0}a+=o,e=!0}++o}if(t&&t.length&&(l={["@media "+t.join(", ")]:l}),!e)continue e}}}(i[a]=i[a]||[]).push([n?"cv":`${e}-${o[e]}`,l,c])}return i},A={},N=o(),D=(e,t)=>N(e,(()=>(...r)=>{const n=()=>{for(let n of r){n="object"==typeof n&&n||{};let r=z(n);if(!t.rules.global.cache.has(r)){if(t.rules.global.cache.add(r),"@import"in n){let e=[].indexOf.call(t.sheet.cssRules,t.rules.themed.group)-1;for(let r of[].concat(n["@import"]))r=r.includes('"')||r.includes("'")?r:`"${r}"`,t.sheet.insertRule(`@import ${r};`,e++);delete n["@import"]}$(n,[],[],e,(e=>{t.rules.global.apply(e)}))}}return""};return s(n,{toString:n})})),H=o(),V=(e,t)=>H(e,(()=>r=>{const n=`${S(e.prefix)}k-${z(r)}`,i=()=>{if(!t.rules.global.cache.has(n)){t.rules.global.cache.add(n);const i=[];$(r,[],[],e,(e=>i.push(e)));const o=`@keyframes ${n}{${i.join("")}}`;t.rules.global.apply(o)}return n};return s(i,{get name(){return i()},toString:i})})),G=class{constructor(e,t,r,n){this.token=null==e?"":String(e),this.value=null==t?"":String(t),this.scale=null==r?"":String(r),this.prefix=null==n?"":String(n)}get computedValue(){return"var("+this.variable+")"}get variable(){return"--"+S(this.prefix)+S(this.scale)+this.token}toString(){return this.computedValue}},F=o(),J=(e,t)=>F(e,(()=>(r,n)=>{n="object"==typeof r&&r||Object(n);const i=`.${r=(r="string"==typeof r?r:"")||`${S(e.prefix)}t-${z(n)}`}`,o={},l=[];for(const t in n){o[t]={};for(const r in n[t]){const i=`--${S(e.prefix)}${t}-${r}`,s=k(String(n[t][r]),e.prefix,t);o[t][r]=new G(r,s,t,e.prefix),l.push(`${i}:${s}`)}}const s=()=>{if(l.length&&!t.rules.themed.cache.has(r)){t.rules.themed.cache.add(r);const i=`${n===e.theme?":root,":""}.${r}{${l.join(";")}}`;t.rules.themed.apply(i)}return r};return{...o,get className(){return s()},selector:i,toString:s}})),U=o();var X,Y=o(),q=e=>{const t=(e=>{let t=!1;const r=U(e,(e=>{t=!0;const r="prefix"in(e="object"==typeof e&&e||{})?String(e.prefix):"",i="object"==typeof e.media&&e.media||{},o="object"==typeof e.root?e.root||null:globalThis.document||null,l="object"==typeof e.theme&&e.theme||{},s={prefix:r,media:i,theme:l,themeMap:"object"==typeof e.themeMap&&e.themeMap||{...n},utils:"object"==typeof e.utils&&e.utils||{}},a=E(o),c={css:M(s,a),globalCss:D(s,a),keyframes:V(s,a),createTheme:J(s,a),reset(){a.reset(),c.theme.toString()},theme:{},sheet:a,config:s,prefix:r,getCssText:a.toString,toString:a.toString};return String(c.theme=c.createTheme(l)),c}));return t||r.reset(),r})(e);return t.styled=(({config:e,sheet:t})=>Y(e,(()=>{const r=M(e,t);return(...e)=>{const t=r(...e),n=t[l].type,i=external_root_React_commonjs2_react_commonjs_react_amd_react_.forwardRef(((e,r)=>{const i=e&&e.as||n,{props:o,deferredInjector:l}=t(e);return delete o.as,o.ref=r,l?external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_.Fragment,null,external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(i,o),external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(l,null)):external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(i,o)}));return i.className=t.className,i.displayName=`Styled.${n.displayName||n.name||n}`,i.selector=t.selector,i.toString=()=>t.selector,i[l]=t[l],i}})))(t),t},K=()=>X||(X=q()),Q=(...e)=>K().createTheme(...e),_=(...e)=>K().globalCss(...e),ee=(...e)=>K().keyframes(...e),te=(...e)=>K().css(...e),re=(...e)=>K().styled(...e);
//# sourceMappingUrl=index.map
;// CONCATENATED MODULE: ./src/utils/deep-merge.js
function deep_merge_deepMerge(result) {
  var stack = Array.prototype.slice.call(arguments, 1);
  var item;
  var key;
  while (stack.length) {
    item = stack.shift();
    for (key in item) {
      // eslint-disable-next-line no-prototype-builtins
      if (item.hasOwnProperty(key)) {
        if (typeof result[key] === "object" && result[key] && Object.prototype.toString.call(result[key]) !== "[object Array]") {
          if (typeof item[key] === "object" && item[key] !== null) {
            result[key] = deep_merge_deepMerge({}, result[key], item[key]);
          } else {
            result[key] = item[key];
          }
        } else {
          result[key] = item[key];
        }
      }
    }
  }
  return result;
}
;// CONCATENATED MODULE: ./src/theme/common.ts

const defaultTokens = {
  fonts: {
    sans: "-apple-system, BlinkMacSystemFont, 'Segoe UI','Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans','Helvetica Neue', sans-serif;",
    mono: "Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono','Courier New', monospace;"
  },
  fontSizes: {
    xs: "0.75rem",
    sm: "0.875rem",
    base: "1rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  lineHeights: {
    xs: 1,
    sm: 1.25,
    base: 1.5,
    md: 1.5,
    lg: 1.75,
    xl: 1.75,
    "2xl": 2,
    "3xl": 2.25,
    "4xl": 2.5,
    "5xl": 1,
    "6xl": 1,
    "7xl": 1,
    "8xl": 1,
    "9xl": 1
  },
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  space: {
    0: "0rem",
    xs: "0.5rem",
    sm: "0.75rem",
    md: "1rem",
    lg: "1.25rem",
    xl: "2.25rem",
    "2xl": "3rem",
    "3xl": "5rem",
    "4xl": "10rem",
    "5xl": "14rem",
    "6xl": "18rem",
    "7xl": "24rem",
    "8xl": "32rem",
    "9xl": "40rem",
    min: "min-content",
    max: "max-content",
    fit: "fit-content",
    screen: "100vw",
    full: "100%",
    px: "1px",
    1: "0.125rem",
    2: "0.25rem",
    3: "0.375rem",
    4: "0.5rem",
    5: "0.625rem",
    6: "0.75rem",
    7: "0.875rem",
    8: "1rem",
    9: "1.25rem",
    10: "1.5rem",
    11: "1.75rem",
    12: "2rem",
    13: "2.25rem",
    14: "2.5rem",
    15: "2.75rem",
    16: "3rem",
    17: "3.5rem",
    18: "4rem",
    20: "5rem",
    24: "6rem",
    28: "7rem",
    32: "8rem",
    36: "9rem",
    40: "10rem",
    44: "11rem",
    48: "12rem",
    52: "13rem",
    56: "14rem",
    60: "15rem",
    64: "16rem",
    72: "18rem",
    80: "20rem",
    96: "24rem"
  },
  radii: {
    xs: "7px",
    sm: "9px",
    md: "12px",
    base: "14px",
    lg: "14px",
    xl: "18px",
    "2xl": "24px",
    "3xl": "32px",
    squared: "33%",
    rounded: "50%",
    pill: "9999px"
  },
  zIndices: {
    1: "100",
    2: "200",
    3: "300",
    4: "400",
    5: "500",
    10: "1000",
    max: "9999"
  },
  borderWeights: {
    light: "1px",
    normal: "2px",
    bold: "3px",
    extrabold: "4px",
    black: "5px"
  },
  transitions: {
    default: "all 250ms ease",
    button: "background 0.25s ease 0s, color 0.25s ease 0s, border-color 0.25s ease 0s, box-shadow 0.25s ease 0s, transform 0.25s ease 0s, opacity 0.25s ease 0s",
    avatar: "box-shadow 0.25s ease 0s, opacity 0.25s ease 0s",
    card: "transform 0.25s ease 0s, filter 0.25s ease 0s, box-shadow 0.25s ease 0s",
    dropdownItem: "background 0.12s ease, transform 0.12s ease, color 0.12s ease, box-shadow 0.12s ease 0s"
  },
  breakpoints: {
    xs: "650px",
    sm: "960px",
    md: "1280px",
    lg: "1400px",
    xl: "1920px"
  }
};
const defaultColors = {
  // generic colors
  white: "#ffffff",
  black: "#000000",
  // brand colors
  primaryLight: "$blue200",
  primaryLightHover: "$blue300",
  primaryLightActive: "$blue400",
  primaryLightContrast: "$blue600",
  primary: "$blue600",
  primaryBorder: "$blue500",
  primaryBorderHover: "$blue600",
  primarySolidHover: "$blue700",
  primarySolidContrast: "$white",
  primaryShadow: "$blue500",
  secondaryLight: "$purple200",
  secondaryLightHover: "$purple300",
  secondaryLightActive: "$purple400",
  secondaryLightContrast: "$purple600",
  secondary: "$purple600",
  secondaryBorder: "$purple500",
  secondaryBorderHover: "$purple600",
  secondarySolidHover: "$purple700",
  secondarySolidContrast: "$white",
  secondaryShadow: "$purple500",
  successLight: "$green200",
  successLightHover: "$green300",
  successLightActive: "$green400",
  successLightContrast: "$green700",
  success: "$green600",
  successBorder: "$green500",
  successBorderHover: "$green600",
  successSolidHover: "$green700",
  successSolidContrast: "$white",
  successShadow: "$green500",
  warningLight: "$yellow200",
  warningLightHover: "$yellow300",
  warningLightActive: "$yellow400",
  warningLightContrast: "$yellow700",
  warning: "$yellow600",
  warningBorder: "$yellow500",
  warningBorderHover: "$yellow600",
  warningSolidHover: "$yellow700",
  warningSolidContrast: "$white",
  warningShadow: "$yellow500",
  errorLight: "$red200",
  errorLightHover: "$red300",
  errorLightActive: "$red400",
  errorLightContrast: "$red600",
  error: "$red600",
  errorBorder: "$red500",
  errorBorderHover: "$red600",
  errorSolidHover: "$red700",
  errorSolidContrast: "$white",
  errorShadow: "$red500",
  neutralLight: "$gray100",
  neutralLightHover: "$gray200",
  neutralLightActive: "$gray300",
  neutralLightContrast: "$gray800",
  neutral: "$gray600",
  neutralBorder: "$gray400",
  neutralBorderHover: "$gray500",
  neutralSolidHover: "$gray600",
  neutralSolidContrast: "$white",
  neutralShadow: "$gray400",
  gradient: "linear-gradient(112deg, $cyan600 -63.59%, $pink600 -20.3%, $blue600 70.46%)",
  // accents
  accents0: "$gray50",
  accents1: "$gray100",
  accents2: "$gray200",
  accents3: "$gray300",
  accents4: "$gray400",
  accents5: "$gray500",
  accents6: "$gray600",
  accents7: "$gray700",
  accents8: "$gray800",
  accents9: "$gray900"
};
const defaultMedia = {
  xs: `(min-width: ${defaultTokens.breakpoints.xs})`,
  sm: `(min-width: ${defaultTokens.breakpoints.sm})`,
  md: `(min-width: ${defaultTokens.breakpoints.md})`,
  lg: `(min-width: ${defaultTokens.breakpoints.lg})`,
  xl: `(min-width: ${defaultTokens.breakpoints.xl})`,
  xsMin: `(min-width: ${defaultTokens.breakpoints.xs})`,
  smMin: `(min-width: ${defaultTokens.breakpoints.sm})`,
  mdMin: `(min-width: ${defaultTokens.breakpoints.md})`,
  lgMin: `(min-width: ${defaultTokens.breakpoints.lg})`,
  xlMin: `(min-width: ${defaultTokens.breakpoints.xl})`,
  xsMax: `(max-width: ${defaultTokens.breakpoints.xs})`,
  smMax: `(max-width: ${defaultTokens.breakpoints.sm})`,
  mdMax: `(max-width: ${defaultTokens.breakpoints.md})`,
  lgMax: `(max-width: ${defaultTokens.breakpoints.lg})`,
  xlMax: `(max-width: ${defaultTokens.breakpoints.xl})`,
  motion: "(prefers-reduced-motion: reduce)",
  safari: "not all and (min-resolution:.001dpcm)",
  hover: "(any-hover: hover)",
  dark: "(prefers-color-scheme: dark)",
  light: "(prefers-color-scheme: light)"
};
const defaultUtils = {
  p: value => ({
    padding: value
  }),
  pt: value => ({
    paddingTop: value
  }),
  pr: value => ({
    paddingRight: value
  }),
  pb: value => ({
    paddingBottom: value
  }),
  pl: value => ({
    paddingLeft: value
  }),
  px: value => ({
    paddingLeft: value,
    paddingRight: value
  }),
  py: value => ({
    paddingTop: value,
    paddingBottom: value
  }),
  m: value => ({
    margin: value
  }),
  mt: value => ({
    marginTop: value
  }),
  mr: value => ({
    marginRight: value
  }),
  mb: value => ({
    marginBottom: value
  }),
  ml: value => ({
    marginLeft: value
  }),
  mx: value => ({
    marginLeft: value,
    marginRight: value
  }),
  my: value => ({
    marginTop: value,
    marginBottom: value
  }),
  ta: value => ({
    textAlign: value
  }),
  tt: value => ({
    textTransform: value
  }),
  to: value => ({
    textOverflow: value
  }),
  d: value => ({
    display: value
  }),
  dflex: value => ({
    display: "flex",
    alignItems: value,
    justifyContent: value
  }),
  fd: value => ({
    flexDirection: value
  }),
  fw: value => ({
    flexWrap: value
  }),
  ai: value => ({
    alignItems: value
  }),
  ac: value => ({
    alignContent: value
  }),
  jc: value => ({
    justifyContent: value
  }),
  as: value => ({
    alignSelf: value
  }),
  fg: value => ({
    flexGrow: value
  }),
  fs: value => ({
    fontSize: value
  }),
  fb: value => ({
    flexBasis: value
  }),
  bc: value => ({
    backgroundColor: value
  }),
  bf: value => ({
    backdropFilter: value
  }),
  bg: value => ({
    background: value
  }),
  bgBlur: value => ({
    bf: "saturate(180%) blur(10px)",
    bg: value
  }),
  bgColor: value => ({
    backgroundColor: value
  }),
  backgroundClip: value => ({
    WebkitBackgroundClip: value,
    backgroundClip: value
  }),
  bgClip: value => ({
    WebkitBackgroundClip: value,
    backgroundClip: value
  }),
  br: value => ({
    borderRadius: value
  }),
  bw: value => ({
    borderWidth: value
  }),
  btrr: value => ({
    borderTopRightRadius: value
  }),
  bbrr: value => ({
    borderBottomRightRadius: value
  }),
  bblr: value => ({
    borderBottomLeftRadius: value
  }),
  btlr: value => ({
    borderTopLeftRadius: value
  }),
  bs: value => ({
    boxShadow: value
  }),
  ds: value => ({
    dropShadow: value
  }),
  shadow: value => ({
    boxShadow: value
  }),
  dshadow: value => ({
    dropShadow: value
  }),
  dropShadow: value => ({
    filter: `$dropShadows${value}`
  }),
  normalShadow: value => ({
    boxShadow: `0 4px 14px 0 $colors${value}`
  }),
  normalShadowVar: value => ({
    boxShadow: `0 4px 14px 0 ${value}`
  }),
  lh: value => ({
    lineHeight: value
  }),
  ov: value => ({
    overflow: value
  }),
  ox: value => ({
    overflowX: value
  }),
  oy: value => ({
    overflowY: value
  }),
  pe: value => ({
    pointerEvents: value
  }),
  events: value => ({
    pointerEvents: value
  }),
  us: value => ({
    WebkitUserSelect: value,
    userSelect: value
  }),
  userSelect: value => ({
    WebkitUserSelect: value,
    userSelect: value
  }),
  w: value => ({
    width: value
  }),
  h: value => ({
    height: value
  }),
  mw: value => ({
    maxWidth: value
  }),
  maxW: value => ({
    maxWidth: value
  }),
  mh: value => ({
    maxHeight: value
  }),
  maxH: value => ({
    maxHeight: value
  }),
  size: value => ({
    width: value,
    height: value
  }),
  minSize: value => ({
    minWidth: value,
    minHeight: value,
    width: value,
    height: value
  }),
  sizeMin: value => ({
    minWidth: value,
    minHeight: value,
    width: value,
    height: value
  }),
  maxSize: value => ({
    maxWidth: value,
    maxHeight: value
  }),
  sizeMax: value => ({
    maxWidth: value,
    maxHeight: value
  }),
  appearance: value => ({
    WebkitAppearance: value,
    appearance: value
  }),
  scale: value => ({
    transform: `scale(${value})`
  }),
  linearGradient: value => ({
    backgroundImage: `linear-gradient(${value})`
  }),
  tdl: value => ({
    textDecorationLine: value
  }),
  truncateText: value => ({
    maxWidth: value,
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis"
  }),
  textGradient: value => ({
    backgroundImage: `linear-gradient(${value})`,
    WebkitBackgroundClip: "text",
    WebkitTextFillColor: "transparent",
    "&::selection": {
      WebkitTextFillColor: "$colors$text"
    }
  })
};
const defaultThemeMap = {
  ...n,
  width: "space",
  height: "space",
  minWidth: "space",
  maxWidth: "space",
  minHeight: "space",
  maxHeight: "space",
  flexBasis: "space",
  gridTemplateColumns: "space",
  gridTemplateRows: "space",
  blockSize: "space",
  minBlockSize: "space",
  maxBlockSize: "space",
  inlineSize: "space",
  minInlineSize: "space",
  maxInlineSize: "space",
  borderWidth: "borderWeights"
};
/* harmony default export */ const common = ({
  prefix: "nextui",
  theme: {
    ...defaultTokens,
    colors: defaultColors,
    shadows: {},
    dropShadows: {}
  },
  media: defaultMedia,
  utils: defaultUtils,
  themeMap: defaultThemeMap
});
;// CONCATENATED MODULE: ./src/utils/color.ts

const getCssVar = (name, parent = null) => {
  if (typeof document === "undefined" || !name) {
    return "";
  }
  const target = parent || document.documentElement;
  const property = isCssVar(name) ? name.replace("var(", "").replace(")", "") : name.includes("--") ? name : `--${name}`;
  return getComputedStyle(target).getPropertyValue(property);
};
const isCssVar = property => {
  return property && (property == null ? void 0 : property.indexOf("var(")) === 0 ? true : false;
};

/**
 * This function allows validate if a string is a hexadecimal
 * value
 * @param str [string] hexadecimal value
 * @returns result [boolean]
 */
const isHex = str => {
  const exp = /#[a-fA-F0-9]{3,6}/g;
  return exp.test(str);
};

/**
 *
 * @param hex [string]
 * @param alpha [number]
 * @returns [string]
 */
const hexToRGBA = (hex, alpha = 1) => {
  let r = 0,
    g = 0,
    b = 0;

  // 3 digits
  if (hex.length == 4) {
    r = "0x" + hex[1] + hex[1];
    g = "0x" + hex[2] + hex[2];
    b = "0x" + hex[3] + hex[3];
    // 6 digits
  } else if (hex.length == 7) {
    r = "0x" + hex[1] + hex[2];
    g = "0x" + hex[3] + hex[4];
    b = "0x" + hex[5] + hex[6];
  }
  return `rgba(${+r},${+g},${+b},${alpha})`;
};
const isNormalColor = color => {
  let found = normalColors.find(el => el === color);
  return found !== undefined && found !== null;
};
const isSimpleColor = color => {
  let found = simpleColors.find(el => el === color);
  return found !== undefined && found !== null;
};

/**
 * Function that checks color name support in the current browser
 * @param strColor
 * @returns boolean
 */
const isColor = strColor => {
  let s = new Option().style;
  s.color = strColor;
  return s.color == strColor;
};
const hexToRgb = color => {
  const fullReg = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  const full = color.replace(fullReg, (_, r, g, b) => `${r}${r}${g}${g}${b}${b}`);
  const values = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(full);
  if (!values) {
    throw new Error(`Next UI: Unsupported ${color} color.`);
  }
  return [Number.parseInt(values[1], 16), Number.parseInt(values[2], 16), Number.parseInt(values[3], 16)];
};
const hexFromString = (str, defaultColor = "", returnLast = false) => {
  const fullReg = /#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3}$/g;
  const hexCodes = str.match(fullReg);
  if (hexCodes && hexCodes.length > 0) {
    return returnLast ? hexCodes[hexCodes.length - 1] : hexCodes;
  }
  return defaultColor;
};
const colorToRgbValues = colorProp => {
  const color = isCssVar(colorProp) ? getCssVar(colorProp) : colorProp;
  if (color.charAt(0) === "#") return hexToRgb(color);
  const safeColor = color.replace(/ /g, "");
  const colorType = color.substr(0, 4);
  const regArray = safeColor.match(/\((.+)\)/);
  if (!colorType.startsWith("rgb") || !regArray) {
    console.warn(`NextUI: Only supports ["RGB", "RGBA", "HEX"] color.`);
    return [0, 0, 0];
  }
  return regArray[1].split(",").map(str => Number.parseFloat(str));
};
const addColorAlpha = (colorProp, alpha = 1) => {
  if (!colorProp) return "";
  const color = isCssVar(colorProp) ? getCssVar(colorProp) : colorProp;
  if (isHex(color)) {
    return hexToRGBA(color, alpha);
  } else if (!/^#|rgb|RGB/.test(color)) {
    return color;
  }
  const [r, g, b] = colorToRgbValues(color);
  const safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;
  return `rgba(${r}, ${g}, ${b}, ${safeAlpha})`;
};
const rgbToRgba = (rgb, alpha = 1) => {
  const [r, g, b] = rgb.split(",").map(str => Number.parseFloat(str));
  const safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;
  return `rgba(${r}, ${g}, ${b}, ${safeAlpha})`;
};
function padZero(str, len) {
  len = len || 2;
  var zeros = new Array(len).join("0");
  return (zeros + str).slice(-len);
}
const invertHex = (hexProp, smooth = true) => {
  let hex = isCssVar(hexProp) ? getCssVar(hexProp) : hexProp;
  if (hex.indexOf("#") === 0) {
    hex = hex.slice(1);
  }
  // convert 3-digit hex to 6-digits.
  if (hex.length === 3) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }
  if (hex.length !== 6) {
    return hexProp;
  }
  let r = parseInt(hex.slice(0, 2), 16),
    g = parseInt(hex.slice(2, 4), 16),
    b = parseInt(hex.slice(4, 6), 16);
  if (smooth) {
    // http://stackoverflow.com/a/3943023/112731
    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? "#000000" : "#FFFFFF";
  }
  // invert color components
  r = 255 - r;
  g = 255 - g;
  b = 255 - b;

  // pad each with zeros and return
  return "#" + padZero(r.toString(16)) + padZero(g.toString(16)) + padZero(b.toString(16));
};
;// CONCATENATED MODULE: ./src/theme/colors/blue.ts
const blue = {
  blue50: "#EDF5FF",
  blue100: "#E1EFFF",
  blue200: "#CEE4FE",
  blue300: "#B7D5F8",
  blue400: "#96C1F2",
  blue500: "#5EA2EF",
  blue600: "#0072F5",
  blue700: "#005FCC",
  blue800: "#004799",
  blue900: "#00254D"
};
const blueDark = {
  blue50: "#10253E",
  blue100: "#102C4C",
  blue200: "#0F3158",
  blue300: "#0D3868",
  blue400: "#0A4281",
  blue500: "#0952A5",
  blue600: "#0072F5",
  blue700: "#3694FF",
  blue800: "#3694FF",
  blue900: "#EAF4FF"
};
;// CONCATENATED MODULE: ./src/theme/colors/purple.ts
const purple = {
  purple50: "#F7F2FD",
  purple100: "#F1E8FB",
  purple200: "#EADCF8",
  purple300: "#E0CBF5",
  purple400: "#D1B1F0",
  purple500: "#BC8EE9",
  purple600: "#7828C8",
  purple700: "#6622AA",
  purple800: "#4D1980",
  purple900: "#290E44"
};
const purpleDark = {
  purple50: "#1F0A33",
  purple100: "#240C3C",
  purple200: "#2E0F4D",
  purple300: "#3B1362",
  purple400: "#451773",
  purple500: "#571D91",
  purple600: "#7828C8",
  purple700: "#9750DD",
  purple800: "#B583E7",
  purple900: "#F7ECFC"
};
;// CONCATENATED MODULE: ./src/theme/colors/green.ts
const green = {
  green50: "#F1FDF7",
  green100: "#E8FCF1",
  green200: "#DAFBE8",
  green300: "#C8F9DD",
  green400: "#ADF5CC",
  green500: "#88F1B6",
  green600: "#17C964",
  green700: "#13A452",
  green800: "#108944",
  green900: "#06371B"
};
const greenDark = {
  green50: "#042F14",
  green100: "#06381B",
  green200: "#074A24",
  green300: "#0A6130",
  green400: "#0B7439",
  green500: "#0F9549",
  green600: "#17C964",
  green700: "#41EC8B",
  green800: "#78F2AD",
  green900: "#ECFDF4"
};
;// CONCATENATED MODULE: ./src/theme/colors/yellow.ts
const yellow = {
  yellow50: "#FEF9F0",
  yellow100: "#FEF5E7",
  yellow200: "#FDEFD8",
  yellow300: "#FCE7C5",
  yellow400: "#FBDBA7",
  yellow500: "#F9CB80",
  yellow600: "#F5A524",
  yellow700: "#B97509",
  yellow800: "#925D07",
  yellow900: "#4E3104"
};
const yellowDark = {
  yellow50: "#3A2503",
  yellow100: "#442B03",
  yellow200: "#583804",
  yellow300: "#704705",
  yellow400: "#845306",
  yellow500: "#A66908",
  yellow600: "#F5A524",
  yellow700: "#F6AD37",
  yellow800: "#F8C572",
  yellow900: "#FEF7EC"
};
;// CONCATENATED MODULE: ./src/theme/colors/red.ts
const red = {
  red50: "#FEF0F5",
  red100: "#FEE7EF",
  red200: "#FDD8E5",
  red300: "#FCC5D8",
  red400: "#FAA8C5",
  red500: "#F881AB",
  red600: "#F31260",
  red700: "#B80A47",
  red800: "#910838",
  red900: "#4E041E"
};
const redDark = {
  red50: "#300313",
  red100: "#300313",
  red200: "#44041A",
  red300: "#5C0523",
  red400: "#6F062B",
  red500: "#910838",
  red600: "#F31260",
  red700: "#F4256D",
  red800: "#F75F94",
  red900: "#FDD8E5"
};
;// CONCATENATED MODULE: ./src/theme/colors/cyan.ts
const cyan = {
  cyan50: "#F0FCFF",
  cyan100: "#E6FAFE",
  cyan200: "#D7F8FE",
  cyan300: "#C3F4FD",
  cyan400: "#A5EEFD",
  cyan500: "#7EE7FC",
  cyan600: "#06B7DB",
  cyan700: "#09AACD",
  cyan800: "#0E8AAA",
  cyan900: "#053B48"
};
const cyanDark = {
  cyan50: "#012A32",
  cyan100: "#023A46",
  cyan200: "#024B5A",
  cyan300: "#036072",
  cyan400: "#037086",
  cyan500: "#048EA9",
  cyan600: "#06B7DB",
  cyan700: "#33D9FA",
  cyan800: "#6FE4FB",
  cyan900: "#EBFBFE"
};
;// CONCATENATED MODULE: ./src/theme/colors/pink.ts
const pink = {
  pink50: "#FFF0FB",
  pink100: "#FFE5F8",
  pink200: "#FFD6F3",
  pink300: "#FFC2EE",
  pink400: "#FFA3E5",
  pink500: "#FF7AD9",
  pink600: "#FF4ECD",
  pink700: "#D6009A",
  pink800: "#B80084",
  pink900: "#4D0037"
};
const pinkDark = {
  pink50: "#330025",
  pink100: "#470033",
  pink200: "#5C0042",
  pink300: "#750054",
  pink400: "#8A0063",
  pink500: "#AD007C",
  pink600: "#FF4ECD",
  pink700: "#FF2EC4",
  pink800: "#FF6BD5",
  pink900: "#FFEBF9"
};
;// CONCATENATED MODULE: ./src/theme/colors/gray.ts
const gray = {
  gray50: "#F1F3F5",
  gray100: "#ECEEF0",
  gray200: "#E6E8EB",
  gray300: "#DFE3E6",
  gray400: "#D7DBDF",
  gray500: "#C1C8CD",
  gray600: "#889096",
  gray700: "#7E868C",
  gray800: "#687076",
  gray900: "#11181C"
};
const grayDark = {
  gray50: "#16181A",
  gray100: "#26292B",
  gray200: "#2B2F31",
  gray300: "#313538",
  gray400: "#3A3F42",
  gray500: "#4C5155",
  gray600: "#697177",
  gray700: "#787F85",
  gray800: "#9BA1A6",
  gray900: "#ECEDEE"
};
;// CONCATENATED MODULE: ./src/theme/light-theme.ts


/* harmony default export */ const light_theme = ({
  colors: {
    // background colors
    background: "$white",
    backgroundAlpha: "rgba(255, 255, 255, 0.8)",
    foreground: "$black",
    backgroundContrast: "$white",
    //semantic colors
    ...blue,
    ...purple,
    ...green,
    ...yellow,
    ...red,
    ...cyan,
    ...pink,
    ...gray,
    // misc
    textLight: addColorAlpha(gray.gray900, 0.2),
    text: "$gray900",
    linkLight: addColorAlpha(blue.blue600, 0.2),
    link: "$blue600",
    codeLight: "$pink100",
    code: "$pink600",
    selection: "$blue200",
    border: "rgba(0, 0, 0, 0.15)"
  },
  shadows: {
    xs: "0 2px 8px 1px rgb(104 112 118 / 0.07), 0 1px 1px -1px rgb(104 112 118 / 0.04)",
    sm: "0 2px 8px 2px rgb(104 112 118 / 0.07), 0 2px 4px -1px rgb(104 112 118 / 0.04)",
    md: "0 12px 20px 6px rgb(104 112 118 / 0.08)",
    lg: "0 12px 34px 6px rgb(104 112 118 / 0.18)",
    xl: "0 25px 65px 0px rgb(104 112 118 / 0.35)"
  },
  dropShadows: {
    xs: "drop-shadow(0 2px 4px rgb(104 112 118 / 0.07)) drop-shadow(0 1px 1px rgb(104 112 118 / 0.04))",
    sm: "drop-shadow(0 2px 8px rgb(104 112 118 / 0.07)) drop-shadow(0 2px 4px rgb(104 112 118 / 0.04))",
    md: "drop-shadow(0 4px 12px rgb(104 112 118 / 0.08)) drop-shadow(0 20px 8px rgb(104 112 118 / 0.04))",
    lg: "drop-shadow(0 12px 24px rgb(104 112 118 / 0.15)) drop-shadow(0 12px 14px rgb(104 112 118 / 0.1))",
    xl: "drop-shadow(0 25px 34px rgb(104 112 118 / 0.35))"
  }
});
;// CONCATENATED MODULE: ./src/theme/dark-theme.ts


/* harmony default export */ const dark_theme = ({
  colors: {
    // background
    background: "$black",
    backgroundAlpha: "rgba(0, 0, 0, 0.6)",
    foreground: "$white",
    backgroundContrast: "$accents0",
    //semantic colors
    ...blueDark,
    ...purpleDark,
    ...greenDark,
    ...yellowDark,
    ...redDark,
    ...cyanDark,
    ...pinkDark,
    ...grayDark,
    // brand colors
    primaryLight: "$blue50",
    primaryLightHover: "$blue100",
    primaryLightActive: "$blue200",
    primaryLightContrast: "$blue600",
    secondaryLight: "$purple50",
    secondaryLightHover: "$purple100",
    secondaryLightActive: "$purple200",
    secondaryLightContrast: "$purple800",
    secondary: "$purple700",
    secondaryBorder: "$purple500",
    secondaryBorderHover: "$purple600",
    secondarySolidHover: "$purple700",
    secondaryShadow: "$purple500",
    successLight: "$green50",
    successLightHover: "$green100",
    successLightActive: "$green200",
    warningLight: "$yellow50",
    warningLightHover: "$yellow100",
    warningLightActive: "$yellow200",
    errorLight: "$red50",
    errorLightHover: "$red100",
    errorLightActive: "$red200",
    errorLightContrast: "$red700",
    neutralLight: "$gray200",
    neutralLightHover: "$gray300",
    neutralLightActive: "$gray400",
    neutralSolidContrast: "$white",
    // misc
    textLight: addColorAlpha(grayDark.gray900, 0.2),
    text: "$gray900",
    linkLight: addColorAlpha(blueDark.blue600, 0.2),
    link: "$blue700",
    codeLight: "$cyan50",
    code: "$cyan600",
    selection: "$pink800",
    border: "rgba(255, 255, 255, 0.15)"
  },
  shadows: {
    xs: "0 2px 8px 1px rgb(0 0 0 / 0.07), 0 1px 1px -1px rgb(0 0 0 / 0.04)",
    sm: "0 2px 8px 2px rgb(0 0 0 / 0.07), 0 2px 4px -1px rgb(0 0 0 / 0.04)",
    md: "0 12px 20px 6px rgb(0 0 0 / 0.08)",
    lg: "0 12px 34px 6px rgb(0 0 0 / 0.18)",
    xl: "0 25px 65px 0px rgb(0 0 0 / 0.35)"
  },
  dropShadows: {
    xs: "drop-shadow(0 2px 4px rgb(0 0 0 / 0.07)) drop-shadow(0 1px 1px rgb(0 0 0 / 0.04))",
    sm: "drop-shadow(0 2px 8px rgb(0 0 0 / 0.07)) drop-shadow(0 2px 4px rgb(0 0 0 / 0.04))",
    md: "drop-shadow(0 4px 12px rgb(0 0 0 / 0.08)) drop-shadow(0 20px 8px rgb(0 0 0 / 0.04))",
    lg: "drop-shadow(0 12px 24px rgb(0 0 0 / 0.15)) drop-shadow(0 12px 14px rgb(0 0 0 / 0.1))",
    xl: "drop-shadow(0 25px 34px rgb(0 0 0 / 0.35))"
  }
});
;// CONCATENATED MODULE: ./src/theme/stitches.config.ts





const getStitchesTheme = targetTheme => {
  return deepMerge(targetTheme, commonTheme.theme);
};
const stitches = q({
  ...common,
  theme: {
    ...common.theme,
    shadows: {
      ...light_theme.shadows
    },
    dropShadows: {
      ...light_theme.dropShadows
    },
    colors: {
      ...common.theme.colors,
      ...light_theme.colors
    }
  }
});
const createThemeBase = stitches.createTheme;
const styled = stitches.styled;
const css = stitches.css;
const globalCss = stitches.globalCss;
const keyframes = stitches.keyframes;
const getCssText = stitches.getCssText;
const theme = stitches.theme;
const config = stitches.config;
const createTheme = ({
  type,
  theme,
  className
}) => {
  if (!type) {
    throw new Error("Theme type is required");
  }
  return createThemeBase(className || `${type}-theme`, deep_merge_deepMerge(type === "dark" ? dark_theme : light_theme, theme));
};

// stitches types
;// CONCATENATED MODULE: ./src/theme/theme-context.ts


const defaultContext = {
  isDark: false,
  theme: theme,
  type: "light"
};
const ThemeContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(defaultContext);
/* harmony default export */ const theme_context = (ThemeContext);
;// CONCATENATED MODULE: ./src/use-theme/use-theme.ts


const useTheme = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(theme_context);
/* harmony default export */ const use_theme = (useTheme);
;// CONCATENATED MODULE: ./src/use-theme/index.ts

/* harmony default export */ const src_use_theme = (use_theme);
;// CONCATENATED MODULE: ./src/use-ssr/use-ssr.ts

const isBrowser = () => {
  return Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
};
const useSSR = () => {
  const [browser, setBrowser] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    setBrowser(isBrowser());
  }, []);
  return {
    isBrowser: browser,
    isServer: !browser
  };
};
/* harmony default export */ const use_ssr = (useSSR);
;// CONCATENATED MODULE: ./src/use-ssr/index.ts

/* harmony default export */ const src_use_ssr = (use_ssr);
;// CONCATENATED MODULE: ./src/utils/collections.ts

const getId = () => {
  return Math.random().toString(32).slice(2, 10);
};
const hasChild = (children, child) => {
  const types = React.Children.map(children, item => {
    if (! /*#__PURE__*/React.isValidElement(item)) return null;
    return item.type;
  });
  return (types || []).includes(child);
};
const pick = (props, obj) => props.reduce((acc, prop) => {
  acc[prop] = obj[prop];
  return acc;
}, {});
const pickChild = (children, targetChild) => {
  let target = [];
  const withoutTargetChildren = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.map(children, item => {
    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item)) return item;
    if (item.type === targetChild) {
      target.push(item);
      return null;
    }
    return item;
  });
  const targetChildren = target.length >= 0 ? target : undefined;
  return [withoutTargetChildren, targetChildren];
};
const pickSingleChild = (children, targetChild) => {
  const [withoutTargetChildren, target] = pickChild(children, targetChild);
  let targetChildren = null;
  if (target && target.length >= 1) {
    targetChildren = target.length >= 0 ? target[0] : undefined;
  }
  return [withoutTargetChildren, targetChildren];
};
const isChildElement = (parent, child) => {
  if (!parent || !child) return false;
  // eslint-disable-next-line no-undef
  let node = child;
  while (node) {
    if (node === parent) return true;
    node = node.parentNode;
  }
  return false;
};
const collections_isBrowser = () => {
  return Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
};
const isMac = () => {
  if (!collections_isBrowser()) return false;
  return navigator.platform.toUpperCase().indexOf("MAC") >= 0;
};
const setChildrenIndex = (children, targetComponents = []) => {
  if (external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) === 0) return [];
  const allowAll = targetComponents.length === 0;
  const clone = (child, props = {}) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(child, props);
  let index = 0;
  return external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.map(children, item => {
    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item)) return item;
    index = index + 1;
    if (allowAll) return clone(item, {
      index
    });
    const isAllowed = targetComponents.find(child => child === item.type);
    if (isAllowed) return clone(item, {
      index
    });
    index = index - 1;
    return item;
  });
};
const flattenArray = arr => {
  return arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flattenArray(val) : val), []);
};
;// CONCATENATED MODULE: ./src/use-portal/use-portal.ts



const createElement = id => {
  const el = document.createElement("div");
  el.setAttribute("id", id);
  return el;
};
const usePortal = (selectId = getId(), getContainer) => {
  const id = `nextui-${selectId}`;
  const {
    isBrowser
  } = src_use_ssr();
  const [elSnapshot, setElSnapshot] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isBrowser ? createElement(id) : null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const customContainer = getContainer ? getContainer() : null;
    const parentElement = customContainer || document.body;
    const hasElement = parentElement == null ? void 0 : parentElement.querySelector(`#${id}`);
    const el = hasElement || createElement(id);
    if (!hasElement) {
      parentElement.appendChild(el);
    }
    setElSnapshot(el);
  }, []);
  return elSnapshot;
};
/* harmony default export */ const use_portal = (usePortal);
;// CONCATENATED MODULE: ./src/use-portal/index.ts

/* harmony default export */ const src_use_portal = (use_portal);
;// CONCATENATED MODULE: ./src/use-body-scroll/use-body-scroll.ts

const defaultOptions = {
  scrollLayer: false
};
const elementStack = new Map();
const isIos = () => {
  /* istanbul ignore next */
  if (typeof window === "undefined" || !window.navigator) return false;
  return /iP(ad|hone|od)/.test(window.navigator.platform);
};
const touchHandler = event => {
  if (event.touches && event.touches.length > 1) return true;
  event.preventDefault();
  return false;
};
const useBodyScroll = (elementRef, options) => {
  /* istanbul ignore next */
  if (typeof document === "undefined") return [false, t => t];
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const elRef = elementRef || (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(document.body);
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const [hidden, setHidden] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const safeOptions = {
    ...defaultOptions,
    ...(options || {})
  };

  // don't prevent touch event when layer contain scroll
  const isIosWithCustom = () => {
    if (safeOptions.scrollLayer) return false;
    return isIos();
  };

  // eslint-disable-next-line react-hooks/rules-of-hooks
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!elRef || !elRef.current) return;
    const lastOverflow = elRef.current.style.overflow;
    if (hidden) {
      if (elementStack.has(elRef.current)) return;
      if (!isIosWithCustom()) {
        elRef.current.style.overflow = "hidden";
      } else {
        document.addEventListener("touchmove", touchHandler, {
          passive: false
        });
      }
      elementStack.set(elRef.current, {
        last: lastOverflow
      });
      return;
    }

    // reset element overflow
    if (!elementStack.has(elRef.current)) return;
    if (!isIosWithCustom()) {
      const store = elementStack.get(elRef.current);
      elRef.current.style.overflow = store.last;
    } else {
      document.removeEventListener("touchmove", touchHandler);
    }
    elementStack.delete(elRef.current);
  }, [hidden, elRef]);
  return [hidden, setHidden];
};
/* harmony default export */ const use_body_scroll = (useBodyScroll);
;// CONCATENATED MODULE: ./src/use-body-scroll/index.ts

/* harmony default export */ const src_use_body_scroll = (use_body_scroll);
;// CONCATENATED MODULE: ./src/use-click-away/use-click-away.ts

const useClickAway = (ref, handler) => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const callback = event => {
      const el = ref.current;
      if (!event || !el || el.contains(event.target)) return;
      handler(event);
    };
    document.addEventListener("click", callback);
    return () => document.removeEventListener("click", callback);
  }, [ref, handler]);
};
/* harmony default export */ const use_click_away = (useClickAway);
;// CONCATENATED MODULE: ./src/use-click-away/index.ts

/* harmony default export */ const src_use_click_away = (use_click_away);
;// CONCATENATED MODULE: ./src/utils/console.ts
const warningStack = {};
const warn = (message, component) => {
  const tag = component ? ` [${component}]` : " ";
  const log = `[Next UI]${tag}: ${message}`;
  if (typeof console === "undefined") return;
  if (warningStack[log]) return;
  warningStack[log] = true;
  if (false) {}
  // eslint-disable-next-line no-console
  console.warn(log);
};
;// CONCATENATED MODULE: ./src/utils/assertion.ts
const __DEV__ = "production" !== "production";
const __TEST__ = (/* unused pure expression or super */ null && ("production" === "test"));
function isArray(value) {
  return Array.isArray(value);
}
function isEmptyArray(value) {
  return isArray(value) && value.length === 0;
}
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function") && !isArray(value);
}
function isEmptyObject(value) {
  return isObject(value) && Object.keys(value).length === 0;
}

// Empty assertions
function isEmpty(value) {
  if (isArray(value)) return isEmptyArray(value);
  if (isObject(value)) return isEmptyObject(value);
  if (value == null || value === "") return true;
  return false;
}

// Function assertions
function isFunction(value) {
  return typeof value === "function";
}
;// CONCATENATED MODULE: ./src/use-clipboard/use-clipboard.ts




const use_clipboard_defaultOptions = {
  onError: () => __DEV__ && warn("Failed to copy.", "use-clipboard")
};
const useClipboard = (options = use_clipboard_defaultOptions) => {
  const el = src_use_portal("clipboard");
  const copyText = (el, text) => {
    if (!el || !text) return;
    const selection = window.getSelection();
    if (!selection) return;
    el.style.whiteSpace = "pre";
    el.textContent = text;
    const range = window.document.createRange();
    selection.removeAllRanges();
    range.selectNode(el);
    selection.addRange(range);
    try {
      window.document.execCommand("copy");
    } catch (e) {
      options.onError && options.onError();
    }
    selection.removeAllRanges();
    if (el) {
      el.textContent = "";
    }
  };
  const copy = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(text => {
    copyText(el, text);
  }, [el]);
  return {
    copy
  };
};
/* harmony default export */ const use_clipboard = (useClipboard);
;// CONCATENATED MODULE: ./src/use-clipboard/index.ts

/* harmony default export */ const src_use_clipboard = (use_clipboard);
;// CONCATENATED MODULE: ./src/use-click-anywhere/use-click-anywhere.ts

const useClickAnyWhere = handler => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const callback = event => handler(event);
    document.addEventListener("click", callback);
    return () => document.removeEventListener("click", callback);
  }, [handler]);
};
/* harmony default export */ const use_click_anywhere = (useClickAnyWhere);
;// CONCATENATED MODULE: ./src/use-click-anywhere/index.ts

/* harmony default export */ const src_use_click_anywhere = (use_click_anywhere);
;// CONCATENATED MODULE: ./src/use-input/use-input.ts

const useInput = initialValue => {
  const [value, setValue, currentRef] = src_use_current_state(initialValue);
  return {
    value,
    setValue,
    currentRef,
    reset: () => setValue(initialValue),
    bindings: {
      value,
      onChange: event => {
        if (typeof event === "object" && event.target) {
          setValue(event.target.value);
        } else {
          setValue(event);
        }
      }
    }
  };
};
/* harmony default export */ const use_input = (useInput);
;// CONCATENATED MODULE: ./src/use-input/index.ts

/* harmony default export */ const src_use_input = (use_input);
;// CONCATENATED MODULE: ./src/utils/object.ts
const object_isObject = target => target && typeof target === "object";
const renameProp = (oldProp, newProp, {
  [oldProp]: old,
  ...others
}) => ({
  [newProp]: old,
  ...others
});

// copy an object without reference
const copyObject = obj => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  return {
    ...obj
  };
};

// copy an object omit some keys
const omitObject = (obj, omitKeys) => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  const newObj = {
    ...obj
  };
  omitKeys.forEach(key => newObj[key] && delete newObj[key]);
  return newObj;
};

// clean undefined and null values
const cleanObject = obj => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  const newObj = {
    ...obj
  };
  Object.keys(newObj).forEach(key => {
    if (newObj[key] === undefined || newObj[key] === null) {
      delete newObj[key];
    }
  });
  return newObj;
};
const cleanObjectKeys = (obj, keys = []) => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  const newObj = {
    ...obj
  };
  keys.forEach(key => {
    if (newObj[key]) {
      delete newObj[key];
    }
  });
  return newObj;
};
const getKeyValue = (obj, key) => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  return obj[key];
};

/**
 * Get value from a deeply nested object using a string path.
 * Memorizes the value.
 * @param obj - the object
 * @param path - the string path
 * @param fallback  - the fallback value
 */
const getProp = (obj, path, fallback, index) => {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj) break;
    obj = obj[key[index]];
  }
  return obj === undefined ? fallback : obj;
};

/**
 * Converting an array of objects into a single object.
 * @param arr - the array of objects
 * @returns the single object
 */
const arrayToObject = arr => {
  if (!arr.length || !Array.isArray(arr)) return {};
  return arr.reduce((acc, item) => {
    return {
      ...acc,
      ...item
    };
  }, {});
};
;// CONCATENATED MODULE: ./src/use-keyboard/codes.ts
/**
 * KeyBinding Codes
 * The content of this file is based on the design of the open source project "microsoft/vscode",
 *   Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * We inherit the KeyMod values from "microsoft/vscode",
 * but use the Browser's KeyboardEvent event implementation, and all values are used only as identification.
 */

const KeyCode = {
  Unknown: 0,
  Backspace: 8,
  Tab: 9,
  Enter: 13,
  Shift: 16,
  Ctrl: 17,
  Alt: 18,
  PauseBreak: 19,
  CapsLock: 20,
  Escape: 27,
  Space: 32,
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  LeftArrow: 37,
  UpArrow: 38,
  RightArrow: 39,
  DownArrow: 40,
  Insert: 45,
  Delete: 46,
  KEY_0: 48,
  KEY_1: 49,
  KEY_2: 50,
  KEY_3: 51,
  KEY_4: 52,
  KEY_5: 53,
  KEY_6: 54,
  KEY_7: 55,
  KEY_8: 56,
  KEY_9: 57,
  KEY_A: 65,
  KEY_B: 66,
  KEY_C: 67,
  KEY_D: 68,
  KEY_E: 69,
  KEY_F: 70,
  KEY_G: 71,
  KEY_H: 72,
  KEY_I: 73,
  KEY_J: 74,
  KEY_K: 75,
  KEY_L: 76,
  KEY_M: 77,
  KEY_N: 78,
  KEY_O: 79,
  KEY_P: 80,
  KEY_Q: 81,
  KEY_R: 82,
  KEY_S: 83,
  KEY_T: 84,
  KEY_U: 85,
  KEY_V: 86,
  KEY_W: 87,
  KEY_X: 88,
  KEY_Y: 89,
  KEY_Z: 90,
  Meta: 91,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  NumLock: 144,
  ScrollLock: 145,
  Equal: 187,
  Minus: 189,
  Backquote: 192,
  Backslash: 220
};
const KeyMod = {
  CtrlCmd: 1 << 11 >>> 0,
  Shift: 1 << 10 >>> 0,
  Alt: 1 << 9 >>> 0,
  WinCtrl: 1 << 8 >>> 0
};
;// CONCATENATED MODULE: ./src/use-keyboard/helper.ts




/* istanbul ignore next */
const getCtrlKeysByPlatform = () => {
  return {
    CtrlCmd: isMac() ? "metaKey" : "ctrlKey",
    WinCtrl: isMac() ? "ctrlKey" : "metaKey"
  };
};
const getActiveModMap = bindings => {
  const modBindings = bindings.filter(item => !!getKeyValue(KeyMod, item));
  const activeModMap = {
    CtrlCmd: false,
    Shift: false,
    Alt: false,
    WinCtrl: false
  };
  modBindings.forEach(code => {
    const modKey = getKeyValue(KeyMod, code);
    activeModMap[modKey] = true;
  });
  return activeModMap;
};
;// CONCATENATED MODULE: ./src/use-keyboard/use-keyboard.ts




const useKeyboard = (handler, keyBindings, options = {}) => {
  const bindings = Array.isArray(keyBindings) ? keyBindings : [keyBindings];
  const {
    disableGlobalEvent = false,
    capture = false,
    stopPropagation = false,
    preventDefault = false,
    event = "keydown"
  } = options;
  const activeModMap = getActiveModMap(bindings);
  const keyCodes = bindings.filter(item => !getKeyValue(KeyMod, item));
  const {
    CtrlCmd,
    WinCtrl
  } = getCtrlKeysByPlatform();
  const eventHandler = event => {
    if (activeModMap.Shift && !event.shiftKey) return;
    if (activeModMap.Alt && !event.altKey) return;
    if (activeModMap.CtrlCmd && !event[CtrlCmd]) return;
    if (activeModMap.WinCtrl && !event[WinCtrl]) return;
    if (keyCodes.length > 0 && !keyCodes.includes(event.keyCode)) return;
    if (stopPropagation) {
      event.stopPropagation();
    }
    if (preventDefault) {
      event.preventDefault();
    }
    handler && handler(event);
  };
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!disableGlobalEvent) {
      document.addEventListener(event, eventHandler);
    }
    return () => {
      document.removeEventListener(event, eventHandler);
    };
  }, [disableGlobalEvent]);
  const elementBindingHandler = (elementEventType, isCapture = false) => {
    if (elementEventType !== event) return () => {};
    if (isCapture !== capture) return () => {};
    return e => eventHandler(e);
  };
  return {
    bindings: {
      onKeyDown: elementBindingHandler("keydown"),
      onKeyDownCapture: elementBindingHandler("keydown", true),
      onKeyPress: elementBindingHandler("keypress"),
      onKeyPressCapture: elementBindingHandler("keypress", true),
      onKeyUp: elementBindingHandler("keyup"),
      onKeyUpCapture: elementBindingHandler("keyup", true)
    }
  };
};
/* harmony default export */ const use_keyboard = (useKeyboard);
;// CONCATENATED MODULE: ./src/use-keyboard/index.ts



/* harmony default export */ const src_use_keyboard = (use_keyboard);
;// CONCATENATED MODULE: ./src/utils/numbers.ts
/**
 * Convert a value to percentage based on lower and upper bound values
 *
 * @param value the value in number
 * @param min the minimum value
 * @param max the maximum value
 */
function valueToPercent(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function range(start, end) {
  const length = end - start + 1;
  return Array.from({
    length
  }, (_, index) => index + start);
}
;// CONCATENATED MODULE: ./src/use-pagination/index.ts


const DOTS = "dots";
const usePagination = ({
  page,
  total,
  siblings = 1,
  boundaries = 1,
  initialPage = 1,
  onChange
}) => {
  const [activePage, setActivePage] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(page || initialPage);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (page && page !== activePage) {
      setActivePage(page);
    }
  }, [page]);
  const onChangeActivePage = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(newPage => {
    setActivePage(newPage);
    onChange == null ? void 0 : onChange(newPage);
  }, [setActivePage, onChange]);
  const setPage = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(pageNumber => {
    if (pageNumber <= 0) {
      onChangeActivePage(1);
    } else if (pageNumber > total) {
      onChangeActivePage(total);
    } else {
      onChangeActivePage(pageNumber);
    }
  }, [onChangeActivePage, total]);
  const next = () => setPage(activePage + 1);
  const previous = () => setPage(activePage - 1);
  const first = () => setPage(1);
  const last = () => setPage(total);
  const paginationRange = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;
    if (totalPageNumbers >= total) {
      return range(1, total);
    }
    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);
    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);

    /*
     * We do not want to show dots if there is only one position left
     * after/before the left/right page count as that would lead to a change if our Pagination
     * component size which we do not want
     */
    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;
    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);
    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = siblings * 2 + boundaries + 2;
      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];
    }
    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = boundaries + 1 + 2 * siblings;
      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];
    }
    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];
  }, [total, siblings, activePage]);
  return {
    range: paginationRange,
    active: activePage,
    setPage,
    next,
    previous,
    first,
    last
  };
};
/* harmony default export */ const use_pagination = (usePagination);
;// CONCATENATED MODULE: ./src/use-scroll-position/use-scroll-position.ts

const use_scroll_position_isBrowser = typeof window !== "undefined";
function getScrollPosition(element) {
  if (!use_scroll_position_isBrowser) return {
    x: 0,
    y: 0
  };
  if (!element) {
    return {
      x: window.scrollX,
      y: window.scrollY
    };
  }
  return {
    x: element.scrollLeft,
    y: element.scrollTop
  };
}
const useScrollPosition = props => {
  const {
    elementRef,
    wait = 30,
    callback,
    enabled
  } = props;
  const position = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(enabled ? getScrollPosition(elementRef == null ? void 0 : elementRef.current) : {
    x: 0,
    y: 0
  });
  let throttleTimeout = null;
  const handler = () => {
    const currPos = getScrollPosition(elementRef == null ? void 0 : elementRef.current);
    if (typeof callback === "function") {
      callback({
        prevPos: position.current,
        currPos
      });
    }
    position.current = currPos;
    throttleTimeout = null;
  };
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!enabled) return;
    const handleScroll = () => {
      if (wait) {
        if (throttleTimeout === null) {
          throttleTimeout = setTimeout(handler, wait);
        }
      } else {
        handler();
      }
    };
    const target = (elementRef == null ? void 0 : elementRef.current) || window;
    target.addEventListener("scroll", handleScroll);
    return () => target.removeEventListener("scroll", handleScroll);
  }, [elementRef == null ? void 0 : elementRef.current, wait, enabled]);
  return position.current;
};
/* harmony default export */ const use_scroll_position = (useScrollPosition);
;// CONCATENATED MODULE: ./src/use-scroll-position/index.ts

/* harmony default export */ const src_use_scroll_position = (use_scroll_position);
;// CONCATENATED MODULE: ./src/use-intersection-observer/use-intersection-observer.ts

function useIntersectionObserver(elementRef, {
  threshold = 0,
  root = null,
  rootMargin = "0%",
  freezeOnceVisible = false
} = {}) {
  const [entry, setEntry] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)();
  const isFrozen = (entry == null ? void 0 : entry.isIntersecting) && freezeOnceVisible;
  const isVisible = !!(entry != null && entry.isIntersecting);
  const updateEntry = ([entry]) => {
    setEntry(entry);
  };
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (typeof window === "undefined") {
      return;
    }
    const node = elementRef == null ? void 0 : elementRef.current; // DOM Ref
    const hasIOSupport = !!window.IntersectionObserver;
    if (!hasIOSupport || isFrozen || !node) return;
    const observerParams = {
      threshold,
      root,
      rootMargin
    };
    const observer = new IntersectionObserver(updateEntry, observerParams);
    observer.observe(node);
    return () => observer.disconnect();
  }, [elementRef, threshold, root, rootMargin, isFrozen]);
  return {
    entry,
    setEntry,
    isVisible,
    isFrozen
  };
}
/* harmony default export */ const use_intersection_observer = (useIntersectionObserver);
;// CONCATENATED MODULE: ./src/use-intersection-observer/index.ts

/* harmony default export */ const src_use_intersection_observer = (use_intersection_observer);
;// CONCATENATED MODULE: ./src/use-drip/use-drip.ts

const useDrip = (initialValue = false, ref) => {
  const [dripVisible, setDripVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue);
  const [dripX, setDripX] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(0);
  const [dripY, setDripY] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(0);
  const dripCompletedHandle = () => {
    setDripVisible(false);
    setDripX(0);
    setDripY(0);
  };
  const clickHandler = event => {
    if (!ref.current) return;
    const rect = ref.current.getBoundingClientRect();
    setDripVisible(true);
    setDripX(event.clientX - rect.left);
    setDripY(event.clientY - rect.top);
  };
  return {
    visible: dripVisible,
    x: dripX,
    y: dripY,
    onClick: clickHandler,
    onCompleted: dripCompletedHandle
  };
};
/* harmony default export */ const use_drip = (useDrip);
;// CONCATENATED MODULE: ./src/use-drip/index.ts

/* harmony default export */ const src_use_drip = (use_drip);
;// CONCATENATED MODULE: ./src/utils/with-defaults.ts
const withDefaults = (component, defaultProps) => {
  component.defaultProps = defaultProps;
  return component;
};
/* harmony default export */ const with_defaults = (withDefaults);
;// CONCATENATED MODULE: ./src/utils/clsx.ts
/* eslint-disable no-shadow-restricted-names */
/* eslint-disable no-plusplus */
function toVal(mix) {
  var k,
    y,
    str = "";
  if (typeof mix === "string" || typeof mix === "number") {
    str += mix;
  } else if (typeof mix === "object") {
    if (Array.isArray(mix)) {
      for (k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if (y = toVal(mix[k])) {
            str && (str += " ");
            str += y;
          }
        }
      }
    } else {
      for (k in mix) {
        if (mix[k]) {
          str && (str += " ");
          str += k;
        }
      }
    }
  }
  return str;
}
/* harmony default export */ function clsx(...args) {
  var i = 0,
    tmp,
    x,
    str = "";
  while (i < args.length) {
    if (tmp = args[i++]) {
      if (x = toVal(tmp)) {
        str && (str += " ");
        str += x;
      }
    }
  }
  return str;
}
// EXTERNAL MODULE: ../../node_modules/react/jsx-dev-runtime.js
var jsx_dev_runtime = __webpack_require__(904);
;// CONCATENATED MODULE: ./src/utils/drip.tsx
var _jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/drip.tsx";





const defaultProps = {
  visible: false,
  x: 0,
  y: 0,
  className: ""
};
const expand = keyframes({
  "0%": {
    opacity: 0,
    transform: "scale(0.25)"
  },
  "30%": {
    opacity: 1
  },
  "80%": {
    opacity: 0.5
  },
  "100%": {
    transform: "scale(28)",
    opacity: 0
  }
});
const StyledDrip = styled("div", {
  position: "absolute",
  left: 0,
  right: 0,
  top: 0,
  bottom: 0,
  "& svg": {
    position: "absolute",
    animation: `350ms linear ${expand}`,
    animationFillMode: "forwards",
    width: "$md",
    height: "$md"
  }
});
const Drip = ({
  visible,
  x,
  y,
  color,
  onCompleted,
  className,
  ...props
}) => {
  const dripRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const top = Number.isNaN(+y) ? 0 : y - 10;
  const left = Number.isNaN(+x) ? 0 : x - 10;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let drip = dripRef.current;
    if (!drip) return;
    drip.addEventListener("animationend", onCompleted);
    return () => {
      if (!drip) return;
      drip.removeEventListener("animationend", onCompleted);
    };
  });
  if (!visible) return null;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDrip, {
    ref: dripRef,
    className: clsx("nextui-drip", className),
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
      height: "20",
      style: {
        top,
        left
      },
      viewBox: "0 0 20 20",
      width: "20",
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("g", {
        fill: "none",
        fillRule: "evenodd",
        stroke: "none",
        strokeWidth: "1",
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("g", {
          className: "nextui-drip-filler",
          fill: color,
          children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("rect", {
            height: "100%",
            rx: "10",
            width: "100%"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 83,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 82,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 81,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 80,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 79,
    columnNumber: 5
  }, undefined);
};
const MemoDrip = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Drip);
/* harmony default export */ const drip = (with_defaults(MemoDrip, defaultProps));
;// CONCATENATED MODULE: ./src/css-baseline/css-baseline.tsx
var css_baseline_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/css-baseline/css-baseline.tsx";



const globalStyles = globalCss({
  "*, *:before, *:after": {
    boxSizing: "border-box",
    textRendering: "geometricPrecision",
    WebkitTapHighlightColor: "transparent"
  },
  html: {
    fontSize: "$base"
  },
  body: {
    margin: 0,
    padding: 0,
    minHeight: "100%",
    position: "relative",
    overflowX: "hidden",
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    textRendering: "optimizeLegibility",
    fontSize: "$base",
    lineHeight: "$md",
    fontFamily: "$sans"
  },
  "html, body": {
    backgroundColor: "$background",
    color: "$text"
  },
  "p, small": {
    color: "inherit",
    letterSpacing: "$tighter",
    fontWeight: "$normal",
    fontFamily: "$sans"
  },
  p: {
    fontSize: "$base",
    lineHeight: "$lg"
  },
  small: {
    margin: 0,
    lineHeight: "$xs",
    fontSize: "$xs"
  },
  b: {
    fontWeight: "$semibold"
  },
  span: {
    fontSize: "inherit",
    color: "inherit",
    fontWeight: "inherit"
  },
  img: {
    maxWidth: "100%"
  },
  a: {
    cursor: "pointer",
    fontSize: "inherit",
    WebkitTouchCallout: "none",
    WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
    WebkitBoxAlign: "center",
    alignItems: "center",
    color: "$link",
    textDecoration: "none"
  },
  "a:hover": {
    textDecoration: "none"
  },
  "ul,ol": {
    padding: 0,
    listStyleType: "none",
    margin: "$sm $sm $sm $lg",
    color: "$foreground"
  },
  ol: {
    listStyleType: "decimal"
  },
  li: {
    marginBottom: "$5",
    fontSize: "$base",
    lineHeight: "$lg"
  },
  "h1,h2,h3,h4,h5,h6": {
    color: "inherit",
    margin: "0 0 $5 0"
  },
  h1: {
    letterSpacing: "$tighter",
    fontSize: "$5xl",
    lineHeight: "$md",
    fontWeight: "$bold"
  },
  h2: {
    letterSpacing: "$tighter",
    fontSize: "$4xl",
    fontWeight: "$semibold"
  },
  h3: {
    letterSpacing: "$tighter",
    fontSize: "$2xl",
    fontWeight: "$semibold"
  },
  h4: {
    letterSpacing: "$tighter",
    fontSize: "$xl",
    fontWeight: "$semibold"
  },
  h5: {
    letterSpacing: "$tight",
    fontSize: "$md",
    fontWeight: "$semibold"
  },
  h6: {
    letterSpacing: "$tight",
    fontSize: "$sm",
    fontWeight: "$semibold"
  },
  "button, input, select,textarea": {
    fontFamily: "inherit",
    fontSize: "inherit",
    lineHeight: "inherit",
    color: "inherit",
    margin: 0
  },
  "button:focus, input:focus, select:focus, textarea:focus": {
    outline: "none"
  },
  code: {
    color: "$code",
    padding: "$1 $2",
    borderRadius: "$xs",
    bg: "$codeLight",
    fontFamily: "$mono",
    fontSize: "$sm",
    whiteSpace: "pre-wrap",
    transition: "opacity 0.25s ease 0s"
  },
  "code:hover": {
    opacity: 0.8
  },
  pre: {
    overflow: "auto",
    whiteSpace: "pre",
    textAlign: "left",
    fontSize: "$sm",
    borderRadius: "$lg",
    padding: "$md $lg",
    margin: "$lg 0",
    fontFamily: "$mono",
    lineHeight: "$md",
    webkitOverflowScrolling: "touch"
  },
  "pre code": {
    color: "$foreground",
    fontSize: "$sm",
    lineHeight: "$sm",
    whiteSpace: "pre"
  },
  "pre code:before,pre code:after": {
    display: "none"
  },
  "pre p": {
    margin: 0
  },
  "pre::-webkit-scrollbar": {
    display: "none",
    width: 0,
    height: 0,
    background: "transparent"
  },
  hr: {
    background: "$border",
    borderColor: "transparent",
    borderWidth: "0px",
    borderStyle: "none",
    height: "1px"
  },
  details: {
    backgroundColor: "$accents1",
    border: "none"
  },
  "details:focus, details:hover, details:active": {
    outline: "none"
  },
  summary: {
    cursor: "pointer",
    userSelect: "none",
    listStyle: "none",
    outline: "none"
  },
  "summary::-webkit-details-marker, summary::before": {
    display: "none"
  },
  "summary::-moz-list-bullet": {
    fontSize: 0
  },
  "summary:focus, summary:hover, summary:active": {
    outline: "none",
    listStyle: "none"
  },
  "::selection": {
    backgroundColor: "$selection"
  },
  blockquote: {
    padding: "$md $lg",
    color: "$accents7",
    backgroundColor: "$accents0",
    borderRadius: "$lg",
    margin: "$10 0"
  },
  "blockquote *:first-child": {
    marginTop: 0
  },
  "blockquote *:last-child": {
    marginBottom: 0
  },
  kbd: {
    width: "fit-content",
    textAlign: "center",
    display: "inline-block",
    color: "$accents8",
    bg: "$accents0",
    border: "1px solid $border",
    boxShadow: "0 0 1px 0 rgb(0 0 0 / 14%)",
    fontFamily: "$sans",
    borderRadius: "5px",
    padding: "$1 $3",
    mx: "$1",
    lineHeight: "$sm",
    fontSize: "$sm"
  },
  "kbd + kbd": {
    ml: "$2"
  },
  "dl, dd, hr, figure, p": {
    margin: 0
  }
});
const flushCSS = () => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("style", {
  dangerouslySetInnerHTML: {
    __html: getCssText()
  },
  id: "stitches"
}, void 0, false, {
  fileName: css_baseline_jsxFileName,
  lineNumber: 241,
  columnNumber: 24
}, undefined);
const CssBaseline = ({
  children
}) => {
  globalStyles();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)((external_root_React_commonjs2_react_commonjs_react_amd_react_default()).Fragment, {
    children: children
  }, void 0, false, {
    fileName: css_baseline_jsxFileName,
    lineNumber: 246,
    columnNumber: 10
  }, undefined);
};
const MemoCssBaseline = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(CssBaseline);
MemoCssBaseline.flush = flushCSS;
/* harmony default export */ const css_baseline = (MemoCssBaseline);
;// CONCATENATED MODULE: ../../node_modules/@react-stately/data/dist/module.js

function $0d86e9c8f07f9a7b$export$762f73dccccd255d(options) {
  let {
    initialItems = [],
    initialSelectedKeys: initialSelectedKeys,
    getKey = item => item.id || item.key,
    filter: filter,
    initialFilterText = ''
  } = options;
  // Store both items and filteredItems in state so we can go back to the unfiltered list
  let [state, setState] = $d70Aq$useState({
    items: initialItems,
    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),
    filterText: initialFilterText
  });
  let filteredItems = $d70Aq$useMemo(() => filter ? state.items.filter(item => filter(item, state.filterText)) : state.items, [state.items, state.filterText, filter]);
  return {
    ...state,
    items: filteredItems,
    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({
      getKey: getKey
    }, setState),
    getItem(key) {
      return state.items.find(item => getKey(item) === key);
    }
  };
}
function $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(opts, dispatch) {
  let {
    cursor: cursor,
    getKey: getKey
  } = opts;
  return {
    setSelectedKeys(selectedKeys) {
      dispatch(state => ({
        ...state,
        selectedKeys: selectedKeys
      }));
    },
    setFilterText(filterText) {
      dispatch(state => ({
        ...state,
        filterText: filterText
      }));
    },
    insert(index, ...values) {
      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, index, ...values));
    },
    insertBefore(key, ...values) {
      dispatch(state => {
        let index = state.items.findIndex(item => getKey(item) === key);
        if (index === -1) return;
        return $0d86e9c8f07f9a7b$var$insert(state, index, ...values);
      });
    },
    insertAfter(key, ...values) {
      dispatch(state => {
        let index = state.items.findIndex(item => getKey(item) === key);
        if (index === -1) return;
        return $0d86e9c8f07f9a7b$var$insert(state, index + 1, ...values);
      });
    },
    prepend(...values) {
      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, 0, ...values));
    },
    append(...values) {
      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, state.items.length, ...values));
    },
    remove(...keys) {
      dispatch(state => {
        let keySet = new Set(keys);
        let items = state.items.filter(item => !keySet.has(getKey(item)));
        let selection = 'all';
        if (state.selectedKeys !== 'all') {
          selection = new Set(state.selectedKeys);
          for (let key of keys) selection.delete(key);
        }
        if (cursor == null && items.length === 0) selection = new Set();
        return {
          ...state,
          items: items,
          selectedKeys: selection
        };
      });
    },
    removeSelectedItems() {
      dispatch(state => {
        if (state.selectedKeys === 'all') return {
          ...state,
          items: [],
          selectedKeys: new Set()
        };
        let selectedKeys = state.selectedKeys;
        let items = state.items.filter(item => !selectedKeys.has(getKey(item)));
        return {
          ...state,
          items: items,
          selectedKeys: new Set()
        };
      });
    },
    move(key, toIndex) {
      dispatch(state => {
        let index = state.items.findIndex(item => getKey(item) === key);
        if (index === -1) return state;
        let copy = state.items.slice();
        let [item1] = copy.splice(index, 1);
        copy.splice(toIndex, 0, item1);
        return {
          ...state,
          items: copy
        };
      });
    },
    moveBefore(key1, keys) {
      dispatch(state => {
        let toIndex = state.items.findIndex(item => getKey(item) === key1);
        if (toIndex === -1) return state;
        // Find indices of keys to move. Sort them so that the order in the list is retained.
        let keyArray = Array.isArray(keys) ? keys : [...keys];
        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();
        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex);
      });
    },
    moveAfter(key2, keys) {
      dispatch(state => {
        let toIndex = state.items.findIndex(item => getKey(item) === key2);
        if (toIndex === -1) return state;
        let keyArray = Array.isArray(keys) ? keys : [...keys];
        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();
        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex + 1);
      });
    },
    update(key, newValue) {
      dispatch(state => {
        let index = state.items.findIndex(item => getKey(item) === key);
        if (index === -1) return state;
        return {
          ...state,
          items: [...state.items.slice(0, index), newValue, ...state.items.slice(index + 1)]
        };
      });
    }
  };
}
function $0d86e9c8f07f9a7b$var$insert(state, index, ...values) {
  return {
    ...state,
    items: [...state.items.slice(0, index), ...values, ...state.items.slice(index)]
  };
}
function $0d86e9c8f07f9a7b$var$move(state, indices, toIndex) {
  // Shift the target down by the number of items being moved from before the target
  for (let index of indices) if (index < toIndex) toIndex--;
  let moves = indices.map(from => ({
    from: from,
    to: toIndex++
  }));
  // Shift later from indices down if they have a larger index
  for (let i = 0; i < moves.length; i++) {
    let a = moves[i].from;
    for (let j = i; j < moves.length; j++) {
      let b = moves[j].from;
      if (b > a) moves[j].from--;
    }
  }
  // Interleave the moves so they can be applied one by one rather than all at once
  for (let i1 = 0; i1 < moves.length; i1++) {
    let a = moves[i1];
    for (let j = moves.length - 1; j > i1; j--) {
      let b = moves[j];
      if (b.from < a.to) a.to++;else b.from++;
    }
  }
  let copy = state.items.slice();
  for (let move of moves) {
    let [item] = copy.splice(move.from, 1);
    copy.splice(move.to, 0, item);
  }
  return {
    ...state,
    items: copy
  };
}
function $f86e6c1ec7da6ebb$var$reducer(data, action) {
  let selectedKeys;
  switch (data.state) {
    case 'idle':
    case 'error':
      switch (action.type) {
        case 'loading':
        case 'loadingMore':
        case 'sorting':
        case 'filtering':
          var _filterText, _sortDescriptor;
          return {
            ...data,
            filterText: (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === 'loading' ? [] : data.items,
            sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,
            abortController: action.abortController
          };
        case 'update':
          return {
            ...data,
            ...action.updater(data)
          };
        case 'success':
        case 'error':
          return data;
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    case 'loading':
    case 'sorting':
    case 'filtering':
      switch (action.type) {
        case 'success':
          // Ignore if there is a newer abortcontroller in state.
          // This means that multiple requests were going at once.
          // We want to take only the latest result.
          if (action.abortController !== data.abortController) return data;
          var _selectedKeys;
          selectedKeys = (_selectedKeys = action.selectedKeys) !== null && _selectedKeys !== void 0 ? _selectedKeys : data.selectedKeys;
          var _filterText1, _sortDescriptor1;
          return {
            ...data,
            filterText: (_filterText1 = action.filterText) !== null && _filterText1 !== void 0 ? _filterText1 : data.filterText,
            state: 'idle',
            items: [...action.items],
            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),
            sortDescriptor: (_sortDescriptor1 = action.sortDescriptor) !== null && _sortDescriptor1 !== void 0 ? _sortDescriptor1 : data.sortDescriptor,
            abortController: null,
            cursor: action.cursor
          };
        case 'error':
          if (action.abortController !== data.abortController) return data;
          return {
            ...data,
            state: 'error',
            error: action.error,
            abortController: null
          };
        case 'loading':
        case 'loadingMore':
        case 'sorting':
        case 'filtering':
          // We're already loading, and another load was triggered at the same time.
          // We need to abort the previous load and start a new one.
          data.abortController.abort();
          var _filterText2;
          return {
            ...data,
            filterText: (_filterText2 = action.filterText) !== null && _filterText2 !== void 0 ? _filterText2 : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === 'loading' ? [] : data.items,
            abortController: action.abortController
          };
        case 'update':
          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).
          // Update data but don't abort previous load.
          return {
            ...data,
            ...action.updater(data)
          };
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    case 'loadingMore':
      switch (action.type) {
        case 'success':
          var _selectedKeys1;
          selectedKeys = data.selectedKeys === 'all' || action.selectedKeys === 'all' ? 'all' : new Set([...data.selectedKeys, ...((_selectedKeys1 = action.selectedKeys) !== null && _selectedKeys1 !== void 0 ? _selectedKeys1 : [])]);
          var _sortDescriptor2;
          // Append the new items
          return {
            ...data,
            state: 'idle',
            items: [...data.items, ...action.items],
            selectedKeys: selectedKeys,
            sortDescriptor: (_sortDescriptor2 = action.sortDescriptor) !== null && _sortDescriptor2 !== void 0 ? _sortDescriptor2 : data.sortDescriptor,
            abortController: null,
            cursor: action.cursor
          };
        case 'error':
          if (action.abortController !== data.abortController) return data;
          return {
            ...data,
            state: 'error',
            error: action.error
          };
        case 'loading':
        case 'sorting':
        case 'filtering':
          // We're already loading more, and another load was triggered at the same time.
          // We need to abort the previous load more and start a new one.
          data.abortController.abort();
          var _filterText3;
          return {
            ...data,
            filterText: (_filterText3 = action.filterText) !== null && _filterText3 !== void 0 ? _filterText3 : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === 'loading' ? [] : data.items,
            abortController: action.abortController
          };
        case 'loadingMore':
          // If already loading more and another loading more is triggered, abort the new load more since
          // it is a duplicate request since the cursor hasn't been updated.
          // Do not overwrite the data.abortController
          action.abortController.abort();
          return data;
        case 'update':
          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).
          // Update data but don't abort previous load.
          return {
            ...data,
            ...action.updater(data)
          };
        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }
    default:
      throw new Error(`Invalid state "${data.state}"`);
  }
}
function $f86e6c1ec7da6ebb$export$bc3384a35de93d66(options) {
  const {
    load: load,
    sort: sort,
    initialSelectedKeys: initialSelectedKeys,
    initialSortDescriptor: initialSortDescriptor,
    getKey = item => item.id || item.key,
    initialFilterText = ''
  } = options;
  let [data, dispatch] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useReducer)($f86e6c1ec7da6ebb$var$reducer, {
    state: 'idle',
    error: null,
    items: [],
    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),
    sortDescriptor: initialSortDescriptor,
    filterText: initialFilterText
  });
  const dispatchFetch = async (action, fn) => {
    let abortController = new AbortController();
    try {
      dispatch({
        ...action,
        abortController: abortController
      });
      var _filterText;
      let previousFilterText = (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText;
      var _sortDescriptor;
      let response = await fn({
        items: data.items.slice(),
        selectedKeys: data.selectedKeys,
        sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,
        signal: abortController.signal,
        cursor: action.type === 'loadingMore' ? data.cursor : null,
        filterText: previousFilterText
      });
      var _filterText4;
      let filterText = (_filterText4 = response.filterText) !== null && _filterText4 !== void 0 ? _filterText4 : previousFilterText;
      dispatch({
        type: 'success',
        ...response,
        abortController: abortController
      });
      // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText
      // Only do this if not aborted (e.g. user triggers another filter action before load completes)
      if (filterText && filterText !== previousFilterText && !abortController.signal.aborted) dispatchFetch({
        type: 'filtering',
        filterText: filterText
      }, load);
    } catch (e) {
      dispatch({
        type: 'error',
        error: e,
        abortController: abortController
      });
    }
  };
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    dispatchFetch({
      type: 'loading'
    }, load);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return {
    items: data.items,
    selectedKeys: data.selectedKeys,
    sortDescriptor: data.sortDescriptor,
    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',
    loadingState: data.state,
    error: data.error,
    filterText: data.filterText,
    getItem(key) {
      return data.items.find(item => getKey(item) === key);
    },
    reload() {
      dispatchFetch({
        type: 'loading'
      }, load);
    },
    loadMore() {
      // Ignore if already loading more or if performing server side filtering.
      if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) return;
      dispatchFetch({
        type: 'loadingMore'
      }, load);
    },
    sort(sortDescriptor) {
      dispatchFetch({
        type: 'sorting',
        sortDescriptor: sortDescriptor
      }, sort || load);
    },
    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({
      ...options,
      getKey: getKey,
      cursor: data.cursor
    }, fn => {
      dispatch({
        type: 'update',
        updater: fn
      });
    }),
    setFilterText(filterText) {
      dispatchFetch({
        type: 'filtering',
        filterText: filterText
      }, load);
    }
  };
}
function $be2ea0343af54212$export$d14e1352e21f4a16(options) {
  let {
    initialItems: initialItems1 = [],
    initialSelectedKeys: initialSelectedKeys,
    getKey = item => item.id || item.key,
    getChildren = item => item.children
  } = options;
  let map = $d70Aq$useMemo(() => new Map(), []);
  // We only want to compute this on initial render.
  // eslint-disable-next-line react-hooks/exhaustive-deps
  let initialNodes = $d70Aq$useMemo(() => buildTree(initialItems1), []);
  let [items1, setItems] = $d70Aq$useState(initialNodes);
  let [selectedKeys, setSelectedKeys] = $d70Aq$useState(new Set(initialSelectedKeys || []));
  function buildTree(initialItems = [], parentKey) {
    return initialItems.map(item => {
      let node = {
        key: getKey(item),
        parentKey: parentKey,
        value: item,
        children: null
      };
      node.children = buildTree(getChildren(item), node.key);
      map.set(node.key, node);
      return node;
    });
  }
  function updateTree(items, key, update) {
    let node = map.get(key);
    if (!node) return items;
    // Create a new node. If null, then delete the node, otherwise replace.
    let newNode = update(node);
    if (newNode == null) deleteNode(node);else addNode(newNode);
    // Walk up the tree and update each parent to refer to the new chilren.
    while (node.parentKey) {
      let nextParent = map.get(node.parentKey);
      let copy = {
        key: nextParent.key,
        parentKey: nextParent.parentKey,
        value: nextParent.value,
        children: null
      };
      let children = nextParent.children;
      if (newNode == null) children = children.filter(c => c !== node);
      copy.children = children.map(child => {
        if (child === node) return newNode;
        return child;
      });
      map.set(copy.key, copy);
      newNode = copy;
      node = nextParent;
    }
    if (newNode == null) items = items.filter(c => c !== node);
    return items.map(item => {
      if (item === node) return newNode;
      return item;
    });
  }
  function addNode(node) {
    map.set(node.key, node);
    for (let child of node.children) addNode(child);
  }
  function deleteNode(node) {
    map.delete(node.key);
    for (let child of node.children) deleteNode(child);
  }
  return {
    items: items1,
    selectedKeys: selectedKeys,
    setSelectedKeys: setSelectedKeys,
    getItem(key) {
      return map.get(key);
    },
    insert(parentKey, index, ...values) {
      setItems(items => {
        let nodes = buildTree(values, parentKey);
        // If parentKey is null, insert into the root.
        if (parentKey == null) return [...items.slice(0, index), ...nodes, ...items.slice(index)];
        // Otherwise, update the parent node and its ancestors.
        return updateTree(items, parentKey, parentNode => ({
          key: parentNode.key,
          parentKey: parentNode.parentKey,
          value: parentNode.value,
          children: [...parentNode.children.slice(0, index), ...nodes, ...parentNode.children.slice(index)]
        }));
      });
    },
    insertBefore(key, ...values) {
      let node = map.get(key);
      if (!node) return;
      let parentNode = map.get(node.parentKey);
      let nodes = parentNode ? parentNode.children : items1;
      let index = nodes.indexOf(node);
      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index, ...values);
    },
    insertAfter(key, ...values) {
      let node = map.get(key);
      if (!node) return;
      let parentNode = map.get(node.parentKey);
      let nodes = parentNode ? parentNode.children : items1;
      let index = nodes.indexOf(node);
      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index + 1, ...values);
    },
    prepend(parentKey, ...values) {
      this.insert(parentKey, 0, ...values);
    },
    append(parentKey, ...values) {
      if (parentKey == null) this.insert(null, items1.length, ...values);else {
        let parentNode = map.get(parentKey);
        if (!parentNode) return;
        this.insert(parentKey, parentNode.children.length, ...values);
      }
    },
    remove(...keys) {
      let newItems = items1;
      for (let key of keys) newItems = updateTree(newItems, key, () => null);
      setItems(newItems);
      let selection = new Set(selectedKeys);
      for (let key1 of selectedKeys) if (!map.has(key1)) selection.delete(key1);
      setSelectedKeys(selection);
    },
    removeSelectedItems() {
      this.remove(...selectedKeys);
    },
    move(key, toParentKey, index) {
      setItems(items => {
        let node = map.get(key);
        if (!node) return items;
        items = updateTree(items, key, () => null);
        const movedNode = {
          ...node,
          parentKey: toParentKey
        };
        return updateTree(items, toParentKey, parentNode => ({
          key: parentNode.key,
          parentKey: parentNode.parentKey,
          value: parentNode.value,
          children: [...parentNode.children.slice(0, index), movedNode, ...parentNode.children.slice(index)]
        }));
      });
    },
    update(oldKey, newValue) {
      setItems(items => updateTree(items, oldKey, oldNode => {
        let node = {
          key: oldNode.key,
          parentKey: oldNode.parentKey,
          value: newValue,
          children: null
        };
        node.children = buildTree(getChildren(newValue), node.key);
        return node;
      }));
    }
  };
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/i18n/node_modules/@react-aria/ssr/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is
// guarded by a check that it only runs on the client side.
// eslint-disable-next-line rulesdir/useLayoutEffectRule

// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const $704cf1d3b684cc5c$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 10000000000)),
  current: 0
};
const $704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext($704cf1d3b684cc5c$var$defaultContext);
function $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {
  let cur = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext);
  let value = (0, $89yE2$useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === $704cf1d3b684cc5c$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [cur]);
  return /*#__PURE__*/(0, $89yE2$react).createElement($704cf1d3b684cc5c$var$SSRContext.Provider, {
    value: value
  }, props.children);
}
let $704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
function $704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {
  let ctx = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext);
  // If we are rendering in a non-DOM environment, and there's no SSRProvider,
  // provide a warning to hint to the developer to add one.
  if (ctx === $704cf1d3b684cc5c$var$defaultContext && !$704cf1d3b684cc5c$var$canUseDOM) console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return (0, $89yE2$useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);
}
function $704cf1d3b684cc5c$export$535bd6ca7f90a273() {
  let cur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($704cf1d3b684cc5c$var$SSRContext);
  let isInSSRContext = cur !== $704cf1d3b684cc5c$var$defaultContext;
  let [isSSR, setIsSSR] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isInSSRContext);
  // If on the client, and the component was initially server rendered,
  // then schedule a layout effect to update the component after hydration.
  if (typeof window !== "undefined" && isInSSRContext)
    // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(() => {
      setIsSSR(false);
    }, []);
  return isSSR;
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/i18n/dist/real-module.js






/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // https://en.wikipedia.org/wiki/Right-to-left
const $148a7a147e38ea7f$var$RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);
const $148a7a147e38ea7f$var$RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);
function $148a7a147e38ea7f$export$702d680b21cbd764(locale) {
  // If the Intl.Locale API is available, use it to get the script for the locale.
  // This is more accurate than guessing by language, since languages can be written in multiple scripts.
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    let script = new Intl.Locale(locale).maximize().script;
    return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);
  }
  // If not, just guess by the language (first part of the locale)
  let lang = locale.split('-')[0];
  return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}
function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
  // @ts-ignore
  let locale = typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
  try {
    // @ts-ignore
    Intl.DateTimeFormat.supportedLocalesOf([locale]);
  } catch (_err) {
    locale = 'en-US';
  }
  return {
    locale: locale,
    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'
  };
}
let $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
let $1e5a04cdaf7d1af8$var$listeners = new Set();
function $1e5a04cdaf7d1af8$var$updateLocale() {
  $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  for (let listener of $1e5a04cdaf7d1af8$var$listeners) listener($1e5a04cdaf7d1af8$var$currentLocale);
}
function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
  let isSSR = $704cf1d3b684cc5c$export$535bd6ca7f90a273();
  let [defaultLocale, setDefaultLocale] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)($1e5a04cdaf7d1af8$var$currentLocale);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);
    $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
    return () => {
      $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
      if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);
    };
  }, []);
  // We cannot determine the browser's language on the server, so default to
  // en-US. This will be updated after hydration on the client to the correct value.
  if (isSSR) return {
    locale: 'en-US',
    direction: 'ltr'
  };
  return defaultLocale;
}
const $18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);
function $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {
  let {
    locale: locale,
    children: children
  } = props;
  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
  let value = locale ? {
    locale: locale,
    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'
  } : defaultLocale;
  return /*#__PURE__*/$iFADg$react.createElement($18f2051aff69b9bf$var$I18nContext.Provider, {
    value: value
  }, children);
}
function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($18f2051aff69b9bf$var$I18nContext);
  return context || defaultLocale;
}
var $2aa2084a6c2b6b4f$exports = {};
"use strict";
const $fca6afa0e843324b$var$cache = new WeakMap();
function $fca6afa0e843324b$var$getCachedDictionary(strings) {
  let dictionary = $fca6afa0e843324b$var$cache.get(strings);
  if (!dictionary) {
    dictionary = new $iFADg$LocalizedStringDictionary(strings);
    $fca6afa0e843324b$var$cache.set(strings, dictionary);
  }
  return dictionary;
}
function $fca6afa0e843324b$export$f12b703ca79dfbb1(strings) {
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let dictionary = $iFADg$useMemo(() => $fca6afa0e843324b$var$getCachedDictionary(strings), [strings]);
  return $iFADg$useMemo(() => new $iFADg$LocalizedStringFormatter(locale, dictionary), [locale, dictionary]);
}
function $33bf17300c498528$export$a2f47a3d2973640(options = {}) {
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  // @ts-ignore
  return $iFADg$useMemo(() => new Intl.ListFormat(locale, options), [locale, options]);
}
function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {
  // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.
  let lastOptions = $iFADg$useRef(null);
  if (options && lastOptions.current && $896ba0a80a8f4d36$var$isEqual(options, lastOptions.current)) options = lastOptions.current;
  lastOptions.current = options;
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  return $iFADg$useMemo(() => new $iFADg$DateFormatter(locale, options), [locale, options]);
}
function $896ba0a80a8f4d36$var$isEqual(a, b) {
  if (a === b) return true;
  let aKeys = Object.keys(a);
  let bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) return false;
  for (let key of aKeys) {
    if (b[key] !== a[key]) return false;
  }
  return true;
}
function $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  return $iFADg$useMemo(() => new $iFADg$NumberFormatter(locale, options), [locale, options]);
}
let $325a3faab7a68acd$var$cache = new Map();
function $325a3faab7a68acd$export$a16aca283550c30d(options) {
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');
  if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options);
  $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
  return formatter;
}
function $bb77f239b46e8c72$export$3274cf84b703fff(options) {
  let collator = $325a3faab7a68acd$export$a16aca283550c30d({
    usage: 'search',
    ...options
  });
  // TODO(later): these methods don't currently support the ignorePunctuation option.
  return {
    startsWith(string, substring) {
      if (substring.length === 0) return true;
      // Normalize both strings so we can slice safely
      // TODO: take into account the ignorePunctuation option as well...
      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      return collator.compare(string.slice(0, substring.length), substring) === 0;
    },
    endsWith(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      return collator.compare(string.slice(-substring.length), substring) === 0;
    },
    contains(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      let scan = 0;
      let sliceLen = substring.length;
      for (; scan + sliceLen <= string.length; scan++) {
        let slice = string.slice(scan, scan + sliceLen);
        if (collator.compare(substring, slice) === 0) return true;
      }
      return false;
    }
  };
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/ssr/dist/module.js


// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const module_$704cf1d3b684cc5c$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 10000000000)),
  current: 0
};
const module_$704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(module_$704cf1d3b684cc5c$var$defaultContext);
function module_$704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {
  let cur = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(module_$704cf1d3b684cc5c$var$SSRContext);
  let value = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === module_$704cf1d3b684cc5c$var$defaultContext ? '' : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [cur]);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(module_$704cf1d3b684cc5c$var$SSRContext.Provider, {
    value: value
  }, props.children);
}
let module_$704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
function module_$704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {
  let ctx = $89yE2$useContext(module_$704cf1d3b684cc5c$var$SSRContext);
  // If we are rendering in a non-DOM environment, and there's no SSRProvider,
  // provide a warning to hint to the developer to add one.
  if (ctx === module_$704cf1d3b684cc5c$var$defaultContext && !module_$704cf1d3b684cc5c$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
  return $89yE2$useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);
}
function module_$704cf1d3b684cc5c$export$535bd6ca7f90a273() {
  let cur = $89yE2$useContext(module_$704cf1d3b684cc5c$var$SSRContext);
  let isInSSRContext = cur !== module_$704cf1d3b684cc5c$var$defaultContext;
  let [isSSR, setIsSSR] = $89yE2$useState(isInSSRContext);
  // If on the client, and the component was initially server rendered,
  // then schedule a layout effect to update the component after hydration.
  if (typeof window !== 'undefined' && isInSSRContext)
    // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    $89yE2$useLayoutEffect(() => {
      setIsSSR(false);
    }, []);
  return isSSR;
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/overlays/node_modules/@react-aria/ssr/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is
// guarded by a check that it only runs on the client side.
// eslint-disable-next-line rulesdir/useLayoutEffectRule

// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const dist_module_$704cf1d3b684cc5c$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 10000000000)),
  current: 0
};
const dist_module_$704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(dist_module_$704cf1d3b684cc5c$var$defaultContext);
function dist_module_$704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {
  let cur = (0, $89yE2$useContext)(dist_module_$704cf1d3b684cc5c$var$SSRContext);
  let value = (0, $89yE2$useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === dist_module_$704cf1d3b684cc5c$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [cur]);
  return /*#__PURE__*/(0, $89yE2$react).createElement(dist_module_$704cf1d3b684cc5c$var$SSRContext.Provider, {
    value: value
  }, props.children);
}
let dist_module_$704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
function dist_module_$704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {
  let ctx = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(dist_module_$704cf1d3b684cc5c$var$SSRContext);
  // If we are rendering in a non-DOM environment, and there's no SSRProvider,
  // provide a warning to hint to the developer to add one.
  if (ctx === dist_module_$704cf1d3b684cc5c$var$defaultContext && !dist_module_$704cf1d3b684cc5c$var$canUseDOM) console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);
}
function dist_module_$704cf1d3b684cc5c$export$535bd6ca7f90a273() {
  let cur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(dist_module_$704cf1d3b684cc5c$var$SSRContext);
  let isInSSRContext = cur !== dist_module_$704cf1d3b684cc5c$var$defaultContext;
  let [isSSR, setIsSSR] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isInSSRContext);
  // If on the client, and the component was initially server rendered,
  // then schedule a layout effect to update the component after hydration.
  if (typeof window !== "undefined" && isInSSRContext)
    // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(() => {
      setIsSSR(false);
    }, []);
  return isSSR;
}

;// CONCATENATED MODULE: ../../node_modules/clsx/dist/clsx.m.js
function clsx_m_r(e) {
  var t,
    f,
    n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;else if ("object" == typeof e) if (Array.isArray(e)) for (t = 0; t < e.length; t++) e[t] && (f = clsx_m_r(e[t])) && (n && (n += " "), n += f);else for (t in e) e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx_m_clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length;) (e = arguments[f++]) && (t = clsx_m_r(e)) && (n && (n += " "), n += t);
  return n;
}
/* harmony default export */ const clsx_m = (clsx_m_clsx);
;// CONCATENATED MODULE: ./node_modules/@react-aria/overlays/node_modules/@react-aria/utils/dist/module.js





/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).useLayoutEffect : () => {};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0, $12uGp$useState)(defaultValue);
  let valueRef = (0, $12uGp$useRef)(value);
  let effect = (0, $12uGp$useRef)(null);
  valueRef.current = value;
  // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.
  let nextRef = (0, $12uGp$useRef)(null);
  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next();
    // If the generator is done, reset the effect.
    if (newValue.done) {
      effect.current = null;
      return;
    }
    // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.
    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0, $12uGp$useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}
let $bdb11010cef70236$var$idsUpdaterMap = new Map();
function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultId);
  let nextId = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let res = (0, dist_module_$704cf1d3b684cc5c$export$619500959fc48b26)(value);
  let updateValue = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(val => {
    nextId.current = val;
  }, []);
  $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let r = res;
    return () => {
      $bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  // This cannot cause an infinite loop because the ref is updated first.
  // eslint-disable-next-line
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = $bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = (0, $1dbecbe27a04f9af$export$14d238f342723f25)(id);
  let updateId = (0, $12uGp$useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : undefined;
    });
  }, [id, setResolvedId]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Calls all functions in the order they were chained with the same arguments.
    */
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      // Chain events
      if (typeof a === "function" && typeof b === "function" &&
      // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */65 && key.charCodeAt(2) <= /* 'Z' */90) result[key] = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = (0, clsx_m)(a, b);else if (key === "id" && a && b) result.id = (0, $bdb11010cef70236$export$cd8c9cb68f842629)(a, b);else result[key] = b !== undefined ? b : a;
    }
  }
  return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $5dc95899b306f630$export$c9058316764c140e(...refs) {
  return value => {
    for (let ref of refs) {
      if (typeof ref === "function") ref(value);else if (ref != null) ref.current = value;
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const $65484d02dcb7eb3e$var$DOMPropNames = new Set(["id"]);
const $65484d02dcb7eb3e$var$labelablePropNames = new Set(["aria-label", "aria-labelledby", "aria-describedby", "aria-details"]);
const $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};
  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
  return filteredProps;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
let $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
      // Ignore
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === "horizontal" ? rect.right : rect.bottom;
  return orientation === "horizontal" ? rect.left : rect.top;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let $bbed8b41f857bcc0$var$transitionsByElement = new Map();
// A list of callbacks to call once there are no transitioning elements.
let $bbed8b41f857bcc0$var$transitionCallbacks = new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
      e.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    // If no transitioning elements, call all of the queued callbacks.
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks) cb();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") $bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.
const $9cc09df9fd7676be$var$draggingElements = (/* unused pure expression or super */ null && ([]));
function $9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;
  let getPosition = e => orientation === "horizontal" ? e.clientX : e.clientY;
  let getNextOffset = e => {
    let containerOffset = (0, $ab71dadb03a6fb2e$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };
  let dragging = (0, $12uGp$useRef)(false);
  let prevPosition = (0, $12uGp$useRef)(0);
  // Keep track of the current handlers in a ref so that the events can access them.
  let handlers = (0, $12uGp$useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;
  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);
    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }
    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };
  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    $9cc09df9fd7676be$var$draggingElements.splice($9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener("mouseup", onMouseUp, false);
    window.removeEventListener("mousemove", onMouseDragged, false);
  };
  let onMouseDown = e => {
    const target = e.currentTarget;
    // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.
    if ($9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    $9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener("mousemove", onMouseDragged, false);
    window.addEventListener("mouseup", onMouseUp, false);
  };
  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };
  let onMouseOut = () => {
    if (onHover) onHover(false);
  };
  let onKeyDown = e => {
    switch (e.key) {
      case "Left":
      case "ArrowLeft":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Up":
      case "ArrowUp":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Right":
      case "ArrowRight":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Down":
      case "ArrowDown":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Home":
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;
      case "End":
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;
      case "Enter":
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };
  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, $12uGp$useRef)(new Map());
  let addGlobalListener = (0, $12uGp$useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0, $12uGp$useCallback)((eventTarget, type, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, $12uGp$useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]);
  // eslint-disable-next-line arrow-body-style
  (0, $12uGp$useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  } = props;
  // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.
  id = (0, $bdb11010cef70236$export$f680877a34711e37)(id);
  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(" ");
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  // If no labels are provided, use the default
  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, $12uGp$useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === "function") forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0, $12uGp$useRef)(true);
  (0, $12uGp$useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}
function $9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function $9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0, $12uGp$useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;
    if (!$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function $62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// @ts-ignore
let $5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function $5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size, setSize] = (0, $12uGp$useState)(() => $5df64b3807dc15ee$var$getViewportSize());
  (0, $12uGp$useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = $5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };
    if (!$5df64b3807dc15ee$var$visualViewport) window.addEventListener("resize", onResize);else $5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      if (!$5df64b3807dc15ee$var$visualViewport) window.removeEventListener("resize", onResize);else $5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, []);
  return size;
}
function $5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let $ef06256079686ba0$var$descriptionId = 0;
const $ef06256079686ba0$var$descriptionNodes = new Map();
function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id, setId] = (0, $12uGp$useState)(undefined);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!description) return;
    let desc = $ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement("div");
      node.id = id;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      $ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        $ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    "aria-describedby": description ? id : undefined
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$export$9ac100e40613ea10() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function $c87311424ea30a05$export$186c6964ca17d99() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function $c87311424ea30a05$export$7bef049ce92e4224() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) ||
  // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function $c87311424ea30a05$export$fedb369cb70207f1() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
}
function $c87311424ea30a05$export$e1865c3bedcd822b() {
  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
}
function $c87311424ea30a05$export$78551043582a6a98() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
}
function $c87311424ea30a05$export$6446a186d09e379e() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function $c87311424ea30a05$export$a11b0059900ceec8() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
  let handlerRef = (0, $12uGp$useRef)(handler);
  handlerRef.current = handler;
  let isDisabled = handler == null;
  (0, $12uGp$useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;
    let handler = e => handlerRef.current.call(this, e);
    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Scrolls `scrollView` so that `element` is visible.
    * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),
    * but doesn't affect parents above `scrollView`.
    */
function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */
function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $6a7db85432448f7f$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
  // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
  // to detect TalkBack virtual clicks.
  if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
  // Talkback double tap from Windows Firefox touch screen press
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

;// CONCATENATED MODULE: ../../node_modules/@internationalized/string/dist/module.js
/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2022 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */class $5b160d28a433310d$export$c17fa47878dc55b6 {
  /** Returns a localized string for the given key and locale. */getStringForLocale(key, locale) {
    let strings = this.strings[locale];
    if (!strings) {
      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
      this.strings[locale] = strings;
    }
    let string = strings[key];
    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);
    return string;
  }
  constructor(messages, defaultLocale = "en-US") {
    // Clone messages so we don't modify the original object.
    this.strings = {
      ...messages
    };
    this.defaultLocale = defaultLocale;
  }
}
function $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
  // If there is an exact match, use it.
  if (strings[locale]) return strings[locale];
  // Attempt to find the closest match by language.
  // For example, if the locale is fr-CA (French Canadian), but there is only
  // an fr-FR (France) set of strings, use that.
  // This could be replaced with Intl.LocaleMatcher once it is supported.
  // https://github.com/tc39/proposal-intl-localematcher
  let language = $5b160d28a433310d$var$getLanguage(locale);
  if (strings[language]) return strings[language];
  for (let key in strings) {
    if (key.startsWith(language + "-")) return strings[key];
  }
  // Nothing close, use english.
  return strings[defaultLocale];
}
function $5b160d28a433310d$var$getLanguage(locale) {
  // @ts-ignore
  if (Intl.Locale)
    // @ts-ignore
    return new Intl.Locale(locale).language;
  return locale.split("-")[0];
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const $6db58dc88e78b024$var$pluralRulesCache = new Map();
const $6db58dc88e78b024$var$numberFormatCache = new Map();
class $6db58dc88e78b024$export$2f817fcdc4b89ae0 {
  /** Formats a localized string for the given key with the provided variables. */format(key, variables) {
    let message = this.strings.getStringForLocale(key, this.locale);
    return typeof message === "function" ? message(variables, this) : message;
  }
  plural(count, options, type = "cardinal") {
    let opt = options["=" + count];
    if (opt) return typeof opt === "function" ? opt() : opt;
    let key = this.locale + ":" + type;
    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);
    if (!pluralRules) {
      pluralRules = new Intl.PluralRules(this.locale, {
        type: type
      });
      $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);
    }
    let selected = pluralRules.select(count);
    opt = options[selected] || options.other;
    return typeof opt === "function" ? opt() : opt;
  }
  number(value) {
    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);
    if (!numberFormat) {
      numberFormat = new Intl.NumberFormat(this.locale);
      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);
    }
    return numberFormat.format(value);
  }
  select(options, value) {
    let opt = options[value] || options.other;
    return typeof opt === "function" ? opt() : opt;
  }
  constructor(locale, strings) {
    this.locale = locale;
    this.strings = strings;
  }
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/overlays/node_modules/@react-aria/i18n/dist/real-module.js






/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ /*
       * Copyright 2020 Adobe. All rights reserved.
       * This file is licensed to you under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License. You may obtain a copy
       * of the License at http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software distributed under
       * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
       * OF ANY KIND, either express or implied. See the License for the specific language
       * governing permissions and limitations under the License.
       */ // https://en.wikipedia.org/wiki/Right-to-left
const real_module_$148a7a147e38ea7f$var$RTL_SCRIPTS = new Set(["Arab", "Syrc", "Samr", "Mand", "Thaa", "Mend", "Nkoo", "Adlm", "Rohg", "Hebr"]);
const real_module_$148a7a147e38ea7f$var$RTL_LANGS = new Set(["ae", "ar", "arc", "bcc", "bqi", "ckb", "dv", "fa", "glk", "he", "ku", "mzn", "nqo", "pnb", "ps", "sd", "ug", "ur", "yi"]);
function real_module_$148a7a147e38ea7f$export$702d680b21cbd764(locale) {
  // If the Intl.Locale API is available, use it to get the script for the locale.
  // This is more accurate than guessing by language, since languages can be written in multiple scripts.
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    let script = new Intl.Locale(locale).maximize().script;
    return real_module_$148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);
  }
  // If not, just guess by the language (first part of the locale)
  let lang = locale.split("-")[0];
  return real_module_$148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function real_module_$1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
  // @ts-ignore
  let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
  try {
    // @ts-ignore
    Intl.DateTimeFormat.supportedLocalesOf([locale]);
  } catch (_err) {
    locale = "en-US";
  }
  return {
    locale: locale,
    direction: (0, real_module_$148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
  };
}
let real_module_$1e5a04cdaf7d1af8$var$currentLocale = real_module_$1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
let real_module_$1e5a04cdaf7d1af8$var$listeners = new Set();
function real_module_$1e5a04cdaf7d1af8$var$updateLocale() {
  real_module_$1e5a04cdaf7d1af8$var$currentLocale = real_module_$1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  for (let listener of real_module_$1e5a04cdaf7d1af8$var$listeners) listener(real_module_$1e5a04cdaf7d1af8$var$currentLocale);
}
function real_module_$1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
  let isSSR = (0, dist_module_$704cf1d3b684cc5c$export$535bd6ca7f90a273)();
  let [defaultLocale, setDefaultLocale] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(real_module_$1e5a04cdaf7d1af8$var$currentLocale);
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (real_module_$1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener("languagechange", real_module_$1e5a04cdaf7d1af8$var$updateLocale);
    real_module_$1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
    return () => {
      real_module_$1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
      if (real_module_$1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener("languagechange", real_module_$1e5a04cdaf7d1af8$var$updateLocale);
    };
  }, []);
  // We cannot determine the browser's language on the server, so default to
  // en-US. This will be updated after hydration on the client to the correct value.
  if (isSSR) return {
    locale: "en-US",
    direction: "ltr"
  };
  return defaultLocale;
}
const real_module_$18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(null);
function real_module_$18f2051aff69b9bf$export$a54013f0d02a8f82(props) {
  let {
    locale: locale,
    children: children
  } = props;
  let defaultLocale = (0, real_module_$1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
  let value = locale ? {
    locale: locale,
    direction: (0, real_module_$148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
  } : defaultLocale;
  return /*#__PURE__*/(0, $iFADg$react).createElement(real_module_$18f2051aff69b9bf$var$I18nContext.Provider, {
    value: value
  }, children);
}
function real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
  let defaultLocale = (0, real_module_$1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
  let context = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(real_module_$18f2051aff69b9bf$var$I18nContext);
  return context || defaultLocale;
}
var real_module_$2aa2084a6c2b6b4f$exports = {};
"use strict";

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const real_module_$fca6afa0e843324b$var$cache = new WeakMap();
function real_module_$fca6afa0e843324b$var$getCachedDictionary(strings) {
  let dictionary = real_module_$fca6afa0e843324b$var$cache.get(strings);
  if (!dictionary) {
    dictionary = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)(strings);
    real_module_$fca6afa0e843324b$var$cache.set(strings, dictionary);
  }
  return dictionary;
}
function real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1(strings) {
  let {
    locale: locale
  } = (0, real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let dictionary = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => real_module_$fca6afa0e843324b$var$getCachedDictionary(strings), [strings]);
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new (0, $6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, dictionary), [locale, dictionary]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function real_module_$33bf17300c498528$export$a2f47a3d2973640(options = {}) {
  let {
    locale: locale
  } = (0, real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  // @ts-ignore
  return (0, $iFADg$useMemo)(() => new Intl.ListFormat(locale, options), [locale, options]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function real_module_$896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {
  // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.
  let lastOptions = (0, $iFADg$useRef)(null);
  if (options && lastOptions.current && real_module_$896ba0a80a8f4d36$var$isEqual(options, lastOptions.current)) options = lastOptions.current;
  lastOptions.current = options;
  let {
    locale: locale
  } = (0, real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  return (0, $iFADg$useMemo)(() => new (0, $iFADg$DateFormatter)(locale, options), [locale, options]);
}
function real_module_$896ba0a80a8f4d36$var$isEqual(a, b) {
  if (a === b) return true;
  let aKeys = Object.keys(a);
  let bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) return false;
  for (let key of aKeys) {
    if (b[key] !== a[key]) return false;
  }
  return true;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function real_module_$a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
  let {
    locale: locale
  } = (0, real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  return (0, $iFADg$useMemo)(() => new (0, $iFADg$NumberFormatter)(locale, options), [locale, options]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
let real_module_$325a3faab7a68acd$var$cache = new Map();
function real_module_$325a3faab7a68acd$export$a16aca283550c30d(options) {
  let {
    locale: locale
  } = (0, real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  if (real_module_$325a3faab7a68acd$var$cache.has(cacheKey)) return real_module_$325a3faab7a68acd$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options);
  real_module_$325a3faab7a68acd$var$cache.set(cacheKey, formatter);
  return formatter;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function real_module_$bb77f239b46e8c72$export$3274cf84b703fff(options) {
  let collator = (0, real_module_$325a3faab7a68acd$export$a16aca283550c30d)({
    usage: "search",
    ...options
  });
  // TODO(later): these methods don't currently support the ignorePunctuation option.
  return {
    startsWith(string, substring) {
      if (substring.length === 0) return true;
      // Normalize both strings so we can slice safely
      // TODO: take into account the ignorePunctuation option as well...
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      return collator.compare(string.slice(0, substring.length), substring) === 0;
    },
    endsWith(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      return collator.compare(string.slice(-substring.length), substring) === 0;
    },
    contains(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      let scan = 0;
      let sliceLen = substring.length;
      for (; scan + sliceLen <= string.length; scan++) {
        let slice = string.slice(scan, scan + sliceLen);
        if (collator.compare(substring, slice) === 0) return true;
      }
      return false;
    }
  };
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/overlays/node_modules/@react-aria/interactions/dist/module.js



/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually
let $14c0b72509d70225$var$state = "default";
let $14c0b72509d70225$var$savedUserSelect = "";
let $14c0b72509d70225$var$modifiedElementMap = new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, $bx7SL$isIOS)()) {
    if ($14c0b72509d70225$var$state === "default") {
      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = "none";
    }
    $14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    // If not iOS, store the target's original user-select and change to user-select: none
    // Ignore state since it doesn't apply for non iOS
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = "none";
  }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, $bx7SL$isIOS)()) {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if ($14c0b72509d70225$var$state !== "disabled") return;
    $14c0b72509d70225$var$state = "restoring";
    // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.
    setTimeout(() => {
      // Wait for any CSS transitions to complete so we don't recompute style
      // for the whole page in the middle of the animation and cause jank.
      (0, $bx7SL$runAfterTransition)(() => {
        // Avoid race conditions
        if ($14c0b72509d70225$var$state === "restoring") {
          if (document.documentElement.style.webkitUserSelect === "none") document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
          $14c0b72509d70225$var$savedUserSelect = "";
          $14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement)
    // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    {
      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
        if (target.style.userSelect === "none") target.style.userSelect = targetOldUserSelect;
        if (target.getAttribute("style") === "") target.removeAttribute("style");
        $14c0b72509d70225$var$modifiedElementMap.delete(target);
      }
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(null);
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  // Consume context from <PressResponder> and merge with props.
  let context = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context) {
    let {
      register: register,
      ...contextProps
    } = context;
    props = (0, $bx7SL$mergeProps)(contextProps, props);
    register();
  }
  (0, $bx7SL$useSyncRef)(context, props.ref);
  return props;
}
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress: onPress,
    onPressChange: onPressChange,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressUp: onPressUp,
    isDisabled: isDisabled,
    isPressed: isPressedProp,
    preventFocusOnPress: preventFocusOnPress,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit,
    allowTextSelectionOnPress: allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let propsRef = (0, $bx7SL$useRef)(null);
  propsRef.current = {
    onPress: onPress,
    onPressChange: onPressChange,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressUp: onPressUp,
    isDisabled: isDisabled,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0, $bx7SL$useState)(false);
  let ref = (0, $bx7SL$useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  } = (0, $bx7SL$useGlobalListeners)();
  let pressProps = (0, $bx7SL$useMemo)(() => {
    let state = ref.current;
    let triggerPressStart = (originalEvent, pointerType) => {
      let {
        onPressStart: onPressStart,
        onPressChange: onPressChange,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled || state.didFirePressStart) return;
      if (onPressStart) onPressStart({
        type: "pressstart",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(true);
      state.didFirePressStart = true;
      setPressed(true);
    };
    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
      let {
        onPressEnd: onPressEnd,
        onPressChange: onPressChange,
        onPress: onPress,
        isDisabled: isDisabled
      } = propsRef.current;
      if (!state.didFirePressStart) return;
      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;
      if (onPressEnd) onPressEnd({
        type: "pressend",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(false);
      setPressed(false);
      if (onPress && wasPressed && !isDisabled) onPress({
        type: "press",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let triggerPressUp = (originalEvent, pointerType) => {
      let {
        onPressUp: onPressUp,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled) return;
      if (onPressUp) onPressUp({
        type: "pressup",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let cancel = e => {
      if (state.isPressed) {
        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();
        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
      }
    };
    let pressProps = {
      onKeyDown(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
          e.stopPropagation();
          // If the event is repeating, it may have started on a different element
          // after which focus moved to the current element. Ignore these events and
          // only handle the first key down event.
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, "keyboard");
            // Focus may move before the key up event, so register the event on the document
            // instead of the same element where the key down event occurred.
            addGlobalListener(document, "keyup", onKeyUp, false);
          }
        } else if (e.key === "Enter" && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget))
          // If the target is a link, we won't have handled this above because we want the default
          // browser behavior to open the link when pressing Enter. But we still need to prevent
          // default so that elements above do not also handle it (e.g. table row).
          e.stopPropagation();
      },
      onKeyUp(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard");
      },
      onClick(e) {
        if (e && !e.currentTarget.contains(e.target)) return;
        if (e && e.button === 0) {
          e.stopPropagation();
          if (isDisabled) e.preventDefault();
          // If triggered from a screen reader or by using element.click(),
          // trigger as if it were a keyboard click.
          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || (0, $bx7SL$isVirtualClick)(e.nativeEvent))) {
            // Ensure the element receives focus (VoiceOver on iOS does not do this)
            if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
            triggerPressStart(e, "virtual");
            triggerPressUp(e, "virtual");
            triggerPressEnd(e, "virtual");
          }
          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }
    };
    let onKeyUp = e => {
      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", state.target.contains(target));
        removeAllGlobalListeners();
        // If the target is a link, trigger the click method to open the URL,
        // but defer triggering pressEnd until onClick event handler.
        if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link")) state.target.click();
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps.onPointerDown = e => {
        // Only handle left clicks, and ignore events that bubbled through portals.
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
        // Ignore and let the onClick handler take care of it instead.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202
        if ((0, $bx7SL$isVirtualPointerEvent)(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on pointer down and handle focusing the pressable element ourselves.
        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        state.pointerType = e.pointerType;
        e.stopPropagation();
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, "pointermove", onPointerMove, false);
          addGlobalListener(document, "pointerup", onPointerUp, false);
          addGlobalListener(document, "pointercancel", onPointerCancel, false);
        }
      };
      pressProps.onMouseDown = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (e.button === 0) {
          // Chrome and Firefox on touch Windows devices require mouse down events
          // to be canceled in addition to pointer events, or an extra asynchronous
          // focus event will be fired.
          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
          e.stopPropagation();
        }
      };
      pressProps.onPointerUp = e => {
        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
        if (!e.currentTarget.contains(e.target) || state.pointerType === "virtual") return;
        // Only handle left clicks
        // Safari on iOS sometimes fires pointerup events, even
        // when the touch isn't over the target, so double check.
        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
      // Use pointer move events instead to implement our own hit testing.
      // See https://bugs.webkit.org/show_bug.cgi?id=199803
      let onPointerMove = e => {
        if (e.pointerId !== state.activePointerId) return;
        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        }
      };
      let onPointerCancel = e => {
        cancel(e);
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.
        cancel(e);
      };
    } else {
      pressProps.onMouseDown = e => {
        // Only handle left clicks
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on mouse down and handle focusing the pressable element ourselves.
        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        e.stopPropagation();
        if (state.ignoreEmulatedMouseEvents) return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = (0, $bx7SL$isVirtualClick)(e.nativeEvent) ? "virtual" : "mouse";
        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, "mouseup", onMouseUp, false);
      };
      pressProps.onMouseEnter = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };
      pressProps.onMouseLeave = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onMouseUp = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);
      };
      let onMouseUp = e => {
        // Only handle left clicks
        if (e.button !== 0) return;
        state.isPressed = false;
        removeAllGlobalListeners();
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isOverTarget = false;
      };
      pressProps.onTouchStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = "touch";
        // Due to browser inconsistencies, especially on mobile browsers, we prevent default
        // on the emulated mouse event and handle focusing the pressable element ourselves.
        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, "scroll", onScroll, true);
      };
      pressProps.onTouchMove = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onTouchEnd = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        removeAllGlobalListeners();
      };
      pressProps.onTouchCancel = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed) cancel(e);
      };
      let onScroll = e => {
        if (state.isPressed && e.target.contains(state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        cancel(e);
      };
    }
    return pressProps;
  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);
  // Remove user-select: none in case component unmounts immediately after pressStart
  // eslint-disable-next-line arrow-body-style
  (0, $bx7SL$useEffect)(() => {
    return () => {
      if (!allowTextSelectionOnPress)
        // eslint-disable-next-line react-hooks/exhaustive-deps
        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);
    };
  }, [allowTextSelectionOnPress]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, $bx7SL$mergeProps)(domProps, pressProps)
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const {
    key: key,
    code: code
  } = event;
  const element = currentTarget;
  const role = element.getAttribute("role");
  // Accessibility for keyboards. Space and Enter only.
  // "Spacebar" is for IE 11
  return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (
  // A link with a valid href should be handled natively,
  // unless it also has role='button' and was triggered using Space.
  !$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") &&
  // An element with role='link' should only trigger with Enter key
  !(role === "link" && key !== "Enter");
}
function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const {
    targetTouches: targetTouches
  } = event;
  if (targetTouches.length > 0) return targetTouches[0];
  return null;
}
function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;
  for (let i = 0; i < changedTouches.length; i++) {
    const touch = changedTouches[i];
    if (touch.identifier === pointerId) return touch;
  }
  return null;
}
function $f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}
function $f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
  // check if they cannot overlap on x axis
  if (a.left > b.right || b.left > a.right) return false;
  // check if they cannot overlap on y axis
  if (a.top > b.bottom || b.top > a.bottom) return false;
  return true;
}
function $f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function $f6c31cce2adf654f$var$shouldPreventDefault(target) {
  // We cannot prevent default if the target is a draggable element.
  return !(target instanceof HTMLElement) || !target.draggable;
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);
  if (target instanceof HTMLButtonElement) return target.type !== "submit";
  return true;
}
const $f6c31cce2adf654f$var$nonTextInputTypes = new Set(["checkbox", "radio", "range", "color", "file", "image", "button", "submit", "reset"]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
  // Only space should toggle checkboxes and radios, not enter.
  return target.type === "checkbox" || target.type === "radio" ? key === " " : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
const $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $bx7SL$react).forwardRef(({
  children: children,
  ...props
}, ref) => {
  let newRef = (0, $bx7SL$useRef)();
  ref = ref !== null && ref !== void 0 ? ref : newRef;
  let {
    pressProps: pressProps
  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    ...props,
    ref: ref
  });
  let child = (0, $bx7SL$react).Children.only(children);
  return /*#__PURE__*/(0, $bx7SL$react).cloneElement(child,
  // @ts-ignore
  {
    ref: ref,
    ...(0, $bx7SL$mergeProps)(child.props, pressProps)
  });
})));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $bx7SL$react).forwardRef(({
  children: children,
  ...props
}, ref) => {
  let isRegistered = (0, $bx7SL$useRef)(false);
  let prevContext = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  let context = (0, $bx7SL$mergeProps)(prevContext || {}, {
    ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }
  });
  (0, $bx7SL$useSyncRef)(prevContext, ref);
  (0, $bx7SL$useEffect)(() => {
    if (!isRegistered.current) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
  }, []);
  return /*#__PURE__*/(0, $bx7SL$react).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context
  }, children);
})));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

class $8a9cb279dc87e130$export$905e7fc544a71f36 {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {}
  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
}
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    onBlur: onBlur,
    observer: null
  });
  stateRef.current.onBlur = onBlur;
  // Clean up MutationObserver on unmount. See below.
  // eslint-disable-next-line arrow-body-style
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  // This function is called during a React onFocus event.
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = e => {
        var
          // For backward compatibility, dispatch a (fake) React synthetic event.
          _stateRef_current, _stateRef_current_onBlur;
        stateRef.current.isFocused = false;
        if (target.disabled) (_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 ? void 0 : _stateRef_current_onBlur.call(_stateRef_current, new $8a9cb279dc87e130$export$905e7fc544a71f36("blur", e));
        // We no longer need the MutationObserver once the target is blurred.
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          stateRef.current.observer.disconnect();
          target.dispatchEvent(new FocusEvent("blur"));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: ["disabled"]
      });
    }
  }, []);
}
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let {
    isDisabled: isDisabled,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    onFocusChange: onFocusChange
  } = props;
  const onBlur = (0, $bx7SL$useCallback)(e => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [onBlurProp, onFocusChange]);
  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  const onFocus = (0, $bx7SL$useCallback)(e => {
    if (e.target === e.currentTarget) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [onFocusChange, onFocusProp, onSyntheticFocus]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

let $507fabe10e71c6fb$var$currentModality = null;
let $507fabe10e71c6fb$var$changeHandlers = new Set();
let $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
let $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
// Only Tab or Esc keys will make focus visible on text input elements
const $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */
function $507fabe10e71c6fb$var$isValidKey(e) {
  // Control and Shift keys trigger when navigating back to the tab with keyboard.
  return !(e.metaKey || !(0, $c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if ($507fabe10e71c6fb$var$isValidKey(e)) {
    $507fabe10e71c6fb$var$currentModality = "keyboard";
    $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e) {
  $507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function $507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, $6a7db85432448f7f$export$60278871457622de)(e)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e) {
  // Firefox fires two extra focus events when the user first clicks into an iframe:
  // first on the window, then on the document. We ignore these events so they don't
  // cause keyboard focus rings to appear.
  if (e.target === window || e.target === document) return;
  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = "virtual";
    $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  // When the window is blurred, reset state. This is necessary when tabbing out of the window,
  // for example, since a subsequent focus event won't be fired.
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */
function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === "undefined" || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;
  // Programmatic focus() calls shouldn't affect the current input modality.
  // However, we need to detect other cases when a focus event occurs without
  // a preceding user event (e.g. screen reader focus). Overriding the focus
  // method on HTMLElement.prototype is a bit hacky, but works.
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function () {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  document.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  // Register focus events on the window so they are sure to happen
  // before React's event listeners (registered on the document).
  window.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener("DOMContentLoaded", $507fabe10e71c6fb$var$setupGlobalFocusEvents);
}
function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return $507fabe10e71c6fb$var$currentModality !== "pointer";
}
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}
function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  $507fabe10e71c6fb$var$currentModality = modality;
  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
function $507fabe10e71c6fb$export$98e20ec92f614cfe() {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = (0, $bx7SL$useState)($507fabe10e71c6fb$var$currentModality);
  (0, $bx7SL$useEffect)(() => {
    let handler = () => {
      setModality($507fabe10e71c6fb$var$currentModality);
    };
    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */
function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
  let {
    isTextInput: isTextInput,
    autoFocus: autoFocus
  } = props;
  let [isFocusVisibleState, setFocusVisible] = (0, $bx7SL$useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());
  $507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {
    setFocusVisible(isFocusVisible);
  }, [isTextInput], {
    isTextInput: isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}
function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0, $bx7SL$useEffect)(() => {
    let handler = (modality, e) => {
      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;
      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let {
    isDisabled: isDisabled,
    onBlurWithin: onBlurWithin,
    onFocusWithin: onFocusWithin,
    onFocusWithinChange: onFocusWithinChange
  } = props;
  let state = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocusWithin: false
  });
  let onBlur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
    // when moving focus inside the element. Only trigger if the currentTarget doesn't
    // include the relatedTarget (where focus is moving).
    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.current.isFocusWithin = false;
      if (onBlurWithin) onBlurWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(false);
    }
  }, [onBlurWithin, onFocusWithinChange, state]);
  let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  let onFocus = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    if (!state.current.isFocusWithin) {
      if (onFocusWithin) onFocusWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(true);
      state.current.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);
  if (isDisabled) return {
    focusWithinProps: {
      onFocus: null,
      onBlur: null
    }
  };
  return {
    focusWithinProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

// iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.
let $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let $6179b936705e76d3$var$hoverCount = 0;
function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
  // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
  // the distant future because a user previously touched the element.
  setTimeout(() => {
    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}
function $6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === "touch") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function $6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === "undefined") return;
  if (typeof PointerEvent !== "undefined") document.addEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener("touchend", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  $6179b936705e76d3$var$hoverCount++;
  return () => {
    $6179b936705e76d3$var$hoverCount--;
    if ($6179b936705e76d3$var$hoverCount > 0) return;
    if (typeof PointerEvent !== "undefined") document.removeEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener("touchend", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}
function $6179b936705e76d3$export$ae780daf29e6d456(props) {
  let {
    onHoverStart: onHoverStart,
    onHoverChange: onHoverChange,
    onHoverEnd: onHoverEnd,
    isDisabled: isDisabled
  } = props;
  let [isHovered, setHovered] = (0, $bx7SL$useState)(false);
  let state = (0, $bx7SL$useRef)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: "",
    target: null
  }).current;
  (0, $bx7SL$useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let {
    hoverProps: hoverProps,
    triggerHoverEnd: triggerHoverEnd
  } = (0, $bx7SL$useMemo)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target)) return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart) onHoverStart({
        type: "hoverstart",
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(true);
      setHovered(true);
    };
    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = "";
      state.target = null;
      if (pointerType === "touch" || !state.isHovered) return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd) onHoverEnd({
        type: "hoverend",
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(false);
      setHovered(false);
    };
    let hoverProps = {};
    if (typeof PointerEvent !== "undefined") {
      hoverProps.onPointerEnter = e => {
        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse") return;
        triggerHoverStart(e, e.pointerType);
      };
      hoverProps.onPointerLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };
      hoverProps.onMouseEnter = e => {
        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, "mouse");
        state.ignoreEmulatedMouseEvents = false;
      };
      hoverProps.onMouseLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, "mouse");
      };
    }
    return {
      hoverProps: hoverProps,
      triggerHoverEnd: triggerHoverEnd
    };
  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);
  (0, $bx7SL$useEffect)(() => {
    // Call the triggerHoverEnd as soon as isDisabled changes to true
    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
    if (isDisabled) triggerHoverEnd({
      currentTarget: state.target
    }, state.pointerType);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isDisabled]);
  return {
    hoverProps: hoverProps,
    isHovered: isHovered
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

function $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let {
    ref: ref,
    onInteractOutside: onInteractOutside,
    isDisabled: isDisabled,
    onInteractOutsideStart: onInteractOutsideStart
  } = props;
  let stateRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside: onInteractOutside,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isDisabled) return;
    let onPointerDown = e => {
      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);
        state.isPointerDown = true;
      }
    };
    // Use pointer events if available. Otherwise, fall back to mouse and touch events.
    if (typeof PointerEvent !== "undefined") {
      let onPointerUp = e => {
        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      // changing these to capture phase fixed combobox
      document.addEventListener("pointerdown", onPointerDown, true);
      document.addEventListener("pointerup", onPointerUp, true);
      return () => {
        document.removeEventListener("pointerdown", onPointerDown, true);
        document.removeEventListener("pointerup", onPointerUp, true);
      };
    } else {
      let onMouseUp = e => {
        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      let onTouchEnd = e => {
        state.ignoreEmulatedMouseEvents = true;
        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      document.addEventListener("mousedown", onPointerDown, true);
      document.addEventListener("mouseup", onMouseUp, true);
      document.addEventListener("touchstart", onPointerDown, true);
      document.addEventListener("touchend", onTouchEnd, true);
      return () => {
        document.removeEventListener("mousedown", onPointerDown, true);
        document.removeEventListener("mouseup", onMouseUp, true);
        document.removeEventListener("touchstart", onPointerDown, true);
        document.removeEventListener("touchend", onTouchEnd, true);
      };
    }
  }, [ref, state, isDisabled]);
}
function $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0) return false;
  // if the event target is no longer in the document
  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
  }
  return ref.current && !ref.current.contains(event.target);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return;
  let shouldStopPropagation = true;
  return e => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        shouldStopPropagation = false;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $e8a7022cf87cba2a$export$36da96379f79f245(props) {
  let {
    onMoveStart: onMoveStart,
    onMove: onMove,
    onMoveEnd: onMoveEnd
  } = props;
  let state = (0, $bx7SL$useRef)({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = (0, $bx7SL$useGlobalListeners)();
  let moveProps = (0, $bx7SL$useMemo)(() => {
    let moveProps = {};
    let start = () => {
      (0, $14c0b72509d70225$export$16a4697467175487)();
      state.current.didMove = false;
    };
    let move = (originalEvent, pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0) return;
      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
          type: "movestart",
          pointerType: pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }
      onMove({
        type: "move",
        pointerType: pointerType,
        deltaX: deltaX,
        deltaY: deltaY,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let end = (originalEvent, pointerType) => {
      (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();
      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
        type: "moveend",
        pointerType: pointerType,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    if (typeof PointerEvent === "undefined") {
      let onMouseMove = e => {
        if (e.button === 0) {
          move(e, "mouse", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onMouseUp = e => {
        if (e.button === 0) {
          end(e, "mouse");
          removeGlobalListener(window, "mousemove", onMouseMove, false);
          removeGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      moveProps.onMouseDown = e => {
        if (e.button === 0) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          addGlobalListener(window, "mousemove", onMouseMove, false);
          addGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      let onTouchMove = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          let {
            pageX: pageX,
            pageY: pageY
          } = e.changedTouches[touch];
          move(e, "touch", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: pageX,
            pageY: pageY
          };
        }
      };
      let onTouchEnd = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          end(e, "touch");
          state.current.id = null;
          removeGlobalListener(window, "touchmove", onTouchMove);
          removeGlobalListener(window, "touchend", onTouchEnd);
          removeGlobalListener(window, "touchcancel", onTouchEnd);
        }
      };
      moveProps.onTouchStart = e => {
        if (e.changedTouches.length === 0 || state.current.id != null) return;
        let {
          pageX: pageX,
          pageY: pageY,
          identifier: identifier
        } = e.changedTouches[0];
        start();
        e.stopPropagation();
        e.preventDefault();
        state.current.lastPosition = {
          pageX: pageX,
          pageY: pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, "touchmove", onTouchMove, false);
        addGlobalListener(window, "touchend", onTouchEnd, false);
        addGlobalListener(window, "touchcancel", onTouchEnd, false);
      };
    } else {
      let onPointerMove = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || "mouse";
          // Problems with PointerEvent#movementX/movementY:
          // 1. it is always 0 on macOS Safari.
          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || "mouse";
          end(e, pointerType);
          state.current.id = null;
          removeGlobalListener(window, "pointermove", onPointerMove, false);
          removeGlobalListener(window, "pointerup", onPointerUp, false);
          removeGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
      moveProps.onPointerDown = e => {
        if (e.button === 0 && state.current.id == null) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          state.current.id = e.pointerId;
          addGlobalListener(window, "pointermove", onPointerMove, false);
          addGlobalListener(window, "pointerup", onPointerUp, false);
          addGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
    }
    let triggerKeyboardMove = (e, deltaX, deltaY) => {
      start();
      move(e, "keyboard", deltaX, deltaY);
      end(e, "keyboard");
    };
    moveProps.onKeyDown = e => {
      switch (e.key) {
        case "Left":
        case "ArrowLeft":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, -1, 0);
          break;
        case "Right":
        case "ArrowRight":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 1, 0);
          break;
        case "Up":
        case "ArrowUp":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, -1);
          break;
        case "Down":
        case "ArrowDown":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, 1);
          break;
      }
    };
    return moveProps;
  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);
  return {
    moveProps: moveProps
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
  let {
    onScroll: onScroll,
    isDisabled: isDisabled
  } = props;
  let onScrollHandler = (0, $bx7SL$useCallback)(e => {
    // If the ctrlKey is pressed, this is a zoom event, do nothing.
    if (e.ctrlKey) return;
    // stop scrolling the page
    e.preventDefault();
    e.stopPropagation();
    if (onScroll) onScroll({
      deltaX: e.deltaX,
      deltaY: e.deltaY
    });
  }, [onScroll]);
  (0, $bx7SL$useEvent)(ref, "wheel", isDisabled ? null : onScrollHandler);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
function $8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let {
    isDisabled: isDisabled,
    onLongPressStart: onLongPressStart,
    onLongPressEnd: onLongPressEnd,
    onLongPress: onLongPress,
    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,
    accessibilityDescription: accessibilityDescription
  } = props;
  const timeRef = (0, $bx7SL$useRef)(null);
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = (0, $bx7SL$useGlobalListeners)();
  let {
    pressProps: pressProps
  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled,
    onPressStart(e) {
      if (e.pointerType === "mouse" || e.pointerType === "touch") {
        if (onLongPressStart) onLongPressStart({
          ...e,
          type: "longpressstart"
        });
        timeRef.current = setTimeout(() => {
          // Prevent other usePress handlers from also handling this event.
          e.target.dispatchEvent(new PointerEvent("pointercancel", {
            bubbles: true
          }));
          if (onLongPress) onLongPress({
            ...e,
            type: "longpress"
          });
          timeRef.current = null;
        }, threshold);
        // Prevent context menu, which may be opened on long press on touch devices
        if (e.pointerType === "touch") {
          let onContextMenu = e => {
            e.preventDefault();
          };
          addGlobalListener(e.target, "contextmenu", onContextMenu, {
            once: true
          });
          addGlobalListener(window, "pointerup", () => {
            // If no contextmenu event is fired quickly after pointerup, remove the handler
            // so future context menu events outside a long press are not prevented.
            setTimeout(() => {
              removeGlobalListener(e.target, "contextmenu", onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },
    onPressEnd(e) {
      if (timeRef.current) clearTimeout(timeRef.current);
      if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch")) onLongPressEnd({
        ...e,
        type: "longpressend"
      });
    }
  });
  let descriptionProps = (0, $bx7SL$useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: (0, $bx7SL$mergeProps)(pressProps, descriptionProps)
  };
}

// EXTERNAL MODULE: external {"root":"ReactDOM","commonjs2":"react-dom","commonjs":"react-dom","amd":"react-dom"}
var external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_ = __webpack_require__(156);
var external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default = /*#__PURE__*/__webpack_require__.n(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_);
;// CONCATENATED MODULE: ./node_modules/@react-aria/overlays/node_modules/@react-aria/visually-hidden/dist/module.js




/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */

const $5c3e21d68f1c4674$var$styles = {
  border: 0,
  clip: "rect(0 0 0 0)",
  clipPath: "inset(50%)",
  height: 1,
  margin: "0 -1px -1px 0",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  width: 1,
  whiteSpace: "nowrap"
};
function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
  let {
    style: style,
    isFocusable: isFocusable
  } = props;
  let [isFocused, setFocused] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let {
    focusWithinProps: focusWithinProps
  } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    isDisabled: !isFocusable,
    onFocusWithinChange: val => setFocused(val)
  });
  // If focused, don't hide the element.
  let combinedStyles = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isFocused) return style;else if (style) return {
      ...$5c3e21d68f1c4674$var$styles,
      ...style
    };else return $5c3e21d68f1c4674$var$styles;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isFocused]);
  return {
    visuallyHiddenProps: {
      ...focusWithinProps,
      style: combinedStyles
    }
  };
}
function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  let {
    children: children,
    elementType: Element = "div",
    isFocusable: isFocusable,
    style: style,
    ...otherProps
  } = props;
  let {
    visuallyHiddenProps: visuallyHiddenProps
  } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
  return /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createElement(Element, (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(otherProps, visuallyHiddenProps), children);
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/overlays/dist/module.js








function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
const $edcf132a9284368a$var$AXIS = {
  top: 'top',
  bottom: 'top',
  left: 'left',
  right: 'left'
};
const $edcf132a9284368a$var$FLIPPED_DIRECTION = {
  top: 'bottom',
  bottom: 'top',
  left: 'right',
  right: 'left'
};
const $edcf132a9284368a$var$CROSS_AXIS = {
  top: 'left',
  left: 'top'
};
const $edcf132a9284368a$var$AXIS_SIZE = {
  top: 'height',
  left: 'width'
};
const $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE = {};
// @ts-ignore
let $edcf132a9284368a$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;
function $edcf132a9284368a$var$getContainerDimensions(containerNode) {
  let width = 0,
    height = 0,
    top = 0,
    left = 0;
  let scroll = {};
  if (containerNode.tagName === 'BODY') {
    let documentElement = document.documentElement;
    var ref;
    width = (ref = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.width) !== null && ref !== void 0 ? ref : documentElement.clientWidth;
    var ref1;
    height = (ref1 = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.height) !== null && ref1 !== void 0 ? ref1 : documentElement.clientHeight;
    scroll.top = documentElement.scrollTop || containerNode.scrollTop;
    scroll.left = documentElement.scrollLeft || containerNode.scrollLeft;
  } else {
    ({
      width: width,
      height: height,
      top: top,
      left: left
    } = $edcf132a9284368a$var$getOffset(containerNode));
    scroll.top = containerNode.scrollTop;
    scroll.left = containerNode.scrollLeft;
  }
  return {
    width: width,
    height: height,
    scroll: scroll,
    top: top,
    left: left
  };
}
function $edcf132a9284368a$var$getScroll(node) {
  return {
    top: node.scrollTop,
    left: node.scrollLeft,
    width: node.scrollWidth,
    height: node.scrollHeight
  };
}
function $edcf132a9284368a$var$getDelta(axis, offset, size, containerDimensions, padding) {
  let containerScroll = containerDimensions.scroll[axis];
  let containerHeight = containerDimensions[$edcf132a9284368a$var$AXIS_SIZE[axis]];
  let startEdgeOffset = offset - padding - containerScroll;
  let endEdgeOffset = offset + padding - containerScroll + size;
  if (startEdgeOffset < 0) return -startEdgeOffset;else if (endEdgeOffset > containerHeight) return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);else return 0;
}
function $edcf132a9284368a$var$getMargins(node) {
  let style = window.getComputedStyle(node);
  return {
    top: parseInt(style.marginTop, 10) || 0,
    bottom: parseInt(style.marginBottom, 10) || 0,
    left: parseInt(style.marginLeft, 10) || 0,
    right: parseInt(style.marginRight, 10) || 0
  };
}
function $edcf132a9284368a$var$parsePlacement(input) {
  if ($edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input]) return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
  let [placement, crossPlacement] = input.split(' ');
  let axis = $edcf132a9284368a$var$AXIS[placement] || 'right';
  let crossAxis = $edcf132a9284368a$var$CROSS_AXIS[axis];
  if (!$edcf132a9284368a$var$AXIS[crossPlacement]) crossPlacement = 'center';
  let size = $edcf132a9284368a$var$AXIS_SIZE[axis];
  let crossSize = $edcf132a9284368a$var$AXIS_SIZE[crossAxis];
  $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input] = {
    placement: placement,
    crossPlacement: crossPlacement,
    axis: axis,
    crossAxis: crossAxis,
    size: size,
    crossSize: crossSize
  };
  return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
}
function $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {
  let {
    placement: placement,
    crossPlacement: crossPlacement,
    axis: axis,
    crossAxis: crossAxis,
    size: size,
    crossSize: crossSize
  } = placementInfo;
  let position = {};
  // button position
  position[crossAxis] = childOffset[crossAxis];
  if (crossPlacement === 'center')
    //  + (button size / 2) - (overlay size / 2)
    // at this point the overlay center should match the button center
    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;else if (crossPlacement !== crossAxis)
    //  + (button size) - (overlay size)
    // at this point the overlay bottom should match the button bottom
    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
  /* else {
  the overlay top should match the button top
  } */
  // add the crossOffset from props
  position[crossAxis] += crossOffset;
  // this is button center position - the overlay size + half of the button to align bottom of overlay with button center
  let minViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2 - overlaySize[crossSize];
  // this is button position of center, aligns top of overlay with button center
  let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;
  // clamp it into the range of the min/max positions
  position[crossAxis] = Math.min(Math.max(minViablePosition, position[crossAxis]), maxViablePosition);
  // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.
  if (placement === axis) {
    // If the container is positioned (non-static), then we use the container's actual
    // height, as `bottom` will be relative to this height.  But if the container is static,
    // then it can only be the `document.body`, and `bottom` will be relative to _its_
    // container, which should be as large as boundaryDimensions.
    const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size];
    position[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
  } else position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
  return position;
}
function $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {
  return position.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position.top) - (margins.top + margins.bottom + padding) // save additional space for margin and padding
  ) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding) // save additional space for margin and padding
  );
}

function $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
  let {
    placement: placement,
    axis: axis,
    size: size
  } = placementInfo;
  if (placement === axis) return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
}
function $edcf132a9284368a$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, userSetMaxHeight) {
  let placementInfo = $edcf132a9284368a$var$parsePlacement(placementInput);
  let {
    size: size,
    crossAxis: crossAxis,
    crossSize: crossSize,
    placement: placement,
    crossPlacement: crossPlacement
  } = placementInfo;
  let position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
  let normalizedOffset = offset;
  let space = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);
  // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip
  if (flip && scrollSize[size] > space) {
    let flippedPlacementInfo = $edcf132a9284368a$var$parsePlacement(`${$edcf132a9284368a$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
    let flippedPosition = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
    let flippedSpace = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);
    // If the available space for the flipped position is greater than the original available space, flip.
    if (flippedSpace > space) {
      placementInfo = flippedPlacementInfo;
      position = flippedPosition;
      normalizedOffset = offset;
    }
  }
  let delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
  position[crossAxis] += delta;
  let maxHeight = $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);
  if (userSetMaxHeight && userSetMaxHeight < maxHeight) maxHeight = userSetMaxHeight;
  overlaySize.height = Math.min(overlaySize.height, maxHeight);
  position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
  delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
  position[crossAxis] += delta;
  let arrowPosition = {};
  arrowPosition[crossAxis] = childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;
  return {
    position: position,
    maxHeight: maxHeight,
    arrowOffsetLeft: arrowPosition.left,
    arrowOffsetTop: arrowPosition.top,
    placement: placementInfo.placement
  };
}
function $edcf132a9284368a$export$b3ceb0cbf1056d98(opts) {
  let {
    placement: placement,
    targetNode: targetNode,
    overlayNode: overlayNode,
    scrollNode: scrollNode,
    padding: padding,
    shouldFlip: shouldFlip,
    boundaryElement: boundaryElement,
    offset: offset,
    crossOffset: crossOffset,
    maxHeight: maxHeight
  } = opts;
  let container = overlayNode instanceof HTMLElement && overlayNode.offsetParent || document.body;
  let isBodyContainer = container.tagName === 'BODY';
  const containerPositionStyle = window.getComputedStyle(container).position;
  let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== 'static';
  let childOffset = isBodyContainer ? $edcf132a9284368a$var$getOffset(targetNode) : $edcf132a9284368a$var$getPosition(targetNode, container);
  if (!isBodyContainer) {
    let {
      marginTop: marginTop,
      marginLeft: marginLeft
    } = window.getComputedStyle(targetNode);
    childOffset.top += parseInt(marginTop, 10) || 0;
    childOffset.left += parseInt(marginLeft, 10) || 0;
  }
  let overlaySize = $edcf132a9284368a$var$getOffset(overlayNode);
  let margins = $edcf132a9284368a$var$getMargins(overlayNode);
  overlaySize.width += margins.left + margins.right;
  overlaySize.height += margins.top + margins.bottom;
  let scrollSize = $edcf132a9284368a$var$getScroll(scrollNode);
  let boundaryDimensions = $edcf132a9284368a$var$getContainerDimensions(boundaryElement);
  let containerOffsetWithBoundary = boundaryElement.tagName === 'BODY' ? $edcf132a9284368a$var$getOffset(container) : $edcf132a9284368a$var$getPosition(container, boundaryElement);
  return $edcf132a9284368a$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, maxHeight);
}
function $edcf132a9284368a$var$getOffset(node) {
  let {
    top: top,
    left: left,
    width: width,
    height: height
  } = node.getBoundingClientRect();
  let {
    scrollTop: scrollTop,
    scrollLeft: scrollLeft,
    clientTop: clientTop,
    clientLeft: clientLeft
  } = document.documentElement;
  return {
    top: top + scrollTop - clientTop,
    left: left + scrollLeft - clientLeft,
    width: width,
    height: height
  };
}
function $edcf132a9284368a$var$getPosition(node, parent) {
  let style = window.getComputedStyle(node);
  let offset;
  if (style.position === 'fixed') {
    let {
      top: top,
      left: left,
      width: width,
      height: height
    } = node.getBoundingClientRect();
    offset = {
      top: top,
      left: left,
      width: width,
      height: height
    };
  } else {
    offset = $edcf132a9284368a$var$getOffset(node);
    let parentOffset = $edcf132a9284368a$var$getOffset(parent);
    let parentStyle = window.getComputedStyle(parent);
    parentOffset.top += (parseInt(parentStyle.borderTopWidth, 10) || 0) - parent.scrollTop;
    parentOffset.left += (parseInt(parentStyle.borderLeftWidth, 10) || 0) - parent.scrollLeft;
    offset.top -= parentOffset.top;
    offset.left -= parentOffset.left;
  }
  offset.top -= parseInt(style.marginTop, 10) || 0;
  offset.left -= parseInt(style.marginLeft, 10) || 0;
  return offset;
}
const $dd149f63282afbbf$export$f6211563215e3b37 = new WeakMap();
function $dd149f63282afbbf$export$18fc8428861184da(opts) {
  let {
    triggerRef: triggerRef,
    isOpen: isOpen,
    onClose: onClose
  } = opts;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!isOpen) return;
    let onScroll = e => {
      // Ignore if scrolling an scrollable region outside the trigger's tree.
      let target = e.target;
      // window is not a Node and doesn't have contain, but window contains everything
      if (!triggerRef.current || target instanceof Node && !target.contains(triggerRef.current)) return;
      let onCloseHandler = onClose || $dd149f63282afbbf$export$f6211563215e3b37.get(triggerRef.current);
      if (onCloseHandler) onCloseHandler();
    };
    window.addEventListener('scroll', onScroll, true);
    return () => {
      window.removeEventListener('scroll', onScroll, true);
    };
  }, [isOpen, onClose, triggerRef]);
}

// @ts-ignore
let $2a41e45df1593e64$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;
function $2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {
  let {
    direction: direction
  } = real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let {
    targetRef: targetRef,
    overlayRef: overlayRef,
    scrollRef = overlayRef,
    placement = 'bottom',
    containerPadding = 12,
    shouldFlip = true,
    boundaryElement = typeof document !== 'undefined' ? document.body : null,
    offset = 0,
    crossOffset = 0,
    shouldUpdatePosition = true,
    isOpen = true,
    onClose: onClose,
    maxHeight: maxHeight
  } = props;
  let [position, setPosition] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)({
    position: {},
    arrowOffsetLeft: undefined,
    arrowOffsetTop: undefined,
    maxHeight: undefined,
    placement: undefined
  });
  let deps = [shouldUpdatePosition, placement, overlayRef.current, targetRef.current, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction, maxHeight];
  let updatePosition = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) return;
    setPosition($edcf132a9284368a$export$b3ceb0cbf1056d98({
      placement: $2a41e45df1593e64$var$translateRTL(placement, direction),
      overlayNode: overlayRef.current,
      targetNode: targetRef.current,
      scrollNode: scrollRef.current,
      padding: containerPadding,
      shouldFlip: shouldFlip,
      boundaryElement: boundaryElement,
      offset: offset,
      crossOffset: crossOffset,
      maxHeight: maxHeight
    }));
  }, deps);
  // Update position when anything changes
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updatePosition, deps);
  // Update position on window resize
  $2a41e45df1593e64$var$useResize(updatePosition);
  // Reposition the overlay and do not close on scroll while the visual viewport is resizing.
  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.
  let isResizing = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let timeout;
    let onResize = () => {
      isResizing.current = true;
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        isResizing.current = false;
      }, 500);
      updatePosition();
    };
    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('resize', onResize);
    return () => {
      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('resize', onResize);
    };
  }, [updatePosition]);
  let close = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    if (!isResizing.current) onClose();
  }, [onClose, isResizing]);
  // When scrolling a parent scrollable region of the trigger (other than the body),
  // we hide the popover. Otherwise, its position would be incorrect.
  $dd149f63282afbbf$export$18fc8428861184da({
    triggerRef: targetRef,
    isOpen: isOpen,
    onClose: onClose ? close : undefined
  });
  return {
    overlayProps: {
      style: {
        position: 'absolute',
        zIndex: 100000,
        ...position.position,
        maxHeight: position.maxHeight
      }
    },
    placement: position.placement,
    arrowProps: {
      style: {
        left: position.arrowOffsetLeft,
        top: position.arrowOffsetTop
      }
    },
    updatePosition: updatePosition
  };
}
function $2a41e45df1593e64$var$useResize(onResize) {
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    window.addEventListener('resize', onResize, false);
    return () => {
      window.removeEventListener('resize', onResize, false);
    };
  }, [onResize]);
}
function $2a41e45df1593e64$var$translateRTL(position, direction) {
  if (direction === 'rtl') return position.replace('start', 'right').replace('end', 'left');
  return position.replace('start', 'left').replace('end', 'right');
}
const $a11501f3d1d39e6c$var$visibleOverlays = [];
function $a11501f3d1d39e6c$export$ea8f71083e90600f(props, ref) {
  let {
    onClose: onClose,
    shouldCloseOnBlur: shouldCloseOnBlur,
    isOpen: isOpen,
    isDismissable = false,
    isKeyboardDismissDisabled = false,
    shouldCloseOnInteractOutside: shouldCloseOnInteractOutside
  } = props;
  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isOpen) $a11501f3d1d39e6c$var$visibleOverlays.push(ref);
    return () => {
      let index = $a11501f3d1d39e6c$var$visibleOverlays.indexOf(ref);
      if (index >= 0) $a11501f3d1d39e6c$var$visibleOverlays.splice(index, 1);
    };
  }, [isOpen, ref]);
  // Only hide the overlay when it is the topmost visible overlay in the stack.
  let onHide = () => {
    if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref && onClose) onClose();
  };
  let onInteractOutsideStart = e => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
        e.stopPropagation();
        e.preventDefault();
      }
    }
  };
  let onInteractOutside = e => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
        e.stopPropagation();
        e.preventDefault();
      }
      onHide();
    }
  };
  // Handle the escape key
  let onKeyDown = e => {
    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {
      e.stopPropagation();
      e.preventDefault();
      onHide();
    }
  };
  // Handle clicking outside the overlay to close it
  $e0b6e0b68ec7f50f$export$872b660ac5a1ff98({
    ref: ref,
    onInteractOutside: isDismissable ? onInteractOutside : null,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let {
    focusWithinProps: focusWithinProps
  } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !shouldCloseOnBlur,
    onBlurWithin: e => {
      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) onClose();
    }
  });
  let onPointerDownUnderlay = e => {
    // fixes a firefox issue that starts text selection https://bugzilla.mozilla.org/show_bug.cgi?id=1675846
    if (e.target === e.currentTarget) e.preventDefault();
  };
  return {
    overlayProps: {
      onKeyDown: onKeyDown,
      ...focusWithinProps
    },
    underlayProps: {
      onPointerDown: onPointerDownUnderlay
    }
  };
}
function $628037886ba31236$export$f9d5c8beee7d008d(props, state, ref) {
  let {
    type: type
  } = props;
  let {
    isOpen: isOpen
  } = state;
  // Backward compatibility. Share state close function with useOverlayPosition so it can close on scroll
  // without forcing users to pass onClose.
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (ref && ref.current) $dd149f63282afbbf$export$f6211563215e3b37.set(ref.current, state.close);
  });
  // Aria 1.1 supports multiple values for aria-haspopup other than just menus.
  // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup
  // However, we only add it for menus for now because screen readers often
  // announce it as a menu even for other values.
  let ariaHasPopup = undefined;
  if (type === 'menu') ariaHasPopup = true;else if (type === 'listbox') ariaHasPopup = 'listbox';
  let overlayId = $bdb11010cef70236$export$f680877a34711e37();
  return {
    triggerProps: {
      'aria-haspopup': ariaHasPopup,
      'aria-expanded': isOpen,
      'aria-controls': isOpen ? overlayId : null,
      onPress: state.toggle
    },
    overlayProps: {
      id: overlayId
    }
  };
}

// @ts-ignore
const $49c51c25361d4cd2$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;
// HTML input types that do not cause the software keyboard to appear.
const $49c51c25361d4cd2$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);
function $49c51c25361d4cd2$export$ee0f7cc6afcd1c18(options = {}) {
  let {
    isDisabled: isDisabled
  } = options;
  $k7QOs$useLayoutEffect(() => {
    if (isDisabled) return;
    if ($k7QOs$isIOS()) return $49c51c25361d4cd2$var$preventScrollMobileSafari();else return $49c51c25361d4cd2$var$preventScrollStandard();
  }, [isDisabled]);
}
// For most browsers, all we need to do is set `overflow: hidden` on the root element, and
// add some padding to prevent the page from shifting when the scrollbar is hidden.
function $49c51c25361d4cd2$var$preventScrollStandard() {
  return $k7QOs$chain($49c51c25361d4cd2$var$setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, 'overflow', 'hidden'));
}
// Mobile Safari is a whole different beast. Even with overflow: hidden,
// it still scrolls the page in many situations:
//
// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.
// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of
//    it, so it becomes scrollable.
// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.
//    This may cause even fixed position elements to scroll off the screen.
// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always
//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.
//
// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:
//
// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling
//    on the window.
// 2. Prevent default on `touchmove` events inside a scrollable element when the scroll position is at the
//    top or bottom. This avoids the whole page scrolling instead, but does prevent overscrolling.
// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.
// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top
//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element
//    into view ourselves, without scrolling the whole page.
// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the
//    same visually, but makes the actual scroll position always zero. This is required to make all of the
//    above work or Safari will still try to scroll the page when focusing an input.
// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting
//    to navigate to an input with the next/previous buttons that's outside a modal.
function $49c51c25361d4cd2$var$preventScrollMobileSafari() {
  let scrollable;
  let lastY = 0;
  let onTouchStart = e => {
    // Store the nearest scrollable parent element from the element that the user touched.
    scrollable = $k7QOs$getScrollParent(e.target);
    if (scrollable === document.documentElement && scrollable === document.body) return;
    lastY = e.changedTouches[0].pageY;
  };
  let onTouchMove = e => {
    // Prevent scrolling the window.
    if (scrollable === document.documentElement || scrollable === document.body) {
      e.preventDefault();
      return;
    }
    // Prevent scrolling up when at the top and scrolling down when at the bottom
    // of a nested scrollable area, otherwise mobile Safari will start scrolling
    // the window instead. Unfortunately, this disables bounce scrolling when at
    // the top but it's the best we can do.
    let y = e.changedTouches[0].pageY;
    let scrollTop = scrollable.scrollTop;
    let bottom = scrollable.scrollHeight - scrollable.clientHeight;
    if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY) e.preventDefault();
    lastY = y;
  };
  let onTouchEnd = e => {
    let target = e.target;
    // Apply this change if we're not already focused on the target element
    if ($49c51c25361d4cd2$var$willOpenKeyboard(target) && target !== document.activeElement) {
      e.preventDefault();
      // Apply a transform to trick Safari into thinking the input is at the top of the page
      // so it doesn't try to scroll it into view. When tapping on an input, this needs to
      // be done before the "focus" event, so we have to focus the element ourselves.
      target.style.transform = 'translateY(-2000px)';
      target.focus();
      requestAnimationFrame(() => {
        target.style.transform = '';
      });
    }
  };
  let onFocus = e => {
    let target = e.target;
    if ($49c51c25361d4cd2$var$willOpenKeyboard(target)) {
      // Transform also needs to be applied in the focus event in cases where focus moves
      // other than tapping on an input directly, e.g. the next/previous buttons in the
      // software keyboard. In these cases, it seems applying the transform in the focus event
      // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️
      target.style.transform = 'translateY(-2000px)';
      requestAnimationFrame(() => {
        target.style.transform = '';
        // This will have prevented the browser from scrolling the focused element into view,
        // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.
        if ($49c51c25361d4cd2$var$visualViewport) {
          if ($49c51c25361d4cd2$var$visualViewport.height < window.innerHeight)
            // If the keyboard is already visible, do this after one additional frame
            // to wait for the transform to be removed.
            requestAnimationFrame(() => {
              $49c51c25361d4cd2$var$scrollIntoView(target);
            });else
            // Otherwise, wait for the visual viewport to resize before scrolling so we can
            // measure the correct position to scroll to.
            $49c51c25361d4cd2$var$visualViewport.addEventListener('resize', () => $49c51c25361d4cd2$var$scrollIntoView(target), {
              once: true
            });
        }
      });
    }
  };
  let onWindowScroll = () => {
    // Last resort. If the window scrolled, scroll it back to the top.
    // It should always be at the top because the body will have a negative margin (see below).
    window.scrollTo(0, 0);
  };
  // Record the original scroll position so we can restore it.
  // Then apply a negative margin to the body to offset it by the scroll position. This will
  // enable us to scroll the window to the top, which is required for the rest of this to work.
  let scrollX = window.pageXOffset;
  let scrollY = window.pageYOffset;
  let restoreStyles = $k7QOs$chain($49c51c25361d4cd2$var$setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, 'overflow', 'hidden'), $49c51c25361d4cd2$var$setStyle(document.body, 'marginTop', `-${scrollY}px`));
  // Scroll to the top. The negative margin on the body will make this appear the same.
  window.scrollTo(0, 0);
  let removeEvents = $k7QOs$chain($49c51c25361d4cd2$var$addEvent(document, 'touchstart', onTouchStart, {
    passive: false,
    capture: true
  }), $49c51c25361d4cd2$var$addEvent(document, 'touchmove', onTouchMove, {
    passive: false,
    capture: true
  }), $49c51c25361d4cd2$var$addEvent(document, 'touchend', onTouchEnd, {
    passive: false,
    capture: true
  }), $49c51c25361d4cd2$var$addEvent(document, 'focus', onFocus, true), $49c51c25361d4cd2$var$addEvent(window, 'scroll', onWindowScroll));
  return () => {
    // Restore styles and scroll the page back to where it was.
    restoreStyles();
    removeEvents();
    window.scrollTo(scrollX, scrollY);
  };
}
// Sets a CSS property on an element, and returns a function to revert it to the previous value.
function $49c51c25361d4cd2$var$setStyle(element, style, value) {
  let cur = element.style[style];
  element.style[style] = value;
  return () => {
    element.style[style] = cur;
  };
}
// Adds an event listener to an element, and returns a function to remove it.
function $49c51c25361d4cd2$var$addEvent(target, event, handler, options) {
  target.addEventListener(event, handler, options);
  return () => {
    target.removeEventListener(event, handler, options);
  };
}
function $49c51c25361d4cd2$var$scrollIntoView(target) {
  let root = document.scrollingElement || document.documentElement;
  while (target && target !== root) {
    // Find the parent scrollable element and adjust the scroll position if the target is not already in view.
    let scrollable = $k7QOs$getScrollParent(target);
    if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {
      let scrollableTop = scrollable.getBoundingClientRect().top;
      let targetTop = target.getBoundingClientRect().top;
      if (targetTop > scrollableTop + target.clientHeight) scrollable.scrollTop += targetTop - scrollableTop;
    }
    target = scrollable.parentElement;
  }
}
function $49c51c25361d4cd2$var$willOpenKeyboard(target) {
  return target instanceof HTMLInputElement && !$49c51c25361d4cd2$var$nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;
}
const $f57aed4a881a3485$var$Context = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);
function $f57aed4a881a3485$export$178405afcd8c5eb(props) {
  let {
    children: children
  } = props;
  let parent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($f57aed4a881a3485$var$Context);
  let [modalCount, setModalCount] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(0);
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    parent: parent,
    modalCount: modalCount,
    addModal() {
      setModalCount(count => count + 1);
      if (parent) parent.addModal();
    },
    removeModal() {
      setModalCount(count => count - 1);
      if (parent) parent.removeModal();
    }
  }), [parent, modalCount]);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($f57aed4a881a3485$var$Context.Provider, {
    value: context
  }, children);
}
function $f57aed4a881a3485$export$d9aaed4c3ece1bc0() {
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($f57aed4a881a3485$var$Context);
  return {
    modalProviderProps: {
      'aria-hidden': context && context.modalCount > 0 ? true : null
    }
  };
}
/**
 * Creates a root node that will be aria-hidden if there are other modals open.
 */
function $f57aed4a881a3485$var$OverlayContainerDOM(props) {
  let {
    modalProviderProps: modalProviderProps
  } = $f57aed4a881a3485$export$d9aaed4c3ece1bc0();
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("div", {
    "data-overlay-container": true,
    ...props,
    ...modalProviderProps
  });
}
function $f57aed4a881a3485$export$bf688221f59024e5(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($f57aed4a881a3485$export$178405afcd8c5eb, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($f57aed4a881a3485$var$OverlayContainerDOM, props));
}
function $f57aed4a881a3485$export$b47c3594eab58386(props) {
  let isSSR = dist_module_$704cf1d3b684cc5c$export$535bd6ca7f90a273();
  let {
    portalContainer = isSSR ? null : document.body,
    ...rest
  } = props;
  external_root_React_commonjs2_react_commonjs_react_amd_react_default().useEffect(() => {
    if (portalContainer === null || portalContainer === void 0 ? void 0 : portalContainer.closest('[data-overlay-container]')) throw new Error('An OverlayContainer must not be inside another container. Please change the portalContainer prop.');
  }, [portalContainer]);
  if (!portalContainer) return null;
  let contents = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($f57aed4a881a3485$export$bf688221f59024e5, rest);
  return /*#__PURE__*/external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default().createPortal(contents, portalContainer);
}
function $f57aed4a881a3485$export$33ffd74ebf07f060(options) {
  // Add aria-hidden to all parent providers on mount, and restore on unmount.
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($f57aed4a881a3485$var$Context);
  if (!context) throw new Error('Modal is not contained within a provider');
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if ((options === null || options === void 0 ? void 0 : options.isDisabled) || !context || !context.parent) return;
    // The immediate context is from the provider containing this modal, so we only
    // want to trigger aria-hidden on its parents not on the modal provider itself.
    context.parent.addModal();
    return () => {
      if (context && context.parent) context.parent.removeModal();
    };
  }, [context, context.parent, options === null || options === void 0 ? void 0 : options.isDisabled]);
  return {
    modalProps: {
      'data-ismodal': !(options === null || options === void 0 ? void 0 : options.isDisabled)
    }
  };
}
var $61fe14465afefc5e$exports = {};
var $773d5888b972f1cf$exports = {};
$773d5888b972f1cf$exports = {
  "dismiss": `تجاهل`
};
var $d11f19852b941573$exports = {};
$d11f19852b941573$exports = {
  "dismiss": `Отхвърляне`
};
var $b983974c2ee1efb3$exports = {};
$b983974c2ee1efb3$exports = {
  "dismiss": `Odstranit`
};
var $5809cc9d4e92de73$exports = {};
$5809cc9d4e92de73$exports = {
  "dismiss": `Luk`
};
var $c68c2e4fc74398d1$exports = {};
$c68c2e4fc74398d1$exports = {
  "dismiss": `Schließen`
};
var $0898b4c153db2b77$exports = {};
$0898b4c153db2b77$exports = {
  "dismiss": `Απόρριψη`
};
var $6d74810286a15183$exports = {};
$6d74810286a15183$exports = {
  "dismiss": `Dismiss`
};
var $309d73dc65f78055$exports = {};
$309d73dc65f78055$exports = {
  "dismiss": `Descartar`
};
var $44ad94f7205cf593$exports = {};
$44ad94f7205cf593$exports = {
  "dismiss": `Lõpeta`
};
var $7c28f5687f0779a9$exports = {};
$7c28f5687f0779a9$exports = {
  "dismiss": `Hylkää`
};
var $e6d75df4b68bd73a$exports = {};
$e6d75df4b68bd73a$exports = {
  "dismiss": `Rejeter`
};
var $87505c9dab186d0f$exports = {};
$87505c9dab186d0f$exports = {
  "dismiss": `התעלם`
};
var $553439c3ffb3e492$exports = {};
$553439c3ffb3e492$exports = {
  "dismiss": `Odbaci`
};
var $74cf411061b983a2$exports = {};
$74cf411061b983a2$exports = {
  "dismiss": `Elutasítás`
};
var $e933f298574dc435$exports = {};
$e933f298574dc435$exports = {
  "dismiss": `Ignora`
};
var $ac91fc9fe02f71f6$exports = {};
$ac91fc9fe02f71f6$exports = {
  "dismiss": `閉じる`
};
var $52b96f86422025af$exports = {};
$52b96f86422025af$exports = {
  "dismiss": `무시`
};
var $c0d724c3e51dafa6$exports = {};
$c0d724c3e51dafa6$exports = {
  "dismiss": `Atmesti`
};
var $c92899672a3fe72e$exports = {};
$c92899672a3fe72e$exports = {
  "dismiss": `Nerādīt`
};
var $9f576b39d8e7a9d6$exports = {};
$9f576b39d8e7a9d6$exports = {
  "dismiss": `Lukk`
};
var $9d025808aeec81a7$exports = {};
$9d025808aeec81a7$exports = {
  "dismiss": `Negeren`
};
var $fce709921e2c0fa6$exports = {};
$fce709921e2c0fa6$exports = {
  "dismiss": `Zignoruj`
};
var $2599cf0c4ab37f59$exports = {};
$2599cf0c4ab37f59$exports = {
  "dismiss": `Descartar`
};
var $3c220ae7ef8a35fd$exports = {};
$3c220ae7ef8a35fd$exports = {
  "dismiss": `Dispensar`
};
var $93562b5094072f54$exports = {};
$93562b5094072f54$exports = {
  "dismiss": `Revocare`
};
var $cd9e2abd0d06c7b4$exports = {};
$cd9e2abd0d06c7b4$exports = {
  "dismiss": `Пропустить`
};
var $45375701f409adf1$exports = {};
$45375701f409adf1$exports = {
  "dismiss": `Zrušiť`
};
var $27fab53a576de9dd$exports = {};
$27fab53a576de9dd$exports = {
  "dismiss": `Opusti`
};
var $4438748d9952e7c7$exports = {};
$4438748d9952e7c7$exports = {
  "dismiss": `Odbaci`
};
var $0936d7347ef4da4c$exports = {};
$0936d7347ef4da4c$exports = {
  "dismiss": `Avvisa`
};
var $29700c92185d38f8$exports = {};
$29700c92185d38f8$exports = {
  "dismiss": `Kapat`
};
var $662ccaf2be4c25b3$exports = {};
$662ccaf2be4c25b3$exports = {
  "dismiss": `Скасувати`
};
var $d80a27deda7cdb3c$exports = {};
$d80a27deda7cdb3c$exports = {
  "dismiss": `取消`
};
var $2b2734393847c884$exports = {};
$2b2734393847c884$exports = {
  "dismiss": `關閉`
};
$61fe14465afefc5e$exports = {
  "ar-AE": $773d5888b972f1cf$exports,
  "bg-BG": $d11f19852b941573$exports,
  "cs-CZ": $b983974c2ee1efb3$exports,
  "da-DK": $5809cc9d4e92de73$exports,
  "de-DE": $c68c2e4fc74398d1$exports,
  "el-GR": $0898b4c153db2b77$exports,
  "en-US": $6d74810286a15183$exports,
  "es-ES": $309d73dc65f78055$exports,
  "et-EE": $44ad94f7205cf593$exports,
  "fi-FI": $7c28f5687f0779a9$exports,
  "fr-FR": $e6d75df4b68bd73a$exports,
  "he-IL": $87505c9dab186d0f$exports,
  "hr-HR": $553439c3ffb3e492$exports,
  "hu-HU": $74cf411061b983a2$exports,
  "it-IT": $e933f298574dc435$exports,
  "ja-JP": $ac91fc9fe02f71f6$exports,
  "ko-KR": $52b96f86422025af$exports,
  "lt-LT": $c0d724c3e51dafa6$exports,
  "lv-LV": $c92899672a3fe72e$exports,
  "nb-NO": $9f576b39d8e7a9d6$exports,
  "nl-NL": $9d025808aeec81a7$exports,
  "pl-PL": $fce709921e2c0fa6$exports,
  "pt-BR": $2599cf0c4ab37f59$exports,
  "pt-PT": $3c220ae7ef8a35fd$exports,
  "ro-RO": $93562b5094072f54$exports,
  "ru-RU": $cd9e2abd0d06c7b4$exports,
  "sk-SK": $45375701f409adf1$exports,
  "sl-SI": $27fab53a576de9dd$exports,
  "sr-SP": $4438748d9952e7c7$exports,
  "sv-SE": $0936d7347ef4da4c$exports,
  "tr-TR": $29700c92185d38f8$exports,
  "uk-UA": $662ccaf2be4c25b3$exports,
  "zh-CN": $d80a27deda7cdb3c$exports,
  "zh-TW": $2b2734393847c884$exports
};
function $86ea4cb521eb2e37$export$2317d149ed6f78c4(props) {
  let {
    onDismiss: onDismiss,
    ...otherProps
  } = props;
  let stringFormatter = real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1( /*@__PURE__*/$parcel$interopDefault($61fe14465afefc5e$exports));
  let labels = $313b98861ee5dd6c$export$d6875122194c7b44(otherProps, stringFormatter.format('dismiss'));
  let onClick = () => {
    if (onDismiss) onDismiss();
  };
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("button", {
    ...labels,
    tabIndex: -1,
    onClick: onClick
  }));
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Keeps a ref count of all hidden elements. Added to when hiding an element, and
// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.
let $5e3802645cc19319$var$refCountMap = new WeakMap();
function $5e3802645cc19319$export$1c3ebcada18427bf(targets, root = document.body) {
  let visibleNodes = new Set(targets);
  let hiddenNodes = new Set();
  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      // If this node is a live announcer, add it to the set of nodes to keep visible.
      if ((node instanceof HTMLElement || node instanceof SVGElement) && node.dataset.liveAnnouncer === 'true') visibleNodes.add(node);
      // Skip this node and its children if it is one of the target nodes, or a live announcer.
      // Also skip children of already hidden nodes, as aria-hidden is recursive. An exception is
      // made for elements with role="row" since VoiceOver on iOS has issues hiding elements with role="row".
      // For that case we want to hide the cells inside as well (https://bugs.webkit.org/show_bug.cgi?id=222623).
      if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute('role') !== 'row') return NodeFilter.FILTER_REJECT;
      // Skip this node but continue to children if one of the targets is inside the node.
      if (targets.some(target => node.contains(target))) return NodeFilter.FILTER_SKIP;
      return NodeFilter.FILTER_ACCEPT;
    }
  });
  let hide = node => {
    var ref;
    let refCount = (ref = $5e3802645cc19319$var$refCountMap.get(node)) !== null && ref !== void 0 ? ref : 0;
    // If already aria-hidden, and the ref count is zero, then this element
    // was already hidden and there's nothing for us to do.
    if (node.getAttribute('aria-hidden') === 'true' && refCount === 0) return;
    if (refCount === 0) node.setAttribute('aria-hidden', 'true');
    hiddenNodes.add(node);
    $5e3802645cc19319$var$refCountMap.set(node, refCount + 1);
  };
  let node1 = walker.nextNode();
  while (node1 != null) {
    hide(node1);
    node1 = walker.nextNode();
  }
  let observer = new MutationObserver(changes => {
    for (let change of changes) {
      if (change.type !== 'childList' || change.addedNodes.length === 0) continue;
      // If the parent element of the added nodes is not within one of the targets,
      // and not already inside a hidden node, hide all of the new children.
      if (![...visibleNodes, ...hiddenNodes].some(node => node.contains(change.target))) for (let node2 of change.addedNodes) {
        if ((node2 instanceof HTMLElement || node2 instanceof SVGElement) && node2.dataset.liveAnnouncer === 'true') visibleNodes.add(node2);else if (node2 instanceof Element) hide(node2);
      }
    }
  });
  observer.observe(root, {
    childList: true,
    subtree: true
  });
  return () => {
    observer.disconnect();
    for (let node of hiddenNodes) {
      let count = $5e3802645cc19319$var$refCountMap.get(node);
      if (count === 1) {
        node.removeAttribute('aria-hidden');
        $5e3802645cc19319$var$refCountMap.delete(node);
      } else $5e3802645cc19319$var$refCountMap.set(node, count - 1);
    }
  };
}
function $f2f8a6077418541e$export$542a6fd13ac93354(props, state) {
  let {
    triggerRef: triggerRef,
    popoverRef: popoverRef,
    isNonModal: isNonModal,
    ...otherProps
  } = props;
  let {
    overlayProps: overlayProps
  } = $a11501f3d1d39e6c$export$ea8f71083e90600f({
    isOpen: state.isOpen,
    onClose: state.close,
    shouldCloseOnBlur: true,
    isDismissable: true
  }, popoverRef);
  let {
    overlayProps: positionProps,
    arrowProps: arrowProps
  } = $2a41e45df1593e64$export$d39e1813b3bdd0e1({
    ...otherProps,
    targetRef: triggerRef,
    overlayRef: popoverRef,
    isOpen: state.isOpen
  });
  $k7QOs$useEffect(() => {
    if (state.isOpen && !isNonModal) return $5e3802645cc19319$export$1c3ebcada18427bf([popoverRef.current]);
  }, [isNonModal, state.isOpen, popoverRef]);
  return {
    popoverProps: $k7QOs$mergeProps(overlayProps, positionProps),
    arrowProps: arrowProps
  };
}
const $337b884510726a0d$var$OverlayContext = /*#__PURE__*/(/* unused pure expression or super */ null && ($k7QOs$react.createContext(null)));
function $337b884510726a0d$export$c6fdb837b070b4ff(props) {
  let isSSR = $k7QOs$useIsSSR();
  let {
    portalContainer = isSSR ? null : document.body
  } = props;
  let [contain, setContain] = $k7QOs$useState(false);
  if (!portalContainer) return null;
  let contents = /*#__PURE__*/$k7QOs$react.createElement($337b884510726a0d$var$OverlayContext.Provider, {
    value: setContain
  }, /*#__PURE__*/$k7QOs$react.createElement($k7QOs$FocusScope, {
    restoreFocus: true,
    contain: contain
  }, props.children));
  return /*#__PURE__*/$k7QOs$reactdom.createPortal(contents, portalContainer);
}
function $337b884510726a0d$export$14c98a7594375490() {
  let setContain = $k7QOs$useContext($337b884510726a0d$var$OverlayContext);
  $k7QOs$useLayoutEffect(() => {
    setContain === null || setContain === void 0 ? void 0 : setContain(true);
  }, [setContain]);
}
function $8ac8429251c45e4b$export$dbc0f175b25fb0fb(props, state, ref) {
  let {
    overlayProps: overlayProps,
    underlayProps: underlayProps
  } = $a11501f3d1d39e6c$export$ea8f71083e90600f({
    ...props,
    isOpen: state.isOpen,
    onClose: state.close
  }, ref);
  $49c51c25361d4cd2$export$ee0f7cc6afcd1c18({
    isDisabled: !state.isOpen
  });
  $337b884510726a0d$export$14c98a7594375490();
  $k7QOs$useEffect(() => {
    if (state.isOpen) return $5e3802645cc19319$export$1c3ebcada18427bf([ref.current]);
  }, [state.isOpen, ref]);
  return {
    modalProps: $k7QOs$mergeProps(overlayProps),
    underlayProps: underlayProps
  };
}

;// CONCATENATED MODULE: ./src/theme/utils.ts




const getTokenValue = (token, tokenName, alpha = 1) => {
  if (typeof document === "undefined" || !token) return "";
  let docStyle = getComputedStyle(document.documentElement);
  const tokenKey = `--${common.prefix}-${token}-${tokenName}`;
  const tokenValue = docStyle.getPropertyValue(tokenKey);
  if (tokenValue && tokenValue.includes("var")) {
    getTokenValue(token, tokenValue);
  }
  if (tokenValue && alpha !== 1) {
    if (tokenValue.includes("rgb")) {
      return rgbToRgba(tokenValue, alpha);
    }
    if (tokenValue.includes("#")) {
      return hexToRGBA(tokenValue, alpha);
    }
  }
  return tokenValue;
};
const getDocumentCSSTokens = () => {
  const colorKeys = [...Object.keys(common.theme.colors), ...Object.keys(light_theme.colors)];
  const shadowKeys = Object.keys(light_theme.shadows);

  /**
   * accents1: {
   *    prefix: "nextui"
   *    scale: "colors"
   *    token: "accents1"
   *    value: "var(--nextui-colors-gray100)"
   * }
   */
  const colorTokens = colorKeys.reduce((acc, crr) => {
    const color = getTokenValue("colors", crr);
    if (color) {
      acc[crr] = {
        prefix: common.prefix,
        scale: "colors",
        token: crr,
        value: color
      };
    }
    return acc;
  }, {});
  const shadowTokens = shadowKeys.reduce((acc, crr) => {
    const shadow = getTokenValue("shadows", crr);
    if (shadow) {
      acc[crr] = {
        prefix: common.prefix,
        scale: "shadows",
        token: crr,
        value: shadow
      };
    }
    return acc;
  }, {});
  return {
    colors: colorTokens,
    shadows: shadowTokens
  };
};

/**
 * Returns active theme according to the given document
 */
const getDocumentTheme = el => {
  var _el$getAttribute;
  const styleAttrValues = (el == null ? void 0 : (_el$getAttribute = el.getAttribute("style")) == null ? void 0 : _el$getAttribute.split(";").map(el => el.trim()).filter(el => el.includes("color-scheme"))) || [];
  const colorScheme = styleAttrValues.length > 0 ? styleAttrValues[0].replace("color-scheme: ", "").replace(";", "") : "";
  const documentTheme = el == null ? void 0 : el.getAttribute("data-theme");
  return documentTheme || colorScheme;
};
const getThemeName = theme => {
  if (typeof theme === "string") {
    return theme != null && theme.includes("-theme") ? theme == null ? void 0 : theme.replace("-theme", "") : theme;
  }
  return theme;
};
const changeTheme = theme => {
  var _el$getAttribute2, _el$getAttribute3;
  if (!document) return;
  const el = document.documentElement;
  const prevClasses = (el == null ? void 0 : (_el$getAttribute2 = el.getAttribute("class")) == null ? void 0 : _el$getAttribute2.split(" ").filter(cls => !cls.includes("theme") && !cls.includes("light") && !cls.includes("dark"))) || [];
  const prevStyles = (el == null ? void 0 : (_el$getAttribute3 = el.getAttribute("style")) == null ? void 0 : _el$getAttribute3.split(";").filter(stl => !stl.includes("color-scheme") && stl.length).map(el => `${el};`)) || [];
  const themeName = getThemeName(theme);
  el == null ? void 0 : el.setAttribute("class", clsx(prevClasses, `${themeName}-theme`));
  el == null ? void 0 : el.setAttribute("style", clsx(prevStyles, `color-scheme: ${themeName};`));
};
;// CONCATENATED MODULE: ./src/theme/theme-provider.tsx
var theme_provider_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/theme/theme-provider.tsx";











const theme_provider_defaultProps = {
  disableBaseline: false
};
const ThemeProvider = ({
  theme: userTheme,
  disableBaseline,
  children
}) => {
  const {
    isBrowser
  } = src_use_ssr();
  const [currentTheme, setCurrentTheme] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultContext.type);
  const changeCurrentTheme = type => {
    setCurrentTheme(ct => ct !== type ? type : ct);
  };
  const changeTypeBaseEl = el => {
    const themeValue = getDocumentTheme(el);
    themeValue && changeCurrentTheme(themeValue);
  };
  const providerValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const themeTokens = isBrowser ? getDocumentCSSTokens() : {};
    const theme = deep_merge_deepMerge(copyObject(defaultContext.theme), themeTokens);
    const themeName = getThemeName(currentTheme);
    return {
      theme,
      type: themeName,
      isDark: themeName === "dark"
    };
  }, [currentTheme, isBrowser]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    var _document, _document4, _document5;
    // initial set
    changeTypeBaseEl((_document = document) == null ? void 0 : _document.documentElement);
    const observer = new MutationObserver(mutation => {
      var _mutation$;
      if (mutation && mutation.length > 0 && ((_mutation$ = mutation[0]) == null ? void 0 : _mutation$.target.nodeName) === "BODY") {
        var _document2, _document2$body, _document2$body$datas;
        const documentTheme = (_document2 = document) == null ? void 0 : (_document2$body = _document2.body) == null ? void 0 : (_document2$body$datas = _document2$body.dataset) == null ? void 0 : _document2$body$datas.theme;
        documentTheme && changeCurrentTheme(documentTheme);
      } else {
        var _document3;
        changeTypeBaseEl((_document3 = document) == null ? void 0 : _document3.documentElement);
      }
    });
    observer.observe((_document4 = document) == null ? void 0 : _document4.documentElement, {
      attributes: true,
      attributeFilter: ["data-theme", "style"]
    });
    observer.observe((_document5 = document) == null ? void 0 : _document5.body, {
      attributes: true,
      attributeFilter: ["data-theme", "style"]
    });
    return () => observer.disconnect();
  }, []);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!isBrowser || !userTheme) {
      return;
    }
    if (userTheme != null && userTheme.className) {
      changeTheme(userTheme.className);
      changeCurrentTheme(getThemeName(userTheme.className));
    }
  }, [isBrowser, userTheme]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(module_$704cf1d3b684cc5c$export$9f8ac96af4b1b2ae, {
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)($f57aed4a881a3485$export$bf688221f59024e5, {
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(theme_context.Provider, {
        value: providerValue,
        children: [!disableBaseline && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_baseline, {}, void 0, false, {
          fileName: theme_provider_jsxFileName,
          lineNumber: 99,
          columnNumber: 32
        }, undefined), children]
      }, void 0, true, {
        fileName: theme_provider_jsxFileName,
        lineNumber: 98,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: theme_provider_jsxFileName,
      lineNumber: 97,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: theme_provider_jsxFileName,
    lineNumber: 96,
    columnNumber: 5
  }, undefined);
};
/* harmony default export */ const theme_provider = (with_defaults(ThemeProvider, theme_provider_defaultProps));
;// CONCATENATED MODULE: ./src/theme/shared-css.ts

const sharedFocus = css({
  WebkitTapHighlightColor: "transparent",
  "&:focus:not(&:focus-visible)": {
    boxShadow: "none"
  },
  "&:focus": {
    outline: "none",
    boxShadow: "0 0 0 2px $colors$background, 0 0 0 4px $colors$primary"
  },
  "@safari": {
    WebkitTapHighlightColor: "transparent",
    outline: "none"
  }
});
const cssFocusVisible = css({
  outline: "none",
  variants: {
    isFocusVisible: {
      true: {
        boxShadow: "0 0 0 2px $colors$background, 0 0 0 4px $colors$primary"
      },
      false: {}
    }
  }
});
const cssNoBlurriness = css({
  /* Avoid blurriness */
  transform: "translateZ(0)",
  backfaceVisibility: "hidden"
});
const sharedVisuallyHidden = css({
  border: "0px",
  clip: "rect(0px, 0px, 0px, 0px)",
  height: "1px",
  width: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
});
const cssHideIn = css({
  variants: {
    hideIn: {
      xs: {
        "@xsMax": {
          display: "none"
        }
      },
      sm: {
        "@smMax": {
          display: "none"
        }
      },
      md: {
        "@mdMax": {
          display: "none"
        }
      },
      lg: {
        "@lgMax": {
          display: "none"
        }
      },
      xl: {
        "@xlMax": {
          display: "none"
        }
      }
    }
  }
});
const cssShowIn = css({
  variants: {
    showIn: {
      xs: {
        "@xs": {
          display: "none"
        }
      },
      sm: {
        "@sm": {
          display: "none"
        }
      },
      md: {
        "@md": {
          display: "none"
        }
      },
      lg: {
        "@lg": {
          display: "none"
        }
      },
      xl: {
        "@xl": {
          display: "none"
        }
      }
    }
  }
});
const cssHideShowIn = css(cssHideIn, cssShowIn);
;// CONCATENATED MODULE: ./src/theme/colors/index.ts








;// CONCATENATED MODULE: ./node_modules/@react-aria/focus/node_modules/@react-aria/utils/dist/module.js





/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).useLayoutEffect : () => {};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0, $12uGp$useState)(defaultValue);
  let valueRef = (0, $12uGp$useRef)(value);
  let effect = (0, $12uGp$useRef)(null);
  valueRef.current = value;
  // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.
  let nextRef = (0, $12uGp$useRef)(null);
  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next();
    // If the generator is done, reset the effect.
    if (newValue.done) {
      effect.current = null;
      return;
    }
    // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.
    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };
  (0, module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0, $12uGp$useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}
let module_$bdb11010cef70236$var$idsUpdaterMap = new Map();
function module_$bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0, $12uGp$useState)(defaultId);
  let nextId = (0, $12uGp$useRef)(null);
  let res = (0, $12uGp$useSSRSafeId)(value);
  let updateValue = (0, $12uGp$useCallback)(val => {
    nextId.current = val;
  }, []);
  module_$bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  (0, module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let r = res;
    return () => {
      module_$bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  // This cannot cause an infinite loop because the ref is updated first.
  // eslint-disable-next-line
  (0, $12uGp$useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function module_$bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = module_$bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = module_$bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function module_$bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = module_$bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = (0, module_$1dbecbe27a04f9af$export$14d238f342723f25)(id);
  let updateId = (0, $12uGp$useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : undefined;
    });
  }, [id, setResolvedId]);
  (0, module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Calls all functions in the order they were chained with the same arguments.
    */
function module_$ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      // Chain events
      if (typeof a === "function" && typeof b === "function" &&
      // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */65 && key.charCodeAt(2) <= /* 'Z' */90) result[key] = (0, module_$ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = (0, $12uGp$clsx)(a, b);else if (key === "id" && a && b) result.id = (0, module_$bdb11010cef70236$export$cd8c9cb68f842629)(a, b);else result[key] = b !== undefined ? b : a;
    }
  }
  return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$5dc95899b306f630$export$c9058316764c140e(...refs) {
  return value => {
    for (let ref of refs) {
      if (typeof ref === "function") ref(value);else if (ref != null) ref.current = value;
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const module_$65484d02dcb7eb3e$var$DOMPropNames = new Set(["id"]);
const module_$65484d02dcb7eb3e$var$labelablePropNames = new Set(["aria-label", "aria-labelledby", "aria-describedby", "aria-details"]);
const module_$65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};
  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && (module_$65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && module_$65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || module_$65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
  return filteredProps;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if (module_$7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = module_$7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
let module_$7215afc6de606d6b$var$supportsPreventScrollCached = null;
function module_$7215afc6de606d6b$var$supportsPreventScroll() {
  if (module_$7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    module_$7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          module_$7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
      // Ignore
    }
  }
  return module_$7215afc6de606d6b$var$supportsPreventScrollCached;
}
function module_$7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === "horizontal" ? rect.right : rect.bottom;
  return orientation === "horizontal" ? rect.left : rect.top;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let module_$bbed8b41f857bcc0$var$transitionsByElement = new Map();
// A list of callbacks to call once there are no transitioning elements.
let module_$bbed8b41f857bcc0$var$transitionCallbacks = new Set();
function module_$bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = new Set();
      module_$bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
      e.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      module_$bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    // If no transitioning elements, call all of the queued callbacks.
    if (module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of module_$bbed8b41f857bcc0$var$transitionCallbacks) cb();
      module_$bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") module_$bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener("DOMContentLoaded", module_$bbed8b41f857bcc0$var$setupGlobalEvents);
}
function module_$bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if (module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else module_$bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.
const module_$9cc09df9fd7676be$var$draggingElements = (/* unused pure expression or super */ null && ([]));
function module_$9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;
  let getPosition = e => orientation === "horizontal" ? e.clientX : e.clientY;
  let getNextOffset = e => {
    let containerOffset = (0, module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };
  let dragging = (0, $12uGp$useRef)(false);
  let prevPosition = (0, $12uGp$useRef)(0);
  // Keep track of the current handlers in a ref so that the events can access them.
  let handlers = (0, $12uGp$useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;
  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);
    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }
    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };
  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    module_$9cc09df9fd7676be$var$draggingElements.splice(module_$9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener("mouseup", onMouseUp, false);
    window.removeEventListener("mousemove", onMouseDragged, false);
  };
  let onMouseDown = e => {
    const target = e.currentTarget;
    // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.
    if (module_$9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    module_$9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener("mousemove", onMouseDragged, false);
    window.addEventListener("mouseup", onMouseUp, false);
  };
  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };
  let onMouseOut = () => {
    if (onHover) onHover(false);
  };
  let onKeyDown = e => {
    switch (e.key) {
      case "Left":
      case "ArrowLeft":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Up":
      case "ArrowUp":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Right":
      case "ArrowRight":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Down":
      case "ArrowDown":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Home":
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;
      case "End":
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;
      case "Enter":
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };
  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, $12uGp$useRef)(new Map());
  let addGlobalListener = (0, $12uGp$useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0, $12uGp$useCallback)((eventTarget, type, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, $12uGp$useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]);
  // eslint-disable-next-line arrow-body-style
  (0, $12uGp$useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  } = props;
  // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.
  id = (0, module_$bdb11010cef70236$export$f680877a34711e37)(id);
  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(" ");
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  // If no labels are provided, use the default
  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, $12uGp$useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */
  (0, module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === "function") forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0, $12uGp$useRef)(true);
  (0, $12uGp$useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}
function module_$9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function module_$9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0, $12uGp$useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;
    if (!module_$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !module_$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function module_$62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// @ts-ignore
let module_$5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function module_$5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size, setSize] = (0, $12uGp$useState)(() => module_$5df64b3807dc15ee$var$getViewportSize());
  (0, $12uGp$useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = module_$5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };
    if (!module_$5df64b3807dc15ee$var$visualViewport) window.addEventListener("resize", onResize);else module_$5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      if (!module_$5df64b3807dc15ee$var$visualViewport) window.removeEventListener("resize", onResize);else module_$5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, []);
  return size;
}
function module_$5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: (module_$5df64b3807dc15ee$var$visualViewport === null || module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : module_$5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: (module_$5df64b3807dc15ee$var$visualViewport === null || module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : module_$5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let module_$ef06256079686ba0$var$descriptionId = 0;
const module_$ef06256079686ba0$var$descriptionNodes = new Map();
function module_$ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id, setId] = (0, $12uGp$useState)(undefined);
  (0, module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!description) return;
    let desc = module_$ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id = `react-aria-description-${module_$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement("div");
      node.id = id;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      module_$ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        module_$ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    "aria-describedby": description ? id : undefined
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function module_$c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function module_$c87311424ea30a05$export$9ac100e40613ea10() {
  return module_$c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function module_$c87311424ea30a05$export$186c6964ca17d99() {
  return module_$c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function module_$c87311424ea30a05$export$7bef049ce92e4224() {
  return module_$c87311424ea30a05$var$testPlatform(/^iPad/i) ||
  // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  module_$c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function module_$c87311424ea30a05$export$fedb369cb70207f1() {
  return module_$c87311424ea30a05$export$186c6964ca17d99() || module_$c87311424ea30a05$export$7bef049ce92e4224();
}
function module_$c87311424ea30a05$export$e1865c3bedcd822b() {
  return module_$c87311424ea30a05$export$9ac100e40613ea10() || module_$c87311424ea30a05$export$fedb369cb70207f1();
}
function module_$c87311424ea30a05$export$78551043582a6a98() {
  return module_$c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !module_$c87311424ea30a05$export$6446a186d09e379e();
}
function module_$c87311424ea30a05$export$6446a186d09e379e() {
  return module_$c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function module_$c87311424ea30a05$export$a11b0059900ceec8() {
  return module_$c87311424ea30a05$var$testUserAgent(/Android/i);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
  let handlerRef = (0, $12uGp$useRef)(handler);
  handlerRef.current = handler;
  let isDisabled = handler == null;
  (0, $12uGp$useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;
    let handler = e => handlerRef.current.call(this, e);
    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Scrolls `scrollView` so that `element` is visible.
    * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),
    * but doesn't affect parents above `scrollView`.
    */
function module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */
function module_$2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$6a7db85432448f7f$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
  // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
  // to detect TalkBack virtual clicks.
  if ((0, module_$c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function module_$6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
  // Talkback double tap from Windows Firefox touch screen press
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/focus/node_modules/@react-aria/interactions/dist/module.js



/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually
let module_$14c0b72509d70225$var$state = "default";
let module_$14c0b72509d70225$var$savedUserSelect = "";
let module_$14c0b72509d70225$var$modifiedElementMap = new WeakMap();
function module_$14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, $bx7SL$isIOS)()) {
    if (module_$14c0b72509d70225$var$state === "default") {
      module_$14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = "none";
    }
    module_$14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    // If not iOS, store the target's original user-select and change to user-select: none
    // Ignore state since it doesn't apply for non iOS
    module_$14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = "none";
  }
}
function module_$14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, $bx7SL$isIOS)()) {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if (module_$14c0b72509d70225$var$state !== "disabled") return;
    module_$14c0b72509d70225$var$state = "restoring";
    // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.
    setTimeout(() => {
      // Wait for any CSS transitions to complete so we don't recompute style
      // for the whole page in the middle of the animation and cause jank.
      (0, $bx7SL$runAfterTransition)(() => {
        // Avoid race conditions
        if (module_$14c0b72509d70225$var$state === "restoring") {
          if (document.documentElement.style.webkitUserSelect === "none") document.documentElement.style.webkitUserSelect = module_$14c0b72509d70225$var$savedUserSelect || "";
          module_$14c0b72509d70225$var$savedUserSelect = "";
          module_$14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement)
    // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    {
      if (target && module_$14c0b72509d70225$var$modifiedElementMap.has(target)) {
        let targetOldUserSelect = module_$14c0b72509d70225$var$modifiedElementMap.get(target);
        if (target.style.userSelect === "none") target.style.userSelect = targetOldUserSelect;
        if (target.getAttribute("style") === "") target.removeAttribute("style");
        module_$14c0b72509d70225$var$modifiedElementMap.delete(target);
      }
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(null);
module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function module_$f6c31cce2adf654f$var$usePressResponderContext(props) {
  // Consume context from <PressResponder> and merge with props.
  let context = (0, $bx7SL$useContext)((0, module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context) {
    let {
      register: register,
      ...contextProps
    } = context;
    props = (0, $bx7SL$mergeProps)(contextProps, props);
    register();
  }
  (0, $bx7SL$useSyncRef)(context, props.ref);
  return props;
}
function module_$f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress: onPress,
    onPressChange: onPressChange,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressUp: onPressUp,
    isDisabled: isDisabled,
    isPressed: isPressedProp,
    preventFocusOnPress: preventFocusOnPress,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit,
    allowTextSelectionOnPress: allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = module_$f6c31cce2adf654f$var$usePressResponderContext(props);
  let propsRef = (0, $bx7SL$useRef)(null);
  propsRef.current = {
    onPress: onPress,
    onPressChange: onPressChange,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressUp: onPressUp,
    isDisabled: isDisabled,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0, $bx7SL$useState)(false);
  let ref = (0, $bx7SL$useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  } = (0, $bx7SL$useGlobalListeners)();
  let pressProps = (0, $bx7SL$useMemo)(() => {
    let state = ref.current;
    let triggerPressStart = (originalEvent, pointerType) => {
      let {
        onPressStart: onPressStart,
        onPressChange: onPressChange,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled || state.didFirePressStart) return;
      if (onPressStart) onPressStart({
        type: "pressstart",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(true);
      state.didFirePressStart = true;
      setPressed(true);
    };
    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
      let {
        onPressEnd: onPressEnd,
        onPressChange: onPressChange,
        onPress: onPress,
        isDisabled: isDisabled
      } = propsRef.current;
      if (!state.didFirePressStart) return;
      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;
      if (onPressEnd) onPressEnd({
        type: "pressend",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(false);
      setPressed(false);
      if (onPress && wasPressed && !isDisabled) onPress({
        type: "press",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let triggerPressUp = (originalEvent, pointerType) => {
      let {
        onPressUp: onPressUp,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled) return;
      if (onPressUp) onPressUp({
        type: "pressup",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let cancel = e => {
      if (state.isPressed) {
        if (state.isOverTarget) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();
        if (!allowTextSelectionOnPress) (0, module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
      }
    };
    let pressProps = {
      onKeyDown(e) {
        if (module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
          if (module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
          e.stopPropagation();
          // If the event is repeating, it may have started on a different element
          // after which focus moved to the current element. Ignore these events and
          // only handle the first key down event.
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, "keyboard");
            // Focus may move before the key up event, so register the event on the document
            // instead of the same element where the key down event occurred.
            addGlobalListener(document, "keyup", onKeyUp, false);
          }
        } else if (e.key === "Enter" && module_$f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget))
          // If the target is a link, we won't have handled this above because we want the default
          // browser behavior to open the link when pressing Enter. But we still need to prevent
          // default so that elements above do not also handle it (e.g. table row).
          e.stopPropagation();
      },
      onKeyUp(e) {
        if (module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp(module_$f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard");
      },
      onClick(e) {
        if (e && !e.currentTarget.contains(e.target)) return;
        if (e && e.button === 0) {
          e.stopPropagation();
          if (isDisabled) e.preventDefault();
          // If triggered from a screen reader or by using element.click(),
          // trigger as if it were a keyboard click.
          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || (0, $bx7SL$isVirtualClick)(e.nativeEvent))) {
            // Ensure the element receives focus (VoiceOver on iOS does not do this)
            if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
            triggerPressStart(e, "virtual");
            triggerPressUp(e, "virtual");
            triggerPressEnd(e, "virtual");
          }
          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }
    };
    let onKeyUp = e => {
      if (state.isPressed && module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        if (module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", state.target.contains(target));
        removeAllGlobalListeners();
        // If the target is a link, trigger the click method to open the URL,
        // but defer triggering pressEnd until onClick event handler.
        if (state.target instanceof HTMLElement && state.target.contains(target) && (module_$f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link")) state.target.click();
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps.onPointerDown = e => {
        // Only handle left clicks, and ignore events that bubbled through portals.
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
        // Ignore and let the onClick handler take care of it instead.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202
        if ((0, $bx7SL$isVirtualPointerEvent)(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on pointer down and handle focusing the pressable element ourselves.
        if (module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        state.pointerType = e.pointerType;
        e.stopPropagation();
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
          if (!allowTextSelectionOnPress) (0, module_$14c0b72509d70225$export$16a4697467175487)(state.target);
          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, "pointermove", onPointerMove, false);
          addGlobalListener(document, "pointerup", onPointerUp, false);
          addGlobalListener(document, "pointercancel", onPointerCancel, false);
        }
      };
      pressProps.onMouseDown = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (e.button === 0) {
          // Chrome and Firefox on touch Windows devices require mouse down events
          // to be canceled in addition to pointer events, or an extra asynchronous
          // focus event will be fired.
          if (module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
          e.stopPropagation();
        }
      };
      pressProps.onPointerUp = e => {
        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
        if (!e.currentTarget.contains(e.target) || state.pointerType === "virtual") return;
        // Only handle left clicks
        // Safari on iOS sometimes fires pointerup events, even
        // when the touch isn't over the target, so double check.
        if (e.button === 0 && module_$f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
      // Use pointer move events instead to implement our own hit testing.
      // See https://bugs.webkit.org/show_bug.cgi?id=199803
      let onPointerMove = e => {
        if (e.pointerId !== state.activePointerId) return;
        if (module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if (module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress) (0, module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        }
      };
      let onPointerCancel = e => {
        cancel(e);
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.
        cancel(e);
      };
    } else {
      pressProps.onMouseDown = e => {
        // Only handle left clicks
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on mouse down and handle focusing the pressable element ourselves.
        if (module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        e.stopPropagation();
        if (state.ignoreEmulatedMouseEvents) return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = (0, $bx7SL$isVirtualClick)(e.nativeEvent) ? "virtual" : "mouse";
        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, "mouseup", onMouseUp, false);
      };
      pressProps.onMouseEnter = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };
      pressProps.onMouseLeave = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onMouseUp = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);
      };
      let onMouseUp = e => {
        // Only handle left clicks
        if (e.button !== 0) return;
        state.isPressed = false;
        removeAllGlobalListeners();
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if (module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isOverTarget = false;
      };
      pressProps.onTouchStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        let touch = module_$f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = "touch";
        // Due to browser inconsistencies, especially on mobile browsers, we prevent default
        // on the emulated mouse event and handle focusing the pressable element ourselves.
        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
        if (!allowTextSelectionOnPress) (0, module_$14c0b72509d70225$export$16a4697467175487)(state.target);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, "scroll", onScroll, true);
      };
      pressProps.onTouchMove = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onTouchEnd = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress) (0, module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        removeAllGlobalListeners();
      };
      pressProps.onTouchCancel = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed) cancel(e);
      };
      let onScroll = e => {
        if (state.isPressed && e.target.contains(state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        cancel(e);
      };
    }
    return pressProps;
  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);
  // Remove user-select: none in case component unmounts immediately after pressStart
  // eslint-disable-next-line arrow-body-style
  (0, $bx7SL$useEffect)(() => {
    return () => {
      if (!allowTextSelectionOnPress)
        // eslint-disable-next-line react-hooks/exhaustive-deps
        (0, module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);
    };
  }, [allowTextSelectionOnPress]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, $bx7SL$mergeProps)(domProps, pressProps)
  };
}
function module_$f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function module_$f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const {
    key: key,
    code: code
  } = event;
  const element = currentTarget;
  const role = element.getAttribute("role");
  // Accessibility for keyboards. Space and Enter only.
  // "Spacebar" is for IE 11
  return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !module_$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (
  // A link with a valid href should be handled natively,
  // unless it also has role='button' and was triggered using Space.
  !module_$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") &&
  // An element with role='link' should only trigger with Enter key
  !(role === "link" && key !== "Enter");
}
function module_$f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const {
    targetTouches: targetTouches
  } = event;
  if (targetTouches.length > 0) return targetTouches[0];
  return null;
}
function module_$f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;
  for (let i = 0; i < changedTouches.length; i++) {
    const touch = changedTouches[i];
    if (touch.identifier === pointerId) return touch;
  }
  return null;
}
function module_$f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}
function module_$f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function module_$f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
  // check if they cannot overlap on x axis
  if (a.left > b.right || b.left > a.right) return false;
  // check if they cannot overlap on y axis
  if (a.top > b.bottom || b.top > a.bottom) return false;
  return true;
}
function module_$f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = module_$f6c31cce2adf654f$var$getPointClientRect(point);
  return module_$f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function module_$f6c31cce2adf654f$var$shouldPreventDefault(target) {
  // We cannot prevent default if the target is a draggable element.
  return !(target instanceof HTMLElement) || !target.draggable;
}
function module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !module_$f6c31cce2adf654f$var$isValidInputKey(target, key);
  if (target instanceof HTMLButtonElement) return target.type !== "submit";
  return true;
}
const module_$f6c31cce2adf654f$var$nonTextInputTypes = new Set(["checkbox", "radio", "range", "color", "file", "image", "button", "submit", "reset"]);
function module_$f6c31cce2adf654f$var$isValidInputKey(target, key) {
  // Only space should toggle checkboxes and radios, not enter.
  return target.type === "checkbox" || target.type === "radio" ? key === " " : module_$f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
const module_$3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $bx7SL$react).forwardRef(({
  children: children,
  ...props
}, ref) => {
  let newRef = (0, $bx7SL$useRef)();
  ref = ref !== null && ref !== void 0 ? ref : newRef;
  let {
    pressProps: pressProps
  } = (0, module_$f6c31cce2adf654f$export$45712eceda6fad21)({
    ...props,
    ref: ref
  });
  let child = (0, $bx7SL$react).Children.only(children);
  return /*#__PURE__*/(0, $bx7SL$react).cloneElement(child,
  // @ts-ignore
  {
    ref: ref,
    ...(0, $bx7SL$mergeProps)(child.props, pressProps)
  });
})));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const module_$f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $bx7SL$react).forwardRef(({
  children: children,
  ...props
}, ref) => {
  let isRegistered = (0, $bx7SL$useRef)(false);
  let prevContext = (0, $bx7SL$useContext)((0, module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  let context = (0, $bx7SL$mergeProps)(prevContext || {}, {
    ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }
  });
  (0, $bx7SL$useSyncRef)(prevContext, ref);
  (0, $bx7SL$useEffect)(() => {
    if (!isRegistered.current) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
  }, []);
  return /*#__PURE__*/(0, $bx7SL$react).createElement((0, module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context
  }, children);
})));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

class module_$8a9cb279dc87e130$export$905e7fc544a71f36 {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {}
  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
}
function module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    onBlur: onBlur,
    observer: null
  });
  stateRef.current.onBlur = onBlur;
  // Clean up MutationObserver on unmount. See below.
  // eslint-disable-next-line arrow-body-style
  (0, module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  // This function is called during a React onFocus event.
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = e => {
        var
          // For backward compatibility, dispatch a (fake) React synthetic event.
          _stateRef_current, _stateRef_current_onBlur;
        stateRef.current.isFocused = false;
        if (target.disabled) (_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 ? void 0 : _stateRef_current_onBlur.call(_stateRef_current, new module_$8a9cb279dc87e130$export$905e7fc544a71f36("blur", e));
        // We no longer need the MutationObserver once the target is blurred.
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          stateRef.current.observer.disconnect();
          target.dispatchEvent(new FocusEvent("blur"));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: ["disabled"]
      });
    }
  }, []);
}
function module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let {
    isDisabled: isDisabled,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    onFocusChange: onFocusChange
  } = props;
  const onBlur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [onBlurProp, onFocusChange]);
  const onSyntheticFocus = (0, module_$8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  const onFocus = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    if (e.target === e.currentTarget) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [onFocusChange, onFocusProp, onSyntheticFocus]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

let module_$507fabe10e71c6fb$var$currentModality = null;
let module_$507fabe10e71c6fb$var$changeHandlers = new Set();
let module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
let module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
// Only Tab or Esc keys will make focus visible on text input elements
const module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of module_$507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */
function module_$507fabe10e71c6fb$var$isValidKey(e) {
  // Control and Shift keys trigger when navigating back to the tab with keyboard.
  return !(e.metaKey || !(0, module_$c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function module_$507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if (module_$507fabe10e71c6fb$var$isValidKey(e)) {
    module_$507fabe10e71c6fb$var$currentModality = "keyboard";
    module_$507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function module_$507fabe10e71c6fb$var$handlePointerEvent(e) {
  module_$507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    module_$507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function module_$507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, module_$6a7db85432448f7f$export$60278871457622de)(e)) {
    module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    module_$507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function module_$507fabe10e71c6fb$var$handleFocusEvent(e) {
  // Firefox fires two extra focus events when the user first clicks into an iframe:
  // first on the window, then on the document. We ignore these events so they don't
  // cause keyboard focus rings to appear.
  if (e.target === window || e.target === document) return;
  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
  if (!module_$507fabe10e71c6fb$var$hasEventBeforeFocus && !module_$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    module_$507fabe10e71c6fb$var$currentModality = "virtual";
    module_$507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function module_$507fabe10e71c6fb$var$handleWindowBlur() {
  // When the window is blurred, reset state. This is necessary when tabbing out of the window,
  // for example, since a subsequent focus event won't be fired.
  module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */
function module_$507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === "undefined" || module_$507fabe10e71c6fb$var$hasSetupGlobalListeners) return;
  // Programmatic focus() calls shouldn't affect the current input modality.
  // However, we need to detect other cases when a focus event occurs without
  // a preceding user event (e.g. screen reader focus). Overriding the focus
  // method on HTMLElement.prototype is a bit hacky, but works.
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function () {
    module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  document.addEventListener("keydown", module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("keyup", module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("click", module_$507fabe10e71c6fb$var$handleClickEvent, true);
  // Register focus events on the window so they are sure to happen
  // before React's event listeners (registered on the document).
  window.addEventListener("focus", module_$507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener("blur", module_$507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointermove", module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointerup", module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener("mousedown", module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mousemove", module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mouseup", module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener("DOMContentLoaded", module_$507fabe10e71c6fb$var$setupGlobalFocusEvents);
}
function module_$507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return module_$507fabe10e71c6fb$var$currentModality !== "pointer";
}
function module_$507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return module_$507fabe10e71c6fb$var$currentModality;
}
function module_$507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  module_$507fabe10e71c6fb$var$currentModality = modality;
  module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
function module_$507fabe10e71c6fb$export$98e20ec92f614cfe() {
  module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = (0, $bx7SL$useState)(module_$507fabe10e71c6fb$var$currentModality);
  (0, $bx7SL$useEffect)(() => {
    let handler = () => {
      setModality(module_$507fabe10e71c6fb$var$currentModality);
    };
    module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */
function module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function module_$507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
  let {
    isTextInput: isTextInput,
    autoFocus: autoFocus
  } = props;
  let [isFocusVisibleState, setFocusVisible] = (0, $bx7SL$useState)(autoFocus || module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
  module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {
    setFocusVisible(isFocusVisible);
  }, [isTextInput], {
    isTextInput: isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}
function module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let handler = (modality, e) => {
      if (!module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;
      fn(module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

function module_$9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let {
    isDisabled: isDisabled,
    onBlurWithin: onBlurWithin,
    onFocusWithin: onFocusWithin,
    onFocusWithinChange: onFocusWithinChange
  } = props;
  let state = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocusWithin: false
  });
  let onBlur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
    // when moving focus inside the element. Only trigger if the currentTarget doesn't
    // include the relatedTarget (where focus is moving).
    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.current.isFocusWithin = false;
      if (onBlurWithin) onBlurWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(false);
    }
  }, [onBlurWithin, onFocusWithinChange, state]);
  let onSyntheticFocus = (0, module_$8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  let onFocus = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    if (!state.current.isFocusWithin) {
      if (onFocusWithin) onFocusWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(true);
      state.current.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);
  if (isDisabled) return {
    focusWithinProps: {
      onFocus: null,
      onBlur: null
    }
  };
  return {
    focusWithinProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

// iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.
let module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let module_$6179b936705e76d3$var$hoverCount = 0;
function module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
  // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
  // the distant future because a user previously touched the element.
  setTimeout(() => {
    module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}
function module_$6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === "touch") module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function module_$6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === "undefined") return;
  if (typeof PointerEvent !== "undefined") document.addEventListener("pointerup", module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener("touchend", module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  module_$6179b936705e76d3$var$hoverCount++;
  return () => {
    module_$6179b936705e76d3$var$hoverCount--;
    if (module_$6179b936705e76d3$var$hoverCount > 0) return;
    if (typeof PointerEvent !== "undefined") document.removeEventListener("pointerup", module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener("touchend", module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}
function module_$6179b936705e76d3$export$ae780daf29e6d456(props) {
  let {
    onHoverStart: onHoverStart,
    onHoverChange: onHoverChange,
    onHoverEnd: onHoverEnd,
    isDisabled: isDisabled
  } = props;
  let [isHovered, setHovered] = (0, $bx7SL$useState)(false);
  let state = (0, $bx7SL$useRef)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: "",
    target: null
  }).current;
  (0, $bx7SL$useEffect)(module_$6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let {
    hoverProps: hoverProps,
    triggerHoverEnd: triggerHoverEnd
  } = (0, $bx7SL$useMemo)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target)) return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart) onHoverStart({
        type: "hoverstart",
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(true);
      setHovered(true);
    };
    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = "";
      state.target = null;
      if (pointerType === "touch" || !state.isHovered) return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd) onHoverEnd({
        type: "hoverend",
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(false);
      setHovered(false);
    };
    let hoverProps = {};
    if (typeof PointerEvent !== "undefined") {
      hoverProps.onPointerEnter = e => {
        if (module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse") return;
        triggerHoverStart(e, e.pointerType);
      };
      hoverProps.onPointerLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };
      hoverProps.onMouseEnter = e => {
        if (!state.ignoreEmulatedMouseEvents && !module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, "mouse");
        state.ignoreEmulatedMouseEvents = false;
      };
      hoverProps.onMouseLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, "mouse");
      };
    }
    return {
      hoverProps: hoverProps,
      triggerHoverEnd: triggerHoverEnd
    };
  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);
  (0, $bx7SL$useEffect)(() => {
    // Call the triggerHoverEnd as soon as isDisabled changes to true
    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
    if (isDisabled) triggerHoverEnd({
      currentTarget: state.target
    }, state.pointerType);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isDisabled]);
  return {
    hoverProps: hoverProps,
    isHovered: isHovered
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

function module_$e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let {
    ref: ref,
    onInteractOutside: onInteractOutside,
    isDisabled: isDisabled,
    onInteractOutsideStart: onInteractOutsideStart
  } = props;
  let stateRef = (0, $bx7SL$useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside: onInteractOutside,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  (0, $bx7SL$useEffect)(() => {
    if (isDisabled) return;
    let onPointerDown = e => {
      if (module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);
        state.isPointerDown = true;
      }
    };
    // Use pointer events if available. Otherwise, fall back to mouse and touch events.
    if (typeof PointerEvent !== "undefined") {
      let onPointerUp = e => {
        if (state.isPointerDown && state.onInteractOutside && module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      // changing these to capture phase fixed combobox
      document.addEventListener("pointerdown", onPointerDown, true);
      document.addEventListener("pointerup", onPointerUp, true);
      return () => {
        document.removeEventListener("pointerdown", onPointerDown, true);
        document.removeEventListener("pointerup", onPointerUp, true);
      };
    } else {
      let onMouseUp = e => {
        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      let onTouchEnd = e => {
        state.ignoreEmulatedMouseEvents = true;
        if (state.onInteractOutside && state.isPointerDown && module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      document.addEventListener("mousedown", onPointerDown, true);
      document.addEventListener("mouseup", onMouseUp, true);
      document.addEventListener("touchstart", onPointerDown, true);
      document.addEventListener("touchend", onTouchEnd, true);
      return () => {
        document.removeEventListener("mousedown", onPointerDown, true);
        document.removeEventListener("mouseup", onMouseUp, true);
        document.removeEventListener("touchstart", onPointerDown, true);
        document.removeEventListener("touchend", onTouchEnd, true);
      };
    }
  }, [ref, state, isDisabled]);
}
function module_$e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0) return false;
  // if the event target is no longer in the document
  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
  }
  return ref.current && !ref.current.contains(event.target);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
function module_$93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return;
  let shouldStopPropagation = true;
  return e => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        shouldStopPropagation = false;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}
function module_$46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, module_$93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, module_$93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$e8a7022cf87cba2a$export$36da96379f79f245(props) {
  let {
    onMoveStart: onMoveStart,
    onMove: onMove,
    onMoveEnd: onMoveEnd
  } = props;
  let state = (0, $bx7SL$useRef)({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = (0, $bx7SL$useGlobalListeners)();
  let moveProps = (0, $bx7SL$useMemo)(() => {
    let moveProps = {};
    let start = () => {
      (0, module_$14c0b72509d70225$export$16a4697467175487)();
      state.current.didMove = false;
    };
    let move = (originalEvent, pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0) return;
      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
          type: "movestart",
          pointerType: pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }
      onMove({
        type: "move",
        pointerType: pointerType,
        deltaX: deltaX,
        deltaY: deltaY,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let end = (originalEvent, pointerType) => {
      (0, module_$14c0b72509d70225$export$b0d6fa1ab32e3295)();
      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
        type: "moveend",
        pointerType: pointerType,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    if (typeof PointerEvent === "undefined") {
      let onMouseMove = e => {
        if (e.button === 0) {
          move(e, "mouse", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onMouseUp = e => {
        if (e.button === 0) {
          end(e, "mouse");
          removeGlobalListener(window, "mousemove", onMouseMove, false);
          removeGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      moveProps.onMouseDown = e => {
        if (e.button === 0) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          addGlobalListener(window, "mousemove", onMouseMove, false);
          addGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      let onTouchMove = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          let {
            pageX: pageX,
            pageY: pageY
          } = e.changedTouches[touch];
          move(e, "touch", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: pageX,
            pageY: pageY
          };
        }
      };
      let onTouchEnd = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          end(e, "touch");
          state.current.id = null;
          removeGlobalListener(window, "touchmove", onTouchMove);
          removeGlobalListener(window, "touchend", onTouchEnd);
          removeGlobalListener(window, "touchcancel", onTouchEnd);
        }
      };
      moveProps.onTouchStart = e => {
        if (e.changedTouches.length === 0 || state.current.id != null) return;
        let {
          pageX: pageX,
          pageY: pageY,
          identifier: identifier
        } = e.changedTouches[0];
        start();
        e.stopPropagation();
        e.preventDefault();
        state.current.lastPosition = {
          pageX: pageX,
          pageY: pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, "touchmove", onTouchMove, false);
        addGlobalListener(window, "touchend", onTouchEnd, false);
        addGlobalListener(window, "touchcancel", onTouchEnd, false);
      };
    } else {
      let onPointerMove = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || "mouse";
          // Problems with PointerEvent#movementX/movementY:
          // 1. it is always 0 on macOS Safari.
          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || "mouse";
          end(e, pointerType);
          state.current.id = null;
          removeGlobalListener(window, "pointermove", onPointerMove, false);
          removeGlobalListener(window, "pointerup", onPointerUp, false);
          removeGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
      moveProps.onPointerDown = e => {
        if (e.button === 0 && state.current.id == null) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          state.current.id = e.pointerId;
          addGlobalListener(window, "pointermove", onPointerMove, false);
          addGlobalListener(window, "pointerup", onPointerUp, false);
          addGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
    }
    let triggerKeyboardMove = (e, deltaX, deltaY) => {
      start();
      move(e, "keyboard", deltaX, deltaY);
      end(e, "keyboard");
    };
    moveProps.onKeyDown = e => {
      switch (e.key) {
        case "Left":
        case "ArrowLeft":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, -1, 0);
          break;
        case "Right":
        case "ArrowRight":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 1, 0);
          break;
        case "Up":
        case "ArrowUp":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, -1);
          break;
        case "Down":
        case "ArrowDown":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, 1);
          break;
      }
    };
    return moveProps;
  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);
  return {
    moveProps: moveProps
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
  let {
    onScroll: onScroll,
    isDisabled: isDisabled
  } = props;
  let onScrollHandler = (0, $bx7SL$useCallback)(e => {
    // If the ctrlKey is pressed, this is a zoom event, do nothing.
    if (e.ctrlKey) return;
    // stop scrolling the page
    e.preventDefault();
    e.stopPropagation();
    if (onScroll) onScroll({
      deltaX: e.deltaX,
      deltaY: e.deltaY
    });
  }, [onScroll]);
  (0, $bx7SL$useEvent)(ref, "wheel", isDisabled ? null : onScrollHandler);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const module_$8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
function module_$8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let {
    isDisabled: isDisabled,
    onLongPressStart: onLongPressStart,
    onLongPressEnd: onLongPressEnd,
    onLongPress: onLongPress,
    threshold = module_$8a26561d2877236e$var$DEFAULT_THRESHOLD,
    accessibilityDescription: accessibilityDescription
  } = props;
  const timeRef = (0, $bx7SL$useRef)(null);
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = (0, $bx7SL$useGlobalListeners)();
  let {
    pressProps: pressProps
  } = (0, module_$f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled,
    onPressStart(e) {
      if (e.pointerType === "mouse" || e.pointerType === "touch") {
        if (onLongPressStart) onLongPressStart({
          ...e,
          type: "longpressstart"
        });
        timeRef.current = setTimeout(() => {
          // Prevent other usePress handlers from also handling this event.
          e.target.dispatchEvent(new PointerEvent("pointercancel", {
            bubbles: true
          }));
          if (onLongPress) onLongPress({
            ...e,
            type: "longpress"
          });
          timeRef.current = null;
        }, threshold);
        // Prevent context menu, which may be opened on long press on touch devices
        if (e.pointerType === "touch") {
          let onContextMenu = e => {
            e.preventDefault();
          };
          addGlobalListener(e.target, "contextmenu", onContextMenu, {
            once: true
          });
          addGlobalListener(window, "pointerup", () => {
            // If no contextmenu event is fired quickly after pointerup, remove the handler
            // so future context menu events outside a long press are not prevented.
            setTimeout(() => {
              removeGlobalListener(e.target, "contextmenu", onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },
    onPressEnd(e) {
      if (timeRef.current) clearTimeout(timeRef.current);
      if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch")) onLongPressEnd({
        ...e,
        type: "longpressend"
      });
    }
  });
  let descriptionProps = (0, $bx7SL$useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: (0, $bx7SL$mergeProps)(pressProps, descriptionProps)
  };
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/focus/dist/module.js




function $6a99195332edec8b$export$80f3e147d781571c(element) {
  // If the user is interacting with a virtual cursor, e.g. screen reader, then
  // wait until after any animated transitions that are currently occurring on
  // the page before shifting focus. This avoids issues with VoiceOver on iOS
  // causing the page to scroll when moving focus if the element is transitioning
  // from off the screen.
  if (module_$507fabe10e71c6fb$export$630ff653c5ada6a9() === 'virtual') {
    let lastFocusedElement = document.activeElement;
    module_$bbed8b41f857bcc0$export$24490316f764c430(() => {
      // If focus did not move and the element is still in the document, focus it.
      if (document.activeElement === lastFocusedElement && document.contains(element)) module_$7215afc6de606d6b$export$de79e2c695e052f3(element);
    });
  } else module_$7215afc6de606d6b$export$de79e2c695e052f3(element);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $645f2e67b85a24c9$var$isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;
  let {
    display: display,
    visibility: visibility
  } = element.style;
  let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';
  if (isVisible) {
    const {
      getComputedStyle: getComputedStyle
    } = element.ownerDocument.defaultView;
    let {
      display: computedDisplay,
      visibility: computedVisibility
    } = getComputedStyle(element);
    isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';
  }
  return isVisible;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
  return element.nodeName !== '#comment' && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
}
const $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);
let $9bf71ea28793e738$var$activeScope = null;
let $9bf71ea28793e738$var$scopes = new Map();
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let {
    children: children,
    contain: contain,
    restoreFocus: restoreFocus,
    autoFocus: autoFocus
  } = props;
  let startRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let endRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let scopeRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)([]);
  let ctx = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($9bf71ea28793e738$var$FocusContext);
  let parentScope = ctx === null || ctx === void 0 ? void 0 : ctx.scopeRef;
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    // Find all rendered nodes between the sentinels and add them to the scope.
    let node = startRef.current.nextSibling;
    let nodes = [];
    while (node && node !== endRef.current) {
      nodes.push(node);
      node = node.nextSibling;
    }
    scopeRef.current = nodes;
  }, [children, parentScope]);
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    $9bf71ea28793e738$var$scopes.set(scopeRef, parentScope);
    return () => {
      // Restore the active scope on unmount if this scope or a descendant scope is active.
      // Parent effect cleanups run before children, so we need to check if the
      // parent scope actually still exists before restoring the active scope to it.
      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$var$scopes.has(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$var$scopes.delete(scopeRef);
    };
  }, [scopeRef, parentScope]);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  let focusManager = $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value: {
      scopeRef: scopeRef,
      focusManager: focusManager
    }
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$export$10c5169755ce7bd7() {
  var ref;
  return (ref = $6nfFC$useContext($9bf71ea28793e738$var$FocusContext)) === null || ref === void 0 ? void 0 : ref.focusManager;
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap,
        accept: accept
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[0].previousElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable,
        accept: accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap,
        accept: accept
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable,
        accept: accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let {
        tabbable: tabbable,
        accept: accept
      } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable,
        accept: accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let {
        tabbable: tabbable,
        accept: accept
      } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable,
        accept: accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
const $9bf71ea28793e738$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];
const $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';
$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let raf = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let scope1 = scopeRef.current;
    if (!contain) {
      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = null;
      }
      return;
    }
    // Handle the Tab key to contain focus within the scope
    let onKeyDown = e => {
      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || scopeRef !== $9bf71ea28793e738$var$activeScope) return;
      let focusedElement = document.activeElement;
      let scope = scopeRef.current;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: true
      }, scope);
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = e => {
      // If focusing an element in a child scope of the currently active scope, the child becomes active.
      // Moving out of the active scope to an ancestor is not allowed.
      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = e.target;
      } else if (scopeRef === $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
        // restore focus to the previously focused node or the first tabbable element in the active scope.
        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if (scopeRef === $9bf71ea28793e738$var$activeScope) focusedNode.current = e.target;
    };
    let onBlur = e => {
      // Firefox doesn't shift focus back to the Dialog properly without this
      raf.current = requestAnimationFrame(() => {
        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
        if (scopeRef === $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          focusedNode.current = e.target;
          focusedNode.current.focus();
        }
      });
    };
    document.addEventListener('keydown', onKeyDown, false);
    document.addEventListener('focusin', onFocus, false);
    scope1.forEach(element => element.addEventListener('focusin', onFocus, false));
    scope1.forEach(element => element.addEventListener('focusout', onBlur, false));
    return () => {
      document.removeEventListener('keydown', onKeyDown, false);
      document.removeEventListener('focusin', onFocus, false);
      scope1.forEach(element => element.removeEventListener('focusin', onFocus, false));
      scope1.forEach(element => element.removeEventListener('focusout', onBlur, false));
    };
  }, [scopeRef, contain]);
  // eslint-disable-next-line arrow-body-style
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return () => {
      if (raf.current) cancelAnimationFrame(raf.current);
    };
  }, [raf]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element) {
  for (let scope of $9bf71ea28793e738$var$scopes.keys()) {
    if ($9bf71ea28793e738$var$isElementInScope(element, scope.current)) return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isElementInScope(element, scope) {
  return scope.some(node => node.contains(element));
}
function $9bf71ea28793e738$var$isElementInChildScope(element, scope) {
  // node.contains in isElementInScope covers child scopes that are also DOM children,
  // but does not cover child scopes in portals.
  for (let s of $9bf71ea28793e738$var$scopes.keys()) {
    if ((s === scope || $9bf71ea28793e738$var$isAncestorScope(scope, s)) && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  let parent = $9bf71ea28793e738$var$scopes.get(scope);
  if (!parent) return false;
  if (parent === ancestor) return true;
  return $9bf71ea28793e738$var$isAncestorScope(ancestor, parent);
}
function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
  if (element != null && !scroll) try {
    $6a99195332edec8b$export$80f3e147d781571c(element);
  } catch (err) {
    // ignore
  } else if (element != null) try {
    element.focus();
  } catch (err1) {
    // ignore
  }
}
function $9bf71ea28793e738$var$focusFirstInScope(scope) {
  let sentinel = scope[0].previousElementSibling;
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
    tabbable: true
  }, scope);
  walker.currentNode = sentinel;
  $9bf71ea28793e738$var$focusElement(walker.nextNode());
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef(autoFocus);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, []);
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.
  const nodeToRestoreRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(typeof document !== 'undefined' ? document.activeElement : null);
  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let nodeToRestore = nodeToRestoreRef.current;
    if (!restoreFocus) return;
    // Handle the Tab key so that tabbing out of the scope goes to the next element
    // after the node that had focus when the scope mounted. This is important when
    // using portals for overlays, so that focus goes to the expected element when
    // tabbing out of the overlay.
    let onKeyDown = e => {
      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) return;
      let focusedElement = document.activeElement;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;
      // Create a DOM tree walker that matches all tabbable elements
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {
        tabbable: true
      });
      // Find the next tabbable element after the currently focused element
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) nodeToRestore = null;
      // If there is no next element, or it is outside the current scope, move focus to the
      // next element after the node to restore to instead.
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        // Skip over elements within the scope, in case the scope immediately follows the node to restore.
        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else
          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)
          // then move focus to the body.
          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)
          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain) document.addEventListener('keydown', onKeyDown, true);
    return () => {
      if (!contain) document.removeEventListener('keydown', onKeyDown, true);
      if (restoreFocus && nodeToRestore && $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current)) requestAnimationFrame(() => {
        // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere
        if (document.body.contains(nodeToRestore) && document.activeElement === document.body) $9bf71ea28793e738$var$focusElement(nodeToRestore);
      });
    };
  }, [scopeRef, restoreFocus, contain]);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var ref;
      // Skip nodes inside the starting node.
      if (opts === null || opts === void 0 ? void 0 : (ref = opts.from) === null || ref === void 0 ? void 0 : ref.contains(node)) return NodeFilter.FILTER_REJECT;
      if (node.matches(selector) && $645f2e67b85a24c9$export$e989c0fffaa6b27a(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
  return walker;
}
function $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {
  return {
    focusNext(opts = {}) {
      let root = ref.current;
      if (!root) return;
      let {
        from: from,
        tabbable = defaultOptions.tabbable,
        wrap = defaultOptions.wrap,
        accept = defaultOptions.accept
      } = opts;
      let node = from || document.activeElement;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable,
        accept: accept
      });
      if (root.contains(node)) walker.currentNode = node;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = root;
        nextNode = walker.nextNode();
      }
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return;
      let {
        from: from,
        tabbable = defaultOptions.tabbable,
        wrap = defaultOptions.wrap,
        accept = defaultOptions.accept
      } = opts;
      let node = from || document.activeElement;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable,
        accept: accept
      });
      if (root.contains(node)) walker.currentNode = node;else {
        let next = $9bf71ea28793e738$var$last(walker);
        if (next) $9bf71ea28793e738$var$focusElement(next, true);
        return next;
      }
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = root;
        previousNode = $9bf71ea28793e738$var$last(walker);
      }
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return;
      let {
        tabbable = defaultOptions.tabbable,
        accept = defaultOptions.accept
      } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable,
        accept: accept
      });
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return;
      let {
        tabbable = defaultOptions.tabbable,
        accept = defaultOptions.accept
      } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable,
        accept: accept
      });
      let next = $9bf71ea28793e738$var$last(walker);
      if (next) $9bf71ea28793e738$var$focusElement(next, true);
      return next;
    }
  };
}
function $9bf71ea28793e738$var$last(walker) {
  let next;
  let last;
  do {
    last = walker.lastChild();
    if (last) next = last;
  } while (last);
  return next;
}
function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let {
    autoFocus = false,
    isTextInput: isTextInput,
    within: within
  } = props;
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    isFocusVisible: autoFocus || module_$507fabe10e71c6fb$export$b9b3dfddab17db27()
  });
  let [isFocused1, setFocused] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let [isFocusVisibleState, setFocusVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => state.current.isFocused && state.current.isFocusVisible);
  let updateState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
  let onFocusChange = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(isFocused => {
    state.current.isFocused = isFocused;
    setFocused(isFocused);
    updateState();
  }, [updateState]);
  module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {
    state.current.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput: isTextInput
  });
  let {
    focusProps: focusProps
  } = module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: within,
    onFocusChange: onFocusChange
  });
  let {
    focusWithinProps: focusWithinProps
  } = module_$9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused: isFocused1,
    isFocusVisible: state.current.isFocused && isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}
function $907718708eab68af$export$1a38b4ad7f578e1d(props) {
  let {
    children: children,
    focusClass: focusClass,
    focusRingClass: focusRingClass
  } = props;
  let {
    isFocused: isFocused,
    isFocusVisible: isFocusVisible,
    focusProps: focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f(props);
  let child = $6nfFC$react.Children.only(children);
  return /*#__PURE__*/$6nfFC$react.cloneElement(child, $6nfFC$mergeProps(child.props, {
    ...focusProps,
    className: $6nfFC$clsx({
      [focusClass || '']: isFocused,
      [focusRingClass || '']: isFocusVisible
    })
  }));
}
let $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/(/* unused pure expression or super */ null && ($6nfFC$react.createContext(null)));
function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
  let context = $6nfFC$useContext($e6afbd83fe6ebbd2$var$FocusableContext) || {};
  $6nfFC$useSyncRef(context, ref);
  // eslint-disable-next-line
  let {
    ref: _,
    ...otherProps
  } = context;
  return otherProps;
}
/**
 * Provides DOM props to the nearest focusable child.
 */
function $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {
  let {
    children: children,
    ...otherProps
  } = props;
  let context = {
    ...otherProps,
    ref: ref
  };
  return /*#__PURE__*/$6nfFC$react.createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {
    value: context
  }, children);
}
let $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/(/* unused pure expression or super */ null && ($6nfFC$react.forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider)));
function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
  let {
    focusProps: focusProps
  } = $6nfFC$useFocus(props);
  let {
    keyboardProps: keyboardProps
  } = $6nfFC$useKeyboard(props);
  let interactions = $6nfFC$mergeProps(focusProps, keyboardProps);
  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = $6nfFC$useRef(props.autoFocus);
  $6nfFC$useEffect(() => {
    if (autoFocusRef.current && domRef.current) $6a99195332edec8b$export$80f3e147d781571c(domRef.current);
    autoFocusRef.current = false;
  }, [domRef]);
  return {
    focusableProps: $6nfFC$mergeProps({
      ...interactions,
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined
    }, interactionProps)
  };
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/utils/node_modules/@react-aria/ssr/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is
// guarded by a check that it only runs on the client side.
// eslint-disable-next-line rulesdir/useLayoutEffectRule

// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 10000000000)),
  current: 0
};
const ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext);
function ssr_dist_module_$704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {
  let cur = (0, $89yE2$useContext)(ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  let value = (0, $89yE2$useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [cur]);
  return /*#__PURE__*/(0, $89yE2$react).createElement(ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext.Provider, {
    value: value
  }, props.children);
}
let ssr_dist_module_$704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
function ssr_dist_module_$704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {
  let ctx = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  // If we are rendering in a non-DOM environment, and there's no SSRProvider,
  // provide a warning to hint to the developer to add one.
  if (ctx === ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext && !ssr_dist_module_$704cf1d3b684cc5c$var$canUseDOM) console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);
}
function ssr_dist_module_$704cf1d3b684cc5c$export$535bd6ca7f90a273() {
  let cur = (0, $89yE2$useContext)(ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  let isInSSRContext = cur !== ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext;
  let [isSSR, setIsSSR] = (0, $89yE2$useState)(isInSSRContext);
  // If on the client, and the component was initially server rendered,
  // then schedule a layout effect to update the component after hydration.
  if (typeof window !== "undefined" && isInSSRContext)
    // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, $89yE2$useLayoutEffect)(() => {
      setIsSSR(false);
    }, []);
  return isSSR;
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/utils/dist/module.js




const dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== 'undefined' ? (external_root_React_commonjs2_react_commonjs_react_amd_react_default()).useLayoutEffect : () => {};
let dist_module_$bdb11010cef70236$var$idsUpdaterMap = new Map();
function dist_module_$bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultId);
  let nextId = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let res = ssr_dist_module_$704cf1d3b684cc5c$export$619500959fc48b26(value);
  let updateValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(val => {
    nextId.current = val;
  }, []);
  dist_module_$bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let r = res;
    return () => {
      dist_module_$bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  // This cannot cause an infinite loop because the ref is updated first.
  // eslint-disable-next-line
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function dist_module_$bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = dist_module_$bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = dist_module_$1dbecbe27a04f9af$export$14d238f342723f25(id);
  let updateId = $12uGp$useCallback(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : undefined;
    });
  }, [id, setResolvedId]);
  dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}
function dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === 'function') callback(...args);
  };
}
function dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      // Chain events
      if (typeof a === 'function' && typeof b === 'function' &&
      // This is a lot faster than a regex.
      key[0] === 'o' && key[1] === 'n' && key.charCodeAt(2) >= /* 'A' */65 && key.charCodeAt(2) <= /* 'Z' */90) result[key] = dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e(a, b);else if ((key === 'className' || key === 'UNSAFE_className') && typeof a === 'string' && typeof b === 'string') result[key] = clsx_m(a, b);else if (key === 'id' && a && b) result.id = dist_module_$bdb11010cef70236$export$cd8c9cb68f842629(a, b);else result[key] = b !== undefined ? b : a;
    }
  }
  return result;
}
function dist_module_$5dc95899b306f630$export$c9058316764c140e(...refs) {
  return value => {
    for (let ref of refs) {
      if (typeof ref === 'function') ref(value);else if (ref != null) ref.current = value;
    }
  };
}
const dist_module_$65484d02dcb7eb3e$var$DOMPropNames = new Set(['id']);
const dist_module_$65484d02dcb7eb3e$var$labelablePropNames = new Set(['aria-label', 'aria-labelledby', 'aria-describedby', 'aria-details']);
const dist_module_$65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};
  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && (dist_module_$65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && dist_module_$65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || dist_module_$65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
  return filteredProps;
}
function dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if (dist_module_$7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = dist_module_$7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
let dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = null;
function dist_module_$7215afc6de606d6b$var$supportsPreventScroll() {
  if (dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement('div');
      focusElem.focus({
        get preventScroll() {
          dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
      // Ignore
    }
  }
  return dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached;
}
function dist_module_$7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}
function dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = 'horizontal') {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === 'horizontal' ? rect.right : rect.bottom;
  return orientation === 'horizontal' ? rect.left : rect.top;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let dist_module_$bbed8b41f857bcc0$var$transitionsByElement = new Map();
// A list of callbacks to call once there are no transitioning elements.
let dist_module_$bbed8b41f857bcc0$var$transitionCallbacks = new Set();
function dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === 'undefined') return;
  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = new Set();
      dist_module_$bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
      e.target.addEventListener('transitioncancel', onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
    if (properties.size === 0) {
      e.target.removeEventListener('transitioncancel', onTransitionEnd);
      dist_module_$bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    // If no transitioning elements, call all of the queued callbacks.
    if (dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of dist_module_$bbed8b41f857bcc0$var$transitionCallbacks) cb();
      dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener('transitionrun', onTransitionStart);
  document.body.addEventListener('transitionend', onTransitionEnd);
}
if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener('DOMContentLoaded', dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents);
}
function dist_module_$bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if (dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

// Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.
const dist_module_$9cc09df9fd7676be$var$draggingElements = (/* unused pure expression or super */ null && ([]));
function dist_module_$9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;
  let getPosition = e => orientation === 'horizontal' ? e.clientX : e.clientY;
  let getNextOffset = e => {
    let containerOffset = dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };
  let dragging = $12uGp$useRef(false);
  let prevPosition = $12uGp$useRef(0);
  // Keep track of the current handlers in a ref so that the events can access them.
  let handlers = $12uGp$useRef({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;
  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);
    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }
    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };
  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    dist_module_$9cc09df9fd7676be$var$draggingElements.splice(dist_module_$9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener('mouseup', onMouseUp, false);
    window.removeEventListener('mousemove', onMouseDragged, false);
  };
  let onMouseDown = e => {
    const target = e.currentTarget;
    // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.
    if (dist_module_$9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    dist_module_$9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener('mousemove', onMouseDragged, false);
    window.addEventListener('mouseup', onMouseUp, false);
  };
  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };
  let onMouseOut = () => {
    if (onHover) onHover(false);
  };
  let onKeyDown = e => {
    switch (e.key) {
      case 'Left':
      case 'ArrowLeft':
        if (orientation === 'horizontal') {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case 'Up':
      case 'ArrowUp':
        if (orientation === 'vertical') {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case 'Right':
      case 'ArrowRight':
        if (orientation === 'horizontal') {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case 'Down':
      case 'ArrowDown':
        if (orientation === 'vertical') {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case 'Home':
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;
      case 'End':
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;
      case 'Enter':
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };
  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}
function dist_module_$03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = $12uGp$useRef(new Map());
  let addGlobalListener = $12uGp$useCallback((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = $12uGp$useCallback((eventTarget, type, listener, options) => {
    var ref;
    let fn = ((ref = globalListeners.current.get(listener)) === null || ref === void 0 ? void 0 : ref.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = $12uGp$useCallback(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]);
  // eslint-disable-next-line arrow-body-style
  $12uGp$useEffect(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}
function dist_module_$313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  } = props;
  // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.
  id = dist_module_$bdb11010cef70236$export$f680877a34711e37(id);
  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(' ');
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(' ');
  // If no labels are provided, use the default
  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  };
}
function dist_module_$df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = $12uGp$useRef();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */
  dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === 'function') forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}
function dist_module_$4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = $12uGp$useRef(true);
  $12uGp$useEffect(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}
function dist_module_$9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== 'undefined';
}
function dist_module_$9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  $12uGp$useEffect(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;
    if (!dist_module_$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener('resize', onResize, false);
      return () => {
        window.removeEventListener('resize', onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}
function dist_module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}
function dist_module_$62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !dist_module_$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function dist_module_$62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

// @ts-ignore
let dist_module_$5df64b3807dc15ee$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;
function dist_module_$5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size1, setSize] = $12uGp$useState(() => dist_module_$5df64b3807dc15ee$var$getViewportSize());
  $12uGp$useEffect(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = dist_module_$5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };
    if (!dist_module_$5df64b3807dc15ee$var$visualViewport) window.addEventListener('resize', onResize);else dist_module_$5df64b3807dc15ee$var$visualViewport.addEventListener('resize', onResize);
    return () => {
      if (!dist_module_$5df64b3807dc15ee$var$visualViewport) window.removeEventListener('resize', onResize);else dist_module_$5df64b3807dc15ee$var$visualViewport.removeEventListener('resize', onResize);
    };
  }, []);
  return size1;
}
function dist_module_$5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: (dist_module_$5df64b3807dc15ee$var$visualViewport === null || dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : dist_module_$5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: (dist_module_$5df64b3807dc15ee$var$visualViewport === null || dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : dist_module_$5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}
let dist_module_$ef06256079686ba0$var$descriptionId = 0;
const dist_module_$ef06256079686ba0$var$descriptionNodes = new Map();
function dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id1, setId] = $12uGp$useState(undefined);
  dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!description) return;
    let desc = dist_module_$ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id = `react-aria-description-${dist_module_$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement('div');
      node.id = id;
      node.style.display = 'none';
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      dist_module_$ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        dist_module_$ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    'aria-describedby': description ? id1 : undefined
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function dist_module_$c87311424ea30a05$var$testUserAgent(re) {
  var ref;
  if (typeof window === 'undefined' || window.navigator == null) return false;
  return ((ref = window.navigator['userAgentData']) === null || ref === void 0 ? void 0 : ref.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function dist_module_$c87311424ea30a05$var$testPlatform(re) {
  var ref;
  return typeof window !== 'undefined' && window.navigator != null ? re.test(((ref = window.navigator['userAgentData']) === null || ref === void 0 ? void 0 : ref.platform) || window.navigator.platform) : false;
}
function dist_module_$c87311424ea30a05$export$9ac100e40613ea10() {
  return dist_module_$c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function dist_module_$c87311424ea30a05$export$186c6964ca17d99() {
  return dist_module_$c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function dist_module_$c87311424ea30a05$export$7bef049ce92e4224() {
  return dist_module_$c87311424ea30a05$var$testPlatform(/^iPad/i) || dist_module_$c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function dist_module_$c87311424ea30a05$export$fedb369cb70207f1() {
  return dist_module_$c87311424ea30a05$export$186c6964ca17d99() || dist_module_$c87311424ea30a05$export$7bef049ce92e4224();
}
function dist_module_$c87311424ea30a05$export$e1865c3bedcd822b() {
  return dist_module_$c87311424ea30a05$export$9ac100e40613ea10() || dist_module_$c87311424ea30a05$export$fedb369cb70207f1();
}
function dist_module_$c87311424ea30a05$export$78551043582a6a98() {
  return dist_module_$c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !dist_module_$c87311424ea30a05$export$6446a186d09e379e();
}
function dist_module_$c87311424ea30a05$export$6446a186d09e379e() {
  return dist_module_$c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function dist_module_$c87311424ea30a05$export$a11b0059900ceec8() {
  return dist_module_$c87311424ea30a05$var$testUserAgent(/Android/i);
}
function dist_module_$e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler1, options) {
  let handlerRef = $12uGp$useRef(handler1);
  handlerRef.current = handler1;
  let isDisabled = handler1 == null;
  $12uGp$useEffect(() => {
    if (isDisabled) return;
    let element = ref.current;
    let handler = e => handlerRef.current.call(this, e);
    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}
function dist_module_$1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = $12uGp$useState(defaultValue);
  let valueRef = $12uGp$useRef(value);
  let effect = $12uGp$useRef(null);
  valueRef.current = value;
  // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.
  let nextRef = $12uGp$useRef(null);
  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next();
    // If the generator is done, reset the effect.
    if (newValue.done) {
      effect.current = null;
      return;
    }
    // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.
    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };
  dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = $12uGp$useCallback(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}
function dist_module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'left');
  let offsetY = dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'top');
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */
function dist_module_$2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}
function dist_module_$6a7db85432448f7f$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
  // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
  // to detect TalkBack virtual clicks.
  if (dist_module_$c87311424ea30a05$export$a11b0059900ceec8() && event.pointerType) return event.type === 'click' && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function dist_module_$6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
  // Talkback double tap from Windows Firefox touch screen press
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';
}

;// CONCATENATED MODULE: ./src/utils/dom.ts

function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
const dom_isBrowser = canUseDOM();
function getUserAgentBrowser(navigator) {
  const {
    userAgent: ua,
    vendor
  } = navigator;
  const android = /(android)/i.test(ua);
  switch (true) {
    case /CriOS/.test(ua):
      return "Chrome for iOS";
    case /Edg\//.test(ua):
      return "Edge";
    case android && /Silk\//.test(ua):
      return "Silk";
    case /Chrome/.test(ua) && /Google Inc/.test(vendor):
      return "Chrome";
    case /Firefox\/\d+\.\d+$/.test(ua):
      return "Firefox";
    case android:
      return "AOSP";
    case /MSIE|Trident/.test(ua):
      return "IE";
    case /Safari/.test(navigator.userAgent) && /Apple Computer/.test(ua):
      return "Safari";
    case /AppleWebKit/.test(ua):
      return "WebKit";
    default:
      return null;
  }
}
function getUserAgentOS(navigator) {
  const {
    userAgent: ua,
    platform
  } = navigator;
  switch (true) {
    case /Android/.test(ua):
      return "Android";
    case /iPhone|iPad|iPod/.test(platform):
      return "iOS";
    case /Win/.test(platform):
      return "Windows";
    case /Mac/.test(platform):
      return "Mac";
    case /CrOS/.test(ua):
      return "Chrome OS";
    case /Firefox/.test(ua):
      return "Firefox OS";
    default:
      return null;
  }
}
function detectDeviceType(navigator) {
  const {
    userAgent: ua
  } = navigator;
  if (/(tablet)|(iPad)|(Nexus 9)/i.test(ua)) return "tablet";
  if (/(mobi)/i.test(ua)) return "phone";
  return "desktop";
}
function detectOS(os) {
  if (!dom_isBrowser) return false;
  return getUserAgentOS(window.navigator) === os;
}
function detectBrowser(browser) {
  if (!dom_isBrowser) return false;
  return getUserAgentBrowser(window.navigator) === browser;
}
function detectTouch() {
  if (!dom_isBrowser) return false;
  return window.ontouchstart === null && window.ontouchmove === null && window.ontouchend === null;
}
function createDOMRef(ref) {
  return {
    UNSAFE_getDOMNode() {
      return ref.current;
    }
  };
}
function createFocusableRef(domRef, focusableRef = domRef) {
  return {
    ...createDOMRef(domRef),
    focus() {
      if (focusableRef.current) {
        focusableRef.current.focus();
      }
    }
  };
}
function useDOMRef(ref) {
  const domRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => domRef.current);
  return domRef;
}
function useFocusableRef(ref, focusableRef) {
  const domRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => createFocusableRef(domRef, focusableRef));
  return domRef;
}
// Syncs ref from context with ref passed to hook
function useSyncRef(context, ref) {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(() => {
    if (context && context.ref && ref && ref.current) {
      context.ref.current = ref.current;
      return () => {
        var _context$ref;
        if ((_context$ref = context.ref) != null && _context$ref.current) {
          context.ref.current = null;
        }
      };
    }
  }, [context, ref]);
}
;// CONCATENATED MODULE: ./src/avatar/avatar.styles.ts


const StyledAvatar = styled("span", {
  dflex: "center",
  position: "relative",
  zIndex: "$1",
  boxSizing: "border-box",
  overflow: "hidden",
  verticalAlign: "top",
  cursor: "auto",
  transition: "transform 250ms ease 0ms, box-shadow 0.25s ease 0s",
  ".nextui-avatar-bg": {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: "$2",
    transition: "$avatar",
    size: "100%"
  },
  ".nextui-avatar-img": {
    opacity: 0,
    zIndex: "$3",
    display: "flex",
    bg: "$background",
    transition: "transform 250ms ease 0ms, opacity 200ms ease-in 0ms",
    width: "100%",
    height: "100%",
    objectFit: "cover"
  },
  '&[data-state="ready"] .nextui-avatar-img': {
    opacity: 1
  },
  ".nextui-avatar-icon": {
    display: "flex",
    position: "absolute",
    left: "50%",
    top: "50%",
    ta: "center",
    zIndex: "$2",
    transform: "translate(-50%, -50%)",
    whiteSpace: "nowrap",
    us: "none"
  },
  ".nextui-avatar-text": {
    position: "absolute",
    zIndex: "$2",
    left: "50%",
    top: "50%",
    ta: "center",
    color: "$text",
    fontWeight: "$medium",
    transform: "translate(-50%, -50%) scale(0.65)",
    whiteSpace: "nowrap",
    us: "none"
  },
  "@motion": {
    transition: "none",
    ".nextui-avatar-bg, .nextui-avatar-img": {
      transition: "none"
    }
  },
  variants: {
    color: {
      default: {
        ".nextui-avatar-bg": {
          bg: "$accents2"
        }
      },
      primary: {
        ".nextui-avatar-bg": {
          bg: "$primary"
        }
      },
      secondary: {
        ".nextui-avatar-bg": {
          bg: "$secondary"
        }
      },
      success: {
        ".nextui-avatar-bg": {
          bg: "$success"
        }
      },
      warning: {
        ".nextui-avatar-bg": {
          bg: "$warning"
        }
      },
      error: {
        ".nextui-avatar-bg": {
          bg: "$error"
        }
      },
      gradient: {
        ".nextui-avatar-bg": {
          bg: "$gradient"
        }
      }
    },
    textColor: {
      default: {
        ".nextui-avatar-text": {
          color: "$text"
        }
      },
      white: {
        ".nextui-avatar-text": {
          color: "$white"
        }
      },
      primary: {
        ".nextui-avatar-text": {
          color: "$primary"
        }
      },
      secondary: {
        ".nextui-avatar-text": {
          color: "$secondary"
        }
      },
      success: {
        ".nextui-avatar-text": {
          color: "$success"
        }
      },
      warning: {
        ".nextui-avatar-text": {
          color: "$warning"
        }
      },
      error: {
        ".nextui-avatar-text": {
          color: "$error"
        }
      }
    },
    size: {
      xs: {
        $$avatarXs: "$space$9",
        sizeMin: "$$avatarXs",
        ".nextui-avatar-text": {
          fontSize: "$sm"
        }
      },
      sm: {
        $$avatarSm: "$space$11",
        sizeMin: "$$avatarSm",
        ".nextui-avatar-text": {
          fontSize: "$md"
        }
      },
      md: {
        $$avatarMd: "$space$14",
        sizeMin: "$$avatarMd",
        ".nextui-avatar-text": {
          fontSize: "$lg"
        }
      },
      lg: {
        $$avatarLg: "$space$16",
        sizeMin: "$$avatarLg",
        ".nextui-avatar-text": {
          fontSize: "$xl"
        }
      },
      xl: {
        $$avatarXl: "$space$18",
        sizeMin: "$$avatarXl",
        ".nextui-avatar-text": {
          fontSize: "$2xl"
        }
      }
    },
    borderWeight: {
      light: {
        ".nextui-avatar-img": {
          borderWidth: "$light"
        }
      },
      normal: {
        ".nextui-avatar-img": {
          borderWidth: "$normal"
        }
      },
      bold: {
        ".nextui-avatar-img": {
          borderWidth: "$normal"
        }
      },
      extrabold: {
        ".nextui-avatar-img": {
          borderWidth: "$normal"
        }
      },
      black: {
        ".nextui-avatar-img": {
          borderWidth: "$normal"
        }
      }
    },
    bordered: {
      true: {
        ".nextui-avatar-img": {
          borderStyle: "solid",
          borderColor: "$background"
        }
      }
    },
    stacked: {
      true: {
        ml: "-$5"
      }
    },
    pointer: {
      true: {
        cursor: "pointer",
        "&:hover .nextui-avatar-bg": {
          boxShadow: "inset 0 0 40px 0 rgb(0 0 0 / 14%)"
        }
      }
    },
    rounded: {
      true: {
        borderRadius: "$rounded",
        ".nextui-avatar-img": {
          borderRadius: "$rounded"
        }
      }
    },
    squared: {
      true: {
        borderRadius: "$squared",
        ".nextui-avatar-img": {
          borderRadius: "$squared"
        }
      }
    },
    zoomed: {
      true: {
        "&:hover .nextui-avatar-img": {
          transform: "scale(1.125)"
        }
      }
    }
  },
  compoundVariants: [
  // bordered / borderWeight
  {
    bordered: true,
    borderWeight: "light",
    css: {
      padding: "calc($1/2)"
    }
  }, {
    bordered: true,
    borderWeight: "normal",
    css: {
      padding: "$1"
    }
  }, {
    bordered: true,
    borderWeight: "bold",
    css: {
      padding: "calc($2/1.5)"
    }
  }, {
    bordered: true,
    borderWeight: "extrabold",
    css: {
      padding: "$2"
    }
  }, {
    bordered: true,
    borderWeight: "black",
    css: {
      padding: "calc($3/1.5)"
    }
  }, {
    rounded: true,
    squared: true,
    css: {
      borderRadius: "$squared",
      ".nextui-avatar-img": {
        borderRadius: "$squared"
      }
    }
  },
  // bordered && pointer
  {
    bordered: true,
    pointer: true,
    css: {
      "&:hover:not(.only-text-avatar) .nextui-avatar-bg": {
        opacity: "0.7"
      }
    }
  }],
  defaultVariants: {
    size: "md",
    rounded: true,
    color: "default",
    textColor: "default",
    borderWeight: "normal"
  }
}, cssFocusVisible);
/* harmony default export */ const avatar_styles = (StyledAvatar);
;// CONCATENATED MODULE: ./src/avatar/avatar.tsx
var avatar_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/avatar/avatar.tsx";








const safeText = text => {
  if ((text == null ? void 0 : text.length) <= 4) return text;
  return text == null ? void 0 : text.slice(0, 3);
};
const Avatar = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    as,
    src,
    css,
    text,
    icon,
    alt,
    className,
    imgRef: imgRefProp,
    ...otherProps
  } = props;
  const domRef = useDOMRef(ref);
  const showText = !src;
  const [ready, setReady] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const imgRef = useDOMRef(imgRefProp);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    var _imgRef$current;
    (imgRef == null ? void 0 : (_imgRef$current = imgRef.current) == null ? void 0 : _imgRef$current.complete) && setReady(true);
  }, []);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return !ready && src ? "loading" : "ready";
  }, [src, ready]);
  const getAsButtonCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (as !== "button") return;

    // reset button styles
    return {
      appearance: "none",
      outline: "none",
      border: "none",
      cursor: "pointer"
    };
  }, [as]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(avatar_styles, {
    ref: domRef,
    as: as,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, focusProps),
    className: clsx({
      "only-text-avatar": showText
    }, className),
    css: {
      ...getAsButtonCss,
      ...css
    },
    "data-state": getState,
    isFocusVisible: isFocusVisible,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-bg"
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 90,
      columnNumber: 7
    }, undefined), !showText && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("img", {
      ref: imgRef,
      alt: alt,
      className: clsx("nextui-avatar-img", `nextui-avatar--${getState}`, {
        "nextui-avatar-ready": ready
      }),
      "data-state": getState,
      src: src,
      onLoad: () => setReady(true)
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 92,
      columnNumber: 9
    }, undefined), showText && !icon && text && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-text",
      children: safeText(text)
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 103,
      columnNumber: 37
    }, undefined), icon && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-icon",
      children: icon
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 104,
      columnNumber: 16
    }, undefined)]
  }, void 0, true, {
    fileName: avatar_jsxFileName,
    lineNumber: 76,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Avatar.displayName = "NextUI.Avatar";
}
Avatar.toString = () => ".nextui-avatar";
/* harmony default export */ const avatar = (Avatar);
;// CONCATENATED MODULE: ./src/avatar/avatar-group.styles.ts


const StyledAvatarGroupCount = styled("span", {
  fontSize: "$xs",
  display: "inline-flex",
  alignItems: "center",
  marginLeft: "$3",
  color: "$text"
});
const StyledAvatarGroup = styled("div", {
  dflex: "center",
  height: "auto",
  width: "max-content",
  "@motion": {
    transition: "none"
  },
  [`& ${avatar_styles}`]: {
    marginLeft: "-$space$5",
    transition: "$default",
    ".only-text-avatar": {
      boxShadow: "$xs"
    }
  },
  ".only-text-avatar": {
    boxShadow: "$xs"
  },
  variants: {
    animated: {
      true: {
        [`& ${avatar_styles}:hover`]: {
          transform: "translate(-$space$5)"
        }
      }
    }
  },
  defaultVariants: {
    animated: true
  }
});
/* harmony default export */ const avatar_group_styles = (StyledAvatarGroup);
;// CONCATENATED MODULE: ./src/avatar/avatar-group.tsx
var avatar_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/avatar/avatar-group.tsx";





const AvatarGroup = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    count,
    children,
    ...otherProps
  } = props;
  const domRef = useDOMRef(ref);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(avatar_group_styles, {
    ref: domRef,
    ...otherProps,
    children: [children, count && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledAvatarGroupCount, {
      className: "nextui-avatar-group-count",
      children: ["+", count]
    }, void 0, true, {
      fileName: avatar_group_jsxFileName,
      lineNumber: 33,
      columnNumber: 11
    }, undefined)]
  }, void 0, true, {
    fileName: avatar_group_jsxFileName,
    lineNumber: 30,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  AvatarGroup.displayName = "NextUI.AvatarGroup";
}
AvatarGroup.toString = () => ".nextui-avatar-group";
/* harmony default export */ const avatar_group = (AvatarGroup);
;// CONCATENATED MODULE: ./src/avatar/index.ts





avatar.Group = avatar_group;
/* harmony default export */ const src_avatar = (avatar);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/ssr/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is
// guarded by a check that it only runs on the client side.
// eslint-disable-next-line rulesdir/useLayoutEffectRule

// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const _react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 10000000000)),
  current: 0
};
const _react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext);
function _react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {
  let cur = (0, $89yE2$useContext)(_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  let value = (0, $89yE2$useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === _react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [cur]);
  return /*#__PURE__*/(0, $89yE2$react).createElement(_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext.Provider, {
    value: value
  }, props.children);
}
let _react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
function _react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {
  let ctx = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  // If we are rendering in a non-DOM environment, and there's no SSRProvider,
  // provide a warning to hint to the developer to add one.
  if (ctx === _react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext && !_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$canUseDOM) console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);
}
function _react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$535bd6ca7f90a273() {
  let cur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  let isInSSRContext = cur !== _react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext;
  let [isSSR, setIsSSR] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isInSSRContext);
  // If on the client, and the component was initially server rendered,
  // then schedule a layout effect to update the component after hydration.
  if (typeof window !== "undefined" && isInSSRContext)
    // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(() => {
      setIsSSR(false);
    }, []);
  return isSSR;
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/utils/dist/module.js





/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).useLayoutEffect : () => {};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function utils_dist_module_$1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultValue);
  let valueRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(value);
  let effect = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  valueRef.current = value;
  // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.
  let nextRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next();
    // If the generator is done, reset the effect.
    if (newValue.done) {
      effect.current = null;
      return;
    }
    // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.
    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };
  (0, utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}
let utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap = new Map();
function utils_dist_module_$bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultId);
  let nextId = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let res = (0, _react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$619500959fc48b26)(value);
  let updateValue = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(val => {
    nextId.current = val;
  }, []);
  utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  (0, utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let r = res;
    return () => {
      utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  // This cannot cause an infinite loop because the ref is updated first.
  // eslint-disable-next-line
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function utils_dist_module_$bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = utils_dist_module_$bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = (0, utils_dist_module_$1dbecbe27a04f9af$export$14d238f342723f25)(id);
  let updateId = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : undefined;
    });
  }, [id, setResolvedId]);
  (0, utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Calls all functions in the order they were chained with the same arguments.
    */
function utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      // Chain events
      if (typeof a === "function" && typeof b === "function" &&
      // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */65 && key.charCodeAt(2) <= /* 'Z' */90) result[key] = (0, utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = (0, clsx_m)(a, b);else if (key === "id" && a && b) result.id = (0, utils_dist_module_$bdb11010cef70236$export$cd8c9cb68f842629)(a, b);else result[key] = b !== undefined ? b : a;
    }
  }
  return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$5dc95899b306f630$export$c9058316764c140e(...refs) {
  return value => {
    for (let ref of refs) {
      if (typeof ref === "function") ref(value);else if (ref != null) ref.current = value;
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const utils_dist_module_$65484d02dcb7eb3e$var$DOMPropNames = new Set(["id"]);
const utils_dist_module_$65484d02dcb7eb3e$var$labelablePropNames = new Set(["aria-label", "aria-labelledby", "aria-describedby", "aria-details"]);
const utils_dist_module_$65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};
  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && (utils_dist_module_$65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && utils_dist_module_$65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || utils_dist_module_$65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
  return filteredProps;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if (utils_dist_module_$7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = utils_dist_module_$7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    utils_dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
let utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = null;
function utils_dist_module_$7215afc6de606d6b$var$supportsPreventScroll() {
  if (utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
      // Ignore
    }
  }
  return utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached;
}
function utils_dist_module_$7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function utils_dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === "horizontal" ? rect.right : rect.bottom;
  return orientation === "horizontal" ? rect.left : rect.top;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement = new Map();
// A list of callbacks to call once there are no transitioning elements.
let utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks = new Set();
function utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = new Set();
      utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
      e.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    // If no transitioning elements, call all of the queued callbacks.
    if (utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks) cb();
      utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener("DOMContentLoaded", utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents);
}
function utils_dist_module_$bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if (utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.
const utils_dist_module_$9cc09df9fd7676be$var$draggingElements = (/* unused pure expression or super */ null && ([]));
function utils_dist_module_$9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;
  let getPosition = e => orientation === "horizontal" ? e.clientX : e.clientY;
  let getNextOffset = e => {
    let containerOffset = (0, utils_dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };
  let dragging = (0, $12uGp$useRef)(false);
  let prevPosition = (0, $12uGp$useRef)(0);
  // Keep track of the current handlers in a ref so that the events can access them.
  let handlers = (0, $12uGp$useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;
  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);
    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }
    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };
  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    utils_dist_module_$9cc09df9fd7676be$var$draggingElements.splice(utils_dist_module_$9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener("mouseup", onMouseUp, false);
    window.removeEventListener("mousemove", onMouseDragged, false);
  };
  let onMouseDown = e => {
    const target = e.currentTarget;
    // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.
    if (utils_dist_module_$9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    utils_dist_module_$9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener("mousemove", onMouseDragged, false);
    window.addEventListener("mouseup", onMouseUp, false);
  };
  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };
  let onMouseOut = () => {
    if (onHover) onHover(false);
  };
  let onKeyDown = e => {
    switch (e.key) {
      case "Left":
      case "ArrowLeft":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Up":
      case "ArrowUp":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Right":
      case "ArrowRight":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Down":
      case "ArrowDown":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Home":
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;
      case "End":
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;
      case "Enter":
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };
  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(new Map());
  let addGlobalListener = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]);
  // eslint-disable-next-line arrow-body-style
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  } = props;
  // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.
  id = (0, utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)(id);
  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(" ");
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  // If no labels are provided, use the default
  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function utils_dist_module_$df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, $12uGp$useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */
  (0, utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === "function") forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(true);
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}
function utils_dist_module_$9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function utils_dist_module_$9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0, $12uGp$useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;
    if (!utils_dist_module_$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !utils_dist_module_$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function utils_dist_module_$62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// @ts-ignore
let utils_dist_module_$5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function utils_dist_module_$5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size, setSize] = (0, $12uGp$useState)(() => utils_dist_module_$5df64b3807dc15ee$var$getViewportSize());
  (0, $12uGp$useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = utils_dist_module_$5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };
    if (!utils_dist_module_$5df64b3807dc15ee$var$visualViewport) window.addEventListener("resize", onResize);else utils_dist_module_$5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      if (!utils_dist_module_$5df64b3807dc15ee$var$visualViewport) window.removeEventListener("resize", onResize);else utils_dist_module_$5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, []);
  return size;
}
function utils_dist_module_$5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: (utils_dist_module_$5df64b3807dc15ee$var$visualViewport === null || utils_dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : utils_dist_module_$5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: (utils_dist_module_$5df64b3807dc15ee$var$visualViewport === null || utils_dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : utils_dist_module_$5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let utils_dist_module_$ef06256079686ba0$var$descriptionId = 0;
const utils_dist_module_$ef06256079686ba0$var$descriptionNodes = new Map();
function utils_dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id, setId] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(undefined);
  (0, utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!description) return;
    let desc = utils_dist_module_$ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id = `react-aria-description-${utils_dist_module_$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement("div");
      node.id = id;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      utils_dist_module_$ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        utils_dist_module_$ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    "aria-describedby": description ? id : undefined
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function utils_dist_module_$c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() {
  return utils_dist_module_$c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function utils_dist_module_$c87311424ea30a05$export$186c6964ca17d99() {
  return utils_dist_module_$c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function utils_dist_module_$c87311424ea30a05$export$7bef049ce92e4224() {
  return utils_dist_module_$c87311424ea30a05$var$testPlatform(/^iPad/i) ||
  // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1() {
  return utils_dist_module_$c87311424ea30a05$export$186c6964ca17d99() || utils_dist_module_$c87311424ea30a05$export$7bef049ce92e4224();
}
function utils_dist_module_$c87311424ea30a05$export$e1865c3bedcd822b() {
  return utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() || utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1();
}
function utils_dist_module_$c87311424ea30a05$export$78551043582a6a98() {
  return utils_dist_module_$c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !utils_dist_module_$c87311424ea30a05$export$6446a186d09e379e();
}
function utils_dist_module_$c87311424ea30a05$export$6446a186d09e379e() {
  return utils_dist_module_$c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8() {
  return utils_dist_module_$c87311424ea30a05$var$testUserAgent(/Android/i);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
  let handlerRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(handler);
  handlerRef.current = handler;
  let isDisabled = handler == null;
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;
    let handler = e => handlerRef.current.call(this, e);
    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Scrolls `scrollView` so that `element` is visible.
    * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),
    * but doesn't affect parents above `scrollView`.
    */
function utils_dist_module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */
function utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function utils_dist_module_$6a7db85432448f7f$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
  // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
  // to detect TalkBack virtual clicks.
  if ((0, utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function utils_dist_module_$6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
  // Talkback double tap from Windows Firefox touch screen press
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

;// CONCATENATED MODULE: ../../node_modules/@swc/helpers/src/_define_property.mjs
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/interactions/dist/module.js



/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually
let dist_module_$14c0b72509d70225$var$state = "default";
let dist_module_$14c0b72509d70225$var$savedUserSelect = "";
let dist_module_$14c0b72509d70225$var$modifiedElementMap = new WeakMap();
function dist_module_$14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1)()) {
    if (dist_module_$14c0b72509d70225$var$state === "default") {
      dist_module_$14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = "none";
    }
    dist_module_$14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    // If not iOS, store the target's original user-select and change to user-select: none
    // Ignore state since it doesn't apply for non iOS
    dist_module_$14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = "none";
  }
}
function dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1)()) {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if (dist_module_$14c0b72509d70225$var$state !== "disabled") return;
    dist_module_$14c0b72509d70225$var$state = "restoring";
    // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.
    setTimeout(() => {
      // Wait for any CSS transitions to complete so we don't recompute style
      // for the whole page in the middle of the animation and cause jank.
      (0, utils_dist_module_$bbed8b41f857bcc0$export$24490316f764c430)(() => {
        // Avoid race conditions
        if (dist_module_$14c0b72509d70225$var$state === "restoring") {
          if (document.documentElement.style.webkitUserSelect === "none") document.documentElement.style.webkitUserSelect = dist_module_$14c0b72509d70225$var$savedUserSelect || "";
          dist_module_$14c0b72509d70225$var$savedUserSelect = "";
          dist_module_$14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement)
    // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    {
      if (target && dist_module_$14c0b72509d70225$var$modifiedElementMap.has(target)) {
        let targetOldUserSelect = dist_module_$14c0b72509d70225$var$modifiedElementMap.get(target);
        if (target.style.userSelect === "none") target.style.userSelect = targetOldUserSelect;
        if (target.getAttribute("style") === "") target.removeAttribute("style");
        dist_module_$14c0b72509d70225$var$modifiedElementMap.delete(target);
      }
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(null);
dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function dist_module_$f6c31cce2adf654f$var$usePressResponderContext(props) {
  // Consume context from <PressResponder> and merge with props.
  let context = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)((0, dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context) {
    let {
      register: register,
      ...contextProps
    } = context;
    props = (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
    register();
  }
  (0, utils_dist_module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, props.ref);
  return props;
}
function dist_module_$f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress: onPress,
    onPressChange: onPressChange,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressUp: onPressUp,
    isDisabled: isDisabled,
    isPressed: isPressedProp,
    preventFocusOnPress: preventFocusOnPress,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit,
    allowTextSelectionOnPress: allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = dist_module_$f6c31cce2adf654f$var$usePressResponderContext(props);
  let propsRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  propsRef.current = {
    onPress: onPress,
    onPressChange: onPressChange,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressUp: onPressUp,
    isDisabled: isDisabled,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let ref = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  } = (0, utils_dist_module_$03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  let pressProps = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let state = ref.current;
    let triggerPressStart = (originalEvent, pointerType) => {
      let {
        onPressStart: onPressStart,
        onPressChange: onPressChange,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled || state.didFirePressStart) return;
      if (onPressStart) onPressStart({
        type: "pressstart",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(true);
      state.didFirePressStart = true;
      setPressed(true);
    };
    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
      let {
        onPressEnd: onPressEnd,
        onPressChange: onPressChange,
        onPress: onPress,
        isDisabled: isDisabled
      } = propsRef.current;
      if (!state.didFirePressStart) return;
      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;
      if (onPressEnd) onPressEnd({
        type: "pressend",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(false);
      setPressed(false);
      if (onPress && wasPressed && !isDisabled) onPress({
        type: "press",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let triggerPressUp = (originalEvent, pointerType) => {
      let {
        onPressUp: onPressUp,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled) return;
      if (onPressUp) onPressUp({
        type: "pressup",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let cancel = e => {
      if (state.isPressed) {
        if (state.isOverTarget) triggerPressEnd(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();
        if (!allowTextSelectionOnPress) (0, dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
      }
    };
    let pressProps = {
      onKeyDown(e) {
        if (dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
          if (dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
          e.stopPropagation();
          // If the event is repeating, it may have started on a different element
          // after which focus moved to the current element. Ignore these events and
          // only handle the first key down event.
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, "keyboard");
            // Focus may move before the key up event, so register the event on the document
            // instead of the same element where the key down event occurred.
            addGlobalListener(document, "keyup", onKeyUp, false);
          }
        } else if (e.key === "Enter" && dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget))
          // If the target is a link, we won't have handled this above because we want the default
          // browser behavior to open the link when pressing Enter. But we still need to prevent
          // default so that elements above do not also handle it (e.g. table row).
          e.stopPropagation();
      },
      onKeyUp(e) {
        if (dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard");
      },
      onClick(e) {
        if (e && !e.currentTarget.contains(e.target)) return;
        if (e && e.button === 0) {
          e.stopPropagation();
          if (isDisabled) e.preventDefault();
          // If triggered from a screen reader or by using element.click(),
          // trigger as if it were a keyboard click.
          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || (0, utils_dist_module_$6a7db85432448f7f$export$60278871457622de)(e.nativeEvent))) {
            // Ensure the element receives focus (VoiceOver on iOS does not do this)
            if (!isDisabled && !preventFocusOnPress) (0, utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
            triggerPressStart(e, "virtual");
            triggerPressUp(e, "virtual");
            triggerPressEnd(e, "virtual");
          }
          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }
    };
    let onKeyUp = e => {
      if (state.isPressed && dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        if (dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", state.target.contains(target));
        removeAllGlobalListeners();
        // If the target is a link, trigger the click method to open the URL,
        // but defer triggering pressEnd until onClick event handler.
        if (state.target instanceof HTMLElement && state.target.contains(target) && (dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link")) state.target.click();
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps.onPointerDown = e => {
        // Only handle left clicks, and ignore events that bubbled through portals.
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
        // Ignore and let the onClick handler take care of it instead.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202
        if ((0, utils_dist_module_$6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on pointer down and handle focusing the pressable element ourselves.
        if (dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        state.pointerType = e.pointerType;
        e.stopPropagation();
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!isDisabled && !preventFocusOnPress) (0, utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
          if (!allowTextSelectionOnPress) (0, dist_module_$14c0b72509d70225$export$16a4697467175487)(state.target);
          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, "pointermove", onPointerMove, false);
          addGlobalListener(document, "pointerup", onPointerUp, false);
          addGlobalListener(document, "pointercancel", onPointerCancel, false);
        }
      };
      pressProps.onMouseDown = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (e.button === 0) {
          // Chrome and Firefox on touch Windows devices require mouse down events
          // to be canceled in addition to pointer events, or an extra asynchronous
          // focus event will be fired.
          if (dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
          e.stopPropagation();
        }
      };
      pressProps.onPointerUp = e => {
        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
        if (!e.currentTarget.contains(e.target) || state.pointerType === "virtual") return;
        // Only handle left clicks
        // Safari on iOS sometimes fires pointerup events, even
        // when the touch isn't over the target, so double check.
        if (e.button === 0 && dist_module_$f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
      // Use pointer move events instead to implement our own hit testing.
      // See https://bugs.webkit.org/show_bug.cgi?id=199803
      let onPointerMove = e => {
        if (e.pointerId !== state.activePointerId) return;
        if (dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if (dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress) (0, dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        }
      };
      let onPointerCancel = e => {
        cancel(e);
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.
        cancel(e);
      };
    } else {
      pressProps.onMouseDown = e => {
        // Only handle left clicks
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on mouse down and handle focusing the pressable element ourselves.
        if (dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        e.stopPropagation();
        if (state.ignoreEmulatedMouseEvents) return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = (0, utils_dist_module_$6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) ? "virtual" : "mouse";
        if (!isDisabled && !preventFocusOnPress) (0, utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, "mouseup", onMouseUp, false);
      };
      pressProps.onMouseEnter = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };
      pressProps.onMouseLeave = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onMouseUp = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);
      };
      let onMouseUp = e => {
        // Only handle left clicks
        if (e.button !== 0) return;
        state.isPressed = false;
        removeAllGlobalListeners();
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if (dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isOverTarget = false;
      };
      pressProps.onTouchStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        let touch = dist_module_$f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = "touch";
        // Due to browser inconsistencies, especially on mobile browsers, we prevent default
        // on the emulated mouse event and handle focusing the pressable element ourselves.
        if (!isDisabled && !preventFocusOnPress) (0, utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
        if (!allowTextSelectionOnPress) (0, dist_module_$14c0b72509d70225$export$16a4697467175487)(state.target);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, "scroll", onScroll, true);
      };
      pressProps.onTouchMove = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = dist_module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && dist_module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onTouchEnd = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = dist_module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && dist_module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress) (0, dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        removeAllGlobalListeners();
      };
      pressProps.onTouchCancel = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed) cancel(e);
      };
      let onScroll = e => {
        if (state.isPressed && e.target.contains(state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        cancel(e);
      };
    }
    return pressProps;
  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);
  // Remove user-select: none in case component unmounts immediately after pressStart
  // eslint-disable-next-line arrow-body-style
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return () => {
      if (!allowTextSelectionOnPress)
        // eslint-disable-next-line react-hooks/exhaustive-deps
        (0, dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);
    };
  }, [allowTextSelectionOnPress]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, pressProps)
  };
}
function dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const {
    key: key,
    code: code
  } = event;
  const element = currentTarget;
  const role = element.getAttribute("role");
  // Accessibility for keyboards. Space and Enter only.
  // "Spacebar" is for IE 11
  return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !dist_module_$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (
  // A link with a valid href should be handled natively,
  // unless it also has role='button' and was triggered using Space.
  !dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") &&
  // An element with role='link' should only trigger with Enter key
  !(role === "link" && key !== "Enter");
}
function dist_module_$f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const {
    targetTouches: targetTouches
  } = event;
  if (targetTouches.length > 0) return targetTouches[0];
  return null;
}
function dist_module_$f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;
  for (let i = 0; i < changedTouches.length; i++) {
    const touch = changedTouches[i];
    if (touch.identifier === pointerId) return touch;
  }
  return null;
}
function dist_module_$f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}
function dist_module_$f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function dist_module_$f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
  // check if they cannot overlap on x axis
  if (a.left > b.right || b.left > a.right) return false;
  // check if they cannot overlap on y axis
  if (a.top > b.bottom || b.top > a.bottom) return false;
  return true;
}
function dist_module_$f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = dist_module_$f6c31cce2adf654f$var$getPointClientRect(point);
  return dist_module_$f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(target) {
  // We cannot prevent default if the target is a draggable element.
  return !(target instanceof HTMLElement) || !target.draggable;
}
function dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !dist_module_$f6c31cce2adf654f$var$isValidInputKey(target, key);
  if (target instanceof HTMLButtonElement) return target.type !== "submit";
  return true;
}
const dist_module_$f6c31cce2adf654f$var$nonTextInputTypes = new Set(["checkbox", "radio", "range", "color", "file", "image", "button", "submit", "reset"]);
function dist_module_$f6c31cce2adf654f$var$isValidInputKey(target, key) {
  // Only space should toggle checkboxes and radios, not enter.
  return target.type === "checkbox" || target.type === "radio" ? key === " " : dist_module_$f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
const dist_module_$3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $bx7SL$react).forwardRef(({
  children: children,
  ...props
}, ref) => {
  let newRef = (0, $bx7SL$useRef)();
  ref = ref !== null && ref !== void 0 ? ref : newRef;
  let {
    pressProps: pressProps
  } = (0, dist_module_$f6c31cce2adf654f$export$45712eceda6fad21)({
    ...props,
    ref: ref
  });
  let child = (0, $bx7SL$react).Children.only(children);
  return /*#__PURE__*/(0, $bx7SL$react).cloneElement(child,
  // @ts-ignore
  {
    ref: ref,
    ...(0, $bx7SL$mergeProps)(child.props, pressProps)
  });
})));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const dist_module_$f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $bx7SL$react).forwardRef(({
  children: children,
  ...props
}, ref) => {
  let isRegistered = (0, $bx7SL$useRef)(false);
  let prevContext = (0, $bx7SL$useContext)((0, dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  let context = (0, $bx7SL$mergeProps)(prevContext || {}, {
    ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }
  });
  (0, $bx7SL$useSyncRef)(prevContext, ref);
  (0, $bx7SL$useEffect)(() => {
    if (!isRegistered.current) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
  }, []);
  return /*#__PURE__*/(0, $bx7SL$react).createElement((0, dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context
  }, children);
})));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

class dist_module_$8a9cb279dc87e130$export$905e7fc544a71f36 {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {}
  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
}
function dist_module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    onBlur: onBlur,
    observer: null
  });
  stateRef.current.onBlur = onBlur;
  // Clean up MutationObserver on unmount. See below.
  // eslint-disable-next-line arrow-body-style
  (0, utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  // This function is called during a React onFocus event.
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = e => {
        var
          // For backward compatibility, dispatch a (fake) React synthetic event.
          _stateRef_current, _stateRef_current_onBlur;
        stateRef.current.isFocused = false;
        if (target.disabled) (_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 ? void 0 : _stateRef_current_onBlur.call(_stateRef_current, new dist_module_$8a9cb279dc87e130$export$905e7fc544a71f36("blur", e));
        // We no longer need the MutationObserver once the target is blurred.
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          stateRef.current.observer.disconnect();
          target.dispatchEvent(new FocusEvent("blur"));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: ["disabled"]
      });
    }
  }, []);
}
function dist_module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let {
    isDisabled: isDisabled,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    onFocusChange: onFocusChange
  } = props;
  const onBlur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [onBlurProp, onFocusChange]);
  const onSyntheticFocus = (0, dist_module_$8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  const onFocus = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    if (e.target === e.currentTarget) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [onFocusChange, onFocusProp, onSyntheticFocus]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

let dist_module_$507fabe10e71c6fb$var$currentModality = null;
let dist_module_$507fabe10e71c6fb$var$changeHandlers = new Set();
let dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
let dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
// Only Tab or Esc keys will make focus visible on text input elements
const dist_module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of dist_module_$507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */
function dist_module_$507fabe10e71c6fb$var$isValidKey(e) {
  // Control and Shift keys trigger when navigating back to the tab with keyboard.
  return !(e.metaKey || !(0, utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if (dist_module_$507fabe10e71c6fb$var$isValidKey(e)) {
    dist_module_$507fabe10e71c6fb$var$currentModality = "keyboard";
    dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function dist_module_$507fabe10e71c6fb$var$handlePointerEvent(e) {
  dist_module_$507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function dist_module_$507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, utils_dist_module_$6a7db85432448f7f$export$60278871457622de)(e)) {
    dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    dist_module_$507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function dist_module_$507fabe10e71c6fb$var$handleFocusEvent(e) {
  // Firefox fires two extra focus events when the user first clicks into an iframe:
  // first on the window, then on the document. We ignore these events so they don't
  // cause keyboard focus rings to appear.
  if (e.target === window || e.target === document) return;
  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
  if (!dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus && !dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    dist_module_$507fabe10e71c6fb$var$currentModality = "virtual";
    dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function dist_module_$507fabe10e71c6fb$var$handleWindowBlur() {
  // When the window is blurred, reset state. This is necessary when tabbing out of the window,
  // for example, since a subsequent focus event won't be fired.
  dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */
function dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === "undefined" || dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners) return;
  // Programmatic focus() calls shouldn't affect the current input modality.
  // However, we need to detect other cases when a focus event occurs without
  // a preceding user event (e.g. screen reader focus). Overriding the focus
  // method on HTMLElement.prototype is a bit hacky, but works.
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function () {
    dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  document.addEventListener("keydown", dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("keyup", dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("click", dist_module_$507fabe10e71c6fb$var$handleClickEvent, true);
  // Register focus events on the window so they are sure to happen
  // before React's event listeners (registered on the document).
  window.addEventListener("focus", dist_module_$507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener("blur", dist_module_$507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointermove", dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointerup", dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener("mousedown", dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mousemove", dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mouseup", dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener("DOMContentLoaded", dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents);
}
function dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return dist_module_$507fabe10e71c6fb$var$currentModality !== "pointer";
}
function dist_module_$507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return dist_module_$507fabe10e71c6fb$var$currentModality;
}
function dist_module_$507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  dist_module_$507fabe10e71c6fb$var$currentModality = modality;
  dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
function dist_module_$507fabe10e71c6fb$export$98e20ec92f614cfe() {
  dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(dist_module_$507fabe10e71c6fb$var$currentModality);
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let handler = () => {
      setModality(dist_module_$507fabe10e71c6fb$var$currentModality);
    };
    dist_module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      dist_module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */
function dist_module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !dist_module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function dist_module_$507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
  let {
    isTextInput: isTextInput,
    autoFocus: autoFocus
  } = props;
  let [isFocusVisibleState, setFocusVisible] = (0, $bx7SL$useState)(autoFocus || dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
  dist_module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {
    setFocusVisible(isFocusVisible);
  }, [isTextInput], {
    isTextInput: isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}
function dist_module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0, $bx7SL$useEffect)(() => {
    let handler = (modality, e) => {
      if (!dist_module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;
      fn(dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    dist_module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      dist_module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

function dist_module_$9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let {
    isDisabled: isDisabled,
    onBlurWithin: onBlurWithin,
    onFocusWithin: onFocusWithin,
    onFocusWithinChange: onFocusWithinChange
  } = props;
  let state = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocusWithin: false
  });
  let onBlur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
    // when moving focus inside the element. Only trigger if the currentTarget doesn't
    // include the relatedTarget (where focus is moving).
    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.current.isFocusWithin = false;
      if (onBlurWithin) onBlurWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(false);
    }
  }, [onBlurWithin, onFocusWithinChange, state]);
  let onSyntheticFocus = (0, dist_module_$8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  let onFocus = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    if (!state.current.isFocusWithin) {
      if (onFocusWithin) onFocusWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(true);
      state.current.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);
  if (isDisabled) return {
    focusWithinProps: {
      onFocus: null,
      onBlur: null
    }
  };
  return {
    focusWithinProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

// iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.
let dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let dist_module_$6179b936705e76d3$var$hoverCount = 0;
function dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
  // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
  // the distant future because a user previously touched the element.
  setTimeout(() => {
    dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}
function dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === "touch") dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function dist_module_$6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === "undefined") return;
  if (typeof PointerEvent !== "undefined") document.addEventListener("pointerup", dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener("touchend", dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  dist_module_$6179b936705e76d3$var$hoverCount++;
  return () => {
    dist_module_$6179b936705e76d3$var$hoverCount--;
    if (dist_module_$6179b936705e76d3$var$hoverCount > 0) return;
    if (typeof PointerEvent !== "undefined") document.removeEventListener("pointerup", dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener("touchend", dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}
function dist_module_$6179b936705e76d3$export$ae780daf29e6d456(props) {
  let {
    onHoverStart: onHoverStart,
    onHoverChange: onHoverChange,
    onHoverEnd: onHoverEnd,
    isDisabled: isDisabled
  } = props;
  let [isHovered, setHovered] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let state = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: "",
    target: null
  }).current;
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(dist_module_$6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let {
    hoverProps: hoverProps,
    triggerHoverEnd: triggerHoverEnd
  } = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target)) return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart) onHoverStart({
        type: "hoverstart",
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(true);
      setHovered(true);
    };
    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = "";
      state.target = null;
      if (pointerType === "touch" || !state.isHovered) return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd) onHoverEnd({
        type: "hoverend",
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(false);
      setHovered(false);
    };
    let hoverProps = {};
    if (typeof PointerEvent !== "undefined") {
      hoverProps.onPointerEnter = e => {
        if (dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse") return;
        triggerHoverStart(e, e.pointerType);
      };
      hoverProps.onPointerLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };
      hoverProps.onMouseEnter = e => {
        if (!state.ignoreEmulatedMouseEvents && !dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, "mouse");
        state.ignoreEmulatedMouseEvents = false;
      };
      hoverProps.onMouseLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, "mouse");
      };
    }
    return {
      hoverProps: hoverProps,
      triggerHoverEnd: triggerHoverEnd
    };
  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // Call the triggerHoverEnd as soon as isDisabled changes to true
    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
    if (isDisabled) triggerHoverEnd({
      currentTarget: state.target
    }, state.pointerType);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isDisabled]);
  return {
    hoverProps: hoverProps,
    isHovered: isHovered
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

function dist_module_$e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let {
    ref: ref,
    onInteractOutside: onInteractOutside,
    isDisabled: isDisabled,
    onInteractOutsideStart: onInteractOutsideStart
  } = props;
  let stateRef = (0, $bx7SL$useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside: onInteractOutside,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  (0, $bx7SL$useEffect)(() => {
    if (isDisabled) return;
    let onPointerDown = e => {
      if (dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);
        state.isPointerDown = true;
      }
    };
    // Use pointer events if available. Otherwise, fall back to mouse and touch events.
    if (typeof PointerEvent !== "undefined") {
      let onPointerUp = e => {
        if (state.isPointerDown && state.onInteractOutside && dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      // changing these to capture phase fixed combobox
      document.addEventListener("pointerdown", onPointerDown, true);
      document.addEventListener("pointerup", onPointerUp, true);
      return () => {
        document.removeEventListener("pointerdown", onPointerDown, true);
        document.removeEventListener("pointerup", onPointerUp, true);
      };
    } else {
      let onMouseUp = e => {
        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      let onTouchEnd = e => {
        state.ignoreEmulatedMouseEvents = true;
        if (state.onInteractOutside && state.isPointerDown && dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      document.addEventListener("mousedown", onPointerDown, true);
      document.addEventListener("mouseup", onMouseUp, true);
      document.addEventListener("touchstart", onPointerDown, true);
      document.addEventListener("touchend", onTouchEnd, true);
      return () => {
        document.removeEventListener("mousedown", onPointerDown, true);
        document.removeEventListener("mouseup", onMouseUp, true);
        document.removeEventListener("touchstart", onPointerDown, true);
        document.removeEventListener("touchend", onTouchEnd, true);
      };
    }
  }, [ref, state, isDisabled]);
}
function dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0) return false;
  // if the event target is no longer in the document
  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
  }
  return ref.current && !ref.current.contains(event.target);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
function dist_module_$93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return;
  let shouldStopPropagation = true;
  return e => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        shouldStopPropagation = false;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}
function dist_module_$46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, dist_module_$93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, dist_module_$93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function dist_module_$e8a7022cf87cba2a$export$36da96379f79f245(props) {
  let {
    onMoveStart: onMoveStart,
    onMove: onMove,
    onMoveEnd: onMoveEnd
  } = props;
  let state = (0, $bx7SL$useRef)({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = (0, $bx7SL$useGlobalListeners)();
  let moveProps = (0, $bx7SL$useMemo)(() => {
    let moveProps = {};
    let start = () => {
      (0, dist_module_$14c0b72509d70225$export$16a4697467175487)();
      state.current.didMove = false;
    };
    let move = (originalEvent, pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0) return;
      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
          type: "movestart",
          pointerType: pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }
      onMove({
        type: "move",
        pointerType: pointerType,
        deltaX: deltaX,
        deltaY: deltaY,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let end = (originalEvent, pointerType) => {
      (0, dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)();
      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
        type: "moveend",
        pointerType: pointerType,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    if (typeof PointerEvent === "undefined") {
      let onMouseMove = e => {
        if (e.button === 0) {
          move(e, "mouse", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onMouseUp = e => {
        if (e.button === 0) {
          end(e, "mouse");
          removeGlobalListener(window, "mousemove", onMouseMove, false);
          removeGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      moveProps.onMouseDown = e => {
        if (e.button === 0) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          addGlobalListener(window, "mousemove", onMouseMove, false);
          addGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      let onTouchMove = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          let {
            pageX: pageX,
            pageY: pageY
          } = e.changedTouches[touch];
          move(e, "touch", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: pageX,
            pageY: pageY
          };
        }
      };
      let onTouchEnd = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          end(e, "touch");
          state.current.id = null;
          removeGlobalListener(window, "touchmove", onTouchMove);
          removeGlobalListener(window, "touchend", onTouchEnd);
          removeGlobalListener(window, "touchcancel", onTouchEnd);
        }
      };
      moveProps.onTouchStart = e => {
        if (e.changedTouches.length === 0 || state.current.id != null) return;
        let {
          pageX: pageX,
          pageY: pageY,
          identifier: identifier
        } = e.changedTouches[0];
        start();
        e.stopPropagation();
        e.preventDefault();
        state.current.lastPosition = {
          pageX: pageX,
          pageY: pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, "touchmove", onTouchMove, false);
        addGlobalListener(window, "touchend", onTouchEnd, false);
        addGlobalListener(window, "touchcancel", onTouchEnd, false);
      };
    } else {
      let onPointerMove = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || "mouse";
          // Problems with PointerEvent#movementX/movementY:
          // 1. it is always 0 on macOS Safari.
          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || "mouse";
          end(e, pointerType);
          state.current.id = null;
          removeGlobalListener(window, "pointermove", onPointerMove, false);
          removeGlobalListener(window, "pointerup", onPointerUp, false);
          removeGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
      moveProps.onPointerDown = e => {
        if (e.button === 0 && state.current.id == null) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          state.current.id = e.pointerId;
          addGlobalListener(window, "pointermove", onPointerMove, false);
          addGlobalListener(window, "pointerup", onPointerUp, false);
          addGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
    }
    let triggerKeyboardMove = (e, deltaX, deltaY) => {
      start();
      move(e, "keyboard", deltaX, deltaY);
      end(e, "keyboard");
    };
    moveProps.onKeyDown = e => {
      switch (e.key) {
        case "Left":
        case "ArrowLeft":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, -1, 0);
          break;
        case "Right":
        case "ArrowRight":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 1, 0);
          break;
        case "Up":
        case "ArrowUp":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, -1);
          break;
        case "Down":
        case "ArrowDown":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, 1);
          break;
      }
    };
    return moveProps;
  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);
  return {
    moveProps: moveProps
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function dist_module_$7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
  let {
    onScroll: onScroll,
    isDisabled: isDisabled
  } = props;
  let onScrollHandler = (0, $bx7SL$useCallback)(e => {
    // If the ctrlKey is pressed, this is a zoom event, do nothing.
    if (e.ctrlKey) return;
    // stop scrolling the page
    e.preventDefault();
    e.stopPropagation();
    if (onScroll) onScroll({
      deltaX: e.deltaX,
      deltaY: e.deltaY
    });
  }, [onScroll]);
  (0, $bx7SL$useEvent)(ref, "wheel", isDisabled ? null : onScrollHandler);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const dist_module_$8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
function dist_module_$8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let {
    isDisabled: isDisabled,
    onLongPressStart: onLongPressStart,
    onLongPressEnd: onLongPressEnd,
    onLongPress: onLongPress,
    threshold = dist_module_$8a26561d2877236e$var$DEFAULT_THRESHOLD,
    accessibilityDescription: accessibilityDescription
  } = props;
  const timeRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = (0, utils_dist_module_$03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  let {
    pressProps: pressProps
  } = (0, dist_module_$f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled,
    onPressStart(e) {
      if (e.pointerType === "mouse" || e.pointerType === "touch") {
        if (onLongPressStart) onLongPressStart({
          ...e,
          type: "longpressstart"
        });
        timeRef.current = setTimeout(() => {
          // Prevent other usePress handlers from also handling this event.
          e.target.dispatchEvent(new PointerEvent("pointercancel", {
            bubbles: true
          }));
          if (onLongPress) onLongPress({
            ...e,
            type: "longpress"
          });
          timeRef.current = null;
        }, threshold);
        // Prevent context menu, which may be opened on long press on touch devices
        if (e.pointerType === "touch") {
          let onContextMenu = e => {
            e.preventDefault();
          };
          addGlobalListener(e.target, "contextmenu", onContextMenu, {
            once: true
          });
          addGlobalListener(window, "pointerup", () => {
            // If no contextmenu event is fired quickly after pointerup, remove the handler
            // so future context menu events outside a long press are not prevented.
            setTimeout(() => {
              removeGlobalListener(e.target, "contextmenu", onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },
    onPressEnd(e) {
      if (timeRef.current) clearTimeout(timeRef.current);
      if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch")) onLongPressEnd({
        ...e,
        type: "longpressend"
      });
    }
  });
  let descriptionProps = (0, utils_dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1)(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, descriptionProps)
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/focus/dist/module.js






/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$6a99195332edec8b$export$80f3e147d781571c(element) {
  // If the user is interacting with a virtual cursor, e.g. screen reader, then
  // wait until after any animated transitions that are currently occurring on
  // the page before shifting focus. This avoids issues with VoiceOver on iOS
  // causing the page to scroll when moving focus if the element is transitioning
  // from off the screen.
  if ((0, dist_module_$507fabe10e71c6fb$export$630ff653c5ada6a9)() === "virtual") {
    let lastFocusedElement = document.activeElement;
    (0, utils_dist_module_$bbed8b41f857bcc0$export$24490316f764c430)(() => {
      // If focus did not move and the element is still in the document, focus it.
      if (document.activeElement === lastFocusedElement && document.contains(element)) (0, utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3)(element);
    });
  } else (0, utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3)(element);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function module_$645f2e67b85a24c9$var$isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;
  let {
    display: display,
    visibility: visibility
  } = element.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    const {
      getComputedStyle: getComputedStyle
    } = element.ownerDocument.defaultView;
    let {
      display: computedDisplay,
      visibility: computedVisibility
    } = getComputedStyle(element);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function module_$645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
}
function module_$645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
  return element.nodeName !== "#comment" && module_$645f2e67b85a24c9$var$isStyleVisible(element) && module_$645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || module_$645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
}
const module_$9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $6nfFC$react).createContext(null)));
let module_$9bf71ea28793e738$var$activeScope = null;
function module_$9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let {
    children: children,
    contain: contain,
    restoreFocus: restoreFocus,
    autoFocus: autoFocus
  } = props;
  let startRef = (0, $6nfFC$useRef)();
  let endRef = (0, $6nfFC$useRef)();
  let scopeRef = (0, $6nfFC$useRef)([]);
  let ctx = (0, $6nfFC$useContext)(module_$9bf71ea28793e738$var$FocusContext);
  var _ctx_scopeRef;
  // The parent scope is based on the JSX tree, using context.
  // However, if a new scope mounts outside the active scope (e.g. DialogContainer launched from a menu),
  // we want the parent scope to be the active scope instead.
  let ctxParent = (_ctx_scopeRef = ctx === null || ctx === void 0 ? void 0 : ctx.scopeRef) !== null && _ctx_scopeRef !== void 0 ? _ctx_scopeRef : null;
  let parentScope = (0, $6nfFC$useMemo)(() => module_$9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(module_$9bf71ea28793e738$var$activeScope) && !module_$9bf71ea28793e738$var$isAncestorScope(module_$9bf71ea28793e738$var$activeScope, ctxParent) ? module_$9bf71ea28793e738$var$activeScope : ctxParent, [ctxParent]);
  (0, $6nfFC$useLayoutEffect)(() => {
    // Find all rendered nodes between the sentinels and add them to the scope.
    let node = startRef.current.nextSibling;
    let nodes = [];
    while (node && node !== endRef.current) {
      nodes.push(node);
      node = node.nextSibling;
    }
    scopeRef.current = nodes;
  }, [children, parentScope]);
  // add to the focus scope tree in render order because useEffects/useLayoutEffects run children first whereas render runs parent first
  // which matters when constructing a tree
  if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope) && !$9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$export$d06fae2ee68b101e.addTreeNode(scopeRef, parentScope);
  let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
  node.contain = contain;
  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
  module_$9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  module_$9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  module_$9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible
  (0, $6nfFC$useLayoutEffect)(() => {
    if (scopeRef) return () => {
      // Scope may have been re-parented.
      let parentScope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef;
      // Restore the active scope on unmount if this scope or a descendant scope is active.
      // Parent effect cleanups run before children, so we need to check if the
      // parent scope actually still exists before restoring the active scope to it.
      if ((scopeRef === module_$9bf71ea28793e738$var$activeScope || module_$9bf71ea28793e738$var$isAncestorScope(scopeRef, module_$9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) module_$9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
    };
  }, [scopeRef, parentScope]);
  let focusManager = module_$9bf71ea28793e738$var$createFocusManagerForScope(scopeRef);
  return /*#__PURE__*/(0, $6nfFC$react).createElement(module_$9bf71ea28793e738$var$FocusContext.Provider, {
    value: {
      scopeRef: scopeRef,
      focusManager: focusManager
    }
  }, /*#__PURE__*/(0, $6nfFC$react).createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /*#__PURE__*/(0, $6nfFC$react).createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function module_$9bf71ea28793e738$export$10c5169755ce7bd7() {
  var _useContext;
  return (_useContext = (0, $6nfFC$useContext)(module_$9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;
}
function module_$9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap,
        accept: accept
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[0].previousElementSibling;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(module_$9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable,
        accept: accept
      }, scope);
      walker.currentNode = module_$9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode) module_$9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap,
        accept: accept
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(module_$9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable,
        accept: accept
      }, scope);
      walker.currentNode = module_$9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode) module_$9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let {
        tabbable: tabbable,
        accept: accept
      } = opts;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(module_$9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable,
        accept: accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode) module_$9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let {
        tabbable: tabbable,
        accept: accept
      } = opts;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(module_$9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable,
        accept: accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode) module_$9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
const module_$9bf71ea28793e738$var$focusableElements = ["input:not([disabled]):not([type=hidden])", "select:not([disabled])", "textarea:not([disabled])", "button:not([disabled])", "a[href]", "area[href]", "summary", "iframe", "object", "embed", "audio[controls]", "video[controls]", "[contenteditable]"];
const module_$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = module_$9bf71ea28793e738$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
module_$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const module_$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = module_$9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function module_$9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(module_$9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.contain) return false;
    scope = scope.parent;
  }
  return true;
}
function module_$9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0, $6nfFC$useRef)();
  let raf = (0, $6nfFC$useRef)(null);
  (0, $6nfFC$useLayoutEffect)(() => {
    let scope = scopeRef.current;
    if (!contain) {
      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = null;
      }
      return;
    }
    // Handle the Tab key to contain focus within the scope
    let onKeyDown = e => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;
      let focusedElement = document.activeElement;
      let scope = scopeRef.current;
      if (!module_$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(module_$9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: true
      }, scope);
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement) module_$9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = e => {
      // If focusing an element in a child scope of the currently active scope, the child becomes active.
      // Moving out of the active scope to an ancestor is not allowed.
      if ((!module_$9bf71ea28793e738$var$activeScope || module_$9bf71ea28793e738$var$isAncestorScope(module_$9bf71ea28793e738$var$activeScope, scopeRef)) && module_$9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {
        module_$9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = e.target;
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !module_$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
        // restore focus to the previously focused node or the first tabbable element in the active scope.
        if (focusedNode.current) focusedNode.current.focus();else if (module_$9bf71ea28793e738$var$activeScope) module_$9bf71ea28793e738$var$focusFirstInScope(module_$9bf71ea28793e738$var$activeScope.current);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;
    };
    let onBlur = e => {
      // Firefox doesn't shift focus back to the Dialog properly without this
      raf.current = requestAnimationFrame(() => {
        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
        if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !module_$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {
          module_$9bf71ea28793e738$var$activeScope = scopeRef;
          if (document.body.contains(e.target)) {
            focusedNode.current = e.target;
            focusedNode.current.focus();
          } else if (module_$9bf71ea28793e738$var$activeScope) module_$9bf71ea28793e738$var$focusFirstInScope(module_$9bf71ea28793e738$var$activeScope.current);
        }
      });
    };
    document.addEventListener("keydown", onKeyDown, false);
    document.addEventListener("focusin", onFocus, false);
    scope.forEach(element => element.addEventListener("focusin", onFocus, false));
    scope.forEach(element => element.addEventListener("focusout", onBlur, false));
    return () => {
      document.removeEventListener("keydown", onKeyDown, false);
      document.removeEventListener("focusin", onFocus, false);
      scope.forEach(element => element.removeEventListener("focusin", onFocus, false));
      scope.forEach(element => element.removeEventListener("focusout", onBlur, false));
    };
  }, [scopeRef, contain]);
  // eslint-disable-next-line arrow-body-style
  (0, $6nfFC$useEffect)(() => {
    return () => {
      if (raf.current) cancelAnimationFrame(raf.current);
    };
  }, [raf]);
}
function module_$9bf71ea28793e738$var$isElementInAnyScope(element) {
  return module_$9bf71ea28793e738$var$isElementInChildScope(element);
}
function module_$9bf71ea28793e738$var$isElementInScope(element, scope) {
  return scope.some(node => node.contains(element));
}
function module_$9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {
  // node.contains in isElementInScope covers child scopes that are also DOM children,
  // but does not cover child scopes in portals.
  for (let {
    scopeRef: s
  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {
    if (module_$9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;
  }
  return false;
}
function $9bf71ea28793e738$export$1258395f99bf9cbf(element) {
  return module_$9bf71ea28793e738$var$isElementInChildScope(element, module_$9bf71ea28793e738$var$activeScope);
}
function module_$9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  var _focusScopeTree_getTreeNode;
  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
  while (parent) {
    if (parent.scopeRef === ancestor) return true;
    parent = parent.parent;
  }
  return false;
}
function module_$9bf71ea28793e738$var$focusElement(element, scroll = false) {
  if (element != null && !scroll) try {
    (0, module_$6a99195332edec8b$export$80f3e147d781571c)(element);
  } catch (err) {
    // ignore
  } else if (element != null) try {
    element.focus();
  } catch (err1) {
    // ignore
  }
}
function module_$9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
  let sentinel = scope[0].previousElementSibling;
  let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(module_$9bf71ea28793e738$var$getScopeRoot(scope), {
    tabbable: tabbable
  }, scope);
  walker.currentNode = sentinel;
  let nextNode = walker.nextNode();
  // If the scope does not contain a tabbable element, use the first focusable element.
  if (tabbable && !nextNode) {
    walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(module_$9bf71ea28793e738$var$getScopeRoot(scope), {
      tabbable: false
    }, scope);
    walker.currentNode = sentinel;
    nextNode = walker.nextNode();
  }
  module_$9bf71ea28793e738$var$focusElement(nextNode);
}
function module_$9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = (0, $6nfFC$react).useRef(autoFocus);
  (0, $6nfFC$useEffect)(() => {
    if (autoFocusRef.current) {
      module_$9bf71ea28793e738$var$activeScope = scopeRef;
      if (!module_$9bf71ea28793e738$var$isElementInScope(document.activeElement, module_$9bf71ea28793e738$var$activeScope.current)) module_$9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, [scopeRef]);
}
function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
  // tracks the active scope, in case restore and contain are both false.
  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.
  (0, $6nfFC$useLayoutEffect)(() => {
    if (restore || contain) return;
    let scope = scopeRef.current;
    let onFocus = e => {
      let target = e.target;
      if (module_$9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) module_$9bf71ea28793e738$var$activeScope = scopeRef;else if (!module_$9bf71ea28793e738$var$isElementInAnyScope(target)) module_$9bf71ea28793e738$var$activeScope = null;
    };
    document.addEventListener("focusin", onFocus, false);
    scope.forEach(element => element.addEventListener("focusin", onFocus, false));
    return () => {
      document.removeEventListener("focusin", onFocus, false);
      scope.forEach(element => element.removeEventListener("focusin", onFocus, false));
    };
  }, [scopeRef, restore, contain]);
}
function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(module_$9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.nodeToRestore) return false;
    scope = scope.parent;
  }
  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
}
function module_$9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.
  const nodeToRestoreRef = (0, $6nfFC$useRef)(typeof document !== "undefined" ? document.activeElement : null);
  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus
  // restoring-non-containing scopes should only care if they become active so they can perform the restore
  (0, $6nfFC$useLayoutEffect)(() => {
    let scope = scopeRef.current;
    if (!restoreFocus || contain) return;
    let onFocus = () => {
      // If focusing an element in a child scope of the currently active scope, the child becomes active.
      // Moving out of the active scope to an ancestor is not allowed.
      if (!module_$9bf71ea28793e738$var$activeScope || module_$9bf71ea28793e738$var$isAncestorScope(module_$9bf71ea28793e738$var$activeScope, scopeRef)) module_$9bf71ea28793e738$var$activeScope = scopeRef;
    };
    document.addEventListener("focusin", onFocus, false);
    scope.forEach(element => element.addEventListener("focusin", onFocus, false));
    return () => {
      document.removeEventListener("focusin", onFocus, false);
      scope.forEach(element => element.removeEventListener("focusin", onFocus, false));
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [scopeRef, contain]);
  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.
  (0, $6nfFC$useLayoutEffect)(() => {
    if (!restoreFocus) return;
    $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;
    // Handle the Tab key so that tabbing out of the scope goes to the next element
    // after the node that had focus when the scope mounted. This is important when
    // using portals for overlays, so that focus goes to the expected element when
    // tabbing out of the overlay.
    let onKeyDown = e => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey) return;
      let focusedElement = document.activeElement;
      if (!module_$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;
      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
      // Create a DOM tree walker that matches all tabbable elements
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {
        tabbable: true
      });
      // Find the next tabbable element after the currently focused element
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {
        nodeToRestore = null;
        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;
      }
      // If there is no next element, or it is outside the current scope, move focus to the
      // next element after the node to restore to instead.
      if ((!nextElement || !module_$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        // Skip over elements within the scope, in case the scope immediately follows the node to restore.
        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while (module_$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement) module_$9bf71ea28793e738$var$focusElement(nextElement, true);else
          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)
          // then move focus to the body.
          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)
          if (!module_$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else module_$9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain) document.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain) document.removeEventListener("keydown", onKeyDown, true);
      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
      // if we already lost focus to the body and this was the active scope, then we should attempt to restore
      if (restoreFocus && nodeToRestore && (
      // eslint-disable-next-line react-hooks/exhaustive-deps
      module_$9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it
        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
        requestAnimationFrame(() => {
          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere
          if (document.activeElement === document.body) {
            // look up the tree starting with our scope to find a nodeToRestore still in the DOM
            let treeNode = clonedTree.getTreeNode(scopeRef);
            while (treeNode) {
              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {
                module_$9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);
                return;
              }
              treeNode = treeNode.parent;
            }
            // If no nodeToRestore was found, focus the first element in the nearest
            // ancestor scope that is still in the tree.
            treeNode = clonedTree.getTreeNode(scopeRef);
            while (treeNode) {
              if (treeNode.scopeRef && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {
                module_$9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);
                return;
              }
              treeNode = treeNode.parent;
            }
          }
        });
      }
    };
  }, [scopeRef, restoreFocus, contain]);
}
function module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? module_$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : module_$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var _opts_from;
      // Skip nodes inside the starting node.
      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;
      if (node.matches(selector) && (0, module_$645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || module_$9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
  return walker;
}
function module_$9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {
  return {
    focusNext(opts = {}) {
      let root = ref.current;
      if (!root) return;
      let {
        from: from,
        tabbable = defaultOptions.tabbable,
        wrap = defaultOptions.wrap,
        accept = defaultOptions.accept
      } = opts;
      let node = from || document.activeElement;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable,
        accept: accept
      });
      if (root.contains(node)) walker.currentNode = node;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = root;
        nextNode = walker.nextNode();
      }
      if (nextNode) module_$9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return;
      let {
        from: from,
        tabbable = defaultOptions.tabbable,
        wrap = defaultOptions.wrap,
        accept = defaultOptions.accept
      } = opts;
      let node = from || document.activeElement;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable,
        accept: accept
      });
      if (root.contains(node)) walker.currentNode = node;else {
        let next = module_$9bf71ea28793e738$var$last(walker);
        if (next) module_$9bf71ea28793e738$var$focusElement(next, true);
        return next;
      }
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = root;
        previousNode = module_$9bf71ea28793e738$var$last(walker);
      }
      if (previousNode) module_$9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return;
      let {
        tabbable = defaultOptions.tabbable,
        accept = defaultOptions.accept
      } = opts;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable,
        accept: accept
      });
      let nextNode = walker.nextNode();
      if (nextNode) module_$9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return;
      let {
        tabbable = defaultOptions.tabbable,
        accept = defaultOptions.accept
      } = opts;
      let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable,
        accept: accept
      });
      let next = module_$9bf71ea28793e738$var$last(walker);
      if (next) module_$9bf71ea28793e738$var$focusElement(next, true);
      return next;
    }
  };
}
function module_$9bf71ea28793e738$var$last(walker) {
  let next;
  let last;
  do {
    last = walker.lastChild();
    if (last) next = last;
  } while (last);
  return next;
}
class $9bf71ea28793e738$var$Tree {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
    let node = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: scopeRef
    });
    parentNode.addChild(node);
    node.parent = parentNode;
    this.fastMap.set(scopeRef, node);
    if (nodeToRestore) node.nodeToRestore = nodeToRestore;
  }
  removeTreeNode(scopeRef) {
    // never remove the root
    if (scopeRef === null) return;
    let node = this.fastMap.get(scopeRef);
    let parentNode = node.parent;
    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing
    // if we are, then replace the siblings restore with the restore from the scope we're removing
    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && module_$9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;
    let children = node.children;
    parentNode.removeChild(node);
    if (children.length > 0) children.forEach(child => parentNode.addChild(child));
    this.fastMap.delete(node.scopeRef);
  }
  // Pre Order Depth First
  *traverse(node = this.root) {
    if (node.scopeRef != null) yield node;
    if (node.children.length > 0) for (let child of node.children) yield* this.traverse(child);
  }
  clone() {
    let newTree = new $9bf71ea28793e738$var$Tree();
    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);
    return newTree;
  }
  constructor() {
    (0, _defineProperty)(this, "fastMap", new Map());
    this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    });
    this.fastMap.set(null, this.root);
  }
}
class $9bf71ea28793e738$var$TreeNode {
  addChild(node) {
    this.children.push(node);
    node.parent = this;
  }
  removeChild(node) {
    this.children.splice(this.children.indexOf(node), 1);
    node.parent = undefined;
  }
  constructor(props) {
    (0, _defineProperty)(this, "children", []);
    (0, _defineProperty)(this, "contain", false);
    this.scopeRef = props.scopeRef;
  }
}
let $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let {
    autoFocus = false,
    isTextInput: isTextInput,
    within: within
  } = props;
  let state = (0, $6nfFC$useRef)({
    isFocused: false,
    isFocusVisible: autoFocus || (0, $6nfFC$isFocusVisible)()
  });
  let [isFocused, setFocused] = (0, $6nfFC$useState)(false);
  let [isFocusVisibleState, setFocusVisible] = (0, $6nfFC$useState)(() => state.current.isFocused && state.current.isFocusVisible);
  let updateState = (0, $6nfFC$useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
  let onFocusChange = (0, $6nfFC$useCallback)(isFocused => {
    state.current.isFocused = isFocused;
    setFocused(isFocused);
    updateState();
  }, [updateState]);
  (0, $6nfFC$useFocusVisibleListener)(isFocusVisible => {
    state.current.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput: isTextInput
  });
  let {
    focusProps: focusProps
  } = (0, $6nfFC$useFocus)({
    isDisabled: within,
    onFocusChange: onFocusChange
  });
  let {
    focusWithinProps: focusWithinProps
  } = (0, $6nfFC$useFocusWithin)({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused: isFocused,
    isFocusVisible: state.current.isFocused && isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}
function module_$907718708eab68af$export$1a38b4ad7f578e1d(props) {
  let {
    children: children,
    focusClass: focusClass,
    focusRingClass: focusRingClass
  } = props;
  let {
    isFocused: isFocused,
    isFocusVisible: isFocusVisible,
    focusProps: focusProps
  } = (0, module_$f7dceffc5ad7768b$export$4e328f61c538687f)(props);
  let child = (0, $6nfFC$react).Children.only(children);
  return /*#__PURE__*/(0, $6nfFC$react).cloneElement(child, (0, $6nfFC$mergeProps)(child.props, {
    ...focusProps,
    className: (0, $6nfFC$clsx)({
      [focusClass || ""]: isFocused,
      [focusRingClass || ""]: isFocusVisible
    })
  }));
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let module_$e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(null);
function module_$e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
  let context = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(module_$e6afbd83fe6ebbd2$var$FocusableContext) || {};
  (0, utils_dist_module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, ref);
  // eslint-disable-next-line
  let {
    ref: _,
    ...otherProps
  } = context;
  return otherProps;
}
/**
 * Provides DOM props to the nearest focusable child.
 */
function module_$e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {
  let {
    children: children,
    ...otherProps
  } = props;
  let context = {
    ...otherProps,
    ref: ref
  };
  return /*#__PURE__*/(0, $6nfFC$react).createElement(module_$e6afbd83fe6ebbd2$var$FocusableContext.Provider, {
    value: context
  }, children);
}
let module_$e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $6nfFC$react).forwardRef(module_$e6afbd83fe6ebbd2$var$FocusableProvider)));
function module_$e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
  let {
    focusProps: focusProps
  } = (0, dist_module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6)(props);
  let {
    keyboardProps: keyboardProps
  } = (0, dist_module_$46d819fcbaf35654$export$8f71654801c2f7cd)(props);
  let interactions = (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(focusProps, keyboardProps);
  let domProps = module_$e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(props.autoFocus);
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (autoFocusRef.current && domRef.current) (0, module_$6a99195332edec8b$export$80f3e147d781571c)(domRef.current);
    autoFocusRef.current = false;
  }, [domRef]);
  return {
    focusableProps: (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)({
      ...interactions,
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined
    }, interactionProps)
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/button/dist/module.js



function $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {
  let {
    elementType = 'button',
    isDisabled: isDisabled,
    onPress: onPress,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressChange: onPressChange,
    preventFocusOnPress:
    // @ts-ignore - undocumented
    preventFocusOnPress,
    allowFocusWhenDisabled:
    // @ts-ignore - undocumented
    allowFocusWhenDisabled,
    // @ts-ignore
    onClick: deprecatedOnClick,
    href: href,
    target: target,
    rel: rel,
    type = 'button'
  } = props;
  let additionalProps;
  if (elementType === 'button') additionalProps = {
    type: type,
    disabled: isDisabled
  };else additionalProps = {
    role: 'button',
    tabIndex: isDisabled ? undefined : 0,
    href: elementType === 'a' && isDisabled ? undefined : href,
    target: elementType === 'a' ? target : undefined,
    type: elementType === 'input' ? type : undefined,
    disabled: elementType === 'input' ? isDisabled : undefined,
    'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,
    rel: elementType === 'a' ? rel : undefined
  };
  let {
    pressProps: pressProps,
    isPressed: isPressed
  } = dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressChange: onPressChange,
    onPress: onPress,
    isDisabled: isDisabled,
    preventFocusOnPress: preventFocusOnPress,
    ref: ref
  });
  let {
    focusableProps: focusableProps
  } = module_$e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, ref);
  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
  let buttonProps = utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(focusableProps, pressProps, utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  }));
  return {
    isPressed: isPressed,
    buttonProps: utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(additionalProps, buttonProps, {
      'aria-haspopup': props['aria-haspopup'],
      'aria-expanded': props['aria-expanded'],
      'aria-controls': props['aria-controls'],
      'aria-pressed': props['aria-pressed'],
      onClick: e => {
        if (deprecatedOnClick) {
          deprecatedOnClick(e);
          console.warn('onClick is deprecated, please use onPress');
        }
      }
    })
  };
}
function $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {
  const {
    isSelected: isSelected
  } = state;
  const {
    isPressed: isPressed,
    buttonProps: buttonProps
  } = $701a24aa0da5b062$export$ea18c227d4417cc3({
    ...props,
    onPress: utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e(state.toggle, props.onPress)
  }, ref);
  return {
    isPressed: isPressed,
    buttonProps: utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(buttonProps, {
      'aria-pressed': isSelected
    })
  };
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/module.js





/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const _react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).useLayoutEffect : () => {};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function _react_aria_utils_dist_module_$1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0, $12uGp$useState)(defaultValue);
  let valueRef = (0, $12uGp$useRef)(value);
  let effect = (0, $12uGp$useRef)(null);
  valueRef.current = value;
  // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.
  let nextRef = (0, $12uGp$useRef)(null);
  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next();
    // If the generator is done, reset the effect.
    if (newValue.done) {
      effect.current = null;
      return;
    }
    // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.
    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };
  (0, _react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0, $12uGp$useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}
let _react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap = new Map();
function _react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0, $12uGp$useState)(defaultId);
  let nextId = (0, $12uGp$useRef)(null);
  let res = (0, $12uGp$useSSRSafeId)(value);
  let updateValue = (0, $12uGp$useCallback)(val => {
    nextId.current = val;
  }, []);
  _react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  (0, _react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let r = res;
    return () => {
      _react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  // This cannot cause an infinite loop because the ref is updated first.
  // eslint-disable-next-line
  (0, $12uGp$useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function _react_aria_utils_dist_module_$bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = _react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = _react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function _react_aria_utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = _react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = (0, _react_aria_utils_dist_module_$1dbecbe27a04f9af$export$14d238f342723f25)(id);
  let updateId = (0, $12uGp$useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : undefined;
    });
  }, [id, setResolvedId]);
  (0, _react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Calls all functions in the order they were chained with the same arguments.
    */
function _react_aria_utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function _react_aria_utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      // Chain events
      if (typeof a === "function" && typeof b === "function" &&
      // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */65 && key.charCodeAt(2) <= /* 'Z' */90) result[key] = (0, _react_aria_utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = (0, clsx_m)(a, b);else if (key === "id" && a && b) result.id = (0, _react_aria_utils_dist_module_$bdb11010cef70236$export$cd8c9cb68f842629)(a, b);else result[key] = b !== undefined ? b : a;
    }
  }
  return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$5dc95899b306f630$export$c9058316764c140e(...refs) {
  return value => {
    for (let ref of refs) {
      if (typeof ref === "function") ref(value);else if (ref != null) ref.current = value;
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const _react_aria_utils_dist_module_$65484d02dcb7eb3e$var$DOMPropNames = new Set(["id"]);
const _react_aria_utils_dist_module_$65484d02dcb7eb3e$var$labelablePropNames = new Set(["aria-label", "aria-labelledby", "aria-describedby", "aria-details"]);
const _react_aria_utils_dist_module_$65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function _react_aria_utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};
  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && (_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && _react_aria_utils_dist_module_$65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || _react_aria_utils_dist_module_$65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
  return filteredProps;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if (_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = _react_aria_utils_dist_module_$7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    _react_aria_utils_dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
let _react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = null;
function _react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScroll() {
  if (_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    _react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          _react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
      // Ignore
    }
  }
  return _react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached;
}
function _react_aria_utils_dist_module_$7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function _react_aria_utils_dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === "horizontal" ? rect.right : rect.bottom;
  return orientation === "horizontal" ? rect.left : rect.top;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement = new Map();
// A list of callbacks to call once there are no transitioning elements.
let _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks = new Set();
function _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = new Set();
      _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
      e.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    // If no transitioning elements, call all of the queued callbacks.
    if (_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks) cb();
      _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener("DOMContentLoaded", _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents);
}
function _react_aria_utils_dist_module_$bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if (_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else _react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.
const _react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements = (/* unused pure expression or super */ null && ([]));
function _react_aria_utils_dist_module_$9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;
  let getPosition = e => orientation === "horizontal" ? e.clientX : e.clientY;
  let getNextOffset = e => {
    let containerOffset = (0, _react_aria_utils_dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };
  let dragging = (0, $12uGp$useRef)(false);
  let prevPosition = (0, $12uGp$useRef)(0);
  // Keep track of the current handlers in a ref so that the events can access them.
  let handlers = (0, $12uGp$useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;
  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);
    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }
    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };
  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    _react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.splice(_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener("mouseup", onMouseUp, false);
    window.removeEventListener("mousemove", onMouseDragged, false);
  };
  let onMouseDown = e => {
    const target = e.currentTarget;
    // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.
    if (_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    _react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener("mousemove", onMouseDragged, false);
    window.addEventListener("mouseup", onMouseUp, false);
  };
  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };
  let onMouseOut = () => {
    if (onHover) onHover(false);
  };
  let onKeyDown = e => {
    switch (e.key) {
      case "Left":
      case "ArrowLeft":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Up":
      case "ArrowUp":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Right":
      case "ArrowRight":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Down":
      case "ArrowDown":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Home":
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;
      case "End":
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;
      case "Enter":
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };
  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(new Map());
  let addGlobalListener = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]);
  // eslint-disable-next-line arrow-body-style
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  } = props;
  // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.
  id = (0, _react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)(id);
  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(" ");
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  // If no labels are provided, use the default
  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function _react_aria_utils_dist_module_$df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, $12uGp$useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */
  (0, _react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === "function") forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0, $12uGp$useRef)(true);
  (0, $12uGp$useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}
function _react_aria_utils_dist_module_$9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function _react_aria_utils_dist_module_$9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0, $12uGp$useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;
    if (!_react_aria_utils_dist_module_$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, _react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !_react_aria_utils_dist_module_$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function _react_aria_utils_dist_module_$62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// @ts-ignore
let _react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function _react_aria_utils_dist_module_$5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size, setSize] = (0, $12uGp$useState)(() => _react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize());
  (0, $12uGp$useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = _react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };
    if (!_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport) window.addEventListener("resize", onResize);else _react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      if (!_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport) window.removeEventListener("resize", onResize);else _react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, []);
  return size;
}
function _react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: (_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === null || _react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : _react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: (_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === null || _react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : _react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let _react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionId = 0;
const _react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes = new Map();
function _react_aria_utils_dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id, setId] = (0, $12uGp$useState)(undefined);
  (0, _react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!description) return;
    let desc = _react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id = `react-aria-description-${_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement("div");
      node.id = id;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      _react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        _react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    "aria-describedby": description ? id : undefined
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function _react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function _react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() {
  return _react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function _react_aria_utils_dist_module_$c87311424ea30a05$export$186c6964ca17d99() {
  return _react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function _react_aria_utils_dist_module_$c87311424ea30a05$export$7bef049ce92e4224() {
  return _react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^iPad/i) ||
  // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  _react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function _react_aria_utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1() {
  return _react_aria_utils_dist_module_$c87311424ea30a05$export$186c6964ca17d99() || _react_aria_utils_dist_module_$c87311424ea30a05$export$7bef049ce92e4224();
}
function _react_aria_utils_dist_module_$c87311424ea30a05$export$e1865c3bedcd822b() {
  return _react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() || _react_aria_utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1();
}
function _react_aria_utils_dist_module_$c87311424ea30a05$export$78551043582a6a98() {
  return _react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !_react_aria_utils_dist_module_$c87311424ea30a05$export$6446a186d09e379e();
}
function _react_aria_utils_dist_module_$c87311424ea30a05$export$6446a186d09e379e() {
  return _react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function _react_aria_utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8() {
  return _react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/Android/i);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
  let handlerRef = (0, $12uGp$useRef)(handler);
  handlerRef.current = handler;
  let isDisabled = handler == null;
  (0, $12uGp$useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;
    let handler = e => handlerRef.current.call(this, e);
    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Scrolls `scrollView` so that `element` is visible.
    * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),
    * but doesn't affect parents above `scrollView`.
    */
function _react_aria_utils_dist_module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = _react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = _react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */
function _react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function _react_aria_utils_dist_module_$6a7db85432448f7f$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
  // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
  // to detect TalkBack virtual clicks.
  if ((0, _react_aria_utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function _react_aria_utils_dist_module_$6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
  // Talkback double tap from Windows Firefox touch screen press
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/interactions/dist/module.js



// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually
let interactions_dist_module_$14c0b72509d70225$var$state = 'default';
let interactions_dist_module_$14c0b72509d70225$var$savedUserSelect = '';
let interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap = new WeakMap();
function interactions_dist_module_$14c0b72509d70225$export$16a4697467175487(target) {
  if (_react_aria_utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1()) {
    if (interactions_dist_module_$14c0b72509d70225$var$state === 'default') {
      interactions_dist_module_$14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = 'none';
    }
    interactions_dist_module_$14c0b72509d70225$var$state = 'disabled';
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    // If not iOS, store the target's original user-select and change to user-select: none
    // Ignore state since it doesn't apply for non iOS
    interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = 'none';
  }
}
function interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if (_react_aria_utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1()) {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if (interactions_dist_module_$14c0b72509d70225$var$state !== 'disabled') return;
    interactions_dist_module_$14c0b72509d70225$var$state = 'restoring';
    // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.
    setTimeout(() => {
      // Wait for any CSS transitions to complete so we don't recompute style
      // for the whole page in the middle of the animation and cause jank.
      _react_aria_utils_dist_module_$bbed8b41f857bcc0$export$24490316f764c430(() => {
        // Avoid race conditions
        if (interactions_dist_module_$14c0b72509d70225$var$state === 'restoring') {
          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = interactions_dist_module_$14c0b72509d70225$var$savedUserSelect || '';
          interactions_dist_module_$14c0b72509d70225$var$savedUserSelect = '';
          interactions_dist_module_$14c0b72509d70225$var$state = 'default';
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement)
    // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    {
      if (target && interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap.has(target)) {
        let targetOldUserSelect = interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap.get(target);
        if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;
        if (target.getAttribute('style') === '') target.removeAttribute('style');
        interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap.delete(target);
      }
    }
}
const interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5 = external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);
interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';
function interactions_dist_module_$f6c31cce2adf654f$var$usePressResponderContext(props) {
  // Consume context from <PressResponder> and merge with props.
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5);
  if (context) {
    let {
      register: register,
      ...contextProps
    } = context;
    props = _react_aria_utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(contextProps, props);
    register();
  }
  _react_aria_utils_dist_module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, props.ref);
  return props;
}
function interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress: onPress1,
    onPressChange: onPressChange1,
    onPressStart: onPressStart1,
    onPressEnd: onPressEnd1,
    onPressUp: onPressUp1,
    isDisabled: isDisabled1,
    isPressed: isPressedProp,
    preventFocusOnPress: preventFocusOnPress,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit,
    allowTextSelectionOnPress: allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = interactions_dist_module_$f6c31cce2adf654f$var$usePressResponderContext(props);
  let propsRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  propsRef.current = {
    onPress: onPress1,
    onPressChange: onPressChange1,
    onPressStart: onPressStart1,
    onPressEnd: onPressEnd1,
    onPressUp: onPressUp1,
    isDisabled: isDisabled1,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  } = _react_aria_utils_dist_module_$03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let pressProps1 = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let state = ref.current;
    let triggerPressStart = (originalEvent, pointerType) => {
      let {
        onPressStart: onPressStart,
        onPressChange: onPressChange,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled || state.didFirePressStart) return;
      if (onPressStart) onPressStart({
        type: 'pressstart',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(true);
      state.didFirePressStart = true;
      setPressed(true);
    };
    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
      let {
        onPressEnd: onPressEnd,
        onPressChange: onPressChange,
        onPress: onPress,
        isDisabled: isDisabled
      } = propsRef.current;
      if (!state.didFirePressStart) return;
      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;
      if (onPressEnd) onPressEnd({
        type: 'pressend',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(false);
      setPressed(false);
      if (onPress && wasPressed && !isDisabled) onPress({
        type: 'press',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let triggerPressUp = (originalEvent, pointerType) => {
      let {
        onPressUp: onPressUp,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled) return;
      if (onPressUp) onPressUp({
        type: 'pressup',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let cancel = e => {
      if (state.isPressed) {
        if (state.isOverTarget) triggerPressEnd(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();
        if (!allowTextSelectionOnPress) interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
      }
    };
    let pressProps = {
      onKeyDown(e) {
        if (interactions_dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
          if (interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
          e.stopPropagation();
          // If the event is repeating, it may have started on a different element
          // after which focus moved to the current element. Ignore these events and
          // only handle the first key down event.
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, 'keyboard');
            // Focus may move before the key up event, so register the event on the document
            // instead of the same element where the key down event occurred.
            addGlobalListener(document, 'keyup', onKeyUp, false);
          }
        } else if (e.key === 'Enter' && interactions_dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget))
          // If the target is a link, we won't have handled this above because we want the default
          // browser behavior to open the link when pressing Enter. But we still need to prevent
          // default so that elements above do not also handle it (e.g. table row).
          e.stopPropagation();
      },
      onKeyUp(e) {
        if (interactions_dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');
      },
      onClick(e) {
        if (e && !e.currentTarget.contains(e.target)) return;
        if (e && e.button === 0) {
          e.stopPropagation();
          if (isDisabled1) e.preventDefault();
          // If triggered from a screen reader or by using element.click(),
          // trigger as if it were a keyboard click.
          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || _react_aria_utils_dist_module_$6a7db85432448f7f$export$60278871457622de(e.nativeEvent))) {
            // Ensure the element receives focus (VoiceOver on iOS does not do this)
            if (!isDisabled1 && !preventFocusOnPress) _react_aria_utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
            triggerPressStart(e, 'virtual');
            triggerPressUp(e, 'virtual');
            triggerPressEnd(e, 'virtual');
          }
          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }
    };
    let onKeyUp = e => {
      if (state.isPressed && interactions_dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        if (interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));
        removeAllGlobalListeners();
        // If the target is a link, trigger the click method to open the URL,
        // but defer triggering pressEnd until onClick event handler.
        if (state.target instanceof HTMLElement && state.target.contains(target) && (interactions_dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) state.target.click();
      }
    };
    if (typeof PointerEvent !== 'undefined') {
      pressProps.onPointerDown = e => {
        // Only handle left clicks, and ignore events that bubbled through portals.
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
        // Ignore and let the onClick handler take care of it instead.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202
        if (_react_aria_utils_dist_module_$6a7db85432448f7f$export$29bf1b5f2c56cf63(e.nativeEvent)) {
          state.pointerType = 'virtual';
          return;
        }
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on pointer down and handle focusing the pressable element ourselves.
        if (interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        state.pointerType = e.pointerType;
        e.stopPropagation();
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!isDisabled1 && !preventFocusOnPress) _react_aria_utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
          if (!allowTextSelectionOnPress) interactions_dist_module_$14c0b72509d70225$export$16a4697467175487(state.target);
          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, 'pointermove', onPointerMove, false);
          addGlobalListener(document, 'pointerup', onPointerUp, false);
          addGlobalListener(document, 'pointercancel', onPointerCancel, false);
        }
      };
      pressProps.onMouseDown = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (e.button === 0) {
          // Chrome and Firefox on touch Windows devices require mouse down events
          // to be canceled in addition to pointer events, or an extra asynchronous
          // focus event will be fired.
          if (interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
          e.stopPropagation();
        }
      };
      pressProps.onPointerUp = e => {
        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;
        // Only handle left clicks
        // Safari on iOS sometimes fires pointerup events, even
        // when the touch isn't over the target, so double check.
        if (e.button === 0 && interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
      // Use pointer move events instead to implement our own hit testing.
      // See https://bugs.webkit.org/show_bug.cgi?id=199803
      let onPointerMove = e => {
        if (e.pointerId !== state.activePointerId) return;
        if (interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if (interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress) interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
        }
      };
      let onPointerCancel = e => {
        cancel(e);
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.
        cancel(e);
      };
    } else {
      pressProps.onMouseDown = e => {
        // Only handle left clicks
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on mouse down and handle focusing the pressable element ourselves.
        if (interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        e.stopPropagation();
        if (state.ignoreEmulatedMouseEvents) return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = _react_aria_utils_dist_module_$6a7db85432448f7f$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';
        if (!isDisabled1 && !preventFocusOnPress) _react_aria_utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, 'mouseup', onMouseUp, false);
      };
      pressProps.onMouseEnter = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };
      pressProps.onMouseLeave = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onMouseUp = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);
      };
      let onMouseUp = e => {
        // Only handle left clicks
        if (e.button !== 0) return;
        state.isPressed = false;
        removeAllGlobalListeners();
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if (interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isOverTarget = false;
      };
      pressProps.onTouchStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        let touch = interactions_dist_module_$f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = 'touch';
        // Due to browser inconsistencies, especially on mobile browsers, we prevent default
        // on the emulated mouse event and handle focusing the pressable element ourselves.
        if (!isDisabled1 && !preventFocusOnPress) _react_aria_utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
        if (!allowTextSelectionOnPress) interactions_dist_module_$14c0b72509d70225$export$16a4697467175487(state.target);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, 'scroll', onScroll, true);
      };
      pressProps.onTouchMove = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = interactions_dist_module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onTouchEnd = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = interactions_dist_module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress) interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
        removeAllGlobalListeners();
      };
      pressProps.onTouchCancel = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed) cancel(e);
      };
      let onScroll = e => {
        if (state.isPressed && e.target.contains(state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        cancel(e);
      };
    }
    return pressProps;
  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);
  // Remove user-select: none in case component unmounts immediately after pressStart
  // eslint-disable-next-line arrow-body-style
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return () => {
      if (!allowTextSelectionOnPress) interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);
    };
  }, [allowTextSelectionOnPress]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: _react_aria_utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, pressProps1)
  };
}
function interactions_dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === 'A' && target.hasAttribute('href');
}
function interactions_dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const {
    key: key,
    code: code
  } = event;
  const element = currentTarget;
  const role = element.getAttribute('role');
  // Accessibility for keyboards. Space and Enter only.
  // "Spacebar" is for IE 11
  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof HTMLInputElement && !interactions_dist_module_$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (!interactions_dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') &&
  // An element with role='link' should only trigger with Enter key
  !(role === 'link' && key !== 'Enter');
}
function interactions_dist_module_$f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const {
    targetTouches: targetTouches
  } = event;
  if (targetTouches.length > 0) return targetTouches[0];
  return null;
}
function interactions_dist_module_$f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;
  for (let i = 0; i < changedTouches.length; i++) {
    const touch = changedTouches[i];
    if (touch.identifier === pointerId) return touch;
  }
  return null;
}
function interactions_dist_module_$f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}
function interactions_dist_module_$f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function interactions_dist_module_$f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
  // check if they cannot overlap on x axis
  if (a.left > b.right || b.left > a.right) return false;
  // check if they cannot overlap on y axis
  if (a.top > b.bottom || b.top > a.bottom) return false;
  return true;
}
function interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = interactions_dist_module_$f6c31cce2adf654f$var$getPointClientRect(point);
  return interactions_dist_module_$f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(target) {
  // We cannot prevent default if the target is a draggable element.
  return !(target instanceof HTMLElement) || !target.draggable;
}
function interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !interactions_dist_module_$f6c31cce2adf654f$var$isValidInputKey(target, key);
  if (target instanceof HTMLButtonElement) return target.type !== 'submit';
  return true;
}
const interactions_dist_module_$f6c31cce2adf654f$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);
function interactions_dist_module_$f6c31cce2adf654f$var$isValidInputKey(target, key) {
  // Only space should toggle checkboxes and radios, not enter.
  return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : interactions_dist_module_$f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
const interactions_dist_module_$3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(/* unused pure expression or super */ null && ($bx7SL$react.forwardRef(({
  children: children,
  ...props
}, ref) => {
  let newRef = $bx7SL$useRef();
  ref = ref !== null && ref !== void 0 ? ref : newRef;
  let {
    pressProps: pressProps
  } = interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    ...props,
    ref: ref
  });
  let child = $bx7SL$react.Children.only(children);
  return /*#__PURE__*/$bx7SL$react.cloneElement(child,
  // @ts-ignore
  {
    ref: ref,
    ...$bx7SL$mergeProps(child.props, pressProps)
  });
})));
const interactions_dist_module_$f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/(/* unused pure expression or super */ null && ($bx7SL$react.forwardRef(({
  children: children,
  ...props
}, ref) => {
  let isRegistered = $bx7SL$useRef(false);
  let prevContext = $bx7SL$useContext(interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5);
  let context = $bx7SL$mergeProps(prevContext || {}, {
    ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }
  });
  $bx7SL$useSyncRef(prevContext, ref);
  $bx7SL$useEffect(() => {
    if (!isRegistered.current) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
  }, []);
  return /*#__PURE__*/$bx7SL$react.createElement(interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {
    value: context
  }, children);
})));
class interactions_dist_module_$8a9cb279dc87e130$export$905e7fc544a71f36 {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {}
  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
}
function interactions_dist_module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = $bx7SL$useRef({
    isFocused: false,
    onBlur: onBlur,
    observer: null
  });
  stateRef.current.onBlur = onBlur;
  // Clean up MutationObserver on unmount. See below.
  // eslint-disable-next-line arrow-body-style
  $bx7SL$useLayoutEffect(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  // This function is called during a React onFocus event.
  return $bx7SL$useCallback(e1 => {
    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e1.target;
      let onBlurHandler = e => {
        var
          // For backward compatibility, dispatch a (fake) React synthetic event.
          _current, ref;
        stateRef.current.isFocused = false;
        if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new interactions_dist_module_$8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));
        // We no longer need the MutationObserver once the target is blurred.
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener('focusout', onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          stateRef.current.observer.disconnect();
          target.dispatchEvent(new FocusEvent('blur'));
          target.dispatchEvent(new FocusEvent('focusout', {
            bubbles: true
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: ['disabled']
      });
    }
  }, []);
}
function interactions_dist_module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let {
    isDisabled: isDisabled,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    onFocusChange: onFocusChange
  } = props;
  const onBlur = $bx7SL$useCallback(e => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [onBlurProp, onFocusChange]);
  const onSyntheticFocus = interactions_dist_module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  const onFocus = $bx7SL$useCallback(e => {
    if (e.target === e.currentTarget) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [onFocusChange, onFocusProp, onSyntheticFocus]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null
    }
  };
}
let interactions_dist_module_$507fabe10e71c6fb$var$currentModality = null;
let interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers = new Set();
let interactions_dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
let interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let interactions_dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
// Only Tab or Esc keys will make focus visible on text input elements
const interactions_dist_module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */
function interactions_dist_module_$507fabe10e71c6fb$var$isValidKey(e) {
  // Control and Shift keys trigger when navigating back to the tab with keyboard.
  return !(e.metaKey || !_react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');
}
function interactions_dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if (interactions_dist_module_$507fabe10e71c6fb$var$isValidKey(e)) {
    interactions_dist_module_$507fabe10e71c6fb$var$currentModality = 'keyboard';
    interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);
  }
}
function interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent(e) {
  interactions_dist_module_$507fabe10e71c6fb$var$currentModality = 'pointer';
  if (e.type === 'mousedown' || e.type === 'pointerdown') {
    interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);
  }
}
function interactions_dist_module_$507fabe10e71c6fb$var$handleClickEvent(e) {
  if (_react_aria_utils_dist_module_$6a7db85432448f7f$export$60278871457622de(e)) {
    interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    interactions_dist_module_$507fabe10e71c6fb$var$currentModality = 'virtual';
  }
}
function interactions_dist_module_$507fabe10e71c6fb$var$handleFocusEvent(e) {
  // Firefox fires two extra focus events when the user first clicks into an iframe:
  // first on the window, then on the document. We ignore these events so they don't
  // cause keyboard focus rings to appear.
  if (e.target === window || e.target === document) return;
  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
  if (!interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus && !interactions_dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    interactions_dist_module_$507fabe10e71c6fb$var$currentModality = 'virtual';
    interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);
  }
  interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  interactions_dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function interactions_dist_module_$507fabe10e71c6fb$var$handleWindowBlur() {
  // When the window is blurred, reset state. This is necessary when tabbing out of the window,
  // for example, since a subsequent focus event won't be fired.
  interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  interactions_dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */
function interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === 'undefined' || interactions_dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners) return;
  // Programmatic focus() calls shouldn't affect the current input modality.
  // However, we need to detect other cases when a focus event occurs without
  // a preceding user event (e.g. screen reader focus). Overriding the focus
  // method on HTMLElement.prototype is a bit hacky, but works.
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function () {
    interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  document.addEventListener('keydown', interactions_dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener('keyup', interactions_dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener('click', interactions_dist_module_$507fabe10e71c6fb$var$handleClickEvent, true);
  // Register focus events on the window so they are sure to happen
  // before React's event listeners (registered on the document).
  window.addEventListener('focus', interactions_dist_module_$507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener('blur', interactions_dist_module_$507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== 'undefined') {
    document.addEventListener('pointerdown', interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('pointermove', interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('pointerup', interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener('mousedown', interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('mousemove', interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('mouseup', interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  interactions_dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}
if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents);
}
function interactions_dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return interactions_dist_module_$507fabe10e71c6fb$var$currentModality !== 'pointer';
}
function interactions_dist_module_$507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return interactions_dist_module_$507fabe10e71c6fb$var$currentModality;
}
function interactions_dist_module_$507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  interactions_dist_module_$507fabe10e71c6fb$var$currentModality = modality;
  interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
function interactions_dist_module_$507fabe10e71c6fb$export$98e20ec92f614cfe() {
  interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = $bx7SL$useState(interactions_dist_module_$507fabe10e71c6fb$var$currentModality);
  $bx7SL$useEffect(() => {
    let handler = () => {
      setModality(interactions_dist_module_$507fabe10e71c6fb$var$currentModality);
    };
    interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */
function interactions_dist_module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !interactions_dist_module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function interactions_dist_module_$507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
  let {
    isTextInput: isTextInput,
    autoFocus: autoFocus
  } = props;
  let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || interactions_dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
  interactions_dist_module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {
    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);
  }, [isTextInput], {
    isTextInput: isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}
function interactions_dist_module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  $bx7SL$useEffect(() => {
    let handler = (modality, e) => {
      if (!interactions_dist_module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;
      fn(interactions_dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, deps);
}
function interactions_dist_module_$9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let {
    isDisabled: isDisabled,
    onBlurWithin: onBlurWithin,
    onFocusWithin: onFocusWithin,
    onFocusWithinChange: onFocusWithinChange
  } = props;
  let state = $bx7SL$useRef({
    isFocusWithin: false
  });
  let onBlur = $bx7SL$useCallback(e => {
    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
    // when moving focus inside the element. Only trigger if the currentTarget doesn't
    // include the relatedTarget (where focus is moving).
    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.current.isFocusWithin = false;
      if (onBlurWithin) onBlurWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(false);
    }
  }, [onBlurWithin, onFocusWithinChange, state]);
  let onSyntheticFocus = interactions_dist_module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  let onFocus = $bx7SL$useCallback(e => {
    if (!state.current.isFocusWithin) {
      if (onFocusWithin) onFocusWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(true);
      state.current.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);
  if (isDisabled) return {
    focusWithinProps: {
      onFocus: null,
      onBlur: null
    }
  };
  return {
    focusWithinProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

// iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.
let interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let interactions_dist_module_$6179b936705e76d3$var$hoverCount = 0;
function interactions_dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
  // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
  // the distant future because a user previously touched the element.
  setTimeout(() => {
    interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}
function interactions_dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === 'touch') interactions_dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function interactions_dist_module_$6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === 'undefined') return;
  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', interactions_dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', interactions_dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  interactions_dist_module_$6179b936705e76d3$var$hoverCount++;
  return () => {
    interactions_dist_module_$6179b936705e76d3$var$hoverCount--;
    if (interactions_dist_module_$6179b936705e76d3$var$hoverCount > 0) return;
    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', interactions_dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', interactions_dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}
function interactions_dist_module_$6179b936705e76d3$export$ae780daf29e6d456(props) {
  let {
    onHoverStart: onHoverStart,
    onHoverChange: onHoverChange,
    onHoverEnd: onHoverEnd,
    isDisabled: isDisabled
  } = props;
  let [isHovered, setHovered] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: '',
    target: null
  }).current;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(interactions_dist_module_$6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let {
    hoverProps: hoverProps1,
    triggerHoverEnd: triggerHoverEnd1
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart) onHoverStart({
        type: 'hoverstart',
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(true);
      setHovered(true);
    };
    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = '';
      state.target = null;
      if (pointerType === 'touch' || !state.isHovered) return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd) onHoverEnd({
        type: 'hoverend',
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(false);
      setHovered(false);
    };
    let hoverProps = {};
    if (typeof PointerEvent !== 'undefined') {
      hoverProps.onPointerEnter = e => {
        if (interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;
        triggerHoverStart(e, e.pointerType);
      };
      hoverProps.onPointerLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };
      hoverProps.onMouseEnter = e => {
        if (!state.ignoreEmulatedMouseEvents && !interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');
        state.ignoreEmulatedMouseEvents = false;
      };
      hoverProps.onMouseLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');
      };
    }
    return {
      hoverProps: hoverProps,
      triggerHoverEnd: triggerHoverEnd
    };
  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // Call the triggerHoverEnd as soon as isDisabled changes to true
    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
    if (isDisabled) triggerHoverEnd1({
      currentTarget: state.target
    }, state.pointerType);
  }, [isDisabled]);
  return {
    hoverProps: hoverProps1,
    isHovered: isHovered
  };
}
function interactions_dist_module_$e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let {
    ref: ref,
    onInteractOutside: onInteractOutside,
    isDisabled: isDisabled,
    onInteractOutsideStart: onInteractOutsideStart
  } = props;
  let stateRef = $bx7SL$useRef({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside: onInteractOutside,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  $bx7SL$useEffect(() => {
    if (isDisabled) return;
    let onPointerDown = e => {
      if (interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);
        state.isPointerDown = true;
      }
    };
    // Use pointer events if available. Otherwise, fall back to mouse and touch events.
    if (typeof PointerEvent !== 'undefined') {
      let onPointerUp = e => {
        if (state.isPointerDown && state.onInteractOutside && interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      // changing these to capture phase fixed combobox
      document.addEventListener('pointerdown', onPointerDown, true);
      document.addEventListener('pointerup', onPointerUp, true);
      return () => {
        document.removeEventListener('pointerdown', onPointerDown, true);
        document.removeEventListener('pointerup', onPointerUp, true);
      };
    } else {
      let onMouseUp = e => {
        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      let onTouchEnd = e => {
        state.ignoreEmulatedMouseEvents = true;
        if (state.onInteractOutside && state.isPointerDown && interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      document.addEventListener('mousedown', onPointerDown, true);
      document.addEventListener('mouseup', onMouseUp, true);
      document.addEventListener('touchstart', onPointerDown, true);
      document.addEventListener('touchend', onTouchEnd, true);
      return () => {
        document.removeEventListener('mousedown', onPointerDown, true);
        document.removeEventListener('mouseup', onMouseUp, true);
        document.removeEventListener('touchstart', onPointerDown, true);
        document.removeEventListener('touchend', onTouchEnd, true);
      };
    }
  }, [ref, state, isDisabled]);
}
function interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0) return false;
  // if the event target is no longer in the document
  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
  }
  return ref.current && !ref.current.contains(event.target);
}
function interactions_dist_module_$93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return;
  let shouldStopPropagation = true;
  return e => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');
      },
      continuePropagation() {
        shouldStopPropagation = false;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}
function interactions_dist_module_$46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: interactions_dist_module_$93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),
      onKeyUp: interactions_dist_module_$93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)
    }
  };
}
function interactions_dist_module_$e8a7022cf87cba2a$export$36da96379f79f245(props) {
  let {
    onMoveStart: onMoveStart,
    onMove: onMove,
    onMoveEnd: onMoveEnd
  } = props;
  let state = $bx7SL$useRef({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = $bx7SL$useGlobalListeners();
  let moveProps1 = $bx7SL$useMemo(() => {
    let moveProps = {};
    let start = () => {
      interactions_dist_module_$14c0b72509d70225$export$16a4697467175487();
      state.current.didMove = false;
    };
    let move = (originalEvent, pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0) return;
      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
          type: 'movestart',
          pointerType: pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }
      onMove({
        type: 'move',
        pointerType: pointerType,
        deltaX: deltaX,
        deltaY: deltaY,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let end = (originalEvent, pointerType) => {
      interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295();
      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
        type: 'moveend',
        pointerType: pointerType,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    if (typeof PointerEvent === 'undefined') {
      let onMouseMove = e => {
        if (e.button === 0) {
          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onMouseUp = e => {
        if (e.button === 0) {
          end(e, 'mouse');
          removeGlobalListener(window, 'mousemove', onMouseMove, false);
          removeGlobalListener(window, 'mouseup', onMouseUp, false);
        }
      };
      moveProps.onMouseDown = e => {
        if (e.button === 0) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          addGlobalListener(window, 'mousemove', onMouseMove, false);
          addGlobalListener(window, 'mouseup', onMouseUp, false);
        }
      };
      let onTouchMove = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          let {
            pageX: pageX,
            pageY: pageY
          } = e.changedTouches[touch];
          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: pageX,
            pageY: pageY
          };
        }
      };
      let onTouchEnd = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          end(e, 'touch');
          state.current.id = null;
          removeGlobalListener(window, 'touchmove', onTouchMove);
          removeGlobalListener(window, 'touchend', onTouchEnd);
          removeGlobalListener(window, 'touchcancel', onTouchEnd);
        }
      };
      moveProps.onTouchStart = e => {
        if (e.changedTouches.length === 0 || state.current.id != null) return;
        let {
          pageX: pageX,
          pageY: pageY,
          identifier: identifier
        } = e.changedTouches[0];
        start();
        e.stopPropagation();
        e.preventDefault();
        state.current.lastPosition = {
          pageX: pageX,
          pageY: pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, 'touchmove', onTouchMove, false);
        addGlobalListener(window, 'touchend', onTouchEnd, false);
        addGlobalListener(window, 'touchcancel', onTouchEnd, false);
      };
    } else {
      let onPointerMove = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || 'mouse';
          // Problems with PointerEvent#movementX/movementY:
          // 1. it is always 0 on macOS Safari.
          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || 'mouse';
          end(e, pointerType);
          state.current.id = null;
          removeGlobalListener(window, 'pointermove', onPointerMove, false);
          removeGlobalListener(window, 'pointerup', onPointerUp, false);
          removeGlobalListener(window, 'pointercancel', onPointerUp, false);
        }
      };
      moveProps.onPointerDown = e => {
        if (e.button === 0 && state.current.id == null) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          state.current.id = e.pointerId;
          addGlobalListener(window, 'pointermove', onPointerMove, false);
          addGlobalListener(window, 'pointerup', onPointerUp, false);
          addGlobalListener(window, 'pointercancel', onPointerUp, false);
        }
      };
    }
    let triggerKeyboardMove = (e, deltaX, deltaY) => {
      start();
      move(e, 'keyboard', deltaX, deltaY);
      end(e, 'keyboard');
    };
    moveProps.onKeyDown = e => {
      switch (e.key) {
        case 'Left':
        case 'ArrowLeft':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, -1, 0);
          break;
        case 'Right':
        case 'ArrowRight':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 1, 0);
          break;
        case 'Up':
        case 'ArrowUp':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, -1);
          break;
        case 'Down':
        case 'ArrowDown':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, 1);
          break;
      }
    };
    return moveProps;
  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);
  return {
    moveProps: moveProps1
  };
}
function interactions_dist_module_$7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
  let {
    onScroll: onScroll,
    isDisabled: isDisabled
  } = props;
  let onScrollHandler = $bx7SL$useCallback(e => {
    // If the ctrlKey is pressed, this is a zoom event, do nothing.
    if (e.ctrlKey) return;
    // stop scrolling the page
    e.preventDefault();
    e.stopPropagation();
    if (onScroll) onScroll({
      deltaX: e.deltaX,
      deltaY: e.deltaY
    });
  }, [onScroll]);
  $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);
}
const interactions_dist_module_$8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
function interactions_dist_module_$8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let {
    isDisabled: isDisabled,
    onLongPressStart: onLongPressStart,
    onLongPressEnd: onLongPressEnd,
    onLongPress: onLongPress,
    threshold = interactions_dist_module_$8a26561d2877236e$var$DEFAULT_THRESHOLD,
    accessibilityDescription: accessibilityDescription
  } = props;
  const timeRef = $bx7SL$useRef(null);
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = $bx7SL$useGlobalListeners();
  let {
    pressProps: pressProps
  } = interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: isDisabled,
    onPressStart(e1) {
      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {
        if (onLongPressStart) onLongPressStart({
          ...e1,
          type: 'longpressstart'
        });
        timeRef.current = setTimeout(() => {
          // Prevent other usePress handlers from also handling this event.
          e1.target.dispatchEvent(new PointerEvent('pointercancel', {
            bubbles: true
          }));
          if (onLongPress) onLongPress({
            ...e1,
            type: 'longpress'
          });
          timeRef.current = null;
        }, threshold);
        // Prevent context menu, which may be opened on long press on touch devices
        if (e1.pointerType === 'touch') {
          let onContextMenu = e => {
            e.preventDefault();
          };
          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {
            once: true
          });
          addGlobalListener(window, 'pointerup', () => {
            // If no contextmenu event is fired quickly after pointerup, remove the handler
            // so future context menu events outside a long press are not prevented.
            setTimeout(() => {
              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },
    onPressEnd(e) {
      if (timeRef.current) clearTimeout(timeRef.current);
      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({
        ...e,
        type: 'longpressend'
      });
    }
  });
  let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)
  };
}

;// CONCATENATED MODULE: ./src/utils/system.ts
/**
 * Part of this code is taken from @chakra-ui/system
 */


function forwardRef(component) {
  return /*#__PURE__*/(0,external_root_React_commonjs2_react_commonjs_react_amd_react_.forwardRef)(component);
}
;// CONCATENATED MODULE: ./src/button/utils.tsx
const filterPropsWithGroup = (props, config) => {
  var _config$bordered, _config$borderWeight, _config$ghost, _config$ripple, _config$flat, _config$animated, _config$rounded, _config$light, _config$size, _config$color, _config$disabled;
  if (!config.isButtonGroup) return props;
  return {
    ...props,
    auto: true,
    shadow: false,
    bordered: (_config$bordered = config.bordered) != null ? _config$bordered : props.bordered,
    borderWeight: (_config$borderWeight = config.borderWeight) != null ? _config$borderWeight : props.borderWeight,
    ghost: (_config$ghost = config.ghost) != null ? _config$ghost : props.ghost,
    ripple: (_config$ripple = config.ripple) != null ? _config$ripple : props.ripple,
    flat: (_config$flat = config.flat) != null ? _config$flat : props.flat,
    animated: (_config$animated = config.animated) != null ? _config$animated : props.animated,
    rounded: (_config$rounded = config.rounded) != null ? _config$rounded : props.rounded,
    light: (_config$light = config.light) != null ? _config$light : props.light,
    size: (_config$size = config.size) != null ? _config$size : props.size,
    color: (_config$color = config.color) != null ? _config$color : props.color,
    disabled: (_config$disabled = config.disabled) != null ? _config$disabled : props.disabled
  };
};
const getCssColors = props => {
  if (!props.disabled) {
    if (props.auto && props.color === "gradient" && (props.bordered || props.ghost)) {
      return {
        px: "$$buttonBorderWeight",
        py: "$$buttonBorderWeight"
      };
    }
    return {};
  }
  const defaultDisabledCss = {
    bg: "$accents1",
    color: "$accents7",
    transform: "none",
    boxShadow: "none",
    pe: "none"
  };
  if (!props.bordered && !props.flat && !props.ghost && !props.light) {
    return defaultDisabledCss;
  }
  if (props.color === "gradient" && (props.bordered || props.ghost)) {
    return {
      color: "$accents4",
      backgroundImage: "linear-gradient($background, $background), linear-gradient($accents2, $accents2)",
      transform: "none",
      boxShadow: "none",
      pe: "none",
      pl: "$$buttonBorderWeight",
      pr: "$$buttonBorderWeight"
    };
  }
  if (props.bordered || props.ghost || props.light) {
    return {
      ...defaultDisabledCss,
      bg: "transparent",
      borderColor: "$accents4"
    };
  }
  if (props.flat) {
    return {
      ...defaultDisabledCss,
      bg: "$accents1"
    };
  }
  return;
};
;// CONCATENATED MODULE: ./src/button/button-group-context.ts

const button_group_context_defaultContext = {
  isButtonGroup: false,
  disabled: false
};
const ButtonGroupContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(button_group_context_defaultContext);
const useButtonGroupContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(ButtonGroupContext);
;// CONCATENATED MODULE: ./src/button/button-icon.tsx
var button_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button-icon.tsx";





const button_icon_defaultProps = {
  className: ""
};
const StyledButtonIcon = styled("span", {
  dflex: "center",
  position: "absolute",
  left: "$$buttonPadding",
  right: "auto",
  top: "50%",
  transform: "translateY(-50%)",
  color: "inherit",
  zIndex: "$1",
  "& svg": {
    background: "transparent"
  },
  variants: {
    isAuto: {
      true: {
        position: "relative",
        transform: "none",
        top: "0%"
      }
    },
    isRight: {
      true: {
        right: "$$buttonPadding",
        left: "auto"
      }
    },
    isSingle: {
      true: {
        position: "static",
        transform: "none"
      }
    },
    isGradientButtonBorder: {
      true: {}
    }
  },
  compoundVariants: [
  // isAuto && isRight
  {
    isAuto: true,
    isRight: true,
    isSingle: false,
    css: {
      order: 2,
      ml: "calc($$buttonPadding / 2)",
      right: "0%",
      left: "0%"
    }
  },
  // isAuto && !isRight
  {
    isAuto: true,
    isRight: false,
    isSingle: false,
    css: {
      order: 0,
      mr: "calc($$buttonPadding / 2)",
      right: "0%",
      left: "0%"
    }
  },
  // isSingle && isRight
  {
    isSingle: true,
    isRight: false,
    css: {
      ml: 0
    }
  },
  // isSingle && !isRight
  {
    isSingle: true,
    isRight: true,
    css: {
      mr: 0
    }
  },
  // isSingle && !isRight && hasButttonBorder
  {
    isSingle: true,
    isRight: false,
    isGradientButtonBorder: true,
    css: {
      mr: "calc($$buttonPadding / 2)"
    }
  }]
});
const ButtonIcon = ({
  children,
  className,
  css,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledButtonIcon, {
    className: clsx("nextui-button-icon", {
      "nextui-button-icon-right": props.isRight,
      "nextui-button-icon-single": props.isSingle
    }, className),
    css: css,
    ...props,
    children: children
  }, void 0, false, {
    fileName: button_icon_jsxFileName,
    lineNumber: 119,
    columnNumber: 5
  }, undefined);
};
ButtonIcon.toString = () => ".nextui-button-icon";
const MemoButtonIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ButtonIcon);
/* harmony default export */ const button_icon = (with_defaults(MemoButtonIcon, button_icon_defaultProps));
;// CONCATENATED MODULE: ./src/button/button.styles.ts



const StyledButton = styled("button", {
  $$buttonBorderRadius: "$radii$md",
  $$buttonPressedScale: 0.97,
  dflex: "center",
  appearance: "none",
  boxSizing: "border-box",
  fontWeight: "$medium",
  us: "none",
  lineHeight: "$sm",
  ta: "center",
  whiteSpace: "nowrap",
  transition: "$button",
  position: "relative",
  overflow: "hidden",
  border: "none",
  cursor: "pointer",
  pe: "auto",
  p: 0,
  br: "$$buttonBorderRadius",
  "@motion": {
    transition: "none"
  },
  ".nextui-button-text": {
    dflex: "center",
    zIndex: "$2",
    "p, pre, div": {
      margin: 0
    }
  },
  [`& ${StyledDrip}`]: {
    zIndex: "$1",
    ".nextui-drip-filler": {
      opacity: 0.25,
      fill: "$accents2"
    }
  },
  variants: {
    bordered: {
      true: {
        bg: "transparent",
        borderStyle: "solid",
        color: "$text"
      }
    },
    ghost: {
      true: {}
    },
    color: {
      default: {
        bg: "$primary",
        color: "$primarySolidContrast"
      },
      primary: {
        bg: "$primary",
        color: "$primarySolidContrast"
      },
      secondary: {
        bg: "$secondary",
        color: "$secondarySolidContrast"
      },
      success: {
        bg: "$success",
        color: "$successSolidContrast"
      },
      warning: {
        bg: "$warning",
        color: "$warningSolidContrast"
      },
      error: {
        bg: "$error",
        color: "$errorSolidContrast"
      },
      gradient: {
        bg: "$gradient",
        color: "$primarySolidContrast"
      }
    },
    size: {
      xs: {
        $$buttonPadding: "$space$3",
        $$buttonBorderRadius: "$radii$xs",
        $$buttonHeight: "$space$10",
        px: "$3",
        height: "$$buttonHeight",
        lh: "$space$10",
        width: "auto",
        minWidth: "$20",
        fontSize: "$xs"
      },
      sm: {
        $$buttonPadding: "$space$5",
        $$buttonBorderRadius: "$radii$sm",
        $$buttonHeight: "$space$12",
        px: "$5",
        height: "$$buttonHeight",
        lh: "$space$14",
        width: "auto",
        minWidth: "$36",
        fontSize: "$sm"
      },
      md: {
        $$buttonPadding: "$space$7",
        $$buttonBorderRadius: "$radii$md",
        $$buttonHeight: "$space$14",
        px: "$7",
        height: "$$buttonHeight",
        lh: "$space$14",
        width: "auto",
        minWidth: "$48",
        fontSize: "$sm"
      },
      lg: {
        $$buttonPadding: "$space$9",
        $$buttonBorderRadius: "$radii$base",
        $$buttonHeight: "$space$16",
        px: "$9",
        height: "$$buttonHeight",
        lh: "$space$15",
        width: "auto",
        minWidth: "$60",
        fontSize: "$md"
      },
      xl: {
        $$buttonPadding: "$space$10",
        $$buttonBorderRadius: "$radii$xl",
        $$buttonHeight: "$space$18",
        px: "$10",
        height: "$$buttonHeight",
        lh: "$space$17",
        width: "auto",
        minWidth: "$72",
        fontSize: "$lg"
      }
    },
    borderWeight: {
      light: {
        bw: "$light",
        $$buttonBorderWeight: "$borderWeights$light"
      },
      normal: {
        bw: "$normal",
        $$buttonBorderWeight: "$borderWeights$normal"
      },
      bold: {
        bw: "$bold",
        $$buttonBorderWeight: "$borderWeights$bold"
      },
      extrabold: {
        bw: "$extrabold",
        $$buttonBorderWeight: "$borderWeights$extrabold"
      },
      black: {
        bw: "$black",
        $$buttonBorderWeight: "$borderWeights$black"
      }
    },
    flat: {
      true: {
        color: "$text"
      }
    },
    light: {
      true: {
        bg: "transparent",
        [`& ${StyledDrip}`]: {
          ".nextui-drip-filler": {
            opacity: 0.8,
            fill: "$accents2"
          }
        }
      }
    },
    shadow: {
      true: {
        bs: "$sm"
      }
    },
    animated: {
      false: {
        transition: "none"
      }
    },
    auto: {
      true: {
        width: "auto",
        minWidth: "min-content"
      }
    },
    rounded: {
      true: {
        $$buttonBorderRadius: "$radii$pill"
      }
    },
    isPressed: {
      true: {}
    },
    isHovered: {
      true: {}
    },
    isChildLess: {
      true: {
        p: 0,
        width: "$$buttonHeight",
        height: "$$buttonHeight"
      }
    },
    isFocusVisible: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
  // isPressed && animated
  {
    isPressed: true,
    animated: true,
    css: {
      transform: "scale($$buttonPressedScale)"
    }
  },
  // size / auto / isChildLess
  {
    auto: true,
    isChildLess: false,
    size: "xs",
    css: {
      px: "$5",
      minWidth: "min-content"
    }
  }, {
    auto: true,
    isChildLess: false,
    size: "sm",
    css: {
      px: "$8",
      minWidth: "min-content"
    }
  }, {
    auto: true,
    isChildLess: false,
    size: "md",
    css: {
      px: "$9",
      minWidth: "min-content"
    }
  }, {
    auto: true,
    isChildLess: false,
    size: "lg",
    css: {
      px: "$10",
      minWidth: "min-content"
    }
  }, {
    auto: true,
    isChildLess: false,
    size: "xl",
    css: {
      px: "$11",
      minWidth: "min-content"
    }
  },
  // shadow / color
  {
    shadow: true,
    isFocusVisible: false,
    color: "default",
    css: {
      normalShadow: "$primaryShadow"
    }
  }, {
    shadow: true,
    isFocusVisible: false,
    color: "primary",
    css: {
      normalShadow: "$primaryShadow"
    }
  }, {
    shadow: true,
    isFocusVisible: false,
    color: "secondary",
    css: {
      normalShadow: "$secondaryShadow"
    }
  }, {
    shadow: true,
    isFocusVisible: false,
    color: "warning",
    css: {
      normalShadow: "$warningShadow"
    }
  }, {
    shadow: true,
    isFocusVisible: false,
    color: "success",
    css: {
      normalShadow: "$successShadow"
    }
  }, {
    shadow: true,
    isFocusVisible: false,
    color: "error",
    css: {
      normalShadow: "$errorShadow"
    }
  }, {
    shadow: true,
    isFocusVisible: false,
    color: "gradient",
    css: {
      normalShadow: "$primaryShadow"
    }
  },
  // light / color
  {
    light: true,
    color: "default",
    css: {
      bg: "transparent",
      color: "$text",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.8,
          fill: "$primaryLightActive"
        }
      }
    }
  }, {
    light: true,
    color: "primary",
    css: {
      bg: "transparent",
      color: "$primary",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.8,
          fill: "$primaryLightActive"
        }
      }
    }
  }, {
    light: true,
    color: "secondary",
    css: {
      bg: "transparent",
      color: "$secondary",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.8,
          fill: "$secondaryLightActive"
        }
      }
    }
  }, {
    light: true,
    color: "warning",
    css: {
      bg: "transparent",
      color: "$warning",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.8,
          fill: "$warningLightActive"
        }
      }
    }
  }, {
    light: true,
    color: "success",
    css: {
      bg: "transparent",
      color: "$success",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.8,
          fill: "$successLightActive"
        }
      }
    }
  }, {
    light: true,
    color: "error",
    css: {
      bg: "transparent",
      color: "$error",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.8,
          fill: "$errorLightActive"
        }
      }
    }
  },
  // bordered / color
  {
    bordered: true,
    color: "default",
    css: {
      bg: "transparent",
      borderColor: "$primary",
      color: "$primary",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          fill: "$primary"
        }
      }
    }
  }, {
    bordered: true,
    color: "primary",
    css: {
      bg: "transparent",
      borderColor: "$primary",
      color: "$primary",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          fill: "$primary"
        }
      }
    }
  }, {
    bordered: true,
    color: "secondary",
    css: {
      bg: "transparent",
      borderColor: "$secondary",
      color: "$secondary",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          fill: "$secondary"
        }
      }
    }
  }, {
    bordered: true,
    color: "success",
    css: {
      bg: "transparent",
      borderColor: "$success",
      color: "$success",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          fill: "$success"
        }
      }
    }
  }, {
    bordered: true,
    color: "warning",
    css: {
      bg: "transparent",
      borderColor: "$warning",
      color: "$warning",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          fill: "$warning"
        }
      }
    }
  }, {
    bordered: true,
    color: "error",
    css: {
      bg: "transparent",
      borderColor: "$error",
      color: "$error",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          fill: "$error"
        }
      }
    }
  }, {
    bordered: true,
    color: "gradient",
    css: {
      bg: "transparent",
      color: "$text",
      padding: "$$buttonBorderWeight",
      bgClip: "content-box, border-box",
      borderColor: "$primary",
      backgroundImage: "linear-gradient($background, $background), $gradient",
      border: "none",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          fill: "$secondary"
        }
      }
    }
  },
  // ghost / color && isHovered
  {
    ghost: true,
    isHovered: true,
    color: "default",
    css: {
      bg: "$primary",
      color: "$primarySolidContrast"
    }
  }, {
    ghost: true,
    isHovered: true,
    color: "primary",
    css: {
      bg: "$primary",
      color: "$primarySolidContrast"
    }
  }, {
    ghost: true,
    isHovered: true,
    color: "secondary",
    css: {
      bg: "$secondary",
      color: "$secondarySolidContrast"
    }
  }, {
    ghost: true,
    isHovered: true,
    color: "success",
    css: {
      bg: "$success",
      color: "$successSolidContrast"
    }
  }, {
    ghost: true,
    isHovered: true,
    color: "warning",
    css: {
      bg: "$warning",
      color: "$warningSolidContrast"
    }
  }, {
    ghost: true,
    isHovered: true,
    color: "error",
    css: {
      bg: "$error",
      color: "$errorSolidContrast"
    }
  }, {
    ghost: true,
    color: "gradient",
    isHovered: true,
    css: {
      bg: "$gradient",
      color: "$white"
    }
  },
  // flat / color
  {
    flat: true,
    color: "default",
    css: {
      bg: "$primaryLight",
      color: "$primaryLightContrast",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.4,
          fill: "$primary"
        }
      }
    }
  }, {
    flat: true,
    color: "primary",
    css: {
      bg: "$primaryLight",
      color: "$primaryLightContrast",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.4,
          fill: "$primary"
        }
      }
    }
  }, {
    flat: true,
    color: "secondary",
    css: {
      bg: "$secondaryLight",
      color: "$secondaryLightContrast",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.4,
          fill: "$secondary"
        }
      }
    }
  }, {
    flat: true,
    color: "success",
    css: {
      bg: "$successLight",
      color: "$successLightContrast",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.4,
          fill: "$success"
        }
      }
    }
  }, {
    flat: true,
    color: "warning",
    css: {
      bg: "$warningLight",
      color: "$warningLightContrast",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.4,
          fill: "$warning"
        }
      }
    }
  }, {
    flat: true,
    color: "error",
    css: {
      bg: "$errorLight",
      color: "$errorLightContrast",
      [`& ${StyledDrip}`]: {
        ".nextui-drip-filler": {
          opacity: 0.4,
          fill: "$error"
        }
      }
    }
  },
  // flat / isHovered / color
  {
    flat: true,
    isHovered: true,
    color: "default",
    css: {
      bg: "$primaryLightHover"
    }
  }, {
    flat: true,
    isHovered: true,
    color: "primary",
    css: {
      bg: "$primaryLightHover"
    }
  }, {
    flat: true,
    isHovered: true,
    color: "secondary",
    css: {
      bg: "$secondaryLightHover"
    }
  }, {
    flat: true,
    isHovered: true,
    color: "success",
    css: {
      bg: "$successLightHover"
    }
  }, {
    flat: true,
    isHovered: true,
    color: "warning",
    css: {
      bg: "$warningLightHover"
    }
  }, {
    flat: true,
    isHovered: true,
    color: "error",
    css: {
      bg: "$errorLightHover"
    }
  },
  // flat / isPressed / color
  {
    flat: true,
    isPressed: true,
    color: "default",
    css: {
      bg: "$primaryLightActive"
    }
  }, {
    flat: true,
    isPressed: true,
    color: "primary",
    css: {
      bg: "$primaryLightActive"
    }
  }, {
    flat: true,
    isPressed: true,
    color: "secondary",
    css: {
      bg: "$secondaryLightActive"
    }
  }, {
    flat: true,
    isPressed: true,
    color: "success",
    css: {
      bg: "$successLightActive"
    }
  }, {
    flat: true,
    isPressed: true,
    color: "warning",
    css: {
      bg: "$warningLightActive"
    }
  }, {
    flat: true,
    isPressed: true,
    color: "error",
    css: {
      bg: "$errorLightActive"
    }
  },
  // auto / gradient-color / bordered
  {
    auto: true,
    color: "gradient",
    bordered: true,
    css: {
      ".nextui-button-text": {
        px: "$$buttonPadding"
      },
      ".nextui-button-icon": {
        ml: "$$buttonPadding"
      },
      ".nextui-button-icon-right": {
        mr: "$$buttonPadding"
      },
      ".nextui-button-text-left": {
        pl: 0
      },
      ".nextui-button-text-right": {
        pr: 0
      }
    }
  },
  // rounded && size
  {
    rounded: true,
    size: "xs",
    css: {
      br: "$pill"
    }
  }, {
    rounded: true,
    size: "sm",
    css: {
      br: "$pill"
    }
  }, {
    rounded: true,
    size: "md",
    css: {
      br: "$pill"
    }
  }, {
    rounded: true,
    size: "lg",
    css: {
      br: "$pill"
    }
  }, {
    rounded: true,
    size: "xl",
    css: {
      br: "$pill"
    }
  }],
  defaultVariants: {
    color: "default",
    borderWeight: "normal",
    animated: true,
    size: "md"
  }
}, cssFocusVisible);
/* harmony default export */ const button_styles = (StyledButton);
;// CONCATENATED MODULE: ./src/button/button.tsx
var button_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button.tsx";



















const button_defaultProps = {
  ghost: false,
  bordered: false,
  ripple: true,
  animated: true,
  disabled: false,
  autoFocus: false,
  auto: false,
  className: "",
  type: "button"
};
const Button = forwardRef((props, ref) => {
  const {
    as,
    css,
    iconLeftCss,
    iconRightCss,
    onClick: deprecatedOnClick,
    onPress,
    onPressStart,
    onPressEnd,
    onPressChange,
    onPressUp,
    ...btnProps
  } = props;
  const groupConfig = useButtonGroupContext();
  const filteredProps = filterPropsWithGroup(btnProps, groupConfig);
  const cssColors = getCssColors(filteredProps);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  const {
    flat,
    children,
    disabled,
    animated,
    light,
    ripple,
    bordered,
    auto,
    borderWeight,
    icon,
    iconRight,
    ghost,
    autoFocus,
    className,
    ...otherProps
  } = filteredProps;
  const handleDrip = e => {
    if (animated && ripple && buttonRef.current) {
      onDripClickHandler(e);
    }
  };
  const handlePress = e => {
    if (e.pointerType === "keyboard" || e.pointerType === "virtual") {
      handleDrip(e);
    } else if (typeof window !== "undefined" && window.event) {
      handleDrip(window.event);
    }
    if (deprecatedOnClick) {
      deprecatedOnClick(e);
      console.warn("onClick is deprecated, please use onPress");
    }
    onPress == null ? void 0 : onPress(e);
  };
  const buttonRef = useDOMRef(ref);
  const {
    buttonProps,
    isPressed
  } = $701a24aa0da5b062$export$ea18c227d4417cc3({
    ...btnProps,
    isDisabled: disabled,
    elementType: as,
    onPress: handlePress,
    onPressStart,
    onPressEnd,
    onPressChange,
    onPressUp
  }, buttonRef);
  const {
    hoverProps,
    isHovered
  } = interactions_dist_module_$6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled: disabled
  });
  const {
    isFocused,
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    autoFocus
  });
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = src_use_drip(false, buttonRef);

  /* eslint-enable @typescript-eslint/no-unused-vars */
  if (__DEV__ && filteredProps.color === "gradient" && (flat || light)) {
    warn("Using the gradient color on flat and light buttons will have no effect.");
  }
  const hasIcon = icon || iconRight;
  const isChildLess = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) === 0;
  const isRight = Boolean(iconRight);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isPressed) return "pressed";
    if (isHovered) return "hovered";
    return disabled ? "disabled" : "ready";
  }, [disabled, isHovered, isPressed]);
  const getIconCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isRight) return iconRightCss;
    return iconLeftCss;
  }, [isRight, iconRightCss, iconLeftCss]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_styles, {
    ref: buttonRef,
    animated: animated,
    as: as,
    auto: auto,
    borderWeight: borderWeight,
    bordered: bordered || ghost,
    className: clsx("nextui-button", `nextui-button--${getState}`, className),
    css: {
      ...css,
      ...cssColors
    },
    "data-state": getState,
    flat: flat,
    ghost: ghost,
    isChildLess: isChildLess,
    isFocusVisible: isFocusVisible && !disabled,
    isHovered: isHovered || ghost && isFocused,
    isPressed: isPressed,
    light: light,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(buttonProps, focusProps, hoverProps, otherProps),
    children: [external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) === 0 ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_icon, {
      isSingle: true,
      css: getIconCss,
      isAuto: auto,
      isGradientButtonBorder: props.color === "gradient" && (bordered || ghost),
      isRight: isRight,
      children: hasIcon
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 189,
      columnNumber: 9
    }, undefined) : hasIcon ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_icon, {
        css: getIconCss,
        isAuto: auto,
        isGradientButtonBorder: props.color === "gradient" && (bordered || ghost),
        isRight: isRight,
        isSingle: false,
        children: hasIcon
      }, void 0, false, {
        fileName: button_jsxFileName,
        lineNumber: 200,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
        className: clsx("nextui-button-text", {
          "nextui-button-text-right": isRight,
          "nextui-button-text-left": !isRight
        }),
        children: children
      }, void 0, false, {
        fileName: button_jsxFileName,
        lineNumber: 209,
        columnNumber: 11
      }, undefined)]
    }, void 0, true) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-button-text",
      children: children
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 219,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(drip, {
      className: "nextui-button-drip",
      color: "white",
      ...dripBindings
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 221,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: button_jsxFileName,
    lineNumber: 169,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Button.displayName = "NextUI.Button";
}
Button.toString = () => ".nextui-button";
/* harmony default export */ const button_button = (with_defaults(Button, button_defaultProps));
;// CONCATENATED MODULE: ./src/button/button-group.styles.ts


const StyledButtonGroup = styled("div", {
  display: "inline-flex",
  margin: "$3",
  backgroundColor: "transparent",
  height: "min-content",
  [`& ${button_styles}`]: {
    ".nextui-button-text": {
      top: 0
    }
  },
  variants: {
    vertical: {
      true: {
        fd: "column",
        [`& ${button_styles}`]: {
          "&:not(:first-child)": {
            btlr: 0,
            // top-left
            btrr: 0 // top-right
          },

          "&:not(:last-child)": {
            bblr: 0,
            bbrr: 0
          }
        }
      },
      false: {
        fd: "row",
        [`& ${button_styles}`]: {
          "&:not(:first-child)": {
            btlr: 0,
            // top-left
            bblr: 0 // bottom-left
          },

          "&:not(:last-child)": {
            btrr: 0,
            // top-right
            bbrr: 0 // bottom-right
          }
        }
      }
    },

    size: {
      xs: {
        br: "$xs"
      },
      sm: {
        br: "$sm"
      },
      md: {
        br: "$md"
      },
      lg: {
        br: "$base"
      },
      xl: {
        br: "$xl"
      }
    },
    rounded: {
      true: {
        br: "$pill"
      }
    },
    bordered: {
      true: {
        bg: "transparent"
      }
    },
    gradient: {
      true: {
        pl: 0
      }
    }
  },
  defaultVariants: {
    vertical: false
  },
  compoundVariants: [
  // bordered / vertical:true
  {
    bordered: true,
    vertical: true,
    css: {
      [`& ${button_styles}`]: {
        "&:not(:last-child)": {
          borderBottom: "none",
          paddingBottom: "0"
        }
      }
    }
  },
  // bordered / vertical:false
  {
    bordered: true,
    vertical: false,
    css: {
      [`& ${button_styles}`]: {
        "&:not(:first-child)": {
          borderLeft: "none"
        }
      }
    }
  },
  // bordered & vertical:false & gradient
  {
    bordered: true,
    vertical: false,
    gradient: true,
    css: {
      [`& ${button_styles}`]: {
        "&:not(:last-child)&:not(:first-child)": {
          pl: 0
        },
        "&:last-child": {
          pl: 0
        }
      }
    }
  }]
});
/* harmony default export */ const button_group_styles = (StyledButtonGroup);
;// CONCATENATED MODULE: ./src/button/button-group.tsx
var button_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button-group.tsx";





const button_group_defaultProps = {
  borderWeight: "normal",
  size: "md",
  color: "default"
};
const ButtonGroup = groupProps => {
  const {
    disabled,
    size,
    color,
    bordered,
    ghost,
    light,
    flat,
    shadow,
    auto,
    animated,
    rounded,
    ripple,
    borderWeight,
    children,
    ...props
  } = groupProps;
  const initialValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    disabled,
    size,
    color,
    bordered,
    light,
    ghost,
    flat,
    shadow,
    auto,
    borderWeight,
    animated,
    rounded,
    ripple,
    isButtonGroup: true
  }), [disabled, animated, size, ripple, color, bordered, light, ghost, flat, borderWeight]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(ButtonGroupContext.Provider, {
    value: initialValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_group_styles, {
      bordered: bordered || ghost,
      gradient: groupProps.color === "gradient",
      size: size,
      ...props,
      children: children
    }, void 0, false, {
      fileName: button_group_jsxFileName,
      lineNumber: 81,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: button_group_jsxFileName,
    lineNumber: 80,
    columnNumber: 5
  }, undefined);
};
ButtonGroup.toString = () => ".nextui-button-group";
const MemoButtonGroup = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ButtonGroup);
/* harmony default export */ const button_group = (with_defaults(MemoButtonGroup, button_group_defaultProps));
;// CONCATENATED MODULE: ./src/button/index.ts





button_button.Group = button_group;
/* harmony default export */ const src_button = (button_button);
;// CONCATENATED MODULE: ./src/image/image.styles.ts

const loading = keyframes({
  "0%": {
    backgroundPosition: "200% 0"
  },
  to: {
    backgroundPosition: "-200% 0"
  }
});
const StyledImageContainer = styled("div", {
  opacity: 0,
  margin: "0 auto",
  position: "relative",
  overflow: "hidden",
  maxWidth: "100%",
  transition: "transform 250ms ease 0ms, opacity 200ms ease-in 0ms",
  "@motion": {
    transition: "none"
  },
  variants: {
    ready: {
      true: {
        opacity: 1
      },
      false: {
        opacity: 0
      }
    }
  }
});
const StyledImage = styled("img", {
  size: "100%",
  display: "block"
});
const StyledImageSkeleton = styled("div", {
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: "100%",
  borderRadius: "inherit",
  backgroundImage: "linear-gradient(270deg, $colors$accents1, $colors$accents2, $colors$accents2, $colors$accents1)",
  backgroundSize: "400% 100%",
  animation: `${loading} 5s ease-in-out infinite`,
  transition: "opacity 300ms ease-out"
});
;// CONCATENATED MODULE: ./src/image/image.skeleton.tsx
var image_skeleton_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/image/image.skeleton.tsx";






const image_skeleton_defaultProps = {
  opacity: 0.5,
  className: ""
};
const ImageSkeleton = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(({
  opacity,
  css,
  className,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImageSkeleton, {
    className: clsx("nextui-image-skeleton", className),
    css: {
      opacity,
      ...css
    },
    ...props
  }, void 0, false, {
    fileName: image_skeleton_jsxFileName,
    lineNumber: 28,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  ImageSkeleton.displayName = "NextUI.ImageSkeleton";
}
ImageSkeleton.toString = () => ".nextui-image-skeleton";
/* harmony default export */ const image_skeleton = (with_defaults(ImageSkeleton, image_skeleton_defaultProps));
;// CONCATENATED MODULE: ./src/image/image.tsx
var image_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/image/image.tsx";










const Image = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    src,
    width,
    height,
    showSkeleton: showSkeletonProp = true,
    className,
    maxDelay = 3000,
    autoResize = false,
    objectFit = "scale-down",
    containerCss,
    css,
    ...otherProps
  } = props;
  const imageRef = useDOMRef(ref);
  const [loading, setLoading] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(true);
  const [showSkeleton, setShowSkeleton] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(showSkeletonProp);
  const {
    w,
    h
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      w: width ? typeof width === "number" ? `${width}px` : width : "auto",
      h: height ? typeof height === "number" ? `${height}px` : height : "auto"
    };
  }, [width, height]);
  const [zoomHeight, setZoomHeight, zoomHeightRef] = src_use_current_state(h);
  const [shape, updateShape] = src_use_real_shape(imageRef);
  const showAnimation = showSkeletonProp && !!width && !!height;
  const onImageLoaded = () => {
    setLoading(false);
  };
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!imageRef.current) return;
    if (imageRef.current.complete) {
      setLoading(false);
      setShowSkeleton(false);
    }
  });
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const timer = setTimeout(() => {
      if (showAnimation) {
        setShowSkeleton(false);
      }
      clearTimeout(timer);
    }, maxDelay);
    return () => clearTimeout(timer);
  }, [loading]);

  /**
   * On mobile devices, the render witdth may be less than CSS width value.
   * If the image is scaled, set the height manually.
   * This is to ensure the aspect ratio of the image.
   *
   * If the image is auto width, ignore all.
   */
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!autoResize) return;
    const notLoaded = shape.width === 0;
    const isAutoZoom = zoomHeightRef.current === "auto";
    if (notLoaded || !width || !height) return;
    if (shape.width < width) {
      !isAutoZoom && setZoomHeight("auto");
    } else {
      isAutoZoom && setZoomHeight(h);
    }
  }, [shape, width]);
  src_use_resize(() => {
    if (!autoResize) return;
    updateShape();
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return loading ? "loading" : "ready";
  }, [loading]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImageContainer, {
    className: clsx("nextui-image-container", `nextui-image--${getState}`, className),
    css: {
      width: w,
      height: zoomHeight,
      ...containerCss
    },
    "data-state": getState,
    ready: !loading || showSkeleton,
    children: [showSkeleton && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(image_skeleton, {
      opacity: 1
    }, void 0, false, {
      fileName: image_jsxFileName,
      lineNumber: 126,
      columnNumber: 24
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImage, {
      ref: imageRef,
      alt: props.alt || "",
      className: "nextui-image",
      css: {
        objectFit,
        ...css
      },
      "data-state": getState,
      height: height,
      src: src,
      width: width,
      onLoad: onImageLoaded,
      ...otherProps
    }, void 0, false, {
      fileName: image_jsxFileName,
      lineNumber: 127,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: image_jsxFileName,
    lineNumber: 120,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Image.displayName = "NextUI.Image";
}
Image.toString = () => ".nextui-image";
/* harmony default export */ const image_image = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Image));
;// CONCATENATED MODULE: ./src/image/index.ts


/* harmony default export */ const src_image = (image_image);
;// CONCATENATED MODULE: ./src/utils/dimensions.ts
const getMargin = num => {
  return `calc(${num * 15.25}pt + 1px * ${num - 1})`;
};
;// CONCATENATED MODULE: ./src/divider/divider.styles.ts

const StyledDivider = styled("div", {
  width: "100%",
  maxWidth: "100%",
  position: "relative",
  variants: {
    color: {
      default: {
        bg: "$border"
      },
      primary: {
        bg: "$primary"
      },
      secondary: {
        bg: "$secondary"
      },
      success: {
        bg: "$success"
      },
      warning: {
        bg: "$warning"
      },
      error: {
        bg: "$error"
      }
    }
  },
  defaultVariants: {
    color: "default"
  }
});
const StyledDividerText = styled("span", {
  position: "absolute",
  left: "50%",
  top: "50%",
  minHeight: "100%",
  display: "inline-flex",
  jc: "center",
  ai: "center",
  transform: "translate(-50%, -50%)",
  padding: "0 $lg",
  fontSize: "$base",
  fontWeight: "bold",
  textTransform: "capitalize",
  backgroundColor: "$background",
  zIndex: "$1",
  variants: {
    color: {
      default: {
        color: "$text"
      },
      primary: {
        color: "$primary"
      },
      secondary: {
        color: "$secondary"
      },
      success: {
        color: "$success"
      },
      warning: {
        color: "$warning"
      },
      error: {
        color: "$error"
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/divider/divider.tsx
var divider_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/divider/divider.tsx";





const divider_defaultProps = {
  x: 0,
  y: 0,
  height: 1,
  align: "center"
};
const Divider = ({
  height,
  x,
  y,
  align,
  children,
  textColor,
  css,
  ...props
}) => {
  const alignCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!align || align === "center") return;
    if (align === "left" || align === "start") {
      return {
        transform: "translateY(-50%)",
        left: "7%"
      };
    }
    return {
      transform: "translateY(-50%)",
      left: "auto",
      right: "7%"
    };
  }, [align]);
  const top = y ? getMargin(y / 2) : 0;
  const left = x ? getMargin(x / 2) : 0;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDivider, {
    css: {
      margin: `${top} ${left}`,
      height: `calc(${height} * 1px)`,
      ...css
    },
    role: "separator",
    ...props,
    children: children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDividerText, {
      className: "nextui-divider-text",
      color: textColor,
      css: {
        ...alignCss
      },
      children: children
    }, void 0, false, {
      fileName: divider_jsxFileName,
      lineNumber: 69,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: divider_jsxFileName,
    lineNumber: 59,
    columnNumber: 5
  }, undefined);
};
Divider.toString = () => ".nextui-divider";
const MemoDivider = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Divider);
/* harmony default export */ const divider = (with_defaults(MemoDivider, divider_defaultProps));
;// CONCATENATED MODULE: ./src/divider/index.ts


/* harmony default export */ const src_divider = (divider);
;// CONCATENATED MODULE: ./src/card/use-card.ts






/**
 * @internal
 */
const useCard = props => {
  const {
    ref,
    disableAnimation = false,
    disableRipple = false,
    variant = "shadow",
    isHoverable = false,
    borderWeight = "light",
    isPressable = false,
    onClick,
    onPress,
    autoFocus,
    allowTextSelectionOnPress = true,
    ...otherProps
  } = props;
  const cardRef = useDOMRef(ref);
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = src_use_drip(false, cardRef);
  const handleDrip = e => {
    if (!disableAnimation && !disableRipple && cardRef.current) {
      onDripClickHandler(e);
    }
  };
  const handleClick = e => {
    if (!isPressable) {
      return;
    }
    handleDrip(e);
    onClick == null ? void 0 : onClick(e);
  };
  const handlePress = e => {
    if (e.pointerType === "keyboard" || e.pointerType === "virtual") {
      handleDrip(e);
      // TODO: take this out and deprecate onClick function for next release (only use the @react-aria/button impl)
      onClick == null ? void 0 : onClick(e);
    }
    onPress == null ? void 0 : onPress(e);
  };
  const {
    isPressed,
    pressProps
  } = interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: !isPressable,
    onPress: handlePress,
    allowTextSelectionOnPress,
    ...otherProps
  });
  const {
    hoverProps,
    isHovered
  } = interactions_dist_module_$6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled: !isHoverable,
    ...otherProps
  });
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    autoFocus
  });
  pressProps.onClick = handleClick;
  const getCardProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((props = {}) => {
    return {
      ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(isPressable ? {
        ...pressProps,
        ...focusProps
      } : {}, isHoverable ? hoverProps : {}, otherProps, props)
    };
  }, [isPressable, isHoverable, pressProps, focusProps, hoverProps, otherProps]);
  return {
    cardRef,
    variant,
    borderWeight,
    isPressable,
    isHovered,
    isPressed,
    disableAnimation,
    disableRipple,
    dripBindings,
    onDripClickHandler,
    isFocusVisible,
    getCardProps
  };
};
;// CONCATENATED MODULE: ./src/card/card.styles.ts



const StyledCardBody = styled("div", {
  d: "flex",
  w: "100%",
  h: "auto",
  flex: "1 1 auto",
  fd: "column",
  jc: "inherit",
  ai: "inherit",
  ac: "inherit",
  py: "$lg",
  px: "$sm",
  oy: "auto",
  position: "relative",
  ta: "left"
});
const StyledCard = styled("div", {
  $$cardColor: "$colors$backgroundContrast",
  $$cardTextColor: "$colors$text",
  m: 0,
  p: 0,
  br: "$lg",
  bg: "$$cardColor",
  color: "$$cardTextColor",
  position: "relative",
  display: "flex",
  overflow: "hidden",
  fd: "column",
  width: "100%",
  height: "auto",
  boxSizing: "border-box",
  "@motion": {
    transition: "none"
  },
  ".nextui-image": {
    width: "100%"
  },
  [`& ${StyledDrip}`]: {
    zIndex: "$1",
    ".nextui-drip-filler": {
      opacity: 0.25,
      fill: "$accents6"
    }
  },
  variants: {
    variant: {
      flat: {
        bg: "$accents0"
      },
      shadow: {
        dropShadow: "$lg",
        "@safari": {
          boxShadow: "$lg",
          dropShadow: "none"
        },
        // firefox
        "@-moz-document url-prefix()": {
          boxShadow: "$lg",
          dropShadow: "none"
        }
      },
      bordered: {
        borderStyle: "solid",
        borderColor: "$border"
      }
    },
    borderWeight: {
      light: {
        bw: "$light"
      },
      normal: {
        bw: "$normal"
      },
      bold: {
        bw: "$bold"
      },
      extrabold: {
        bw: "$extrabold"
      },
      black: {
        bw: "$black"
      }
    },
    disableAnimation: {
      true: {
        transition: "none"
      },
      false: {
        transition: "$card"
      }
    },
    isPressable: {
      true: {
        cursor: "pointer",
        us: "none",
        WebkitTapHighlightColor: "transparent"
      }
    },
    isPressed: {
      true: {}
    },
    isHovered: {
      true: {
        dropShadow: "$lg",
        "@safari": {
          boxShadow: "$lg",
          dropShadow: "none"
        },
        // firefox
        "@-moz-document url-prefix()": {
          boxShadow: "$lg",
          dropShadow: "none"
        }
      }
    }
  },
  compoundVariants: [
  //  isPreseed && !disableAnimation
  {
    isPressed: true,
    disableAnimation: false,
    css: {
      transform: "scale(0.97)"
    }
  },
  // isHovered && !disableAnimation
  {
    isHovered: true,
    disableAnimation: false,
    css: {
      transform: "translateY(-2px)"
    }
  },
  // isHovered && variant === 'shadow'
  {
    isHovered: true,
    variant: "shadow",
    css: {
      dropShadow: "$xl",
      "@safari": {
        boxShadow: "$xl",
        dropShadow: "none"
      },
      // firefox
      "@-moz-document url-prefix()": {
        boxShadow: "$xl",
        dropShadow: "none"
      }
    }
  }]
}, cssNoBlurriness, cssFocusVisible);
const StyledCardHeader = styled("div", {
  w: "100%",
  display: "flex",
  flexShrink: 0,
  zIndex: "$1",
  jc: "flex-start",
  ai: "center",
  overflow: "hidden",
  color: "inherit",
  p: "$sm"
});
const StyledCardFooter = styled("div", {
  w: "100%",
  h: "auto",
  p: "$sm",
  d: "flex",
  ai: "center",
  overflow: "hidden",
  color: "inherit",
  bblr: "$lg",
  bbrr: "$lg",
  variants: {
    isBlurred: {
      true: {
        bf: "saturate(180%) blur(10px)",
        bg: "$$cardColor"
      }
    }
  }
});

// types
;// CONCATENATED MODULE: ./src/card/card.tsx
var card_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/card/card.tsx";






const Card = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  ...cardProps
}, ref) => {
  const {
    as,
    css,
    children,
    ...otherProps
  } = cardProps;
  const {
    cardRef,
    variant,
    isFocusVisible,
    isPressable,
    isPressed,
    disableAnimation,
    disableRipple,
    borderWeight,
    isHovered,
    getCardProps,
    dripBindings
  } = useCard({
    ...otherProps,
    ref
  });
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCard, {
    ref: cardRef,
    as: as,
    borderWeight: borderWeight,
    css: css,
    disableAnimation: disableAnimation,
    isFocusVisible: isFocusVisible,
    isHovered: isHovered,
    isPressable: isPressable,
    isPressed: isPressed,
    role: isPressable ? "button" : "section",
    tabIndex: isPressable ? 0 : -1,
    variant: variant,
    ...getCardProps(),
    children: [isPressable && !disableAnimation && !disableRipple && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(drip, {
      ...dripBindings
    }, void 0, false, {
      fileName: card_jsxFileName,
      lineNumber: 60,
      columnNumber: 64
    }, undefined), children]
  }, void 0, true, {
    fileName: card_jsxFileName,
    lineNumber: 45,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  Card.displayName = "NextUI.Card";
}
Card.toString = () => ".nextui-card";
/* harmony default export */ const card = (Card);
;// CONCATENATED MODULE: ./src/card/index.ts





card.Header = StyledCardHeader;
card.Body = StyledCardBody;
card.Footer = StyledCardFooter;
card.Image = src_image;
card.Divider = src_divider;
/* harmony default export */ const src_card = (card);
;// CONCATENATED MODULE: ./node_modules/@react-aria/visually-hidden/node_modules/@react-aria/utils/dist/module.js





/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).useLayoutEffect : () => {};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function node_modules_react_aria_utils_dist_module_$1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0, $12uGp$useState)(defaultValue);
  let valueRef = (0, $12uGp$useRef)(value);
  let effect = (0, $12uGp$useRef)(null);
  valueRef.current = value;
  // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.
  let nextRef = (0, $12uGp$useRef)(null);
  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next();
    // If the generator is done, reset the effect.
    if (newValue.done) {
      effect.current = null;
      return;
    }
    // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.
    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };
  (0, node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0, $12uGp$useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}
let node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap = new Map();
function node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0, $12uGp$useState)(defaultId);
  let nextId = (0, $12uGp$useRef)(null);
  let res = (0, $12uGp$useSSRSafeId)(value);
  let updateValue = (0, $12uGp$useCallback)(val => {
    nextId.current = val;
  }, []);
  node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  (0, node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let r = res;
    return () => {
      node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  // This cannot cause an infinite loop because the ref is updated first.
  // eslint-disable-next-line
  (0, $12uGp$useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = (0, node_modules_react_aria_utils_dist_module_$1dbecbe27a04f9af$export$14d238f342723f25)(id);
  let updateId = (0, $12uGp$useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : undefined;
    });
  }, [id, setResolvedId]);
  (0, node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Calls all functions in the order they were chained with the same arguments.
    */
function node_modules_react_aria_utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function node_modules_react_aria_utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      // Chain events
      if (typeof a === "function" && typeof b === "function" &&
      // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */65 && key.charCodeAt(2) <= /* 'Z' */90) result[key] = (0, node_modules_react_aria_utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = (0, clsx_m)(a, b);else if (key === "id" && a && b) result.id = (0, node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$cd8c9cb68f842629)(a, b);else result[key] = b !== undefined ? b : a;
    }
  }
  return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$5dc95899b306f630$export$c9058316764c140e(...refs) {
  return value => {
    for (let ref of refs) {
      if (typeof ref === "function") ref(value);else if (ref != null) ref.current = value;
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$DOMPropNames = new Set(["id"]);
const node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$labelablePropNames = new Set(["aria-label", "aria-labelledby", "aria-describedby", "aria-details"]);
const node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};
  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && (node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
  return filteredProps;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if (node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
let node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = null;
function node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScroll() {
  if (node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
      // Ignore
    }
  }
  return node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached;
}
function node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === "horizontal" ? rect.right : rect.bottom;
  return orientation === "horizontal" ? rect.left : rect.top;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement = new Map();
// A list of callbacks to call once there are no transitioning elements.
let node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks = new Set();
function node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = new Set();
      node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
      e.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    // If no transitioning elements, call all of the queued callbacks.
    if (node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks) cb();
      node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener("DOMContentLoaded", node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents);
}
function node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if (node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.
const node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements = (/* unused pure expression or super */ null && ([]));
function node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;
  let getPosition = e => orientation === "horizontal" ? e.clientX : e.clientY;
  let getNextOffset = e => {
    let containerOffset = (0, node_modules_react_aria_utils_dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };
  let dragging = (0, $12uGp$useRef)(false);
  let prevPosition = (0, $12uGp$useRef)(0);
  // Keep track of the current handlers in a ref so that the events can access them.
  let handlers = (0, $12uGp$useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;
  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);
    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }
    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };
  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.splice(node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener("mouseup", onMouseUp, false);
    window.removeEventListener("mousemove", onMouseDragged, false);
  };
  let onMouseDown = e => {
    const target = e.currentTarget;
    // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.
    if (node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener("mousemove", onMouseDragged, false);
    window.addEventListener("mouseup", onMouseUp, false);
  };
  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };
  let onMouseOut = () => {
    if (onHover) onHover(false);
  };
  let onKeyDown = e => {
    switch (e.key) {
      case "Left":
      case "ArrowLeft":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Up":
      case "ArrowUp":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Right":
      case "ArrowRight":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Down":
      case "ArrowDown":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Home":
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;
      case "End":
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;
      case "Enter":
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };
  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, $12uGp$useRef)(new Map());
  let addGlobalListener = (0, $12uGp$useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0, $12uGp$useCallback)((eventTarget, type, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, $12uGp$useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]);
  // eslint-disable-next-line arrow-body-style
  (0, $12uGp$useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  } = props;
  // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.
  id = (0, node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)(id);
  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(" ");
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  // If no labels are provided, use the default
  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function node_modules_react_aria_utils_dist_module_$df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, $12uGp$useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */
  (0, node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === "function") forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0, $12uGp$useRef)(true);
  (0, $12uGp$useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}
function node_modules_react_aria_utils_dist_module_$9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function node_modules_react_aria_utils_dist_module_$9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0, $12uGp$useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;
    if (!node_modules_react_aria_utils_dist_module_$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !node_modules_react_aria_utils_dist_module_$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function node_modules_react_aria_utils_dist_module_$62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// @ts-ignore
let node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size, setSize] = (0, $12uGp$useState)(() => node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize());
  (0, $12uGp$useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };
    if (!node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport) window.addEventListener("resize", onResize);else node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      if (!node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport) window.removeEventListener("resize", onResize);else node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, []);
  return size;
}
function node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: (node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === null || node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: (node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === null || node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionId = 0;
const node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes = new Map();
function node_modules_react_aria_utils_dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id, setId] = (0, $12uGp$useState)(undefined);
  (0, node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!description) return;
    let desc = node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id = `react-aria-description-${node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement("div");
      node.id = id;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    "aria-describedby": description ? id : undefined
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() {
  return node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$186c6964ca17d99() {
  return node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$7bef049ce92e4224() {
  return node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^iPad/i) ||
  // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1() {
  return node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$186c6964ca17d99() || node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$7bef049ce92e4224();
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$e1865c3bedcd822b() {
  return node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() || node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1();
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$78551043582a6a98() {
  return node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$6446a186d09e379e();
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$6446a186d09e379e() {
  return node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8() {
  return node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/Android/i);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
  let handlerRef = (0, $12uGp$useRef)(handler);
  handlerRef.current = handler;
  let isDisabled = handler == null;
  (0, $12uGp$useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;
    let handler = e => handlerRef.current.call(this, e);
    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Scrolls `scrollView` so that `element` is visible.
    * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),
    * but doesn't affect parents above `scrollView`.
    */
function node_modules_react_aria_utils_dist_module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = node_modules_react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = node_modules_react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */
function node_modules_react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function node_modules_react_aria_utils_dist_module_$6a7db85432448f7f$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
  // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
  // to detect TalkBack virtual clicks.
  if ((0, node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function node_modules_react_aria_utils_dist_module_$6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
  // Talkback double tap from Windows Firefox touch screen press
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/visually-hidden/node_modules/@react-aria/interactions/dist/module.js



/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually
let _react_aria_interactions_dist_module_$14c0b72509d70225$var$state = "default";
let _react_aria_interactions_dist_module_$14c0b72509d70225$var$savedUserSelect = "";
let _react_aria_interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap = new WeakMap();
function _react_aria_interactions_dist_module_$14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, $bx7SL$isIOS)()) {
    if (_react_aria_interactions_dist_module_$14c0b72509d70225$var$state === "default") {
      _react_aria_interactions_dist_module_$14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = "none";
    }
    _react_aria_interactions_dist_module_$14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    // If not iOS, store the target's original user-select and change to user-select: none
    // Ignore state since it doesn't apply for non iOS
    _react_aria_interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = "none";
  }
}
function _react_aria_interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, $bx7SL$isIOS)()) {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if (_react_aria_interactions_dist_module_$14c0b72509d70225$var$state !== "disabled") return;
    _react_aria_interactions_dist_module_$14c0b72509d70225$var$state = "restoring";
    // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.
    setTimeout(() => {
      // Wait for any CSS transitions to complete so we don't recompute style
      // for the whole page in the middle of the animation and cause jank.
      (0, $bx7SL$runAfterTransition)(() => {
        // Avoid race conditions
        if (_react_aria_interactions_dist_module_$14c0b72509d70225$var$state === "restoring") {
          if (document.documentElement.style.webkitUserSelect === "none") document.documentElement.style.webkitUserSelect = _react_aria_interactions_dist_module_$14c0b72509d70225$var$savedUserSelect || "";
          _react_aria_interactions_dist_module_$14c0b72509d70225$var$savedUserSelect = "";
          _react_aria_interactions_dist_module_$14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement)
    // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    {
      if (target && _react_aria_interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap.has(target)) {
        let targetOldUserSelect = _react_aria_interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap.get(target);
        if (target.style.userSelect === "none") target.style.userSelect = targetOldUserSelect;
        if (target.getAttribute("style") === "") target.removeAttribute("style");
        _react_aria_interactions_dist_module_$14c0b72509d70225$var$modifiedElementMap.delete(target);
      }
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const _react_aria_interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(null);
_react_aria_interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$usePressResponderContext(props) {
  // Consume context from <PressResponder> and merge with props.
  let context = (0, $bx7SL$useContext)((0, _react_aria_interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context) {
    let {
      register: register,
      ...contextProps
    } = context;
    props = (0, $bx7SL$mergeProps)(contextProps, props);
    register();
  }
  (0, $bx7SL$useSyncRef)(context, props.ref);
  return props;
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress: onPress,
    onPressChange: onPressChange,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressUp: onPressUp,
    isDisabled: isDisabled,
    isPressed: isPressedProp,
    preventFocusOnPress: preventFocusOnPress,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit,
    allowTextSelectionOnPress: allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$usePressResponderContext(props);
  let propsRef = (0, $bx7SL$useRef)(null);
  propsRef.current = {
    onPress: onPress,
    onPressChange: onPressChange,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressUp: onPressUp,
    isDisabled: isDisabled,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0, $bx7SL$useState)(false);
  let ref = (0, $bx7SL$useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  } = (0, $bx7SL$useGlobalListeners)();
  let pressProps = (0, $bx7SL$useMemo)(() => {
    let state = ref.current;
    let triggerPressStart = (originalEvent, pointerType) => {
      let {
        onPressStart: onPressStart,
        onPressChange: onPressChange,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled || state.didFirePressStart) return;
      if (onPressStart) onPressStart({
        type: "pressstart",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(true);
      state.didFirePressStart = true;
      setPressed(true);
    };
    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
      let {
        onPressEnd: onPressEnd,
        onPressChange: onPressChange,
        onPress: onPress,
        isDisabled: isDisabled
      } = propsRef.current;
      if (!state.didFirePressStart) return;
      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;
      if (onPressEnd) onPressEnd({
        type: "pressend",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(false);
      setPressed(false);
      if (onPress && wasPressed && !isDisabled) onPress({
        type: "press",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let triggerPressUp = (originalEvent, pointerType) => {
      let {
        onPressUp: onPressUp,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled) return;
      if (onPressUp) onPressUp({
        type: "pressup",
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let cancel = e => {
      if (state.isPressed) {
        if (state.isOverTarget) triggerPressEnd(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();
        if (!allowTextSelectionOnPress) (0, _react_aria_interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
      }
    };
    let pressProps = {
      onKeyDown(e) {
        if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
          if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
          e.stopPropagation();
          // If the event is repeating, it may have started on a different element
          // after which focus moved to the current element. Ignore these events and
          // only handle the first key down event.
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, "keyboard");
            // Focus may move before the key up event, so register the event on the document
            // instead of the same element where the key down event occurred.
            addGlobalListener(document, "keyup", onKeyUp, false);
          }
        } else if (e.key === "Enter" && _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget))
          // If the target is a link, we won't have handled this above because we want the default
          // browser behavior to open the link when pressing Enter. But we still need to prevent
          // default so that elements above do not also handle it (e.g. table row).
          e.stopPropagation();
      },
      onKeyUp(e) {
        if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard");
      },
      onClick(e) {
        if (e && !e.currentTarget.contains(e.target)) return;
        if (e && e.button === 0) {
          e.stopPropagation();
          if (isDisabled) e.preventDefault();
          // If triggered from a screen reader or by using element.click(),
          // trigger as if it were a keyboard click.
          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || (0, $bx7SL$isVirtualClick)(e.nativeEvent))) {
            // Ensure the element receives focus (VoiceOver on iOS does not do this)
            if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
            triggerPressStart(e, "virtual");
            triggerPressUp(e, "virtual");
            triggerPressEnd(e, "virtual");
          }
          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }
    };
    let onKeyUp = e => {
      if (state.isPressed && _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", state.target.contains(target));
        removeAllGlobalListeners();
        // If the target is a link, trigger the click method to open the URL,
        // but defer triggering pressEnd until onClick event handler.
        if (state.target instanceof HTMLElement && state.target.contains(target) && (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link")) state.target.click();
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps.onPointerDown = e => {
        // Only handle left clicks, and ignore events that bubbled through portals.
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
        // Ignore and let the onClick handler take care of it instead.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202
        if ((0, $bx7SL$isVirtualPointerEvent)(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on pointer down and handle focusing the pressable element ourselves.
        if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        state.pointerType = e.pointerType;
        e.stopPropagation();
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
          if (!allowTextSelectionOnPress) (0, _react_aria_interactions_dist_module_$14c0b72509d70225$export$16a4697467175487)(state.target);
          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, "pointermove", onPointerMove, false);
          addGlobalListener(document, "pointerup", onPointerUp, false);
          addGlobalListener(document, "pointercancel", onPointerCancel, false);
        }
      };
      pressProps.onMouseDown = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (e.button === 0) {
          // Chrome and Firefox on touch Windows devices require mouse down events
          // to be canceled in addition to pointer events, or an extra asynchronous
          // focus event will be fired.
          if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
          e.stopPropagation();
        }
      };
      pressProps.onPointerUp = e => {
        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
        if (!e.currentTarget.contains(e.target) || state.pointerType === "virtual") return;
        // Only handle left clicks
        // Safari on iOS sometimes fires pointerup events, even
        // when the touch isn't over the target, so double check.
        if (e.button === 0 && _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
      // Use pointer move events instead to implement our own hit testing.
      // See https://bugs.webkit.org/show_bug.cgi?id=199803
      let onPointerMove = e => {
        if (e.pointerId !== state.activePointerId) return;
        if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress) (0, _react_aria_interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        }
      };
      let onPointerCancel = e => {
        cancel(e);
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.
        cancel(e);
      };
    } else {
      pressProps.onMouseDown = e => {
        // Only handle left clicks
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
        // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on mouse down and handle focusing the pressable element ourselves.
        if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        e.stopPropagation();
        if (state.ignoreEmulatedMouseEvents) return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = (0, $bx7SL$isVirtualClick)(e.nativeEvent) ? "virtual" : "mouse";
        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, "mouseup", onMouseUp, false);
      };
      pressProps.onMouseEnter = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };
      pressProps.onMouseLeave = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onMouseUp = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);
      };
      let onMouseUp = e => {
        // Only handle left clicks
        if (e.button !== 0) return;
        state.isPressed = false;
        removeAllGlobalListeners();
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if (_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isOverTarget = false;
      };
      pressProps.onTouchStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        let touch = _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = "touch";
        // Due to browser inconsistencies, especially on mobile browsers, we prevent default
        // on the emulated mouse event and handle focusing the pressable element ourselves.
        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);
        if (!allowTextSelectionOnPress) (0, _react_aria_interactions_dist_module_$14c0b72509d70225$export$16a4697467175487)(state.target);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, "scroll", onScroll, true);
      };
      pressProps.onTouchMove = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };
      pressProps.onTouchEnd = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress) (0, _react_aria_interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        removeAllGlobalListeners();
      };
      pressProps.onTouchCancel = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed) cancel(e);
      };
      let onScroll = e => {
        if (state.isPressed && e.target.contains(state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };
      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        cancel(e);
      };
    }
    return pressProps;
  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);
  // Remove user-select: none in case component unmounts immediately after pressStart
  // eslint-disable-next-line arrow-body-style
  (0, $bx7SL$useEffect)(() => {
    return () => {
      if (!allowTextSelectionOnPress)
        // eslint-disable-next-line react-hooks/exhaustive-deps
        (0, _react_aria_interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);
    };
  }, [allowTextSelectionOnPress]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, $bx7SL$mergeProps)(domProps, pressProps)
  };
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const {
    key: key,
    code: code
  } = event;
  const element = currentTarget;
  const role = element.getAttribute("role");
  // Accessibility for keyboards. Space and Enter only.
  // "Spacebar" is for IE 11
  return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (
  // A link with a valid href should be handled natively,
  // unless it also has role='button' and was triggered using Space.
  !_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") &&
  // An element with role='link' should only trigger with Enter key
  !(role === "link" && key !== "Enter");
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const {
    targetTouches: targetTouches
  } = event;
  if (targetTouches.length > 0) return targetTouches[0];
  return null;
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;
  for (let i = 0; i < changedTouches.length; i++) {
    const touch = changedTouches[i];
    if (touch.identifier === pointerId) return touch;
  }
  return null;
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
  // check if they cannot overlap on x axis
  if (a.left > b.right || b.left > a.right) return false;
  // check if they cannot overlap on y axis
  if (a.top > b.bottom || b.top > a.bottom) return false;
  return true;
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$getPointClientRect(point);
  return _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefault(target) {
  // We cannot prevent default if the target is a draggable element.
  return !(target instanceof HTMLElement) || !target.draggable;
}
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !_react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isValidInputKey(target, key);
  if (target instanceof HTMLButtonElement) return target.type !== "submit";
  return true;
}
const _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$nonTextInputTypes = new Set(["checkbox", "radio", "range", "color", "file", "image", "button", "submit", "reset"]);
function _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$isValidInputKey(target, key) {
  // Only space should toggle checkboxes and radios, not enter.
  return target.type === "checkbox" || target.type === "radio" ? key === " " : _react_aria_interactions_dist_module_$f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
const _react_aria_interactions_dist_module_$3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $bx7SL$react).forwardRef(({
  children: children,
  ...props
}, ref) => {
  let newRef = (0, $bx7SL$useRef)();
  ref = ref !== null && ref !== void 0 ? ref : newRef;
  let {
    pressProps: pressProps
  } = (0, _react_aria_interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21)({
    ...props,
    ref: ref
  });
  let child = (0, $bx7SL$react).Children.only(children);
  return /*#__PURE__*/(0, $bx7SL$react).cloneElement(child,
  // @ts-ignore
  {
    ref: ref,
    ...(0, $bx7SL$mergeProps)(child.props, pressProps)
  });
})));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const _react_aria_interactions_dist_module_$f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $bx7SL$react).forwardRef(({
  children: children,
  ...props
}, ref) => {
  let isRegistered = (0, $bx7SL$useRef)(false);
  let prevContext = (0, $bx7SL$useContext)((0, _react_aria_interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  let context = (0, $bx7SL$mergeProps)(prevContext || {}, {
    ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }
  });
  (0, $bx7SL$useSyncRef)(prevContext, ref);
  (0, $bx7SL$useEffect)(() => {
    if (!isRegistered.current) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
  }, []);
  return /*#__PURE__*/(0, $bx7SL$react).createElement((0, _react_aria_interactions_dist_module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context
  }, children);
})));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

class _react_aria_interactions_dist_module_$8a9cb279dc87e130$export$905e7fc544a71f36 {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {}
  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
}
function _react_aria_interactions_dist_module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    onBlur: onBlur,
    observer: null
  });
  stateRef.current.onBlur = onBlur;
  // Clean up MutationObserver on unmount. See below.
  // eslint-disable-next-line arrow-body-style
  (0, node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  // This function is called during a React onFocus event.
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = e => {
        var
          // For backward compatibility, dispatch a (fake) React synthetic event.
          _stateRef_current, _stateRef_current_onBlur;
        stateRef.current.isFocused = false;
        if (target.disabled) (_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 ? void 0 : _stateRef_current_onBlur.call(_stateRef_current, new _react_aria_interactions_dist_module_$8a9cb279dc87e130$export$905e7fc544a71f36("blur", e));
        // We no longer need the MutationObserver once the target is blurred.
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          stateRef.current.observer.disconnect();
          target.dispatchEvent(new FocusEvent("blur"));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: ["disabled"]
      });
    }
  }, []);
}
function _react_aria_interactions_dist_module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let {
    isDisabled: isDisabled,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    onFocusChange: onFocusChange
  } = props;
  const onBlur = (0, $bx7SL$useCallback)(e => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [onBlurProp, onFocusChange]);
  const onSyntheticFocus = (0, _react_aria_interactions_dist_module_$8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  const onFocus = (0, $bx7SL$useCallback)(e => {
    if (e.target === e.currentTarget) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [onFocusChange, onFocusProp, onSyntheticFocus]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

let _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality = null;
let _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers = new Set();
let _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
let _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
// Only Tab or Esc keys will make focus visible on text input elements
const _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$isValidKey(e) {
  // Control and Shift keys trigger when navigating back to the tab with keyboard.
  return !(e.metaKey || !(0, node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if (_react_aria_interactions_dist_module_$507fabe10e71c6fb$var$isValidKey(e)) {
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality = "keyboard";
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent(e) {
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, node_modules_react_aria_utils_dist_module_$6a7db85432448f7f$export$60278871457622de)(e)) {
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleFocusEvent(e) {
  // Firefox fires two extra focus events when the user first clicks into an iframe:
  // first on the window, then on the document. We ignore these events so they don't
  // cause keyboard focus rings to appear.
  if (e.target === window || e.target === document) return;
  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
  if (!_react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus && !_react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality = "virtual";
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleWindowBlur() {
  // When the window is blurred, reset state. This is necessary when tabbing out of the window,
  // for example, since a subsequent focus event won't be fired.
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === "undefined" || _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners) return;
  // Programmatic focus() calls shouldn't affect the current input modality.
  // However, we need to detect other cases when a focus event occurs without
  // a preceding user event (e.g. screen reader focus). Overriding the focus
  // method on HTMLElement.prototype is a bit hacky, but works.
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function () {
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  document.addEventListener("keydown", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("keyup", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("click", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleClickEvent, true);
  // Register focus events on the window so they are sure to happen
  // before React's event listeners (registered on the document).
  window.addEventListener("focus", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener("blur", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointermove", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointerup", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener("mousedown", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mousemove", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mouseup", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener("DOMContentLoaded", _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents);
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality !== "pointer";
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality;
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality = modality;
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$export$98e20ec92f614cfe() {
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = (0, $bx7SL$useState)(_react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality);
  (0, $bx7SL$useEffect)(() => {
    let handler = () => {
      setModality(_react_aria_interactions_dist_module_$507fabe10e71c6fb$var$currentModality);
    };
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !_react_aria_interactions_dist_module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
  let {
    isTextInput: isTextInput,
    autoFocus: autoFocus
  } = props;
  let [isFocusVisibleState, setFocusVisible] = (0, $bx7SL$useState)(autoFocus || _react_aria_interactions_dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {
    setFocusVisible(isFocusVisible);
  }, [isTextInput], {
    isTextInput: isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}
function _react_aria_interactions_dist_module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0, $bx7SL$useEffect)(() => {
    let handler = (modality, e) => {
      if (!_react_aria_interactions_dist_module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;
      fn(_react_aria_interactions_dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      _react_aria_interactions_dist_module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

function _react_aria_interactions_dist_module_$9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let {
    isDisabled: isDisabled,
    onBlurWithin: onBlurWithin,
    onFocusWithin: onFocusWithin,
    onFocusWithinChange: onFocusWithinChange
  } = props;
  let state = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocusWithin: false
  });
  let onBlur = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
    // when moving focus inside the element. Only trigger if the currentTarget doesn't
    // include the relatedTarget (where focus is moving).
    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.current.isFocusWithin = false;
      if (onBlurWithin) onBlurWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(false);
    }
  }, [onBlurWithin, onFocusWithinChange, state]);
  let onSyntheticFocus = (0, _react_aria_interactions_dist_module_$8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  let onFocus = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    if (!state.current.isFocusWithin) {
      if (onFocusWithin) onFocusWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(true);
      state.current.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);
  if (isDisabled) return {
    focusWithinProps: {
      onFocus: null,
      onBlur: null
    }
  };
  return {
    focusWithinProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

// iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.
let _react_aria_interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let _react_aria_interactions_dist_module_$6179b936705e76d3$var$hoverCount = 0;
function _react_aria_interactions_dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  _react_aria_interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
  // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
  // the distant future because a user previously touched the element.
  setTimeout(() => {
    _react_aria_interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}
function _react_aria_interactions_dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === "touch") _react_aria_interactions_dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function _react_aria_interactions_dist_module_$6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === "undefined") return;
  if (typeof PointerEvent !== "undefined") document.addEventListener("pointerup", _react_aria_interactions_dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener("touchend", _react_aria_interactions_dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  _react_aria_interactions_dist_module_$6179b936705e76d3$var$hoverCount++;
  return () => {
    _react_aria_interactions_dist_module_$6179b936705e76d3$var$hoverCount--;
    if (_react_aria_interactions_dist_module_$6179b936705e76d3$var$hoverCount > 0) return;
    if (typeof PointerEvent !== "undefined") document.removeEventListener("pointerup", _react_aria_interactions_dist_module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener("touchend", _react_aria_interactions_dist_module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}
function _react_aria_interactions_dist_module_$6179b936705e76d3$export$ae780daf29e6d456(props) {
  let {
    onHoverStart: onHoverStart,
    onHoverChange: onHoverChange,
    onHoverEnd: onHoverEnd,
    isDisabled: isDisabled
  } = props;
  let [isHovered, setHovered] = (0, $bx7SL$useState)(false);
  let state = (0, $bx7SL$useRef)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: "",
    target: null
  }).current;
  (0, $bx7SL$useEffect)(_react_aria_interactions_dist_module_$6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let {
    hoverProps: hoverProps,
    triggerHoverEnd: triggerHoverEnd
  } = (0, $bx7SL$useMemo)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target)) return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart) onHoverStart({
        type: "hoverstart",
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(true);
      setHovered(true);
    };
    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = "";
      state.target = null;
      if (pointerType === "touch" || !state.isHovered) return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd) onHoverEnd({
        type: "hoverend",
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(false);
      setHovered(false);
    };
    let hoverProps = {};
    if (typeof PointerEvent !== "undefined") {
      hoverProps.onPointerEnter = e => {
        if (_react_aria_interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse") return;
        triggerHoverStart(e, e.pointerType);
      };
      hoverProps.onPointerLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };
      hoverProps.onMouseEnter = e => {
        if (!state.ignoreEmulatedMouseEvents && !_react_aria_interactions_dist_module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, "mouse");
        state.ignoreEmulatedMouseEvents = false;
      };
      hoverProps.onMouseLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, "mouse");
      };
    }
    return {
      hoverProps: hoverProps,
      triggerHoverEnd: triggerHoverEnd
    };
  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);
  (0, $bx7SL$useEffect)(() => {
    // Call the triggerHoverEnd as soon as isDisabled changes to true
    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
    if (isDisabled) triggerHoverEnd({
      currentTarget: state.target
    }, state.pointerType);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isDisabled]);
  return {
    hoverProps: hoverProps,
    isHovered: isHovered
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

function _react_aria_interactions_dist_module_$e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let {
    ref: ref,
    onInteractOutside: onInteractOutside,
    isDisabled: isDisabled,
    onInteractOutsideStart: onInteractOutsideStart
  } = props;
  let stateRef = (0, $bx7SL$useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside: onInteractOutside,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  (0, $bx7SL$useEffect)(() => {
    if (isDisabled) return;
    let onPointerDown = e => {
      if (_react_aria_interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);
        state.isPointerDown = true;
      }
    };
    // Use pointer events if available. Otherwise, fall back to mouse and touch events.
    if (typeof PointerEvent !== "undefined") {
      let onPointerUp = e => {
        if (state.isPointerDown && state.onInteractOutside && _react_aria_interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      // changing these to capture phase fixed combobox
      document.addEventListener("pointerdown", onPointerDown, true);
      document.addEventListener("pointerup", onPointerUp, true);
      return () => {
        document.removeEventListener("pointerdown", onPointerDown, true);
        document.removeEventListener("pointerup", onPointerUp, true);
      };
    } else {
      let onMouseUp = e => {
        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && _react_aria_interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      let onTouchEnd = e => {
        state.ignoreEmulatedMouseEvents = true;
        if (state.onInteractOutside && state.isPointerDown && _react_aria_interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };
      document.addEventListener("mousedown", onPointerDown, true);
      document.addEventListener("mouseup", onMouseUp, true);
      document.addEventListener("touchstart", onPointerDown, true);
      document.addEventListener("touchend", onTouchEnd, true);
      return () => {
        document.removeEventListener("mousedown", onPointerDown, true);
        document.removeEventListener("mouseup", onMouseUp, true);
        document.removeEventListener("touchstart", onPointerDown, true);
        document.removeEventListener("touchend", onTouchEnd, true);
      };
    }
  }, [ref, state, isDisabled]);
}
function _react_aria_interactions_dist_module_$e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0) return false;
  // if the event target is no longer in the document
  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
  }
  return ref.current && !ref.current.contains(event.target);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
function _react_aria_interactions_dist_module_$93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return;
  let shouldStopPropagation = true;
  return e => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        shouldStopPropagation = false;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}
function _react_aria_interactions_dist_module_$46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, _react_aria_interactions_dist_module_$93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, _react_aria_interactions_dist_module_$93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function _react_aria_interactions_dist_module_$e8a7022cf87cba2a$export$36da96379f79f245(props) {
  let {
    onMoveStart: onMoveStart,
    onMove: onMove,
    onMoveEnd: onMoveEnd
  } = props;
  let state = (0, $bx7SL$useRef)({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = (0, $bx7SL$useGlobalListeners)();
  let moveProps = (0, $bx7SL$useMemo)(() => {
    let moveProps = {};
    let start = () => {
      (0, _react_aria_interactions_dist_module_$14c0b72509d70225$export$16a4697467175487)();
      state.current.didMove = false;
    };
    let move = (originalEvent, pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0) return;
      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
          type: "movestart",
          pointerType: pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }
      onMove({
        type: "move",
        pointerType: pointerType,
        deltaX: deltaX,
        deltaY: deltaY,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let end = (originalEvent, pointerType) => {
      (0, _react_aria_interactions_dist_module_$14c0b72509d70225$export$b0d6fa1ab32e3295)();
      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
        type: "moveend",
        pointerType: pointerType,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    if (typeof PointerEvent === "undefined") {
      let onMouseMove = e => {
        if (e.button === 0) {
          move(e, "mouse", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onMouseUp = e => {
        if (e.button === 0) {
          end(e, "mouse");
          removeGlobalListener(window, "mousemove", onMouseMove, false);
          removeGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      moveProps.onMouseDown = e => {
        if (e.button === 0) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          addGlobalListener(window, "mousemove", onMouseMove, false);
          addGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      let onTouchMove = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          let {
            pageX: pageX,
            pageY: pageY
          } = e.changedTouches[touch];
          move(e, "touch", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: pageX,
            pageY: pageY
          };
        }
      };
      let onTouchEnd = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);
        if (touch >= 0) {
          end(e, "touch");
          state.current.id = null;
          removeGlobalListener(window, "touchmove", onTouchMove);
          removeGlobalListener(window, "touchend", onTouchEnd);
          removeGlobalListener(window, "touchcancel", onTouchEnd);
        }
      };
      moveProps.onTouchStart = e => {
        if (e.changedTouches.length === 0 || state.current.id != null) return;
        let {
          pageX: pageX,
          pageY: pageY,
          identifier: identifier
        } = e.changedTouches[0];
        start();
        e.stopPropagation();
        e.preventDefault();
        state.current.lastPosition = {
          pageX: pageX,
          pageY: pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, "touchmove", onTouchMove, false);
        addGlobalListener(window, "touchend", onTouchEnd, false);
        addGlobalListener(window, "touchcancel", onTouchEnd, false);
      };
    } else {
      let onPointerMove = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || "mouse";
          // Problems with PointerEvent#movementX/movementY:
          // 1. it is always 0 on macOS Safari.
          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };
      let onPointerUp = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || "mouse";
          end(e, pointerType);
          state.current.id = null;
          removeGlobalListener(window, "pointermove", onPointerMove, false);
          removeGlobalListener(window, "pointerup", onPointerUp, false);
          removeGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
      moveProps.onPointerDown = e => {
        if (e.button === 0 && state.current.id == null) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          state.current.id = e.pointerId;
          addGlobalListener(window, "pointermove", onPointerMove, false);
          addGlobalListener(window, "pointerup", onPointerUp, false);
          addGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
    }
    let triggerKeyboardMove = (e, deltaX, deltaY) => {
      start();
      move(e, "keyboard", deltaX, deltaY);
      end(e, "keyboard");
    };
    moveProps.onKeyDown = e => {
      switch (e.key) {
        case "Left":
        case "ArrowLeft":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, -1, 0);
          break;
        case "Right":
        case "ArrowRight":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 1, 0);
          break;
        case "Up":
        case "ArrowUp":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, -1);
          break;
        case "Down":
        case "ArrowDown":
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, 1);
          break;
      }
    };
    return moveProps;
  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);
  return {
    moveProps: moveProps
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function _react_aria_interactions_dist_module_$7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
  let {
    onScroll: onScroll,
    isDisabled: isDisabled
  } = props;
  let onScrollHandler = (0, $bx7SL$useCallback)(e => {
    // If the ctrlKey is pressed, this is a zoom event, do nothing.
    if (e.ctrlKey) return;
    // stop scrolling the page
    e.preventDefault();
    e.stopPropagation();
    if (onScroll) onScroll({
      deltaX: e.deltaX,
      deltaY: e.deltaY
    });
  }, [onScroll]);
  (0, $bx7SL$useEvent)(ref, "wheel", isDisabled ? null : onScrollHandler);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const _react_aria_interactions_dist_module_$8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
function _react_aria_interactions_dist_module_$8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let {
    isDisabled: isDisabled,
    onLongPressStart: onLongPressStart,
    onLongPressEnd: onLongPressEnd,
    onLongPress: onLongPress,
    threshold = _react_aria_interactions_dist_module_$8a26561d2877236e$var$DEFAULT_THRESHOLD,
    accessibilityDescription: accessibilityDescription
  } = props;
  const timeRef = (0, $bx7SL$useRef)(null);
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = (0, $bx7SL$useGlobalListeners)();
  let {
    pressProps: pressProps
  } = (0, _react_aria_interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled,
    onPressStart(e) {
      if (e.pointerType === "mouse" || e.pointerType === "touch") {
        if (onLongPressStart) onLongPressStart({
          ...e,
          type: "longpressstart"
        });
        timeRef.current = setTimeout(() => {
          // Prevent other usePress handlers from also handling this event.
          e.target.dispatchEvent(new PointerEvent("pointercancel", {
            bubbles: true
          }));
          if (onLongPress) onLongPress({
            ...e,
            type: "longpress"
          });
          timeRef.current = null;
        }, threshold);
        // Prevent context menu, which may be opened on long press on touch devices
        if (e.pointerType === "touch") {
          let onContextMenu = e => {
            e.preventDefault();
          };
          addGlobalListener(e.target, "contextmenu", onContextMenu, {
            once: true
          });
          addGlobalListener(window, "pointerup", () => {
            // If no contextmenu event is fired quickly after pointerup, remove the handler
            // so future context menu events outside a long press are not prevented.
            setTimeout(() => {
              removeGlobalListener(e.target, "contextmenu", onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },
    onPressEnd(e) {
      if (timeRef.current) clearTimeout(timeRef.current);
      if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch")) onLongPressEnd({
        ...e,
        type: "longpressend"
      });
    }
  });
  let descriptionProps = (0, $bx7SL$useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: (0, $bx7SL$mergeProps)(pressProps, descriptionProps)
  };
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/visually-hidden/dist/module.js



const module_$5c3e21d68f1c4674$var$styles = {
  border: 0,
  clip: 'rect(0 0 0 0)',
  clipPath: 'inset(50%)',
  height: 1,
  margin: '0 -1px -1px 0',
  overflow: 'hidden',
  padding: 0,
  position: 'absolute',
  width: 1,
  whiteSpace: 'nowrap'
};
function module_$5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
  let {
    style: style,
    isFocusable: isFocusable
  } = props;
  let [isFocused, setFocused] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let {
    focusWithinProps: focusWithinProps
  } = _react_aria_interactions_dist_module_$9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !isFocusable,
    onFocusWithinChange: val => setFocused(val)
  });
  // If focused, don't hide the element.
  let combinedStyles = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isFocused) return style;else if (style) return {
      ...module_$5c3e21d68f1c4674$var$styles,
      ...style
    };else return module_$5c3e21d68f1c4674$var$styles;
  }, [isFocused]);
  return {
    visuallyHiddenProps: {
      ...focusWithinProps,
      style: combinedStyles
    }
  };
}
function module_$5c3e21d68f1c4674$export$439d29a4e110a164(props) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  let {
    children: children,
    elementType: Element = 'div',
    isFocusable: isFocusable,
    style: style,
    ...otherProps
  } = props;
  let {
    visuallyHiddenProps: visuallyHiddenProps
  } = module_$5c3e21d68f1c4674$export$a966af930f325cab(props);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(Element, node_modules_react_aria_utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, visuallyHiddenProps), children);
}

;// CONCATENATED MODULE: ../../node_modules/@react-stately/utils/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
function $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {
  let [stateValue, setStateValue] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(value || defaultValue);
  let ref = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(value !== undefined);
  let wasControlled = ref.current;
  let isControlled = value !== undefined;
  // Internal state reference for useCallback
  let stateRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(stateValue);
  if (wasControlled !== isControlled) console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
  ref.current = isControlled;
  let setValue = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((value, ...args) => {
    let onChangeCaller = (value, ...onChangeArgs) => {
      if (onChange) {
        if (!Object.is(stateRef.current, value)) onChange(value, ...onChangeArgs);
      }
      if (!isControlled) stateRef.current = value;
    };
    if (typeof value === "function") {
      console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates
      // when someone using useControlledState calls setControlledState(myFunc)
      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc
      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning
      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same
      let updateFunction = (oldValue, ...functionArgs) => {
        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);
        onChangeCaller(interceptedValue, ...args);
        if (!isControlled) return interceptedValue;
        return oldValue;
      };
      setStateValue(updateFunction);
    } else {
      if (!isControlled) setStateValue(value);
      onChangeCaller(value, ...args);
    }
  }, [isControlled, onChange]);
  // If a controlled component's value prop changes, we need to update stateRef
  if (isControlled) stateRef.current = value;else value = stateValue;
  return [value, setValue];
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.
    */
function $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
  let newValue = Math.min(Math.max(value, min), max);
  return newValue;
}
function $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {
  let remainder = (value - (isNaN(min) ? 0 : min)) % step;
  let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;
  if (!isNaN(min)) {
    if (snappedValue < min) snappedValue = min;else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;
  } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step;
  // correct floating point behavior by rounding to step precision
  let string = step.toString();
  let index = string.indexOf(".");
  let precision = index >= 0 ? string.length - index : 0;
  if (precision > 0) {
    let pow = Math.pow(10, precision);
    snappedValue = Math.round(snappedValue * pow) / pow;
  }
  return snappedValue;
}
function $9446cca9a3875146$export$b6268554fba451f(value, digits, base = 10) {
  const pow = Math.pow(base, digits);
  return Math.round(value * pow) / pow;
}

;// CONCATENATED MODULE: ./node_modules/@react-stately/toggle/dist/module.js

function $3017fa7ffdddec74$export$8042c6c013fd5226(props = {}) {
  let {
    isReadOnly: isReadOnly
  } = props;
  // have to provide an empty function so useControlledState doesn't throw a fit
  // can't use useControlledState's prop calling because we need the event object from the change
  let [isSelected, setSelected] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.isSelected, props.defaultSelected || false, props.onChange);
  function updateSelected(value) {
    if (!isReadOnly) setSelected(value);
  }
  function toggleState() {
    if (!isReadOnly) setSelected(!isSelected);
  }
  return {
    isSelected: isSelected,
    setSelected: updateSelected,
    toggle: toggleState
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/toggle/dist/module.js




/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */

function $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {
  let {
    isDisabled = false,
    isRequired: isRequired,
    isReadOnly: isReadOnly,
    value: value,
    name: name,
    children: children,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    validationState = "valid"
  } = props;
  let onChange = e => {
    // since we spread props on label, onChange will end up there as well as in here.
    // so we have to stop propagation at the lowest level that we care about
    e.stopPropagation();
    state.setSelected(e.target.checked);
  };
  let hasChildren = children != null;
  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
  if (!hasChildren && !hasAriaLabel) console.warn("If you do not provide children, you must specify an aria-label for accessibility");
  // This handles focusing the input on pointer down, which Safari does not do by default.
  let {
    pressProps: pressProps
  } = (0, dist_module_$f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled
  });
  let {
    focusableProps: focusableProps
  } = (0, module_$e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
  let interactions = (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps);
  let domProps = (0, utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  return {
    inputProps: (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      "aria-invalid": validationState === "invalid" || undefined,
      "aria-errormessage": props["aria-errormessage"],
      "aria-controls": props["aria-controls"],
      "aria-readonly": isReadOnly || undefined,
      "aria-required": isRequired || undefined,
      onChange: onChange,
      disabled: isDisabled,
      ...(value == null ? {} : {
        value: value
      }),
      name: name,
      type: "checkbox",
      ...interactions
    })
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/label/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2021 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ /*
       * Copyright 2020 Adobe. All rights reserved.
       * This file is licensed to you under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License. You may obtain a copy
       * of the License at http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software distributed under
       * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
       * OF ANY KIND, either express or implied. See the License for the specific language
       * governing permissions and limitations under the License.
       */
function $d191a55c9702f145$export$8467354a121f1b9f(props) {
  let {
    id: id,
    label: label,
    "aria-labelledby": ariaLabelledby,
    "aria-label": ariaLabel,
    labelElementType = "label"
  } = props;
  id = (0, utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)(id);
  let labelId = (0, utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)();
  let labelProps = {};
  if (label) {
    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === "label" ? id : undefined
    };
  } else if (!ariaLabelledby && !ariaLabel) console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility");
  let fieldProps = (0, utils_dist_module_$313b98861ee5dd6c$export$d6875122194c7b44)({
    id: id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby
  });
  return {
    labelProps: labelProps,
    fieldProps: fieldProps
  };
}
function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
  let {
    description: description,
    errorMessage: errorMessage,
    validationState: validationState
  } = props;
  let {
    labelProps: labelProps,
    fieldProps: fieldProps
  } = (0, $d191a55c9702f145$export$8467354a121f1b9f)(props);
  let descriptionId = (0, utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8)([Boolean(description), Boolean(errorMessage), validationState]);
  let errorMessageId = (0, utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8)([Boolean(description), Boolean(errorMessage), validationState]);
  fieldProps = (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, {
    "aria-describedby": [descriptionId,
    // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
    errorMessageId, props["aria-describedby"]].filter(Boolean).join(" ") || undefined
  });
  return {
    labelProps: labelProps,
    fieldProps: fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-stately/toggle/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
function module_$3017fa7ffdddec74$export$8042c6c013fd5226(props = {}) {
  let {
    isReadOnly: isReadOnly
  } = props;
  // have to provide an empty function so useControlledState doesn't throw a fit
  // can't use useControlledState's prop calling because we need the event object from the change
  let [isSelected, setSelected] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isSelected, props.defaultSelected || false, props.onChange);
  function updateSelected(value) {
    if (!isReadOnly) setSelected(value);
  }
  function toggleState() {
    if (!isReadOnly) setSelected(!isSelected);
  }
  return {
    isSelected: isSelected,
    setSelected: updateSelected,
    toggle: toggleState
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/checkbox/dist/module.js





function $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {
  let {
    inputProps: inputProps
  } = $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, inputRef);
  let {
    isSelected: isSelected
  } = state;
  let {
    isIndeterminate: isIndeterminate
  } = props;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // indeterminate is a property, but it can only be set via javascript
    // https://css-tricks.com/indeterminate-checkboxes/
    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;
  });
  return {
    inputProps: {
      ...inputProps,
      checked: isSelected,
      'aria-checked': isIndeterminate ? 'mixed' : isSelected
    }
  };
}
const $1ae600c947479353$export$31440636951aa68c = new WeakMap();
const $1ae600c947479353$export$a3077e9c93f7360f = new WeakMap();
const $1ae600c947479353$export$d5679492e2864181 = new WeakMap();
function $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {
  let {
    isDisabled: isDisabled,
    name: name
  } = props;
  let {
    labelProps: labelProps,
    fieldProps: fieldProps,
    descriptionProps: descriptionProps,
    errorMessageProps: errorMessageProps
  } = $2baaea4c71418dea$export$294aa081a6c6f55d({
    ...props,
    // Checkbox group is not an HTML input element so it
    // shouldn't be labeled by a <label> element.
    labelElementType: 'span'
  });
  $1ae600c947479353$export$a3077e9c93f7360f.set(state, descriptionProps.id);
  $1ae600c947479353$export$d5679492e2864181.set(state, errorMessageProps.id);
  let domProps = utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  // Pass name prop from group to all items by attaching to the state.
  $1ae600c947479353$export$31440636951aa68c.set(state, name);
  return {
    groupProps: utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      role: 'group',
      'aria-disabled': isDisabled || undefined,
      ...fieldProps
    }),
    labelProps: labelProps,
    descriptionProps: descriptionProps,
    errorMessageProps: errorMessageProps
  };
}
function $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {
  const toggleState = module_$3017fa7ffdddec74$export$8042c6c013fd5226({
    isReadOnly: props.isReadOnly || state.isReadOnly,
    isSelected: state.isSelected(props.value),
    onChange(isSelected) {
      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);
      if (props.onChange) props.onChange(isSelected);
    }
  });
  let {
    inputProps: inputProps
  } = $406796ff087fe49b$export$e375f10ce42261c5({
    ...props,
    isReadOnly: props.isReadOnly || state.isReadOnly,
    isDisabled: props.isDisabled || state.isDisabled,
    name: props.name || $1ae600c947479353$export$31440636951aa68c.get(state)
  }, toggleState, inputRef);
  return {
    inputProps: {
      ...inputProps,
      'aria-describedby': [state.validationState === 'invalid' ? $1ae600c947479353$export$d5679492e2864181.get(state) : null, $1ae600c947479353$export$a3077e9c93f7360f.get(state)].filter(Boolean).join(' ') || undefined
    }
  };
}

;// CONCATENATED MODULE: ./src/utils/context.ts

/**
 * Creates a named context, provider, and hook.
 *
 * @param options create context options
 */
function createContext(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_.createContext(undefined);
  Context.displayName = name;
  function useContext() {
    const context = external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext(Context);
    if (!context && strict) {
      const error = new Error(errorMessage);
      error.name = "ContextError";
      Error.captureStackTrace == null ? void 0 : Error.captureStackTrace(error, useContext);
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext, Context];
}
;// CONCATENATED MODULE: ./src/checkbox/checkbox-context.ts

const [CheckboxGroupProvider, useCheckboxGroupContext] = createContext({
  name: "CheckboxGroupContext",
  strict: false
});
;// CONCATENATED MODULE: ./src/checkbox/use-checkbox.ts





/**
 * @internal
 */
const useCheckbox = props => {
  var _groupContext$size, _groupContext$color, _groupContext$labelCo;
  const groupContext = useCheckboxGroupContext();
  const {
    size = (_groupContext$size = groupContext == null ? void 0 : groupContext.size) != null ? _groupContext$size : "md",
    color = (_groupContext$color = groupContext == null ? void 0 : groupContext.color) != null ? _groupContext$color : "default",
    labelColor = (_groupContext$labelCo = groupContext == null ? void 0 : groupContext.labelColor) != null ? _groupContext$labelCo : "default",
    lineThrough,
    isRounded = false,
    disableAnimation = false,
    isIndeterminate = false,
    containerCss,
    ...otherProps
  } = props;
  if (groupContext && __DEV__) {
    const warningMessage = "The Checkbox.Group is being used, `%s` will be ignored. Use the `%s` of the Checkbox.Group instead.";
    if ("isSelected" in otherProps) {
      // eslint-disable-next-line no-console
      console.warn(warningMessage, "isSelected", "value");
    }
    if ("defaultSelected" in otherProps) {
      // eslint-disable-next-line no-console
      console.warn(warningMessage, "defaultSelected", "defaultValue");
    }
  }
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const ariaCheckboxProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _otherProps$value, _otherProps$isRequire;
    return {
      ...otherProps,
      isIndeterminate,
      value: (_otherProps$value = otherProps.value) != null ? _otherProps$value : "",
      isRequired: (_otherProps$isRequire = otherProps.isRequired) != null ? _otherProps$isRequire : false
    };
  }, [isIndeterminate, otherProps]);
  const {
    inputProps
  } = groupContext ?
  // eslint-disable-next-line
  $fba3e38d5ca8983f$export$353b32fc6898d37d({
    ...ariaCheckboxProps,
    validationState: otherProps.validationState
  }, groupContext.groupState, inputRef) : $406796ff087fe49b$export$e375f10ce42261c5(ariaCheckboxProps, $3017fa7ffdddec74$export$8042c6c013fd5226(ariaCheckboxProps), inputRef); // eslint-disable-line

  return {
    size,
    color,
    labelColor,
    isRounded,
    lineThrough,
    disableAnimation,
    isIndeterminate,
    inputRef,
    inputProps,
    containerCss
  };
};
;// CONCATENATED MODULE: ./src/checkbox/checkbox.styles.ts


const StyledCheckboxLabel = styled("label", {
  $$checkboxBorderColor: "$colors$border",
  $$checkboxBorderRadius: "$radii$squared",
  d: "inline-flex",
  jc: "flex-start",
  ai: "center",
  position: "relative",
  w: "auto",
  cursor: "pointer",
  zIndex: "$1",
  opacity: 1,
  transition: "opacity 0.25s ease",
  "@motion": {
    transition: "none"
  },
  variants: {
    size: {
      xs: {
        $$checkboxSize: "$space$7"
      },
      sm: {
        $$checkboxSize: "$space$8"
      },
      md: {
        $$checkboxSize: "$space$9"
      },
      lg: {
        $$checkboxSize: "$space$10"
      },
      xl: {
        $$checkboxSize: "$space$11"
      }
    },
    isDisabled: {
      true: {
        opacity: 0.75,
        cursor: "not-allowed"
      }
    },
    disableAnimation: {
      true: {
        transition: "none"
      }
    }
  },
  defaultVariants: {
    size: "md"
  }
});
const StyledIconCheckFirstLine = styled("div", {
  content: "",
  background: "transparent",
  position: "absolute",
  width: "8px",
  height: "1px",
  br: "5px",
  zIndex: "$1",
  bottom: "0px",
  "&:after": {
    content: "",
    position: "absolute",
    left: "0px",
    width: "0%",
    height: "2px",
    background: "$white",
    br: "5px 0px 0px 5px"
  },
  "@motion": {
    "&:after": {
      transition: "none"
    }
  },
  variants: {
    isIndeterminate: {
      true: {
        display: "none"
      }
    },
    isChecked: {
      true: {
        "&:after": {
          width: "100%",
          transition: "width 0.25s ease 0.1s"
        }
      }
    },
    disableAnimation: {
      true: {
        "&:after": {
          transition: "none"
        }
      }
    }
  },
  compoundVariants: [
  // checked && disableAnimation
  {
    isChecked: true,
    disableAnimation: true,
    css: {
      "&:after": {
        transition: "none"
      }
    }
  }]
});
const StyledIconCheckSecondLine = styled("div", {
  content: "",
  position: "absolute",
  h: "13px",
  br: "5px",
  bottom: "0",
  right: "0",
  zIndex: "$1",
  background: "transparent",
  width: "2px",
  "&:after": {
    content: "",
    position: "absolute",
    width: "2px",
    height: "0%",
    background: "$white",
    left: "0px",
    bottom: "0px",
    br: "5px 5px 0px 0px"
  },
  "@motion": {
    "&:after": {
      transition: "none"
    }
  },
  variants: {
    isIndeterminate: {
      true: {
        display: "none"
      }
    },
    isChecked: {
      true: {
        "&:after": {
          height: "100%",
          transition: "height 0.2s ease 0.3s"
        }
      }
    },
    disableAnimation: {
      true: {
        "&:after": {
          transition: "none"
        }
      }
    }
  },
  compoundVariants: [
  // checked && disableAnimation
  {
    isChecked: true,
    disableAnimation: true,
    css: {
      "&:after": {
        transition: "none"
      }
    }
  }]
});
const StyledIconCheck = styled("i", {
  size: "$$checkboxSize",
  dflex: "center",
  br: "inherit",
  opacity: 0,
  zIndex: "$2",
  transition: "transform 0.35s ease",
  "&:after": {
    content: "",
    opacity: 0,
    position: "relative",
    width: "10px",
    height: "2px",
    br: "1px",
    background: "$white",
    display: "block"
  },
  "@motion": {
    transition: "none",
    "&:after": {
      transition: "none"
    }
  },
  variants: {
    isIndeterminate: {
      true: {
        opacity: 1,
        transform: "rotate(0deg)",
        width: "auto",
        height: "auto",
        margin: "0px",
        "&:after": {
          opacity: 1
        }
      },
      false: {
        width: "8px",
        height: "14px",
        display: "block",
        position: "relative",
        marginTop: "-4px"
      }
    },
    size: {
      xs: {
        marginTop: "-2px",
        transform: "rotate(45deg) scale(0.5)"
      },
      sm: {
        marginTop: "-2px",
        transform: "rotate(45deg) scale(0.5)"
      },
      md: {
        transform: "rotate(45deg) scale(0.8)"
      },
      lg: {
        transform: "rotate(45deg)"
      },
      xl: {
        transform: "rotate(45deg)"
      }
    },
    isChecked: {
      true: {
        opacity: 1
      }
    },
    disableAnimation: {
      true: {
        transition: "none",
        "&:after": {
          transition: "none"
        }
      }
    }
  },
  compoundVariants: [
  // isIndeterminate && xs size
  {
    isIndeterminate: true,
    size: "xs",
    css: {
      scale: "0.5"
    }
  },
  // isIndeterminate && sm size
  {
    isIndeterminate: true,
    size: "sm",
    css: {
      scale: "0.5"
    }
  },
  // isIndeterminate && md size
  {
    isIndeterminate: true,
    size: "md",
    css: {
      scale: "0.8"
    }
  },
  // isIndeterminate && lg size
  {
    isIndeterminate: true,
    size: "lg",
    css: {
      transform: "none"
    }
  },
  // isIndeterminate && xl size
  {
    isIndeterminate: true,
    size: "lg",
    css: {
      transform: "none"
    }
  }]
});
const StyledCheckboxMask = styled("div", {
  $$checkboxMaskTransition: "transform 0.25s ease 0s, opacity 0.25s ease 0s, background 0.25s ease 0s, border-color 0.25s ease 0s",
  size: "100%",
  position: "absolute",
  pe: "none",
  boxSizing: "border-box",
  dflex: "center",
  zIndex: "-$1",
  br: "inherit",
  color: "$$checkboxBorderColor",
  "&:before": {
    content: "",
    position: "absolute",
    top: "0px",
    left: "0px",
    size: "100%",
    br: "inherit",
    transition: "$$checkboxMaskTransition",
    zIndex: "-$1",
    border: "$borderWeights$normal solid currentColor",
    boxSizing: "border-box"
  },
  "&:after": {
    content: "",
    position: "absolute",
    top: "0px",
    left: "0px",
    size: "100%",
    bg: "$$checkboxColor",
    scale: 0.5,
    br: "inherit",
    opacity: 0,
    transition: "$$checkboxMaskTransition",
    zIndex: "-$1"
  },
  "@motion": {
    "&:before": {
      transition: "none"
    },
    "&:after": {
      transition: "none"
    }
  },
  variants: {
    isChecked: {
      true: {
        "&:before": {
          opacity: 0,
          scale: 1.2
        },
        "&:after": {
          opacity: 1,
          scale: 1
        }
      }
    },
    isIndeterminate: {
      true: {
        "&:before": {
          opacity: 0,
          scale: 1.2
        },
        "&:after": {
          opacity: 1,
          scale: 1
        }
      }
    },
    disableAnimation: {
      true: {
        "&:before": {
          transition: "none"
        },
        "&:after": {
          transition: "none"
        }
      }
    }
  }
});
const StyledCheckboxText = styled("span", {
  position: "relative",
  dflex: "center",
  color: "$text",
  opacity: 1,
  pl: "calc($$checkboxSize * 0.57)",
  ln: "$$checkboxSize",
  fontSize: "$$checkboxSize",
  us: "none",
  transition: "opacity 0.25s ease 0s",
  "@motion": {
    transition: "none",
    "&:before": {
      transition: "none"
    }
  },
  variants: {
    color: {
      default: {
        color: "$text"
      },
      primary: {
        color: "$primary"
      },
      secondary: {
        color: "$secondary"
      },
      success: {
        color: "$success"
      },
      warning: {
        color: "$warning"
      },
      error: {
        color: "$error"
      }
    },
    lineThrough: {
      true: {
        "&:before": {
          content: "",
          position: "absolute",
          width: "0px",
          height: "2px",
          background: "$text",
          transition: "width 0.25s ease 0s"
        }
      }
    },
    isChecked: {
      true: {
        "&:before": {
          opacity: 0.8
        }
      }
    },
    isDisabled: {
      true: {
        color: "$accents5"
      }
    },
    disableAnimation: {
      true: {
        transition: "none",
        "&:before": {
          transition: "none"
        }
      }
    }
  },
  compoundVariants: [{
    lineThrough: true,
    isChecked: true,
    css: {
      opacity: 0.6,
      "&:before": {
        w: "calc(100% - 10px)"
      }
    }
  }]
});
const StyledCheckboxContainer = styled("div", {
  br: "$$checkboxBorderRadius",
  position: "relative",
  sizeMin: "$$checkboxSize",
  transition: "box-shadow 0.25s ease",
  zIndex: "$1",
  ".nextui-checkbox-input": {
    position: "absolute",
    width: "100%",
    height: "100%",
    top: "0px",
    left: "0px",
    margin: "0px",
    padding: "0px",
    opacity: 0,
    zIndex: "$1",
    cursor: "pointer",
    "&:disabled": {
      cursor: "not-allowed"
    }
  },
  "@motion": {
    transition: "none"
  },
  variants: {
    color: {
      default: {
        $$checkboxColor: "$colors$primary",
        $$checkboxColorHover: "$colors$primarySolidHover"
      },
      primary: {
        $$checkboxColor: "$colors$primary",
        $$checkboxColorHover: "$colors$primarySolidHover"
      },
      secondary: {
        $$checkboxColor: "$colors$secondary",
        $$checkboxColorHover: "$colors$secondarySolidHover"
      },
      success: {
        $$checkboxColor: "$colors$success",
        $$checkboxColorHover: "$colors$successSolidHover"
      },
      warning: {
        $$checkboxColor: "$colors$warning",
        $$checkboxColorHover: "$colors$warningSolidHover"
      },
      error: {
        $$checkboxColor: "$colors$error",
        $$checkboxColorHover: "$colors$errorSolidHover"
      },
      gradient: {
        $$checkboxColor: "$colors$gradient",
        $$checkboxColorHover: "$colors$gradient"
      }
    },
    isRounded: {
      true: {
        $$checkboxBorderRadius: "$radii$pill"
      }
    },
    isDisabled: {
      true: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    },
    disableAnimation: {
      true: {
        transition: "none"
      }
    },
    isHovered: {
      true: {
        [`& ${StyledCheckboxMask}:before`]: {
          bg: "$$checkboxBorderColor",
          border: "2px solid transparent"
        },
        [`& ${StyledCheckboxMask}:after`]: {
          bg: "$$checkboxColorHover"
        }
      }
    }
  },
  defaultVariants: {
    color: "default"
  }
}, cssFocusVisible);
const StyledCheckboxGroup = styled("div", {
  display: "flex",
  flexDirection: "column",
  "& .nextui-checkbox-group-label": {
    d: "block",
    fontWeight: "$normal",
    fontSize: "calc($$checkboxSize * 0.8)",
    color: "$accents7",
    mb: "$3"
  },
  variants: {
    size: {
      xs: {
        $$checkboxSize: "$space$7"
      },
      sm: {
        $$checkboxSize: "$space$8"
      },
      md: {
        $$checkboxSize: "$space$9"
      },
      lg: {
        $$checkboxSize: "$space$10"
      },
      xl: {
        $$checkboxSize: "$space$11"
      }
    },
    isDisabled: {
      true: {
        "& .nextui-checkbox-group-label": {
          color: "$accents5"
        }
      }
    }
  }
});
const StyledCheckboxGroupContainer = styled("div", {
  display: "flex",
  flexDirection: "column",
  variants: {
    isRow: {
      true: {
        flexDirection: "row",
        mt: 0,
        [`& ${StyledCheckboxLabel}`]: {
          mr: "$$checkboxSize"
        }
      },
      false: {
        mr: 0,
        flexDirection: "column",
        [`& ${StyledCheckboxLabel}:not(:first-child)`]: {
          mt: "$$checkboxSize"
        }
      }
    }
  },
  defaultVariants: {
    isRow: false
  }
});

// types
;// CONCATENATED MODULE: ./src/checkbox/checkbox.tsx
var checkbox_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/checkbox/checkbox.tsx";











const Checkbox = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    className,
    as,
    css,
    children,
    label,
    ...otherProps
  } = props;
  const {
    size,
    color,
    labelColor,
    isRounded,
    lineThrough,
    disableAnimation,
    isIndeterminate,
    inputRef,
    inputProps,
    containerCss
  } = useCheckbox({
    ...otherProps,
    children: children != null ? children : label
  });
  const domRef = useFocusableRef(ref, inputRef);
  const {
    hoverProps,
    isHovered
  } = interactions_dist_module_$6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled: inputProps.disabled
  });

  // TODO: Event's propagation wasn't stopped https://github.com/adobe/react-spectrum/issues/2383
  const {
    pressProps
  } = interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: inputProps.disabled
  });
  const {
    focusProps,
    isFocusVisible
  } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    autoFocus: inputProps.autoFocus
  });
  const checkboxState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isHovered) return "hovered";
    return isIndeterminate && inputProps.checked ? "mixed" : inputProps.checked ? "checked" : "uncheked";
  }, [isHovered, isIndeterminate, inputProps.checked]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxLabel, {
    ref: domRef,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(hoverProps, pressProps, otherProps),
    as: as,
    className: clsx("nextui-checkbox-label", `nextui-checkbox--${checkboxState}`, className),
    css: css,
    disableAnimation: disableAnimation,
    isDisabled: inputProps.disabled,
    size: size,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxContainer, {
      className: "nextui-checkbox-container",
      color: color,
      css: containerCss,
      disableAnimation: disableAnimation,
      isDisabled: inputProps.disabled,
      isFocusVisible: isFocusVisible,
      isHovered: isHovered,
      isRounded: isRounded,
      ...focusProps,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(module_$5c3e21d68f1c4674$export$439d29a4e110a164, {
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("input", {
          ref: inputRef,
          className: "nextui-checkbox-input",
          ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(inputProps, focusProps)
        }, void 0, false, {
          fileName: checkbox_jsxFileName,
          lineNumber: 115,
          columnNumber: 13
        }, undefined)
      }, void 0, false, {
        fileName: checkbox_jsxFileName,
        lineNumber: 114,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxMask, {
        className: "nextui-checkbox-mask",
        disableAnimation: disableAnimation,
        isChecked: inputProps.checked,
        isIndeterminate: isIndeterminate,
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheck, {
          className: "nextui-icon-check",
          disableAnimation: disableAnimation,
          isChecked: inputProps.checked,
          isIndeterminate: isIndeterminate,
          size: size,
          children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheckFirstLine, {
            className: "nextui-icon-check-line1",
            disableAnimation: disableAnimation,
            isChecked: inputProps.checked,
            isIndeterminate: isIndeterminate
          }, void 0, false, {
            fileName: checkbox_jsxFileName,
            lineNumber: 134,
            columnNumber: 15
          }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheckSecondLine, {
            className: "nextui-icon-check-line2",
            disableAnimation: disableAnimation,
            isChecked: inputProps.checked,
            isIndeterminate: isIndeterminate
          }, void 0, false, {
            fileName: checkbox_jsxFileName,
            lineNumber: 140,
            columnNumber: 15
          }, undefined)]
        }, void 0, true, {
          fileName: checkbox_jsxFileName,
          lineNumber: 127,
          columnNumber: 13
        }, undefined)
      }, void 0, false, {
        fileName: checkbox_jsxFileName,
        lineNumber: 121,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: checkbox_jsxFileName,
      lineNumber: 103,
      columnNumber: 9
    }, undefined), (children || label) && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxText, {
      className: "nextui-checkbox-text",
      color: labelColor,
      disableAnimation: disableAnimation,
      isChecked: inputProps.checked,
      isDisabled: inputProps.disabled,
      lineThrough: lineThrough,
      children: children || label
    }, void 0, false, {
      fileName: checkbox_jsxFileName,
      lineNumber: 150,
      columnNumber: 11
    }, undefined)]
  }, void 0, true, {
    fileName: checkbox_jsxFileName,
    lineNumber: 93,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  Checkbox.displayName = "NextUI.Checkbox";
}
Checkbox.toString = () => ".nextui-checkbox";
/* harmony default export */ const checkbox_checkbox = (Checkbox);
;// CONCATENATED MODULE: ../../node_modules/@react-stately/checkbox/dist/module.js

function $587d3ad58be6d31f$export$daff6da51032a415(props = {}) {
  let [selectedValues, setValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue || [], props.onChange);
  const state = {
    value: selectedValues,
    setValue(value) {
      if (props.isReadOnly || props.isDisabled) return;
      setValue(value);
    },
    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,
    isSelected(value) {
      return selectedValues.includes(value);
    },
    addValue(value) {
      if (props.isReadOnly || props.isDisabled) return;
      if (!selectedValues.includes(value)) setValue(selectedValues.concat(value));
    },
    removeValue(value) {
      if (props.isReadOnly || props.isDisabled) return;
      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));
    },
    toggleValue(value) {
      if (props.isReadOnly || props.isDisabled) return;
      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));else setValue(selectedValues.concat(value));
    },
    validationState: props.validationState
  };
  return state;
}

;// CONCATENATED MODULE: ./src/checkbox/use-checkbox-group.ts


/**
 * @internal
 */
const useCheckboxGroup = (props = {}) => {
  const {
    size = "md",
    color = "default",
    labelColor = "default",
    orientation = "vertical",
    css,
    ...otherProps
  } = props;
  const groupState = $587d3ad58be6d31f$export$daff6da51032a415(otherProps);
  const {
    labelProps,
    groupProps
  } = $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(otherProps, groupState);
  return {
    css,
    size,
    orientation,
    color,
    labelColor,
    groupState,
    labelProps,
    groupProps
  };
};
;// CONCATENATED MODULE: ./src/checkbox/checkbox-group.tsx
var checkbox_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/checkbox/checkbox-group.tsx";








const CheckboxGroup = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    children,
    className,
    as,
    label,
    ...otherProps
  } = props;
  const {
    css,
    ...context
  } = useCheckboxGroup({
    ...otherProps,
    label
  });
  const domRef = useDOMRef(ref);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxGroup, {
    ref: domRef,
    ...context.groupProps,
    as: as,
    className: clsx("nextui-checkbox-group", className),
    css: css,
    isDisabled: context.groupState.isDisabled,
    size: context.size,
    children: [label && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("label", {
      className: "nextui-checkbox-group-label",
      ...context.labelProps,
      children: label
    }, void 0, false, {
      fileName: checkbox_group_jsxFileName,
      lineNumber: 38,
      columnNumber: 11
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxGroupContainer, {
      className: "nextui-checkbox-group-items",
      isRow: context.orientation === "horizontal",
      role: "presentation",
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(CheckboxGroupProvider, {
        value: context,
        children: children
      }, void 0, false, {
        fileName: checkbox_group_jsxFileName,
        lineNumber: 47,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: checkbox_group_jsxFileName,
      lineNumber: 42,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: checkbox_group_jsxFileName,
    lineNumber: 28,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  CheckboxGroup.displayName = "NextUI.CheckboxGroup";
}
CheckboxGroup.toString = () => ".nextui-checkbox-group";
/* harmony default export */ const checkbox_group = (CheckboxGroup);
;// CONCATENATED MODULE: ./src/checkbox/index.ts


checkbox_checkbox.Group = checkbox_group;

// export styled components

/* harmony default export */ const src_checkbox = (checkbox_checkbox);
;// CONCATENATED MODULE: ./src/code/code.styles.ts

const StyledCode = styled("code", {});
const StyledPre = styled("pre", {
  width: "initial",
  mw: "100"
});
;// CONCATENATED MODULE: ./src/code/code.tsx
var code_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/code/code.tsx";




const code_defaultProps = {
  block: false
};
const Code = ({
  block,
  children,
  ...props
}) => {
  if (!block) return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCode, {
    ...props,
    children: children
  }, void 0, false, {
    fileName: code_jsxFileName,
    lineNumber: 22,
    columnNumber: 22
  }, undefined);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPre, {
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCode, {
      children: children
    }, void 0, false, {
      fileName: code_jsxFileName,
      lineNumber: 26,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: code_jsxFileName,
    lineNumber: 25,
    columnNumber: 5
  }, undefined);
};
Code.toString = () => ".nextui-code";
const MemoCode = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Code);
/* harmony default export */ const code = (with_defaults(MemoCode, code_defaultProps));
;// CONCATENATED MODULE: ./src/code/index.ts


/* harmony default export */ const src_code = (code);
;// CONCATENATED MODULE: ./src/col/col.styles.ts

const StyledCol = styled("div", {
  float: "left",
  boxSizing: "border-box",
  pl: "calc($$rowGap / 2)",
  pr: "calc($$rowGap / 2)"
});
/* harmony default export */ const col_styles = (StyledCol);
;// CONCATENATED MODULE: ./src/col/col.tsx
var col_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/col/col.tsx";




const col_defaultProps = {
  span: 12,
  offset: 0
};
const Col = ({
  children,
  span,
  offset,
  css,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(col_styles, {
    css: {
      width: `${100 / 12 * span}%`,
      marginLeft: `${100 / 12 * offset}%`,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: col_jsxFileName,
    lineNumber: 28,
    columnNumber: 5
  }, undefined);
};
Col.toString = () => ".nextui-column";
const MemoCol = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Col);
/* harmony default export */ const col = (with_defaults(MemoCol, col_defaultProps));
;// CONCATENATED MODULE: ./src/col/index.ts


/* harmony default export */ const src_col = (col);
;// CONCATENATED MODULE: ./src/utils/expand.tsx
var expand_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/expand.tsx";





const expand_defaultProps = {
  isExpanded: false,
  animated: true,
  delay: 200
};
const StyledExpand = styled("div", {
  p: 0,
  m: 0,
  h: 0,
  opacity: 0,
  overflow: "hidden",
  variants: {
    expanded: {
      true: {
        opacity: 1
      }
    }
  }
});
const Expand = ({
  isExpanded,
  delay,
  animated,
  css,
  children
}) => {
  const [height, setHeight] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isExpanded ? "auto" : "0");
  const [selfExpanded, setSelfExpanded] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isExpanded);
  const contentRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const entryTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const leaveTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const resetTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const [state, updateShape] = src_use_real_shape(contentRef);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => setHeight(`${state.height}px`), [state.height]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isExpanded === selfExpanded) return;
    // show element or reset height.
    // force an update once manually, even if the element does not change.
    // (the height of the element might be "auto")
    if (!isExpanded) {
      updateShape();
      setHeight(`${state.height}px`);
    }

    // show expand animation
    entryTimer.current = window.setTimeout(() => {
      setSelfExpanded(isExpanded);
      clearTimeout(entryTimer.current);
    }, 30);

    // Reset height after animation
    if (isExpanded) {
      resetTimer.current = window.setTimeout(() => {
        setHeight("auto");
        clearTimeout(resetTimer.current);
      }, delay);
    } else {
      leaveTimer.current = window.setTimeout(() => {
        clearTimeout(leaveTimer.current);
      }, delay / 2);
    }
    return () => {
      clearTimeout(entryTimer.current);
      clearTimeout(leaveTimer.current);
      clearTimeout(resetTimer.current);
    };
  }, [isExpanded]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledExpand, {
    css: {
      height: selfExpanded ? height : "0",
      transition: animated ? `height ${delay}ms ease 0ms,
    opacity ${delay * 1.5}ms ease 0ms;` : "none",
      ...css
    },
    expanded: selfExpanded,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
      ref: contentRef,
      className: "nextui-expand-content",
      children: children
    }, void 0, false, {
      fileName: expand_jsxFileName,
      lineNumber: 95,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: expand_jsxFileName,
    lineNumber: 84,
    columnNumber: 5
  }, undefined);
};
/* harmony default export */ const utils_expand = (with_defaults(Expand, expand_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/collapse-context.ts

const collapse_context_defaultContext = {
  values: []
};
const CollapseContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(collapse_context_defaultContext);
const useCollapseContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(CollapseContext);
;// CONCATENATED MODULE: ./src/collapse/collapse.styles.ts


const StyledCollapse = styled("div", {
  transition: "$default",
  ".nextui-collapse-title-content": {
    w: "100%",
    "h1,h2,h3,h4,h5,h6,p,span,b": {
      margin: 0
    }
  },
  ".nextui-collapse-title-container": {
    d: "flex",
    jc: "space-between",
    ai: "center"
  },
  ".nextui-collapse-title": {
    color: "$foreground"
  },
  ".nextui-collapse-subtitle": {
    color: "$accents7",
    margin: 0,
    "*": {
      margin: 0
    }
  },
  ".nextui-collapse-title-content-left": {
    mr: "$sm"
  },
  ".nextui-collapse-title-content-left, .nextui-collapse-title-content-right": {
    d: "flex",
    ai: "center"
  },
  "@motion": {
    transition: "none",
    ".nextui-collapse-title-content-right ": {
      svg: {
        transition: "none"
      }
    }
  },
  variants: {
    shadow: {
      true: {
        border: "none",
        boxShadow: "$md",
        br: "$lg",
        p: "0 $lg",
        bg: "$backgroundContrast"
      }
    },
    borderWeight: {
      light: {
        $$collapseBorderWidth: "$borderWeights$light"
      },
      normal: {
        $$collapseBorderWidth: "$borderWeights$normal"
      },
      bold: {
        $$collapseBorderWidth: "$borderWeights$bold"
      },
      extrabold: {
        $$collapseBorderWidth: "$borderWeights$extrabold"
      },
      black: {
        $$collapseBorderWidth: "$borderWeights$black"
      }
    },
    divider: {
      true: {
        borderTop: "$$collapseBorderWidth solid $border",
        borderBottom: "$$collapseBorderWidth solid $border"
      }
    },
    bordered: {
      true: {
        br: "$lg",
        p: "0 $lg",
        border: "$$collapseBorderWidth solid $border"
      }
    },
    animated: {
      true: {
        ".nextui-collapse-title-content-right ": {
          svg: {
            transition: "transform 200ms ease"
          }
        }
      },
      false: {
        transition: "none"
      }
    },
    visible: {
      true: {
        ".nextui-collapse-title-content-right ": {
          svg: {
            transform: "rotateZ(-90deg)"
          }
        }
      },
      false: {
        ".nextui-collapse-title-content-right": {
          svg: {
            transform: "rotateZ(0deg)"
          }
        }
      }
    }
  },
  defaultVariants: {
    borderWeight: "light"
  }
}, sharedFocus);
const StyledCollapseView = styled("div", {
  w: "100%",
  d: "block",
  ta: "left",
  bg: "transparent",
  border: "none",
  cursor: "pointer",
  outline: "none",
  padding: "$lg 0",
  variants: {
    disabled: {
      true: {
        cursor: "not-allowed",
        ".nextui-collapse-title, .nextui-collapse-subtitle": {
          opacity: 0.5
        }
      }
    }
  }
}, cssFocusVisible);
const StyledCollapseContent = styled("div", {
  fontSize: "$base",
  lineHeight: "$lg",
  pb: "$lg",
  "*:first-child": {
    mt: 0
  },
  "*:last-child": {
    mb: 0
  }
});
const StyledCollapseIcon = styled("svg", {
  path: {
    stroke: "$accents7"
  }
});
const StyledCollapseGroup = styled("div", {
  width: "auto",
  padding: "0 $sm",
  "div + div": {
    borderTop: "none"
  },
  [`& ${StyledCollapse}:first-child`]: {
    borderTop: "none"
  },
  [`& ${StyledCollapse}:last-child`]: {
    borderBottom: "none"
  },
  variants: {
    borderWeight: {
      light: {
        $$collapseGroupBorderWidth: "$borderWeights$light"
      },
      normal: {
        $$collapseGroupBorderWidth: "$borderWeights$normal"
      },
      bold: {
        $$collapseGroupBorderWidth: "$borderWeights$bold"
      },
      extrabold: {
        $$collapseGroupBorderWidth: "$borderWeights$extrabold"
      },
      black: {
        $$collapseGroupBorderWidth: "$borderWeights$black"
      }
    },
    shadow: {
      true: {
        br: "$lg",
        border: "none",
        boxShadow: "$md",
        p: "0 $lg",
        bg: "$backgroundContrast"
      }
    },
    bordered: {
      true: {
        br: "$lg",
        p: "0 $lg",
        border: "$$collapseGroupBorderWidth solid $border"
      }
    },
    splitted: {
      true: {
        [`& ${StyledCollapse}`]: {
          br: "$lg",
          border: "none",
          bg: "$backgroundContrast",
          boxShadow: "$md",
          p: "0 $lg",
          margin: "$md 0"
        }
      }
    }
  },
  defaultVariants: {
    borderWeight: "light",
    shadow: false,
    bordered: false,
    splitted: false
  }
});
;// CONCATENATED MODULE: ./src/collapse/collapse-icon.tsx
var collapse_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse-icon.tsx";



const CollapseIcon = ({
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseIcon, {
    className: "nextui-collapse-icon",
    fill: "none",
    focusable: "false",
    height: "20",
    role: "presentation",
    viewBox: "0 0 24 24",
    width: "20",
    xmlns: "http://www.w3.org/2000/svg",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M15.5 19l-7-7 7-7",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 1.5
    }, void 0, false, {
      fileName: collapse_icon_jsxFileName,
      lineNumber: 18,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: collapse_icon_jsxFileName,
    lineNumber: 7,
    columnNumber: 5
  }, undefined);
};
CollapseIcon.toString = () => ".nextui-collapse-icon";
const MemoCollapseIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(CollapseIcon);
/* harmony default export */ const collapse_icon = (MemoCollapseIcon);
;// CONCATENATED MODULE: ./src/collapse/collapse.tsx
var collapse_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse.tsx";













const collapse_defaultProps = {
  shadow: false,
  divider: true,
  bordered: false,
  showArrow: true,
  animated: true,
  disabled: false,
  preventDefault: true,
  expanded: false
};
const preClass = "nextui-collapse";
const Collapse = ({
  children,
  title,
  subtitle,
  expanded,
  shadow,
  className,
  divider,
  arrowIcon,
  showArrow,
  disabled,
  onChange,
  bordered,
  contentLeft,
  preventDefault,
  animated: animatedProp,
  borderWeight,
  index,
  ...props
}) => {
  const [visible, setVisible, visibleRef] = src_use_current_state(expanded);
  const {
    values,
    divider: groupDivider,
    animated: groupAnimated,
    updateValues
  } = useCollapseContext();
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  if (!title) {
    warn('"title" is required.', "Collapse");
  }
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (visible !== expanded) {
      setVisible(expanded);
    }
  }, [expanded]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!values.length) return;
    const isActive = !!values.find(item => item === index);
    setVisible(isActive);
  }, [values.join(",")]);
  const ariaLabelledById = dist_module_$bdb11010cef70236$export$f680877a34711e37();
  const ariaControlId = dist_module_$bdb11010cef70236$export$f680877a34711e37();
  const arrowComponent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!showArrow) return null;
    return arrowIcon ? arrowIcon : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(collapse_icon, {}, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 126,
      columnNumber: 36
    }, undefined);
  }, [arrowIcon, showArrow]);
  const withDivider = groupDivider === undefined ? divider : groupDivider;
  const animated = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return groupAnimated === undefined ? animatedProp : groupAnimated;
  }, [groupAnimated, animatedProp]);
  const handleChange = event => {
    if (disabled) return;
    const next = !visibleRef.current;
    setVisible(next);
    updateValues && updateValues(index, next);
    onChange && onChange(event, index, next);
  };
  const {
    bindings
  } = src_use_keyboard(event => {
    handleChange(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? "open" : "closed";
  }, [visible]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapse, {
    animated: animated,
    borderWeight: borderWeight,
    bordered: bordered,
    className: clsx(className, preClass, `${preClass}--${getState}`),
    "data-state": getState,
    divider: withDivider,
    shadow: shadow,
    tabIndex: -1,
    visible: visible,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseView, {
      "aria-controls": ariaControlId,
      "aria-disabled": disabled,
      "aria-expanded": visible,
      className: `${preClass}-view`,
      "data-state": getState,
      disabled: disabled,
      id: ariaLabelledById,
      isFocusVisible: isFocusVisible,
      role: "button",
      tabIndex: disabled ? -1 : 0,
      onClick: handleChange,
      ...focusProps,
      ...bindings,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
        className: clsx(`${preClass}-title-container`),
        children: [contentLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content-left`,
          children: contentLeft
        }, void 0, false, {
          fileName: collapse_jsxFileName,
          lineNumber: 188,
          columnNumber: 27
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content`,
          children: [/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(title) ? title : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("h3", {
            className: `${preClass}-title`,
            children: title
          }, void 0, false, {
            fileName: collapse_jsxFileName,
            lineNumber: 190,
            columnNumber: 52
          }, undefined), subtitle && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
            className: `${preClass}-subtitle`,
            children: subtitle
          }, void 0, false, {
            fileName: collapse_jsxFileName,
            lineNumber: 191,
            columnNumber: 26
          }, undefined)]
        }, void 0, true, {
          fileName: collapse_jsxFileName,
          lineNumber: 189,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content-right`,
          children: arrowComponent
        }, void 0, false, {
          fileName: collapse_jsxFileName,
          lineNumber: 193,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: collapse_jsxFileName,
        lineNumber: 187,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 172,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(utils_expand, {
      animated: animated,
      isExpanded: visible,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseContent, {
        "aria-labelledby": ariaLabelledById,
        className: `${preClass}-content`,
        id: ariaControlId,
        role: "region",
        tabIndex: -1,
        children: children
      }, void 0, false, {
        fileName: collapse_jsxFileName,
        lineNumber: 197,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 196,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: collapse_jsxFileName,
    lineNumber: 160,
    columnNumber: 5
  }, undefined);
};
Collapse.toString = () => ".nextui-collapse";
/* harmony default export */ const collapse = (with_defaults(Collapse, collapse_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/collapse-group.tsx
var collapse_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse-group.tsx";








const collapse_group_defaultProps = {
  accordion: true
};
const CollapseGroup = ({
  children,
  accordion,
  animated,
  divider,
  onChange,
  ...props
}) => {
  const [state, setState, stateRef] = src_use_current_state([]);
  const updateValues = (currentIndex, nextState) => {
    const hasChild = stateRef.current.find(val => val === currentIndex);
    onChange && onChange(currentIndex, nextState);
    if (accordion) {
      if (nextState) return setState([currentIndex]);
      return setState([]);
    }
    if (nextState) {
      // In a few cases, the user will set Collapse Component state manually.
      // If the user incorrectly set the state, Group component should ignore it.
      /* istanbul ignore if */
      if (hasChild) return;
      return setState([...stateRef.current, currentIndex]);
    }
    setState(stateRef.current.filter(item => item !== currentIndex));
  };
  const initialValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    values: state,
    updateValues,
    divider,
    animated
  }), [state.join(",")]);
  const hasIndexChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => setChildrenIndex(children, [collapse]), [children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(CollapseContext.Provider, {
    value: initialValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseGroup, {
      ...props,
      children: hasIndexChildren
    }, void 0, false, {
      fileName: collapse_group_jsxFileName,
      lineNumber: 73,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: collapse_group_jsxFileName,
    lineNumber: 72,
    columnNumber: 5
  }, undefined);
};
CollapseGroup.toString = () => ".nextui-collapse-group";
/* harmony default export */ const collapse_group = (with_defaults(CollapseGroup, collapse_group_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/index.ts


collapse.Group = collapse_group;

// export styled components

/* harmony default export */ const src_collapse = (collapse);
;// CONCATENATED MODULE: ./src/container/container.styles.ts

const StyledContainer = styled("div", {
  w: "100%",
  mr: "auto",
  ml: "auto",
  variants: {
    fluid: {
      true: {
        maxWidth: "100%"
      }
    },
    responsive: {
      true: {
        "@xs": {
          maxWidth: "$breakpoints$xs"
        },
        "@sm": {
          maxWidth: "$breakpoints$sm"
        },
        "@md": {
          maxWidth: "$breakpoints$md"
        },
        "@lg": {
          maxWidth: "$breakpoints$lg"
        },
        "@xl": {
          maxWidth: "$breakpoints$xl"
        }
      }
    }
  },
  defaultVariants: {
    fluid: false,
    responsive: true
  }
});
/* harmony default export */ const container_styles = (StyledContainer);
;// CONCATENATED MODULE: ./src/container/container.tsx
var container_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/container/container.tsx";




const container_defaultProps = {
  gap: 2,
  xs: false,
  sm: false,
  md: false,
  lg: false,
  xl: false,
  responsive: true,
  fluid: false,
  wrap: "wrap",
  as: "div",
  display: "block"
};
const Container = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((containerProps, ref) => {
  const {
    xs,
    sm,
    md,
    lg,
    xl,
    wrap,
    gap,
    as,
    display,
    justify,
    direction,
    alignItems,
    alignContent,
    children,
    responsive,
    fluid,
    css,
    ...otherProps
  } = containerProps;
  const domRef = useDOMRef(ref);
  const gapUnit = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return `calc(${gap} * $space$sm)`;
  }, [gap]);
  const getMaxWidth = () => {
    if (xs) return "$breakpoints$xs";
    if (sm) return "$breakpoints$sm";
    if (md) return "$breakpoints$md";
    if (lg) return "$breakpoints$lg";
    if (xl) return "$breakpoints$xl";
    return "";
  };
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(container_styles, {
    ref: domRef,
    as: as,
    css: {
      px: gapUnit,
      maxWidth: getMaxWidth(),
      alignItems,
      alignContent,
      flexWrap: wrap,
      display: display,
      justifyContent: justify,
      flexDirection: direction,
      ...css
    },
    fluid: fluid,
    responsive: responsive,
    ...otherProps,
    children: children
  }, void 0, false, {
    fileName: container_jsxFileName,
    lineNumber: 87,
    columnNumber: 5
  }, undefined);
});
Container.displayName = "NextUI.Container";
Container.toString = () => ".nextui-container";
Container.defaultProps = container_defaultProps;
/* harmony default export */ const container = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Container));
;// CONCATENATED MODULE: ./src/container/index.ts


/* harmony default export */ const src_container = (container);
;// CONCATENATED MODULE: ./src/grid/grid.styles.ts

const StyledGridContainer = styled("div", {});
const StyledGridItem = styled("div", {
  margin: 0,
  boxSizing: "border-box",
  padding: "$$gridGapUnit"
});
;// CONCATENATED MODULE: ./src/grid/grid-item.tsx
var grid_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid-item.tsx";





const grid_item_defaultProps = {
  xs: false,
  sm: false,
  md: false,
  lg: false,
  xl: false,
  className: ""
};
const getItemLayout = val => {
  const display = val === 0 ? "none" : "inherit";
  if (typeof val === "number") {
    const width = 100 / 12 * val;
    const ratio = width > 100 ? "100%" : width < 0 ? "0" : `${width}%`;
    return {
      flexGrow: 0,
      display,
      maxWidth: ratio,
      flexBasis: ratio
    };
  }
  return {
    flexGrow: 1,
    display,
    maxWidth: "100%",
    flexBasis: "0"
  };
};
const GridItem = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  xs,
  sm,
  md,
  lg,
  xl,
  css,
  justify,
  direction,
  alignItems,
  alignContent,
  children,
  className,
  ...props
}, ref) => {
  const classes = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const breaks = {
      xs,
      sm,
      md,
      lg,
      xl
    };
    const classString = Object.keys(breaks).reduce((pre, name) => {
      if (breaks[name] !== undefined && breaks[name] !== false) return `${pre} ${name}`;
      return pre;
    }, "");
    return classString.trim();
  }, [xs, sm, md, lg, xl]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledGridItem, {
    ref: ref,
    className: clsx("nextui-grid-item", classes, className),
    css: {
      alignItems,
      alignContent,
      justifyContent: justify,
      flexDirection: direction,
      "&.xs": {
        ...getItemLayout(xs)
      },
      "@xsMax": {
        "&.xs": {
          ...getItemLayout(xs)
        }
      },
      "@sm": {
        "&.sm": {
          ...getItemLayout(sm)
        }
      },
      "@md": {
        "&.md": {
          ...getItemLayout(md)
        }
      },
      "@lg": {
        "&.lg": {
          ...getItemLayout(lg)
        }
      },
      "@xl": {
        "&.xl": {
          ...getItemLayout(xl)
        }
      },
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_item_jsxFileName,
    lineNumber: 103,
    columnNumber: 7
  }, undefined);
});
GridItem.displayName = "NextUI.GridItem";
GridItem.toString = () => ".nextui-grid-item";
/* harmony default export */ const grid_item = (with_defaults(GridItem, grid_item_defaultProps));
;// CONCATENATED MODULE: ./src/grid/grid.tsx
var grid_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid.tsx";



const Grid = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  css,
  ...props
}, ref) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(grid_item, {
    ref: ref,
    css: css,
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_jsxFileName,
    lineNumber: 10,
    columnNumber: 5
  }, undefined);
});
Grid.displayName = "NextUI.Grid";
Grid.toString = () => ".nextui-grid";
/* harmony default export */ const grid = (Grid);
;// CONCATENATED MODULE: ./src/grid/grid-container.tsx
var grid_container_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid-container.tsx";





const grid_container_defaultProps = {
  gap: 0,
  wrap: "wrap",
  className: ""
};
const GridContainer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  gap,
  wrap,
  css,
  children,
  className,
  ...props
}, ref) => {
  const gapUnit = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return `calc(${gap} * $space$3)`;
  }, [gap]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(grid_item, {
    ref: ref,
    className: clsx("nextui-grid-container", className),
    css: {
      $$gridGapUnit: gapUnit,
      display: "flex",
      flexWrap: wrap,
      boxSizing: "border-box",
      margin: "calc(-1 * $$gridGapUnit)",
      width: "calc(100% + $$gridGapUnit * 2)",
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_container_jsxFileName,
    lineNumber: 34,
    columnNumber: 7
  }, undefined);
});
GridContainer.displayName = "NextUI.GridContainer";
GridContainer.toString = () => ".nextui-grid-container";
/* harmony default export */ const grid_container = (with_defaults(GridContainer, grid_container_defaultProps));
;// CONCATENATED MODULE: ./src/grid/index.ts



grid.Container = grid_container;
/* harmony default export */ const src_grid = (grid);
;// CONCATENATED MODULE: ./src/spacer/spacer.styles.ts

const StyledSpacer = styled("span", {
  size: "1px",
  variants: {
    inline: {
      true: {
        display: "inline-block"
      },
      false: {
        display: "block"
      }
    }
  },
  defaultVariants: {
    inline: false
  }
});
;// CONCATENATED MODULE: ./src/spacer/spacer.tsx
var spacer_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/spacer/spacer.tsx";





const spacer_defaultProps = {
  x: 1,
  y: 1
};
const Spacer = ({
  x,
  y,
  css,
  ...props
}) => {
  const marginLeft = getMargin(x);
  const marginTop = getMargin(y);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpacer, {
    "aria-hidden": "true",
    css: {
      marginLeft: `${marginLeft} !important`,
      marginTop: `${marginTop} !important`,
      ...css
    },
    ...props
  }, void 0, false, {
    fileName: spacer_jsxFileName,
    lineNumber: 31,
    columnNumber: 5
  }, undefined);
};
Spacer.toString = () => ".nextui-spacer";
const MemoSpacer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Spacer);
/* harmony default export */ const spacer = (with_defaults(MemoSpacer, spacer_defaultProps));
;// CONCATENATED MODULE: ./src/spacer/index.ts


/* harmony default export */ const src_spacer = (spacer);
;// CONCATENATED MODULE: ./src/utils/css-transition.ts


const CSSTransition = ({
  children,
  onExited,
  onEntered,
  className,
  childrenRef,
  enterTime = 60,
  leaveTime = 60,
  clearTime = 60,
  visible = false,
  name = "transition",
  ...otherProps
}) => {
  const [classes, setClasses] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)("");
  const [renderable, setRenderable] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(visible);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(() => {
    const statusClassName = visible ? "enter" : "leave";
    if (visible && !renderable) setRenderable(true);
    setClasses(`${name}-${statusClassName}`);
    const time = visible ? enterTime : leaveTime;

    // set class to active
    const timer = setTimeout(() => {
      setClasses(`${name}-${statusClassName} ${name}-${statusClassName}-active`);
      if (statusClassName === "leave") {
        onExited == null ? void 0 : onExited();
      } else {
        onEntered == null ? void 0 : onEntered();
      }
      clearTimeout(timer);
    }, time);

    // remove classess when animation over
    const clearClassesTimer = setTimeout(() => {
      if (!visible) {
        setClasses("");
        setRenderable(false);
      }
      clearTimeout(clearClassesTimer);
    }, time + clearTime);
    return () => {
      clearTimeout(timer);
      clearTimeout(clearClassesTimer);
    };
  }, [visible, renderable]);

  // update children ref classes
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!(childrenRef != null && childrenRef.current)) return;
    const classesArr = classes.split(" ");
    const refClassesArr = childrenRef.current.className.split(" ");
    const newRefClassesArr = refClassesArr.filter(item => !item.includes(name));
    childrenRef.current.className = clsx(newRefClassesArr, classesArr);
  }, [childrenRef, classes]);
  if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(children) || !renderable) return null;
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(children, {
    ...otherProps,
    className: clsx(children.props.className, className, !(childrenRef != null && childrenRef.current) && classes)
  });
};
/* harmony default export */ const css_transition = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(CSSTransition));
;// CONCATENATED MODULE: ./src/tooltip/tooltip.styles.ts

const StyledTooltipTrigger = styled("div", {
  width: "max-content",
  display: "inherit"
});
const StyledTooltipArrow = styled("span", {
  display: "none",
  content: "",
  size: "$5",
  zIndex: "-2",
  background: "$$tooltipColor",
  br: "0px 0px 2px 0px",
  position: "absolute"
});
const StyledTooltip = styled("div", {
  position: "relative",
  fs: "$sm",
  padding: 0,
  variants: {
    hideArrow: {
      false: {
        [`& ${StyledTooltipArrow}`]: {
          display: "block"
        }
      }
    }
  }
});
const StyledTooltipContent = styled("div", {
  position: "absolute",
  width: "auto",
  padding: "$3 $sm",
  opacity: 0,
  zIndex: "$10",
  br: "$lg",
  "@motion": {
    transition: "none"
  },
  variants: {
    color: {
      default: {
        $$tooltipColor: "$colors$background",
        bg: "$$tooltipColor"
      },
      primary: {
        $$tooltipColor: "$colors$primary",
        bg: "$$tooltipColor"
      },
      secondary: {
        $$tooltipColor: "$colors$secondary",
        bg: "$$tooltipColor"
      },
      success: {
        $$tooltipColor: "$colors$success",
        bg: "$$tooltipColor"
      },
      warning: {
        $$tooltipColor: "$colors$warning",
        bg: "$$tooltipColor"
      },
      error: {
        $$tooltipColor: "$colors$error",
        bg: "$$tooltipColor"
      },
      invert: {
        $$tooltipColor: "$colors$foreground",
        bg: "$$tooltipColor"
      }
    },
    contentColor: {
      default: {
        $$tooltipTextColor: "$colors$text",
        color: "$$tooltipTextColor"
      },
      primary: {
        $$tooltipTextColor: "$colors$primary",
        color: "$$tooltipTextColor"
      },
      secondary: {
        $$tooltipTextColor: "$colors$secondary",
        color: "$$tooltipTextColor"
      },
      success: {
        $$tooltipTextColor: "$colors$success",
        color: "$$tooltipTextColor"
      },
      warning: {
        $$tooltipTextColor: "$colors$warning",
        color: "$$tooltipTextColor"
      },
      error: {
        $$tooltipTextColor: "$colors$error",
        color: "$$tooltipTextColor"
      },
      invert: {
        $$tooltipTextColor: "$colors$invert",
        color: "$$tooltipTextColor"
      }
    },
    rounded: {
      true: {
        br: "$pill"
      }
    },
    shadow: {
      true: {
        bs: "$md"
      }
    },
    animated: {
      true: {
        transition: "opacity 0.25s ease 0s, top 0.25s ease 0s"
      },
      false: {
        transition: "none"
      }
    }
  },
  compoundVariants: [
  // color='primary' && contentColor='default'
  {
    color: "primary",
    contentColor: "default",
    css: {
      $$tooltipTextColor: "$colors$white"
    }
  },
  // color='secondary' && contentColor='default'
  {
    color: "secondary",
    contentColor: "default",
    css: {
      $$tooltipTextColor: "$colors$white"
    }
  },
  // color='success' && contentColor='default'
  {
    color: "success",
    contentColor: "default",
    css: {
      $$tooltipTextColor: "$colors$white"
    }
  },
  // color='error' && contentColor='default'
  {
    color: "error",
    contentColor: "default",
    css: {
      $$tooltipTextColor: "$colors$white"
    }
  },
  // color='invert' && contentColor='default'
  {
    color: "invert",
    contentColor: "default",
    css: {
      $$tooltipTextColor: "$colors$background"
    }
  }],
  defaultVariants: {
    color: "default",
    contentColor: "default"
  }
});
;// CONCATENATED MODULE: ./src/tooltip/placement.ts
const defaultRect = {
  top: -1000,
  left: -1000,
  right: -1000,
  bottom: -1000,
  width: 0,
  height: 0
};
const getRect = ref => {
  if (!ref || !ref.current) return defaultRect;
  const rect = ref.current.getBoundingClientRect();
  return {
    ...rect,
    width: rect.width || rect.right - rect.left,
    height: rect.height || rect.bottom - rect.top,
    top: rect.top + document.documentElement.scrollTop,
    bottom: rect.bottom + document.documentElement.scrollTop,
    left: rect.left + document.documentElement.scrollLeft,
    right: rect.right + document.documentElement.scrollLeft
  };
};
const defaultTooltipPlacement = {
  top: "-1000px",
  left: "-1000px",
  transform: "none"
};
const getPlacement = (placement, rect, offset) => {
  const placements = {
    top: {
      top: `${rect.top - offset}px`,
      left: `${rect.left + rect.width / 2}px`,
      transform: "translate(-50%, -100%)"
    },
    topStart: {
      top: `${rect.top - offset}px`,
      left: `${rect.left}px`,
      transform: "translate(0, -100%)"
    },
    topEnd: {
      top: `${rect.top - offset}px`,
      left: `${rect.left + rect.width}px`,
      transform: "translate(-100%, -100%)"
    },
    bottom: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left + rect.width / 2}px`,
      transform: "translate(-50%, 0)"
    },
    bottomStart: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left}px`,
      transform: "translate(0, 0)"
    },
    bottomEnd: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left + rect.width}px`,
      transform: "translate(-100%, 0)"
    },
    left: {
      top: `${rect.top + rect.height / 2}px`,
      left: `${rect.left - offset}px`,
      transform: "translate(-100%, -50%)"
    },
    leftStart: {
      top: `${rect.top}px`,
      left: `${rect.left - offset}px`,
      transform: "translate(-100%, 0)"
    },
    leftEnd: {
      top: `${rect.top + rect.height}px`,
      left: `${rect.left - offset}px`,
      transform: "translate(-100%, -100%)"
    },
    right: {
      top: `${rect.top + rect.height / 2}px`,
      left: `${rect.right + offset}px`,
      transform: "translate(0, -50%)"
    },
    rightStart: {
      top: `${rect.top}px`,
      left: `${rect.right + offset}px`,
      transform: "translate(0, 0)"
    },
    rightEnd: {
      top: `${rect.top + rect.height}px`,
      left: `${rect.right + offset}px`,
      transform: "translate(0, -100%)"
    }
  };
  return placements[placement] || placements.top;
};
const getIconPlacement = (placement, offset) => {
  const placements = {
    top: {
      top: "auto",
      right: "auto",
      left: "50%",
      bottom: "0px",
      transform: "translate(-50%, 100%) rotate(45deg)"
    },
    topStart: {
      top: "auto",
      right: "auto",
      left: "8%",
      bottom: "0px",
      transform: "translate(8%, 100%) rotate(45deg)"
    },
    topEnd: {
      top: "auto",
      right: "8%",
      left: "auto",
      bottom: "0px",
      transform: "translate(8%, 100%) rotate(45deg)"
    },
    bottom: {
      top: `0px`,
      right: "auto",
      left: "50%",
      bottom: "auto",
      transform: "translate(-50%, -100%) rotate(225deg)"
    },
    bottomStart: {
      top: `0px`,
      right: "auto",
      left: "8%",
      bottom: "auto",
      transform: "translate(8%, -100%) rotate(225deg)"
    },
    bottomEnd: {
      top: `0px`,
      right: "8%",
      left: "auto",
      bottom: "auto",
      transform: "translate(8%, -100%) rotate(225deg)"
    },
    left: {
      top: "50%",
      right: `-${offset - 1}px`,
      left: "auto",
      bottom: "auto",
      transform: "translate(100%, -50%) rotate(-45deg)"
    },
    leftStart: {
      top: "calc(15% + 1px)",
      right: `-${offset - 1}px`,
      left: "auto",
      bottom: "auto",
      transform: "translate(100%, 0) rotate(-45deg)"
    },
    leftEnd: {
      top: "auto",
      right: `-${offset - 1}px`,
      left: "auto",
      bottom: "calc(15% + 1px)",
      transform: "translate(100%, 0) rotate(-45deg)"
    },
    right: {
      top: "50%",
      right: "auto",
      left: `-${offset - 1}px`,
      bottom: "auto",
      transform: "translate(-100%, -50%) rotate(135deg)"
    },
    rightStart: {
      top: "calc(15% + 1px)",
      right: "auto",
      left: `-${offset - 1}px`,
      bottom: "auto",
      transform: "translate(-100%, 0) rotate(135deg)"
    },
    rightEnd: {
      top: "auto",
      right: "auto",
      left: `-${offset - 1}px`,
      bottom: "calc(15% + 1px)",
      transform: "translate(-100%, 0) rotate(135deg)"
    }
  };
  return placements[placement] || placements.top;
};
;// CONCATENATED MODULE: ./src/tooltip/tooltip-content.tsx
var tooltip_content_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/tooltip/tooltip-content.tsx";











const tooltip_content_defaultProps = {
  placement: "top",
  offset: 12,
  className: ""
};
const tooltip_content_preClass = "nextui-tooltip";
const TooltipContent = ({
  children,
  parent,
  visible,
  offset,
  placement,
  rounded: _rounded,
  animated,
  className,
  hideArrow,
  css,
  ...props
}) => {
  const el = src_use_portal("tooltip");
  const selfRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [rect, setRect] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultTooltipPlacement);
  if (!parent) return null;
  const updateRect = () => {
    const pos = getPlacement(placement, getRect(parent), offset);
    setRect(pos);
  };
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const {
    transform,
    top,
    left,
    right,
    bottom
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => getIconPlacement(placement, 5), [placement]);

  // eslint-disable-next-line react-hooks/rules-of-hooks
  src_use_resize(updateRect);
  // eslint-disable-next-line react-hooks/rules-of-hooks
  src_use_click_anywhere(() => updateRect());
  // eslint-disable-next-line react-hooks/rules-of-hooks
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    updateRect();
  }, [visible]);
  const preventHandler = event => {
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
  };
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? "open" : "closed";
  }, [visible]);
  if (!el) return null;
  return /*#__PURE__*/(0,external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_.createPortal)( /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
    enterTime: 20,
    leaveTime: 20,
    name: `${tooltip_content_preClass}-wrapper`,
    visible: visible,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipContent, {
      ref: selfRef,
      animated: animated,
      className: clsx(`${tooltip_content_preClass}-content`, `${tooltip_content_preClass}--${getState}`, className),
      css: {
        left: rect.left,
        top: `calc(${rect.top} + 6px)`,
        transform: rect.transform,
        [`&.${tooltip_content_preClass}-wrapper-enter-active`]: {
          opacity: 1,
          top: rect.top
        },
        ...css
      },
      "data-state": getState,
      onClick: preventHandler,
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltip, {
        className: clsx(tooltip_content_preClass, {
          [`${tooltip_content_preClass}--with-arrow`]: !hideArrow
        }),
        "data-state": getState,
        hideArrow: hideArrow,
        role: "tooltip",
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipArrow, {
          className: `${tooltip_content_preClass}-arrow`,
          css: {
            left,
            top,
            right,
            bottom,
            transform
          }
        }, void 0, false, {
          fileName: tooltip_content_jsxFileName,
          lineNumber: 129,
          columnNumber: 11
        }, undefined), children]
      }, void 0, true, {
        fileName: tooltip_content_jsxFileName,
        lineNumber: 121,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: tooltip_content_jsxFileName,
      lineNumber: 103,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: tooltip_content_jsxFileName,
    lineNumber: 102,
    columnNumber: 5
  }, undefined), el);
};
TooltipContent.toString = () => ".nextui-tooltip-content";
/* harmony default export */ const tooltip_content = (with_defaults(TooltipContent, tooltip_content_defaultProps));
;// CONCATENATED MODULE: ./src/tooltip/tooltip.tsx
var tooltip_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/tooltip/tooltip.tsx";






const tooltip_defaultProps = {
  initialVisible: false,
  hideArrow: false,
  animated: true,
  shadow: true,
  rounded: false,
  keepMounted: false,
  isDisabled: false,
  trigger: "hover",
  enterDelay: 0,
  leaveDelay: 0,
  className: "",
  portalClassName: "",
  onVisibleChange: () => {}
};
const Tooltip = ({
  children,
  initialVisible,
  content,
  offset,
  placement,
  portalClassName,
  enterDelay,
  leaveDelay,
  trigger,
  rounded,
  animated,
  shadow,
  className,
  color,
  contentColor,
  onVisibleChange,
  hideArrow,
  css,
  triggerCss,
  onClick,
  keepMounted,
  visible: customVisible,
  isDisabled,
  ...props
}) => {
  const timer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [visible, setVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialVisible);
  const contentProps = {
    animated,
    visible,
    css,
    shadow,
    offset,
    placement,
    rounded,
    color,
    contentColor,
    hideArrow,
    parent: ref,
    className: portalClassName
  };
  const changeVisible = nextState => {
    const clear = () => {
      clearTimeout(timer.current);
      timer.current = undefined;
    };
    const handler = nextState => {
      setVisible(nextState);
      onVisibleChange(nextState);
      clear();
    };
    clear();
    if (nextState) {
      timer.current = window.setTimeout(() => handler(true), enterDelay);
      return;
    }
    timer.current = window.setTimeout(() => handler(false), leaveDelay);
  };
  const mouseEventHandler = next => {
    trigger === "hover" && changeVisible(next);
  };
  const clickEventHandler = () => {
    trigger === "click" && changeVisible(!visible);
    onClick == null ? void 0 : onClick();
  };
  src_use_click_away(ref, () => trigger === "click" && !keepMounted && changeVisible(false));
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (customVisible === undefined) return;
    changeVisible(customVisible);
  }, [customVisible]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipTrigger, {
    ref: ref,
    className: `nextui-tooltip-button ${className}`,
    css: triggerCss,
    role: "button",
    tabIndex: -1,
    onBlur: () => mouseEventHandler(false),
    onClickCapture: clickEventHandler,
    onFocus: () => mouseEventHandler(true),
    onKeyUp: () => mouseEventHandler(true),
    onMouseEnter: () => mouseEventHandler(true),
    onMouseLeave: () => mouseEventHandler(false),
    ...props,
    children: [children, content && !isDisabled ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(tooltip_content, {
      ...contentProps,
      children: content
    }, void 0, false, {
      fileName: tooltip_jsxFileName,
      lineNumber: 159,
      columnNumber: 33
    }, undefined) : null]
  }, void 0, true, {
    fileName: tooltip_jsxFileName,
    lineNumber: 144,
    columnNumber: 5
  }, undefined);
};
Tooltip.toString = () => ".nextui-tooltip";
/* harmony default export */ const tooltip = (with_defaults(Tooltip, tooltip_defaultProps));
;// CONCATENATED MODULE: ./src/tooltip/index.ts


/* harmony default export */ const src_tooltip = (tooltip);
;// CONCATENATED MODULE: ./src/snippet/snippet.styles.ts


const StyledSnippet = styled("div", {
  display: "flex",
  position: "relative",
  width: "initial",
  maxWidth: "100%",
  padding: "calc($space$lg * 0.75) $space$lg",
  br: "$lg",
  bg: "$background",
  variants: {
    color: {
      default: {
        $$snippetBorderColor: "$border",
        $$snippetBgColor: "$background",
        color: "$text"
      },
      primary: {
        $$snippetBorderColor: "$border",
        $$snippetBgColor: "$primary",
        color: "$text"
      },
      success: {
        $$snippetBorderColor: "$success",
        $$snippetBgColor: "$background",
        color: "$success"
      },
      warning: {
        $$snippetBorderColor: "$warning",
        $$snippetBgColor: "$background",
        color: "$warning"
      },
      error: {
        $$snippetBorderColor: "$error",
        $$snippetBgColor: "$background",
        color: "$error"
      },
      secondary: {
        $$snippetBorderColor: "$secondary",
        $$snippetBgColor: "$background",
        color: "$secondary"
      },
      invert: {
        $$snippetBorderColor: "$foreground",
        $$snippetBgColor: "$foreground",
        color: "$background"
      }
    },
    borderWeight: {
      light: {
        $$borderWeight: "$light"
      },
      normal: {
        $$borderWeight: "$normal"
      },
      bold: {
        $$borderWeight: "$bold"
      },
      extrabold: {
        $$borderWeight: "$extrabold"
      },
      black: {
        $$borderWeight: "$black"
      }
    },
    bordered: {
      true: {
        border: "$$borderWeight solid $$snippetBorderColor"
      }
    },
    filled: {
      true: {
        backgroundColor: "$$snippetBgColor"
      }
    }
  },
  defaultVariants: {
    color: "default",
    borderWeight: "normal",
    filled: false
  }
});
const StyledSnippetPre = styled("pre", {
  margin: 0,
  padding: 0,
  border: "none",
  br: 0,
  bgColor: "transparent",
  color: "inherit",
  fontSize: "$sm",
  "*": {
    margin: 0,
    padding: 0,
    fontSize: "inherit",
    color: "inherit"
  },
  variants: {
    withCopyButton: {
      true: {
        width: "calc(100% - 2 * $lg)"
      },
      false: {
        width: "100%"
      }
    }
  }
});
const StyledSnippetCopyButtonIcon = styled("svg", {});
const StyledSnippetCopyButton = styled("button", {
  display: "inline-flex",
  jc: "center",
  border: "none",
  ai: "flex-start",
  bg: "transparent",
  width: "calc(2 * $space$lg)",
  br: "$xs",
  color: "inherit",
  transition: "opacity 0.2s ease 0s",
  cursor: "pointer",
  us: "none",
  "@motion": {
    transition: "none"
  },
  "&:hover": {
    opacity: "0.7"
  },
  [`& ${StyledSnippetCopyButtonIcon}`]: {
    path: {
      fill: "$accents6"
    }
  }
}, sharedFocus);
;// CONCATENATED MODULE: ./src/snippet/snippet-icon.tsx
var snippet_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/snippet/snippet-icon.tsx";




const snippet_icon_defaultProps = {
  width: 18,
  height: 18
};
const Copy = ({
  size,
  fill,
  width,
  height,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButtonIcon, {
    height: size || height,
    viewBox: "0 0 24 24",
    width: size || width,
    xmlns: "http://www.w3.org/2000/svg",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z",
      fill: fill
    }, void 0, false, {
      fileName: snippet_icon_jsxFileName,
      lineNumber: 33,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: snippet_icon_jsxFileName,
    lineNumber: 26,
    columnNumber: 5
  }, undefined);
};
Copy.toString = () => ".nextui-snippet-copy-icon";
const MemoCopy = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_.memo(Copy);
/* harmony default export */ const snippet_icon = (with_defaults(MemoCopy, snippet_icon_defaultProps));
;// CONCATENATED MODULE: ./src/snippet/snippet.tsx
var snippet_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/snippet/snippet.tsx";








const snippet_defaultProps = {
  symbol: "$",
  showTooltip: true,
  copy: "default",
  tooltipColor: "default",
  tooltipCopyText: "Copy",
  tooltipCopiedText: "Copied"
};
const textArrayToString = text => {
  return text.reduce((pre, current) => {
    if (!current) return pre;
    return pre ? `${pre}\n${current}` : current;
  }, "");
};
const Snippet = ({
  bordered,
  children,
  symbol,
  showTooltip,
  text,
  tooltipCopyText,
  tooltipCopiedText,
  tooltipColor,
  copy: copyType,
  ...props
}) => {
  const [copied, setCopied] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    copy
  } = src_use_clipboard();
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const isMultiLine = text && Array.isArray(text);
  const showCopyIcon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => copyType !== "prevent", [copyType]);
  const childText = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isMultiLine) return textArrayToString(text);
    if (!children) return text;
    if (!ref.current) return "";
    return ref.current.textContent;
  }, [ref.current, children, text]);
  const symbolBefore = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const str = symbol.trim();
    return str ? `${str} ` : "";
  }, [symbol]);
  const clickHandler = () => {
    if (!childText || !showCopyIcon) return;
    copy(childText);
    if (copyType === "slient") return;
    setCopied(true);
  };
  const handleTooltipVisibleChange = () => {
    setTimeout(() => {
      copied && setCopied(false);
    }, 400);
  };
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippet, {
    ...props,
    children: [isMultiLine ? text.map((t, index) => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetPre, {
      className: "nextui-snippet-pre",
      css: {
        "&:before": {
          content: symbolBefore,
          us: "none"
        }
      },
      children: t
    }, `${index}-${t}`, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 105,
      columnNumber: 11
    }, undefined)) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetPre, {
      ref: ref,
      className: "nextui-snippet-pre",
      css: {
        "&:before": {
          content: symbolBefore,
          us: "none"
        }
      },
      children: children || text
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 119,
      columnNumber: 9
    }, undefined), showCopyIcon && copyType !== "slient" ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_tooltip, {
      hideArrow: true,
      rounded: true,
      color: tooltipColor,
      content: copied ? tooltipCopiedText : tooltipCopyText,
      onVisibleChange: handleTooltipVisibleChange,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButton, {
        className: "nextui-snippet-copy-button",
        onClick: clickHandler,
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(snippet_icon, {}, void 0, false, {
          fileName: snippet_jsxFileName,
          lineNumber: 141,
          columnNumber: 13
        }, undefined)
      }, void 0, false, {
        fileName: snippet_jsxFileName,
        lineNumber: 140,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 133,
      columnNumber: 9
    }, undefined) : copyType !== "prevent" && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButton, {
      className: "nextui-snippet-copy-button",
      onClick: clickHandler,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(snippet_icon, {}, void 0, false, {
        fileName: snippet_jsxFileName,
        lineNumber: 147,
        columnNumber: 13
      }, undefined)
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 146,
      columnNumber: 11
    }, undefined)]
  }, void 0, true, {
    fileName: snippet_jsxFileName,
    lineNumber: 102,
    columnNumber: 5
  }, undefined);
};
if (__DEV__) {
  Snippet.displayName = "NextUI.Snippet";
}
Snippet.toString = () => ".nextui-snippet";
const MemoSnippet = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Snippet);
/* harmony default export */ const snippet = (with_defaults(MemoSnippet, snippet_defaultProps));
;// CONCATENATED MODULE: ./src/snippet/index.ts


/* harmony default export */ const src_snippet = (snippet);
;// CONCATENATED MODULE: ./src/row/row.styles.ts

const StyledRow = styled("div", {
  display: "flex",
  position: "relative",
  boxSizing: "border-box",
  variants: {
    fluid: {
      true: {
        width: "100%"
      }
    }
  },
  defaultVariants: {
    fluid: true
  }
});
/* harmony default export */ const row_styles = (StyledRow);
;// CONCATENATED MODULE: ./src/row/row.tsx
var row_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/row/row.tsx";




const row_defaultProps = {
  gap: 0,
  wrap: "nowrap",
  justify: "flex-start",
  align: "flex-start"
};
const Row = ({
  children,
  gap,
  justify,
  align,
  wrap,
  css,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(row_styles, {
    css: {
      flexWrap: wrap,
      $$rowGap: `calc(${gap} * $space$lg)`,
      marginLeft: `calc(${gap} * $space$lg / 2)`,
      marginRight: `calc(${gap} * $space$lg / 2)`,
      justifyContent: justify,
      alignItems: align,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: row_jsxFileName,
    lineNumber: 33,
    columnNumber: 5
  }, undefined);
};
Row.toString = () => ".nextui-row";
const MemoRow = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Row);
/* harmony default export */ const row = (with_defaults(MemoRow, row_defaultProps));
;// CONCATENATED MODULE: ./src/row/index.ts


/* harmony default export */ const src_row = (row);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/link/dist/module.js



function $298d61e98472621b$export$dcf14c9974fe2767(props, ref) {
  let {
    elementType = 'a',
    onPress: onPress,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    // @ts-ignore
    onClick: deprecatedOnClick,
    isDisabled: isDisabled,
    ...otherProps
  } = props;
  let linkProps;
  if (elementType !== 'a') linkProps = {
    role: 'link',
    tabIndex: !isDisabled ? 0 : undefined
  };
  let {
    focusableProps: focusableProps
  } = module_$e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, ref);
  let {
    pressProps: pressProps,
    isPressed: isPressed
  } = dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    onPress: onPress,
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    isDisabled: isDisabled,
    ref: ref
  });
  let domProps = utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(otherProps, {
    labelable: true
  });
  let interactionHandlers = utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(focusableProps, pressProps);
  return {
    isPressed: isPressed,
    linkProps: utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      ...interactionHandlers,
      ...linkProps,
      'aria-disabled': isDisabled || undefined,
      onClick: e => {
        pressProps.onClick(e);
        if (deprecatedOnClick) {
          deprecatedOnClick(e);
          console.warn('onClick is deprecated, please use onPress');
        }
      }
    })
  };
}

;// CONCATENATED MODULE: ./src/link/link.styles.ts


const StyledLinkIcon = styled("svg", {
  ml: "$1",
  as: "center",
  display: "flex",
  color: "currentColor"
});
const StyledLink = styled("a", {
  $$linkColor: "$colors$link",
  display: "inline-flex",
  alignItems: "center",
  lineHeight: "inherit",
  textDecoration: "none",
  width: "$fit",
  backgroundColor: "transparent",
  backgroundImage: "inherit",
  backgroundClip: "inherit",
  WebkitTextFillColor: "inherit",
  color: "$$linkColor",
  outline: "none",
  maxW: "$max",
  "&:hover": {
    opacity: 0.8
  },
  "@motion": {
    transition: "none"
  },
  variants: {
    color: {
      inherit: {
        $$linkColor: "inherit"
      },
      default: {
        $$linkColor: "$colors$link"
      },
      text: {
        $$linkColor: "$colors$text"
      },
      primary: {
        $$linkColor: "$colors$primary"
      },
      secondary: {
        $$linkColor: "$colors$secondary"
      },
      success: {
        $$linkColor: "$colors$success"
      },
      warning: {
        $$linkColor: "$colors$warning"
      },
      error: {
        $$linkColor: "$colors$error"
      }
    },
    underline: {
      true: {
        "&:hover, &:active, &:focus": {
          textDecoration: "underline"
        }
      }
    },
    block: {
      true: {
        padding: "$2 $4",
        borderRadius: "$base",
        "&:hover": {
          backgroundColor: "$$linkBackgroundColor"
        }
      }
    },
    animated: {
      true: {
        transition: "opacity 0.25s ease 0s, box-shadow 0.25s ease 0s"
      }
    }
  },
  compoundVariants: [
  /**
   * @block true
   * @animated true
   */
  {
    block: true,
    animated: true,
    css: {
      transition: "opacity 0.25s ease 0s, box-shadow 0.25s ease 0s, background 0.25s ease 0s",
      "@motion": {
        transition: "none"
      }
    }
  }],
  defaultVariants: {
    color: "default",
    animated: true
  }
}, cssFocusVisible);
/* harmony default export */ const link_styles = (StyledLink);
;// CONCATENATED MODULE: ./src/link/icon.tsx
var icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/link/icon.tsx";



const LinkIcon = () => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLinkIcon, {
    className: "nextui-link-icon",
    fill: "none",
    height: "1em",
    shapeRendering: "geometricPrecision",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "1.5",
    viewBox: "0 0 24 24",
    width: "1em",
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 19,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M15 3h6v6"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 20,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M10 14L21 3"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 21,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: icon_jsxFileName,
    lineNumber: 7,
    columnNumber: 5
  }, undefined);
};
LinkIcon.toString = () => ".nextui-link-icon";
/* harmony default export */ const icon = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(LinkIcon));
;// CONCATENATED MODULE: ./src/link/link.tsx
var link_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/link/link.tsx";












const Link = forwardRef((props, ref) => {
  const {
    children,
    isExternal = false,
    as,
    css,
    color = "default",
    autoFocus,
    className,
    ...otherProps
  } = props;
  const domRef = useDOMRef(ref);
  const {
    linkProps
  } = $298d61e98472621b$export$dcf14c9974fe2767({
    ...otherProps,
    elementType: as
  }, domRef);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    autoFocus
  });
  const linkCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let linkBackgroundColor = `$colors$${color}Light`;
    switch (color) {
      case "inherit":
        {
          linkBackgroundColor = "$colors$textLight";
          break;
        }
      case "default":
        {
          linkBackgroundColor = "$colors$linkLight";
          break;
        }
      case "text":
        {
          linkBackgroundColor = "$colors$textLight";
          break;
        }
    }
    return {
      ...css,
      $$linkBackgroundColor: linkBackgroundColor
    };
  }, [css, color]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(link_styles, {
    ref: domRef,
    as: as,
    className: clsx("nextui-link", className),
    color: color,
    css: linkCss,
    isFocusVisible: isFocusVisible,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(linkProps, focusProps, otherProps),
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [children, isExternal && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(icon, {}, void 0, false, {
        fileName: link_jsxFileName,
        lineNumber: 92,
        columnNumber: 24
      }, undefined)]
    }, void 0, true)
  }, void 0, false, {
    fileName: link_jsxFileName,
    lineNumber: 81,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Link.displayName = "NextUI.Link";
}
Link.toString = () => ".nextui-link";
/* harmony default export */ const link_link = (Link);
;// CONCATENATED MODULE: ./src/link/index.ts


/* harmony default export */ const src_link = (link_link);
;// CONCATENATED MODULE: ./src/loading/loading.styles.ts

const loadingBlink = keyframes({
  "0%": {
    opacity: "0.2"
  },
  "20%": {
    opacity: 1
  },
  "100%": {
    opacity: "0.2"
  }
});
const rotate = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
const points = keyframes({
  "0%": {
    transform: "translate(0px, 0px)"
  },
  "50%": {
    transform: "translate(0, calc(-$$loadingSize * 1.4))"
  },
  "100%": {
    transform: "translate(0px, 0px)"
  }
});
const spinner = keyframes({
  "0%": {
    opacity: 1
  },
  "100%": {
    opacity: 0.15
  }
});
const StyledLoadingContainer = styled("div", {
  d: "inline-flex",
  fd: "column",
  ai: "center",
  position: "relative",
  variants: {
    color: {
      currentColor: {
        $$loadingColor: "currentColor"
      },
      white: {
        $$loadingColor: "$colors$white"
      },
      default: {
        $$loadingColor: "$colors$primary"
      },
      primary: {
        $$loadingColor: "$colors$primary"
      },
      secondary: {
        $$loadingColor: "$colors$secondary"
      },
      success: {
        $$loadingColor: "$colors$success"
      },
      warning: {
        $$loadingColor: "$colors$warning"
      },
      error: {
        $$loadingColor: "$colors$error"
      }
    },
    textColor: {
      white: {
        $$loadingTextColor: "$colors$white"
      },
      default: {
        $$loadingTextColor: "$colors$text"
      },
      primary: {
        $$loadingTextColor: "$colors$primary"
      },
      secondary: {
        $$loadingTextColor: "$colors$secondary"
      },
      success: {
        $$loadingTextColor: "$colors$success"
      },
      warning: {
        $$loadingTextColor: "$colors$warning"
      },
      error: {
        $$loadingTextColor: "$colors$error"
      }
    }
  },
  defaultVariants: {
    color: "default",
    textColor: "default"
  }
});
const StyledSpinnerContainer = styled("div", {
  size: "100%",
  position: "relative",
  left: "50%",
  top: "50%"
});
const StyledSpinner = styled("div", {
  d: "flex",
  fd: "column",
  jc: "center",
  ai: "center",
  position: "relative",
  variants: {
    size: {
      xs: {
        size: "$6"
      },
      sm: {
        size: "$8"
      },
      md: {
        size: "$9"
      },
      lg: {
        size: "$11"
      },
      xl: {
        size: "$12"
      }
    }
  }
});
const StyledSpinnerSpan = styled("span", {
  bg: "$$loadingColor",
  position: "absolute",
  top: "-3.9%",
  width: "24%",
  height: "8%",
  left: "-10%",
  br: "$lg",
  animation: `${spinner} 1.2s linear 0s infinite normal none running`,
  "&:nth-child(1)": {
    animationDelay: "-1.2s",
    transform: "rotate(0deg) translate(146%)"
  },
  "&:nth-child(2)": {
    animationDelay: "-1.1s",
    transform: "rotate(30deg) translate(146%)"
  },
  "&:nth-child(3)": {
    animationDelay: "-1s",
    transform: "rotate(60deg) translate(146%)"
  },
  "&:nth-child(4)": {
    animationDelay: "-0.9s",
    transform: "rotate(90deg) translate(146%)"
  },
  "&:nth-child(5)": {
    animationDelay: "-0.8s",
    transform: "rotate(120deg) translate(146%)"
  },
  "&:nth-child(6)": {
    animationDelay: "-0.7s",
    transform: "rotate(150deg) translate(146%)"
  },
  "&:nth-child(7)": {
    animationDelay: "-0.6s",
    transform: "rotate(180deg) translate(146%)"
  },
  "&:nth-child(8)": {
    animationDelay: "-0.5s",
    transform: "rotate(210deg) translate(146%)"
  },
  "&:nth-child(9)": {
    animationDelay: "-0.4s",
    transform: "rotate(240deg) translate(146%)"
  },
  "&:nth-child(10)": {
    animationDelay: "-0.3s",
    transform: "rotate(270deg) translate(146%)"
  },
  "&:nth-child(11)": {
    animationDelay: "-0.2s",
    transform: "rotate(300deg) translate(146%)"
  },
  "&:nth-child(12)": {
    animationDelay: "-0.1s",
    transform: "rotate(330deg) translate(146%)"
  }
});
const StyledLoading = styled("span", {
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: "100%",
  dflex: "center",
  bgColor: "transparent",
  us: "none",
  variants: {
    size: {
      xs: {
        $$loadingSize: "$space$8",
        $$loadingBorder: "$space$1"
      },
      sm: {
        $$loadingSize: "$space$10",
        $$loadingBorder: "$space$1"
      },
      md: {
        $$loadingSize: "$space$12",
        $$loadingBorder: "calc($space$1 * 1.5)"
      },
      lg: {
        $$loadingSize: "$space$15",
        $$loadingBorder: "$space$2"
      },
      xl: {
        $$loadingSize: "$space$18",
        $$loadingBorder: "$space$3"
      }
    },
    type: {
      default: {
        d: "flex",
        br: "$rounded",
        position: "relative",
        size: "$$loadingSize",
        i: {
          top: "0px",
          size: "100%",
          position: "absolute",
          br: "inherit"
        },
        "._1": {
          border: "$$loadingBorder solid $$loadingColor",
          borderTop: "$$loadingBorder solid transparent",
          borderLeft: "$$loadingBorder solid transparent",
          borderRight: "$$loadingBorder solid transparent",
          animation: `${rotate} 0.8s ease infinite`
        },
        "._2": {
          border: "$$loadingBorder dotted $$loadingColor",
          borderTop: "$$loadingBorder solid transparent",
          borderLeft: "$$loadingBorder solid transparent",
          borderRight: "$$loadingBorder solid transparent",
          animation: `${rotate} 0.8s linear infinite`,
          opacity: 0.5
        },
        "._3": {
          display: "none"
        }
      },
      points: {
        d: "flex",
        position: "relative",
        transform: "translate(0, calc($$loadingSize * 0.6))",
        i: {
          size: "$$loadingSize",
          margin: "0 3px",
          bg: "$$loadingColor"
        },
        "._1": {
          br: "$rounded",
          animation: `${points} 0.75s ease infinite`
        },
        "._2": {
          br: "$rounded",
          animation: `${points} 0.75s ease infinite 0.25s`
        },
        "._3": {
          br: "$rounded",
          animation: `${points} 0.75s ease infinite 0.5s`
        }
      },
      "points-opacity": {
        d: "flex",
        position: "relative",
        i: {
          display: "inline-block",
          size: "$$loadingSize",
          br: "$rounded",
          bg: "$$loadingColor",
          margin: "0 1px",
          animation: `${loadingBlink} 1.4s infinite both`
        },
        "._2": {
          animationDelay: "0.2s"
        },
        "._3": {
          animationDelay: "0.4s"
        }
      },
      spinner: {},
      gradient: {
        display: "flex",
        position: "relative",
        size: "$$loadingSize",
        "._1": {
          position: "absolute",
          size: "100%",
          border: "0px",
          animation: `${rotate} 1s linear infinite`,
          top: "0px",
          br: "$rounded",
          bg: "linear-gradient(0deg, $background 33%,$$loadingColor 100%)"
        },
        "._2": {
          top: "2px",
          position: "absolute",
          size: "calc(100% - 4px)",
          border: "0px",
          bg: "$background",
          br: "$rounded"
        },
        "._3": {
          display: "none"
        }
      }
    }
  },
  compoundVariants: [
  // points-opacity & xs size
  {
    size: "xs",
    type: "points-opacity",
    css: {
      $$loadingSize: "$space$1"
    }
  },
  // points-opacity & sm size
  {
    size: "sm",
    type: "points-opacity",
    css: {
      $$loadingSize: "$space$2"
    }
  },
  // points-opacity & md size
  {
    size: "md",
    type: "points-opacity",
    css: {
      $$loadingSize: "$space$3"
    }
  },
  // points-opacity & lg size
  {
    size: "lg",
    type: "points-opacity",
    css: {
      $$loadingSize: "$space$4"
    }
  },
  // points-opacity & xl size
  {
    size: "xl",
    type: "points-opacity",
    css: {
      $$loadingSize: "$space$5"
    }
  },
  // points & xs size
  {
    size: "xs",
    type: "points",
    css: {
      $$loadingSize: "$space$1"
    }
  },
  // points & sm size
  {
    size: "sm",
    type: "points",
    css: {
      $$loadingSize: "$space$2"
    }
  },
  // points & md size
  {
    size: "md",
    type: "points",
    css: {
      $$loadingSize: "$space$3"
    }
  },
  // points & lg size
  {
    size: "lg",
    type: "points",
    css: {
      $$loadingSize: "$space$4"
    }
  },
  // points & xl size
  {
    size: "xl",
    type: "points",
    css: {
      $$loadingSize: "$space$5"
    }
  }],
  defaultVariants: {
    type: "default"
  }
});
const StyledLoadingLabel = styled("label", {
  mt: "$1",
  color: "$$loadingTextColor",
  fontSize: "$$loadingSize",
  "*": {
    margin: 0
  },
  variants: {
    size: {
      xs: {
        fontSize: "$space$5",
        marginTop: "$2"
      },
      sm: {
        fontSize: "$space$6",
        marginTop: "$3"
      },
      md: {
        fontSize: "$base",
        marginTop: "$4"
      },
      lg: {
        fontSize: "$space$10",
        marginTop: "$4"
      },
      xl: {
        fontSize: "$space$11",
        marginTop: "$5"
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/loading/spinner.tsx
var spinner_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/loading/spinner.tsx";




const Spinner = ({
  children,
  size,
  color,
  textColor,
  className,
  ...props
}) => {
  const isValidChildren = Array.isArray(children) ? (children == null ? void 0 : children.length) > 1 && children[0] !== undefined : children !== undefined;
  const ariaLabel = children && isValidChildren ? "" : "Loading";
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinner, {
    className: clsx("nextui-spinner", className),
    color: color,
    size: size,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinnerContainer, {
      "aria-label": ariaLabel,
      className: "nextui-spinner-container",
      children: [...new Array(12)].map((_, index) => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinnerSpan, {}, `nextui-spinner-${index}`, false, {
        fileName: spinner_jsxFileName,
        lineNumber: 50,
        columnNumber: 11
      }, undefined))
    }, void 0, false, {
      fileName: spinner_jsxFileName,
      lineNumber: 48,
      columnNumber: 7
    }, undefined), children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingLabel, {
      color: textColor,
      size: size,
      children: children
    }, void 0, false, {
      fileName: spinner_jsxFileName,
      lineNumber: 54,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: spinner_jsxFileName,
    lineNumber: 42,
    columnNumber: 5
  }, undefined);
};
Spinner.toString = () => ".nextui-spinner";
/* harmony default export */ const loading_spinner = (Spinner);
;// CONCATENATED MODULE: ./src/loading/loading.tsx
var loading_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/loading/loading.tsx";






const loading_defaultProps = {
  size: "md",
  type: "default"
};
const loading_preClass = "nextui-loading";
const Loading = ({
  children,
  size,
  gradientBackground,
  loadingCss,
  type,
  ...props
}) => {
  const ariaLabel = children ? "" : "Loading";
  const loadingGradientCSS = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (type === "gradient") return {
      "._2": {
        bg: gradientBackground
      }
    };
  }, [type]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingContainer, {
    ...props,
    children: type === "spinner" ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(loading_spinner, {
      size: size,
      children: children
    }, void 0, false, {
      fileName: loading_jsxFileName,
      lineNumber: 56,
      columnNumber: 9
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoading, {
        "aria-label": ariaLabel,
        className: `${loading_preClass} ${loading_preClass}-${type}`,
        css: {
          ...loadingCss,
          ...loadingGradientCSS
        },
        size: size,
        type: type,
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_1"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 66,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_2"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 67,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_3"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 68,
          columnNumber: 13
        }, undefined)]
      }, void 0, true, {
        fileName: loading_jsxFileName,
        lineNumber: 59,
        columnNumber: 11
      }, undefined), children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingLabel, {
        className: `${loading_preClass}-label`,
        size: size,
        children: children
      }, void 0, false, {
        fileName: loading_jsxFileName,
        lineNumber: 71,
        columnNumber: 13
      }, undefined)]
    }, void 0, true)
  }, void 0, false, {
    fileName: loading_jsxFileName,
    lineNumber: 54,
    columnNumber: 5
  }, undefined);
};
Loading.toString = () => ".nextui-loading";
const MemoLoading = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Loading);
/* harmony default export */ const loading_loading = (with_defaults(MemoLoading, loading_defaultProps));
;// CONCATENATED MODULE: ./src/loading/index.ts

// export styled components


/* harmony default export */ const src_loading = (loading_loading);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/i18n/dist/real-module.js






/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ /*
       * Copyright 2020 Adobe. All rights reserved.
       * This file is licensed to you under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License. You may obtain a copy
       * of the License at http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software distributed under
       * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
       * OF ANY KIND, either express or implied. See the License for the specific language
       * governing permissions and limitations under the License.
       */ // https://en.wikipedia.org/wiki/Right-to-left
const dist_real_module_$148a7a147e38ea7f$var$RTL_SCRIPTS = new Set(["Arab", "Syrc", "Samr", "Mand", "Thaa", "Mend", "Nkoo", "Adlm", "Rohg", "Hebr"]);
const dist_real_module_$148a7a147e38ea7f$var$RTL_LANGS = new Set(["ae", "ar", "arc", "bcc", "bqi", "ckb", "dv", "fa", "glk", "he", "ku", "mzn", "nqo", "pnb", "ps", "sd", "ug", "ur", "yi"]);
function dist_real_module_$148a7a147e38ea7f$export$702d680b21cbd764(locale) {
  // If the Intl.Locale API is available, use it to get the script for the locale.
  // This is more accurate than guessing by language, since languages can be written in multiple scripts.
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    let script = new Intl.Locale(locale).maximize().script;
    return dist_real_module_$148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);
  }
  // If not, just guess by the language (first part of the locale)
  let lang = locale.split("-")[0];
  return dist_real_module_$148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function dist_real_module_$1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
  // @ts-ignore
  let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
  try {
    // @ts-ignore
    Intl.DateTimeFormat.supportedLocalesOf([locale]);
  } catch (_err) {
    locale = "en-US";
  }
  return {
    locale: locale,
    direction: (0, dist_real_module_$148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
  };
}
let dist_real_module_$1e5a04cdaf7d1af8$var$currentLocale = dist_real_module_$1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
let dist_real_module_$1e5a04cdaf7d1af8$var$listeners = new Set();
function dist_real_module_$1e5a04cdaf7d1af8$var$updateLocale() {
  dist_real_module_$1e5a04cdaf7d1af8$var$currentLocale = dist_real_module_$1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  for (let listener of dist_real_module_$1e5a04cdaf7d1af8$var$listeners) listener(dist_real_module_$1e5a04cdaf7d1af8$var$currentLocale);
}
function dist_real_module_$1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
  let isSSR = (0, _react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$535bd6ca7f90a273)();
  let [defaultLocale, setDefaultLocale] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(dist_real_module_$1e5a04cdaf7d1af8$var$currentLocale);
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (dist_real_module_$1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener("languagechange", dist_real_module_$1e5a04cdaf7d1af8$var$updateLocale);
    dist_real_module_$1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
    return () => {
      dist_real_module_$1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
      if (dist_real_module_$1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener("languagechange", dist_real_module_$1e5a04cdaf7d1af8$var$updateLocale);
    };
  }, []);
  // We cannot determine the browser's language on the server, so default to
  // en-US. This will be updated after hydration on the client to the correct value.
  if (isSSR) return {
    locale: "en-US",
    direction: "ltr"
  };
  return defaultLocale;
}
const dist_real_module_$18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(null);
function dist_real_module_$18f2051aff69b9bf$export$a54013f0d02a8f82(props) {
  let {
    locale: locale,
    children: children
  } = props;
  let defaultLocale = (0, dist_real_module_$1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
  let value = locale ? {
    locale: locale,
    direction: (0, dist_real_module_$148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
  } : defaultLocale;
  return /*#__PURE__*/(0, $iFADg$react).createElement(dist_real_module_$18f2051aff69b9bf$var$I18nContext.Provider, {
    value: value
  }, children);
}
function dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
  let defaultLocale = (0, dist_real_module_$1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
  let context = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(dist_real_module_$18f2051aff69b9bf$var$I18nContext);
  return context || defaultLocale;
}
var dist_real_module_$2aa2084a6c2b6b4f$exports = {};
"use strict";

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const dist_real_module_$fca6afa0e843324b$var$cache = new WeakMap();
function dist_real_module_$fca6afa0e843324b$var$getCachedDictionary(strings) {
  let dictionary = dist_real_module_$fca6afa0e843324b$var$cache.get(strings);
  if (!dictionary) {
    dictionary = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)(strings);
    dist_real_module_$fca6afa0e843324b$var$cache.set(strings, dictionary);
  }
  return dictionary;
}
function dist_real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1(strings) {
  let {
    locale: locale
  } = (0, dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let dictionary = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => dist_real_module_$fca6afa0e843324b$var$getCachedDictionary(strings), [strings]);
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new (0, $6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, dictionary), [locale, dictionary]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function dist_real_module_$33bf17300c498528$export$a2f47a3d2973640(options = {}) {
  let {
    locale: locale
  } = (0, dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  // @ts-ignore
  return (0, $iFADg$useMemo)(() => new Intl.ListFormat(locale, options), [locale, options]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function dist_real_module_$896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {
  // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.
  let lastOptions = (0, $iFADg$useRef)(null);
  if (options && lastOptions.current && dist_real_module_$896ba0a80a8f4d36$var$isEqual(options, lastOptions.current)) options = lastOptions.current;
  lastOptions.current = options;
  let {
    locale: locale
  } = (0, dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  return (0, $iFADg$useMemo)(() => new (0, $iFADg$DateFormatter)(locale, options), [locale, options]);
}
function dist_real_module_$896ba0a80a8f4d36$var$isEqual(a, b) {
  if (a === b) return true;
  let aKeys = Object.keys(a);
  let bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) return false;
  for (let key of aKeys) {
    if (b[key] !== a[key]) return false;
  }
  return true;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function dist_real_module_$a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
  let {
    locale: locale
  } = (0, dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  return (0, $iFADg$useMemo)(() => new (0, $iFADg$NumberFormatter)(locale, options), [locale, options]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
let dist_real_module_$325a3faab7a68acd$var$cache = new Map();
function dist_real_module_$325a3faab7a68acd$export$a16aca283550c30d(options) {
  let {
    locale: locale
  } = (0, dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  if (dist_real_module_$325a3faab7a68acd$var$cache.has(cacheKey)) return dist_real_module_$325a3faab7a68acd$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options);
  dist_real_module_$325a3faab7a68acd$var$cache.set(cacheKey, formatter);
  return formatter;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function dist_real_module_$bb77f239b46e8c72$export$3274cf84b703fff(options) {
  let collator = (0, dist_real_module_$325a3faab7a68acd$export$a16aca283550c30d)({
    usage: "search",
    ...options
  });
  // TODO(later): these methods don't currently support the ignorePunctuation option.
  return {
    startsWith(string, substring) {
      if (substring.length === 0) return true;
      // Normalize both strings so we can slice safely
      // TODO: take into account the ignorePunctuation option as well...
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      return collator.compare(string.slice(0, substring.length), substring) === 0;
    },
    endsWith(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      return collator.compare(string.slice(-substring.length), substring) === 0;
    },
    contains(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      let scan = 0;
      let sliceLen = substring.length;
      for (; scan + sliceLen <= string.length; scan++) {
        let slice = string.slice(scan, scan + sliceLen);
        if (collator.compare(substring, slice) === 0) return true;
      }
      return false;
    }
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/radio/dist/module.js





const $884aeceb3d67f00f$export$3b7b268d09480394 = new WeakMap();
const $884aeceb3d67f00f$export$8e8b214e06dd397d = new WeakMap();
const $884aeceb3d67f00f$export$61c8d3f0151e21b2 = new WeakMap();
function $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {
  let {
    value: value,
    children: children,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby
  } = props;
  const isDisabled = props.isDisabled || state.isDisabled;
  let hasChildren = children != null;
  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');
  let checked = state.selectedValue === value;
  let onChange = e => {
    e.stopPropagation();
    state.setSelectedValue(value);
  };
  let {
    pressProps: pressProps
  } = dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: isDisabled
  });
  let {
    focusableProps: focusableProps
  } = module_$e6afbd83fe6ebbd2$export$4c014de7c8940b4c(utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(props, {
    onFocus: () => state.setLastFocusedValue(value)
  }), ref);
  let interactions = utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, focusableProps);
  let domProps = utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;
  if (isDisabled) tabIndex = undefined;
  return {
    inputProps: utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      ...interactions,
      type: 'radio',
      name: $884aeceb3d67f00f$export$3b7b268d09480394.get(state),
      tabIndex: tabIndex,
      disabled: isDisabled,
      checked: checked,
      value: value,
      onChange: onChange,
      'aria-describedby': [state.validationState === 'invalid' ? $884aeceb3d67f00f$export$61c8d3f0151e21b2.get(state) : null, $884aeceb3d67f00f$export$8e8b214e06dd397d.get(state)].filter(Boolean).join(' ') || undefined
    }),
    isDisabled: isDisabled,
    isSelected: checked
  };
}
function $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state) {
  let {
    name: name,
    validationState: validationState,
    isReadOnly: isReadOnly,
    isRequired: isRequired,
    isDisabled: isDisabled,
    orientation = 'vertical'
  } = props;
  let {
    direction: direction
  } = dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let {
    labelProps: labelProps,
    fieldProps: fieldProps,
    descriptionProps: descriptionProps,
    errorMessageProps: errorMessageProps
  } = $2baaea4c71418dea$export$294aa081a6c6f55d({
    ...props,
    // Radio group is not an HTML input element so it
    // shouldn't be labeled by a <label> element.
    labelElementType: 'span'
  });
  $884aeceb3d67f00f$export$8e8b214e06dd397d.set(state, descriptionProps.id);
  $884aeceb3d67f00f$export$61c8d3f0151e21b2.set(state, errorMessageProps.id);
  let domProps = utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  // When the radio group loses focus, reset the focusable radio to null if
  // there is no selection. This allows tabbing into the group from either
  // direction to go to the first or last radio.
  let {
    focusWithinProps: focusWithinProps
  } = dist_module_$9ab94262bd0047c7$export$420e68273165f4ec({
    onBlurWithin() {
      if (!state.selectedValue) state.setLastFocusedValue(null);
    }
  });
  let onKeyDown = e => {
    let nextDir;
    switch (e.key) {
      case 'ArrowRight':
        if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'prev';else nextDir = 'next';
        break;
      case 'ArrowLeft':
        if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'next';else nextDir = 'prev';
        break;
      case 'ArrowDown':
        nextDir = 'next';
        break;
      case 'ArrowUp':
        nextDir = 'prev';
        break;
      default:
        return;
    }
    e.preventDefault();
    let walker = module_$9bf71ea28793e738$export$2d6ec8fc375ceafa(e.currentTarget, {
      from: e.target
    });
    let nextElem;
    if (nextDir === 'next') {
      nextElem = walker.nextNode();
      if (!nextElem) {
        walker.currentNode = e.currentTarget;
        nextElem = walker.firstChild();
      }
    } else {
      nextElem = walker.previousNode();
      if (!nextElem) {
        walker.currentNode = e.currentTarget;
        nextElem = walker.lastChild();
      }
    }
    if (nextElem) {
      // Call focus on nextElem so that keyboard navigation scrolls the radio into view
      nextElem.focus();
      state.setSelectedValue(nextElem.value);
    }
  };
  let groupName = utils_dist_module_$bdb11010cef70236$export$f680877a34711e37(name);
  $884aeceb3d67f00f$export$3b7b268d09480394.set(state, groupName);
  return {
    radioGroupProps: utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup
      role: 'radiogroup',
      onKeyDown: onKeyDown,
      'aria-invalid': validationState === 'invalid' || undefined,
      'aria-errormessage': props['aria-errormessage'],
      'aria-readonly': isReadOnly || undefined,
      'aria-required': isRequired || undefined,
      'aria-disabled': isDisabled || undefined,
      'aria-orientation': orientation,
      ...fieldProps,
      ...focusWithinProps
    }),
    labelProps: labelProps,
    descriptionProps: descriptionProps,
    errorMessageProps: errorMessageProps
  };
}

;// CONCATENATED MODULE: ./src/radio/radio-context.ts

const [RadioGroupProvider, useRadioGroupContext] = createContext({
  name: "RadioGroupContext",
  strict: true,
  errorMessage: "useRadioGroupContext: `context` is undefined. Seems you forgot to wrap all checkbox components within `<Radio.Group />`"
});
;// CONCATENATED MODULE: ./src/radio/use-radio.ts






/**
 * @internal
 */
const useRadio = props => {
  var _groupContext$size, _groupContext$color, _groupContext$labelCo;
  const groupContext = useRadioGroupContext();
  const {
    size = (_groupContext$size = groupContext.size) != null ? _groupContext$size : "md",
    color = (_groupContext$color = groupContext.color) != null ? _groupContext$color : "default",
    labelColor = (_groupContext$labelCo = groupContext.labelColor) != null ? _groupContext$labelCo : "default",
    autoFocus,
    isSquared = false,
    isDisabled: isDisabledProp = false,
    disableAnimation = false,
    ...otherProps
  } = props;
  if (groupContext && __DEV__) {
    if (otherProps.checked !== undefined) {
      warn('Remove props "checked" if in the Radio.Group.', "Radio");
    }
    if (otherProps.value === undefined) {
      warn('Props "value" must be defined if in the Radio.Group.', "Radio");
    }
  }
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const {
    inputProps
  } = $0d5c49892c1215da$export$37b0961d2f4751e2({
    ...otherProps,
    ...groupContext,
    isDisabled: isDisabledProp
  }, groupContext.radioGroupState, inputRef);
  const isDisabled = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _inputProps$disabled;
    return (_inputProps$disabled = inputProps.disabled) != null ? _inputProps$disabled : false;
  }, [inputProps.disabled]);
  const {
    hoverProps,
    isHovered
  } = interactions_dist_module_$6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled
  });
  const isInvalid = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => groupContext.validationState === "invalid", [groupContext.validationState]);
  const isRequired = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _groupContext$isRequi;
    return (_groupContext$isRequi = groupContext.isRequired) != null ? _groupContext$isRequi : false;
  }, [groupContext.isRequired]);
  return {
    size,
    color,
    inputRef,
    autoFocus,
    isDisabled,
    labelColor,
    isInvalid,
    isHovered,
    isSquared,
    isRequired,
    disableAnimation,
    inputProps,
    hoverProps
  };
};
;// CONCATENATED MODULE: ./src/radio/radio.styles.ts


const StyledRadioText = styled("span", {
  fontSize: "$$radioSize",
  us: "none",
  d: "inline-flex",
  ai: "center",
  variants: {
    color: {
      default: {
        color: "$text"
      },
      primary: {
        color: "$primary"
      },
      secondary: {
        color: "$secondary"
      },
      success: {
        color: "$success"
      },
      warning: {
        color: "$warning"
      },
      error: {
        color: "$error"
      }
    },
    isDisabled: {
      true: {
        color: "$accents5"
      }
    },
    isInvalid: {
      true: {
        color: "$error"
      }
    }
  }
});
const StyledRadioPoint = styled("span", {
  size: "$$radioSize",
  br: "$$radioRadii",
  position: "relative",
  d: "inline-block",
  mr: "calc($$radioSize * 0.375)",
  "&:after": {
    content: "",
    d: "block",
    position: "absolute",
    size: "$$radioSize",
    br: "$$radioRadii",
    boxSizing: "border-box",
    border: "2px solid $border"
  }
}, cssFocusVisible);
const StyledRadioLabel = styled("label", {
  d: "flex",
  w: "initial",
  ai: "flex-start",
  position: "relative",
  fd: "column",
  jc: "flex-start",
  cursor: "pointer",
  "@motion": {
    [`& ${StyledRadioPoint}`]: {
      transition: "none",
      "&:after": {
        transition: "none"
      }
    }
  },
  variants: {
    color: {
      default: {
        $$radioColor: "$colors$primary",
        $$radioColorHover: "$colors$primarySolidHover"
      },
      primary: {
        $$radioColor: "$colors$primary",
        $$radioColorHover: "$colors$primarySolidHover"
      },
      secondary: {
        $$radioColor: "$colors$secondary",
        $$radioColorHover: "$colors$secondarySolidHover"
      },
      success: {
        $$radioColor: "$colors$success",
        $$radioColorHover: "$colors$successSolidHover"
      },
      warning: {
        $$radioColor: "$colors$warning",
        $$radioColorHover: "$colors$warningSolidHover"
      },
      error: {
        $$radioColor: "$colors$error",
        $$radioColorHover: "$colors$errorSolidHover"
      }
    },
    size: {
      xs: {
        $$radioSize: "$space$7"
      },
      sm: {
        $$radioSize: "$space$8"
      },
      md: {
        $$radioSize: "$space$9"
      },
      lg: {
        $$radioSize: "$space$10"
      },
      xl: {
        $$radioSize: "$space$11"
      }
    },
    isHovered: {
      true: {}
    },
    isInvalid: {
      true: {
        $$radioColor: "$colors$error",
        $$radioColorHover: "$colors$errorSolidHover",
        [`& ${StyledRadioPoint}`]: {
          "&:after": {
            borderColor: "$colors$error"
          }
        }
      }
    },
    isDisabled: {
      true: {
        cursor: "not-allowed",
        $$radioColor: "$colors$accents4"
      }
    },
    isSquared: {
      true: {
        $$radioRadii: "$radii$squared"
      },
      false: {
        $$radioRadii: "$radii$rounded"
      }
    },
    isChecked: {
      true: {
        [`& ${StyledRadioPoint}`]: {
          "&:after": {
            border: "calc($$radioSize * 0.34) solid $$radioColor"
          }
        }
      }
    },
    disableAnimation: {
      true: {
        [`& ${StyledRadioPoint}`]: {
          transition: "none",
          "&:after": {
            transition: "none"
          }
        }
      },
      false: {
        [`& ${StyledRadioPoint}`]: {
          transition: "$default",
          "&:after": {
            transition: "$default"
          }
        }
      }
    }
  },
  defaultVariants: {
    size: "md",
    isSquared: false,
    disableAnimation: false
  },
  compoundVariants: [
  // isChecked && isHovered
  {
    isChecked: true,
    isHovered: true,
    css: {
      [`& ${StyledRadioPoint}`]: {
        "&:after": {
          border: "calc($$radioSize * 0.34) solid $$radioColorHover"
        }
      }
    }
  },
  // isChecked && isDisabled & isHovered
  {
    isChecked: true,
    isDisabled: true,
    isHovered: true,
    css: {
      [`& ${StyledRadioPoint}`]: {
        "&:after": {
          border: "calc($$radioSize * 0.34) solid $$radioColor"
        }
      }
    }
  },
  // !isChecked && !isDisabled && isHovered
  {
    isChecked: false,
    isDisabled: false,
    isHovered: true,
    css: {
      [`& ${StyledRadioPoint}`]: {
        bg: "$border"
      }
    }
  }]
});
const StyledRadioDescription = styled("span", {
  color: "$accents7",
  fontSize: "calc($$radioSize * 0.85)",
  paddingLeft: "calc($$radioSize + $$radioSize * 0.375)",
  variants: {
    isInvalid: {
      true: {
        color: "$red500"
      }
    },
    isDisabled: {
      true: {
        color: "$accents5"
      }
    }
  }
});
const StyledRadioContainer = styled("div", {
  w: "initial",
  position: "relative",
  d: "flex",
  fd: "row",
  ai: "center",
  jc: "flex-start"
});
const StyledRadioGroupLabel = styled("label", {
  d: "block",
  fontWeight: "$normal",
  fontSize: "calc($$checkboxSize * 0.9)",
  color: "$accents8",
  mb: "$3"
});
const StyledRadioGroup = styled("div", {
  border: 0,
  margin: 0,
  padding: 0,
  display: "flex",
  fd: "column",
  variants: {
    size: {
      xs: {
        $$radioGroupGap: "$space$7"
      },
      sm: {
        $$radioGroupGap: "$space$8"
      },
      md: {
        $$radioGroupGap: "$space$9"
      },
      lg: {
        $$radioGroupGap: "$space$10"
      },
      xl: {
        $$radioGroupGap: "$space$11"
      }
    }
  }
});
const StyledRadioGroupContainer = styled("div", {
  display: "flex",
  flexDirection: "column",
  variants: {
    isRow: {
      true: {
        mt: 0,
        flexDirection: "row",
        [`& ${StyledRadioLabel}:not(:last-child)`]: {
          mr: "$$radioSize"
        }
      },
      false: {
        mr: 0,
        flexDirection: "column",
        [`& ${StyledRadioLabel}:not(:first-child)`]: {
          mt: "$$radioSize"
        }
      }
    }
  },
  defaultVariants: {
    isRow: false
  }
});

// types
;// CONCATENATED MODULE: ./src/radio/radio.tsx
var radio_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/radio/radio.tsx";










const Radio = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    className,
    as,
    css,
    children,
    label,
    description,
    ...otherProps
  } = props;
  const {
    size,
    color,
    inputRef,
    labelColor,
    isHovered,
    isSquared,
    isInvalid,
    isDisabled,
    autoFocus,
    disableAnimation,
    hoverProps,
    inputProps,
    isRequired
  } = useRadio({
    ...otherProps,
    children: children != null ? children : label
  });
  const domRef = useFocusableRef(ref, inputRef);
  const {
    focusProps,
    isFocusVisible
  } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    autoFocus
  });
  const radioState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isHovered) return "is-hovered";
    if (isDisabled) return "is-disabled";
    return inputProps.checked ? "checked" : "uncheked";
  }, [isDisabled, inputProps.checked, isHovered]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioLabel, {
    ref: domRef,
    ...hoverProps,
    as: as,
    className: clsx("nextui-radio-label", `nextui-radio--${radioState}`, className),
    color: color,
    css: css,
    "data-state": radioState,
    disableAnimation: disableAnimation,
    isChecked: inputProps.checked,
    isDisabled: isDisabled,
    isHovered: isHovered,
    isInvalid: isInvalid,
    isSquared: isSquared,
    size: size,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioContainer, {
      className: "nextui-radio-container",
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioPoint, {
        className: "nextui-radio-point",
        isFocusVisible: isFocusVisible,
        ...focusProps,
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(module_$5c3e21d68f1c4674$export$439d29a4e110a164, {
          children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("input", {
            ref: inputRef,
            className: "nextui-radio-input",
            required: isRequired,
            ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(inputProps, focusProps)
          }, void 0, false, {
            fileName: radio_jsxFileName,
            lineNumber: 96,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: radio_jsxFileName,
          lineNumber: 95,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: radio_jsxFileName,
        lineNumber: 90,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioText, {
        className: "nextui-radio-text",
        color: labelColor,
        isDisabled: isDisabled,
        isInvalid: isInvalid,
        children: children
      }, void 0, false, {
        fileName: radio_jsxFileName,
        lineNumber: 104,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: radio_jsxFileName,
      lineNumber: 89,
      columnNumber: 7
    }, undefined), description && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioDescription, {
      className: "nextui-radio-description",
      isDisabled: isDisabled,
      isInvalid: isInvalid,
      children: description
    }, void 0, false, {
      fileName: radio_jsxFileName,
      lineNumber: 114,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: radio_jsxFileName,
    lineNumber: 73,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Radio.displayName = "NextUI.Radio";
}
Radio.toString = () => ".nextui-radio";
/* harmony default export */ const radio_radio = (Radio);
;// CONCATENATED MODULE: ../../node_modules/@react-stately/radio/dist/module.js


let $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 10000000000);
let $a54cdc5c1942b639$var$i = 0;
function $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {
  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.
  let name = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => props.name || `radio-group-${$a54cdc5c1942b639$var$instance}-${++$a54cdc5c1942b639$var$i}`, [props.name]);
  let [selectedValue, setSelected] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue, props.onChange);
  let [lastFocusedValue, setLastFocusedValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  let setSelectedValue = value => {
    if (!props.isReadOnly && !props.isDisabled) setSelected(value);
  };
  return {
    name: name,
    selectedValue: selectedValue,
    setSelectedValue: setSelectedValue,
    lastFocusedValue: lastFocusedValue,
    setLastFocusedValue: setLastFocusedValue,
    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,
    validationState: props.validationState
  };
}

;// CONCATENATED MODULE: ./src/radio/use-radio-group.ts



/**
 * @internal
 */
const useRadioGroup = props => {
  const {
    size = "md",
    color = "default",
    labelColor = "default",
    orientation = "vertical",
    isRequired,
    validationState,
    ...otherProps
  } = props;
  const otherPropsWithOrientation = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      ...otherProps,
      isRequired,
      orientation
    };
  }, [otherProps]);
  const radioGroupState = $a54cdc5c1942b639$export$bca9d026f8e704eb(otherPropsWithOrientation);
  const {
    radioGroupProps,
    labelProps
  } = $430f30ed08ec25fa$export$62b9571f283ff5c2(otherPropsWithOrientation, radioGroupState);
  return {
    size,
    color,
    orientation,
    labelColor,
    isRequired,
    validationState,
    radioGroupState,
    radioGroupProps,
    labelProps
  };
};
;// CONCATENATED MODULE: ./src/radio/radio-group.tsx
var radio_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/radio/radio-group.tsx";








const RadioGroup = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    as,
    css,
    className,
    children,
    label,
    ...otherProps
  } = props;
  const context = useRadioGroup({
    ...otherProps,
    label
  });
  const domRef = useDOMRef(ref);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioGroup, {
    ref: domRef,
    as: as,
    className: clsx("nextui-radio-group", className),
    css: css,
    size: context.size,
    ...context.radioGroupProps,
    children: [label && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioGroupLabel, {
      className: "nextui-radio-group-label",
      ...context.labelProps,
      children: label
    }, void 0, false, {
      fileName: radio_group_jsxFileName,
      lineNumber: 41,
      columnNumber: 11
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioGroupContainer, {
      className: "nextui-radio-group-items",
      isRow: context.orientation === "horizontal",
      role: "presentation",
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(RadioGroupProvider, {
        value: context,
        children: children
      }, void 0, false, {
        fileName: radio_group_jsxFileName,
        lineNumber: 50,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: radio_group_jsxFileName,
      lineNumber: 45,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: radio_group_jsxFileName,
    lineNumber: 32,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  RadioGroup.displayName = "NextUI.RadioGroup";
}
RadioGroup.toString = () => ".nextui-radio-group";
/* harmony default export */ const radio_group = (RadioGroup);
;// CONCATENATED MODULE: ./src/radio/index.ts


radio_radio.Group = radio_group;

/* harmony default export */ const src_radio = (radio_radio);
;// CONCATENATED MODULE: ./src/text/text.styles.ts


const StyledText = styled("p", {
  variants: {
    weight: {
      hairline: {
        fontWeight: "$hairline"
      },
      thin: {
        fontWeight: "$thin"
      },
      light: {
        fontWeight: "$light"
      },
      normal: {
        fontWeight: "$normal"
      },
      medium: {
        fontWeight: "$medium"
      },
      semibold: {
        fontWeight: "$semibold"
      },
      bold: {
        fontWeight: "$bold"
      },
      extrabold: {
        fontWeight: "$extrabold"
      },
      black: {
        fontWeight: "$black"
      }
    }
  }
}, cssHideShowIn);
;// CONCATENATED MODULE: ./src/text/child.tsx
var child_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/text/child.tsx";






const TextChild = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    children,
    tag,
    color: userColor = "default",
    transform,
    size: fontSize,
    css,
    ...otherProps
  } = props;
  const domRef = useDOMRef(ref);
  const color = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isNormalColor(userColor)) {
      switch (userColor) {
        case "default":
          return "$text";
        default:
          return `$${userColor}`;
      }
    }
    return userColor;
  }, [userColor]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledText, {
    ref: domRef,
    as: tag,
    css: {
      color,
      fontSize,
      tt: transform,
      ...css
    },
    ...otherProps,
    children: children
  }, void 0, false, {
    fileName: child_jsxFileName,
    lineNumber: 73,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  TextChild.displayName = "NextUI.TextChild";
}
TextChild.toString = () => ".nextui-text-child";
/* harmony default export */ const child = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(TextChild));
;// CONCATENATED MODULE: ./src/text/text.tsx
var text_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/text/text.tsx";





const getModifierChild = (tags, children, size, transform) => {
  if (!tags.length) return children;
  const nextTag = tags.slice(1, tags.length);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(child, {
    size: size,
    tag: tags[0],
    transform: transform,
    children: getModifierChild(nextTag, children, size)
  }, void 0, false, {
    fileName: text_jsxFileName,
    lineNumber: 46,
    columnNumber: 5
  }, undefined);
};
const Text = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    h1 = false,
    h2 = false,
    h3 = false,
    h4 = false,
    h5 = false,
    h6 = false,
    b = false,
    small = false,
    i = false,
    span = false,
    del = false,
    em = false,
    blockquote = false,
    transform = "none",
    size,
    children,
    ...otherProps
  } = props;
  const domRef = useDOMRef(ref);
  const elements = {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    blockquote
  };
  const inlineElements = {
    span,
    small,
    b,
    em,
    i,
    del
  };
  const names = Object.keys(elements).filter(name => elements[name]);
  const inlineNames = Object.keys(inlineElements).filter(name => inlineElements[name]);
  /**
   *  Render element "p" only if no element is found.
   *  If there is only one modifier, just rendered one modifier element
   *  e.g.
   *    <Text /> => <p />
   *    <Text em /> => <em />
   *    <Text b em /> => <b><em>children</em></b>
   */

  const tag = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (names[0]) return names[0];
    if (inlineNames[0]) return inlineNames[0];
    return "p";
  }, [names, inlineNames]);
  const renderableChildElements = inlineNames.filter(name => name !== tag);
  const modifers = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!renderableChildElements.length) return children;
    return getModifierChild(renderableChildElements, children, size, transform);
  }, [renderableChildElements, children, size, transform]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(child, {
    ref: domRef,
    size: size,
    tag: tag,
    transform: transform,
    ...otherProps,
    children: modifers
  }, void 0, false, {
    fileName: text_jsxFileName,
    lineNumber: 110,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Text.displayName = "NextUI.Text";
}
Text.toString = () => ".nextui-text";
/* harmony default export */ const text_text = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Text));
;// CONCATENATED MODULE: ./src/text/index.ts


/* harmony default export */ const src_text = (text_text);
;// CONCATENATED MODULE: ./src/switch/switch.styles.ts


const StyledSwitchContainer = styled("label", {
  WebkitTapHighlightColor: "transparent",
  d: "inline-block",
  verticalAlign: "center",
  whiteSpace: "nowrap",
  us: "none",
  transition: "$default",
  padding: "$1 0",
  position: "relative",
  cursor: "pointer",
  "@motion": {
    transition: "none"
  },
  variants: {
    color: {
      default: {
        $$switchColor: "$colors$primary",
        $$switchColorShadow: "$colors$primaryShadow",
        $$switchColorHover: "$colors$primarySolidHover"
      },
      primary: {
        $$switchColor: "$colors$primary",
        $$switchColorShadow: "$colors$primaryShadow",
        $$switchColorHover: "$colors$primarySolidHover"
      },
      secondary: {
        $$switchColor: "$colors$secondary",
        $$switchColorShadow: "$colors$secondaryShadow",
        $$switchColorHover: "$colors$secondarySolidHover"
      },
      success: {
        $$switchColor: "$colors$success",
        $$switchColorShadow: "$colors$successShadow",
        $$switchColorHover: "$colors$successSolidHover"
      },
      warning: {
        $$switchColor: "$colors$warning",
        $$switchColorShadow: "$colors$warningShadow",
        $$switchColorHover: "$colors$warningSolidHover"
      },
      error: {
        $$switchColor: "$colors$error",
        $$switchColorShadow: "$colors$errorShadow",
        $$switchColorHover: "$colors$errorSolidHover"
      }
    },
    size: {
      xs: {
        $$switchWidth: "$space$12",
        $$switchHeight: "$space$9",
        width: " $$switchWidth",
        maxWidth: "$$switchWidth",
        height: "$$switchHeight"
      },
      sm: {
        $$switchWidth: "$space$14",
        $$switchHeight: "$space$10",
        width: "$$switchWidth",
        maxWidth: "$$switchWidth",
        height: "$$switchHeight"
      },
      md: {
        $$switchWidth: "$space$15",
        $$switchHeight: "$space$11",
        width: "$$switchWidth",
        maxWidth: "$$switchWidth",
        height: "$$switchHeight"
      },
      lg: {
        $$switchWidth: "$space$17",
        $$switchHeight: "$space$12",
        width: "$$switchWidth",
        maxWidth: "$$switchWidth",
        height: "$$switchHeight"
      },
      xl: {
        $$switchWidth: "$space$18",
        $$switchHeight: "$space$13",
        width: "$$switchWidth",
        maxWidth: "$$switchWidth",
        height: "$$switchHeight"
      }
    },
    borderWeight: {
      light: {
        $$switchBorderW: "$borderWeights$light"
      },
      normal: {
        $$switchBorderW: "$borderWeights$normal"
      },
      bold: {
        $$switchBorderW: "$borderWeights$bold"
      },
      extrabold: {
        $$switchBorderW: "$borderWeights$extrabold"
      },
      black: {
        $$switchBorderW: "$borderWeights$black"
      }
    },
    disabled: {
      true: {
        cursor: "not-allowed"
      }
    },
    animated: {
      false: {
        transition: "none"
      }
    }
  },
  defaultVariants: {
    color: "default",
    size: "md",
    borderWeight: "normal"
  }
});
const StyledSwitchCircle = styled("span", {
  position: "absolute",
  display: "flex",
  size: "calc($$switchHeight * 0.7)",
  jc: "center",
  ai: "center",
  top: "calc(50% - $$switchHeight * 0.35)",
  left: "0",
  transition: "transform 0.25s ease, width 0.2s ease",
  bg: "$background",
  br: "$pill",
  "& svg": {
    bg: "transparent",
    size: "calc($$switchHeight * 0.44)"
  },
  "@motion": {
    transition: "none"
  }
});
const StyledSwitch = styled("div", {
  opacity: 1,
  width: "$$switchWidth",
  height: "$$switchHeight",
  transition: "$default",
  position: "relative",
  overflow: "hidden",
  padding: 0,
  br: "$pill",
  bg: "$accents2",
  "@motion": {
    transition: "none"
  },
  variants: {
    checked: {
      true: {
        bg: "$$switchColor",
        "&:hover:not(&:active)": {
          bg: "$$switchColorHover"
        }
      }
    },
    bordered: {
      true: {
        bg: "transparent",
        border: "$$switchBorderW solid $border",
        "&:hover": {
          borderColor: "$$switchColor"
        },
        [`& ${StyledSwitchCircle}`]: {
          bg: "$accents2"
        }
      }
    },
    squared: {
      true: {
        br: "2px",
        [`& ${StyledSwitchCircle}`]: {
          br: "2px"
        }
      }
    },
    shadow: {
      true: {}
    },
    disabled: {
      true: {
        borderColor: "$accents2",
        bg: "$accents2",
        [`& ${StyledSwitchCircle}`]: {
          bg: "$accents4"
        }
      }
    },
    animated: {
      true: {
        "&:active": {
          [`& ${StyledSwitchCircle}`]: {
            width: "calc($$switchHeight * 0.7 + ($$switchWidth / 10))"
          }
        }
      },
      false: {
        transition: "none",
        [`& ${StyledSwitchCircle}`]: {
          transition: "none"
        }
      }
    }
  },
  compoundVariants: [{
    // checked && disabled
    checked: true,
    disabled: true,
    css: {
      bg: "$accents3",
      [`& ${StyledSwitchCircle}`]: {
        bg: "$accents0"
      },
      "&:hover:not(&:active)": {
        bg: "$accents4"
      }
    }
  },
  // shadow && checked
  {
    shadow: true,
    checked: true,
    css: {
      normalShadowVar: "$$switchColorShadow"
    }
  },
  // checked && bordered
  {
    checked: true,
    bordered: true,
    css: {
      bg: "$$switchColor",
      border: "$$switchBorderW solid transparent",
      "&:hover:not(&:active)": {
        borderColor: "transparent"
      },
      [`& ${StyledSwitchCircle}`]: {
        bg: "$background"
      }
    }
  }]
}, sharedFocus);
const StyledSwitchInput = styled("input", {
  [`& + ${StyledSwitch} > ${StyledSwitchCircle}`]: {
    transform: "translateX(calc($$switchWidth / 15))"
  },
  [`&:checked + ${StyledSwitch} > ${StyledSwitchCircle}`]: {
    transform: "translateX(calc($$switchWidth - $$switchWidth / 15 - $$switchHeight * 0.7))"
  },
  variants: {
    animated: {
      true: {
        [`& + ${StyledSwitch}:active > ${StyledSwitchCircle}`]: {
          transform: "translateX(calc($$switchWidth / 7.5))"
        },
        [`&:checked + ${StyledSwitch}:active > ${StyledSwitchCircle}`]: {
          transform: "translateX(calc($$switchWidth - $$switchWidth / 7.5 - $$switchWidth / 10 - $$switchHeight * 0.7))"
        }
      }
    },
    bordered: {
      true: {
        [`& + ${StyledSwitch} > ${StyledSwitchCircle}`]: {
          transform: "translateX(calc($$switchWidth / 15 - $$switchBorderW / 2))"
        },
        [`&:checked + ${StyledSwitch} > ${StyledSwitchCircle}`]: {
          transform: "translateX(calc($$switchWidth - $$switchWidth / 15 - $$switchBorderW * 1.5 - $$switchHeight * 0.7))"
        }
      }
    }
  },
  compoundVariants: [{
    animated: true,
    bordered: true,
    css: {
      [`& + ${StyledSwitch}:active > ${StyledSwitchCircle}`]: {
        transform: "translateX(calc($$switchWidth / 7.5 - $$switchBorderW / 2))"
      },
      [`&:checked + ${StyledSwitch}:active > ${StyledSwitchCircle}`]: {
        transform: "translateX(calc($$switchWidth - $$switchWidth / 7.5 - $$switchWidth / 10 - $$switchBorderW * 1.5 - $$switchHeight * 0.7))"
      }
    }
  }]
}, sharedVisuallyHidden);

// types
;// CONCATENATED MODULE: ./src/switch/switch.tsx
var switch_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/switch/switch.tsx";








const switch_defaultProps = {
  disabled: false,
  bordered: false,
  shadow: false,
  squared: false,
  animated: true,
  preventDefault: true,
  initialChecked: false
};
const switch_preClass = "nextui-switch";
const Switch = ({
  initialChecked,
  checked,
  disabled,
  onChange,
  squared,
  bordered,
  shadow,
  icon,
  iconOn,
  iconOff,
  animated,
  preventDefault,
  name,
  ...props
}) => {
  const [selfChecked, setSelfChecked] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialChecked);
  if (icon && __DEV__ && (iconOn || iconOff)) {
    warn('Remove props "icon" if iconOn or iconOff exists.', "Switch");
  }
  const changeHandle = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(ev => {
    if (disabled) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: ev.stopPropagation,
      preventDefault: ev.preventDefault,
      nativeEvent: ev
    };
    setSelfChecked(!selfChecked);
    onChange && onChange(selfEvent);
  }, [disabled, selfChecked, onChange]);
  const {
    bindings
  } = src_use_keyboard(event => {
    changeHandle(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const circleIcon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const hasIcon = icon || iconOn || iconOff;
    const hasIconOn = Boolean(iconOn);
    const hasIconOff = Boolean(iconOff);
    if (!hasIcon) return null;
    if (hasIconOn && selfChecked) return iconOn;
    if (hasIconOff && !selfChecked) return iconOff;
    return hasIcon;
  }, [selfChecked, icon, iconOn, iconOff]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (checked === undefined) return;
    setSelfChecked(checked);
  }, [checked]);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return selfChecked ? "checked" : "unchecked";
  }, [selfChecked]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchContainer, {
    animated: animated,
    "data-state": getState,
    disabled: disabled,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchInput, {
      animated: animated,
      bordered: bordered,
      checked: selfChecked,
      className: clsx(`${switch_preClass}-input`),
      "data-state": getState,
      disabled: disabled,
      tabIndex: -1,
      type: "checkbox",
      onChange: changeHandle,
      name: name
    }, void 0, false, {
      fileName: switch_jsxFileName,
      lineNumber: 138,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitch, {
      animated: animated,
      "aria-checked": selfChecked,
      "aria-disabled": disabled,
      bordered: bordered,
      checked: selfChecked,
      className: clsx(switch_preClass, `${switch_preClass}--${getState}`, {
        [`${switch_preClass}-checked`]: selfChecked,
        [`${switch_preClass}-disabled`]: disabled
      }),
      "data-state": getState,
      disabled: disabled,
      role: "switch",
      shadow: shadow,
      squared: squared,
      tabIndex: disabled ? -1 : 0,
      ...bindings,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchCircle, {
        className: `${switch_preClass}-circle`,
        children: circleIcon
      }, void 0, false, {
        fileName: switch_jsxFileName,
        lineNumber: 168,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: switch_jsxFileName,
      lineNumber: 150,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: switch_jsxFileName,
    lineNumber: 137,
    columnNumber: 5
  }, undefined);
};
Switch.toString = () => ".nextui-switch";
const MemoSwitch = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Switch);
/* harmony default export */ const switch_switch = (with_defaults(MemoSwitch, switch_defaultProps));
;// CONCATENATED MODULE: ./src/switch/index.ts


/* harmony default export */ const src_switch = (switch_switch);
;// CONCATENATED MODULE: ./src/backdrop/backdrop.styles.ts

const appearanceIn = keyframes({
  "0%": {
    opacity: 0
  },
  "60%": {
    opacity: 0.75
  },
  "100%": {
    opacity: 1
  }
});

/**
 * animate StyledBackdropLayer when it shows up
 */
const opacityFadeIn = keyframes({
  "0%": {
    opacity: 0
  }
});
const filterFadeIn = keyframes({
  "0%": {
    backdropFilter: "saturate(0%) blur(0)"
  }
});
const StyledBackdropContent = styled("div", {
  position: "relative",
  display: "inline-block",
  zIndex: "$max",
  outline: "none",
  width: "100%",
  margin: "$9 auto",
  verticalAlign: "middle",
  "@sm": {
    width: "90%",
    maxWidth: "90%"
  },
  variants: {
    animated: {
      true: {
        "&": {
          animationName: appearanceIn,
          animationDuration: "200ms",
          animationTimingFunction: "ease-in",
          animationDirection: "normal"
        }
      },
      false: {
        transition: "none"
      }
    }
  }
});
const StyledBackdropLayer = styled("div", {
  position: "fixed",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: "100%",
  pe: "none",
  zIndex: "$max",
  "@motion": {
    transition: "none"
  },
  variants: {
    blur: {
      true: {
        bg: "$black",
        opacity: "$$backdropOpacity",
        "@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none))": {
          opacity: 1,
          backdropFilter: "saturate(180%) blur(20px)",
          animationName: `${filterFadeIn}, ${opacityFadeIn}`,
          bg: "rgba(0, 0, 0, 0.1)"
        }
      },
      false: {
        bg: "$black",
        opacity: "$$backdropOpacity",
        animationName: `${opacityFadeIn}`,
        animationDuration: "0.2s",
        animationTimingFunction: "cubic-bezier(0.4, 0, 0.2, 1)"
      }
    },
    animated: {
      true: {
        animationName: `${opacityFadeIn}`,
        animationDuration: "0.2s",
        animationTimingFunction: "cubic-bezier(0.4, 0, 0.2, 1)"
      },
      false: {
        transition: "none"
      }
    }
  }
});
const StyledBackdrop = styled("div", {
  position: "fixed",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  overflow: "auto",
  zIndex: "$max",
  WebkitOverflowScrolling: "touch",
  boxSizing: "border-box",
  textAlign: "center",
  "&:before": {
    content: "",
    display: "inline-block",
    width: 0,
    height: "100%",
    verticalAlign: "middle"
  },
  ".nextui-backdrop-wrapper-enter .nextui-backdrop-layer-default": {
    opacity: 0
  },
  ".nextui-backdrop-wrapper-enter-active .nextui-backdrop-layer-default": {
    opacity: "$$backdropOpacity"
  },
  ".nextui-backdrop-wrapper-leave .nextui-backdrop-layer-default": {
    opacity: "$$backdropOpacity"
  },
  ".nextui-backdrop-wrapper-leave-active .nextui-backdrop-layer-default": {
    opacity: 0
  },
  ".nextui-backdrop-wrapper-enter .nextui-backdrop-layer-blur": {
    bg: "rgba(0, 0, 0, 0.1)"
  },
  ".nextui-backdrop-wrapper-enter-active .nextui-backdrop-layer-blur": {
    bg: "rgba(0, 0, 0, 0.4)"
  },
  ".nextui-backdrop-wrapper-leave .nextui-backdrop-layer-blur": {
    bg: "rgba(0, 0, 0, 0.4)"
  },
  ".nextui-backdrop-wrapper-leave-active .nextui-backdrop-layer-blur": {
    bg: "rgba(0, 0, 0, 0.1)"
  },
  variants: {
    fullScreen: {
      true: {
        display: "inline-flex",
        overflow: "hidden",
        [`& ${StyledBackdropContent}`]: {
          width: "100vw",
          maxWidth: "100vw",
          height: "100vh",
          margin: 0
        },
        [`& ${StyledBackdropLayer}`]: {
          display: "none"
        }
      }
    }
  },
  defaultVariants: {
    fullScreen: false
  }
});
;// CONCATENATED MODULE: ./src/backdrop/backdrop.tsx
var backdrop_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/backdrop/backdrop.tsx";










const backdrop_defaultProps = {
  onClick: () => {},
  visible: false,
  blur: false,
  animated: true,
  preventDefault: true,
  opacity: 0.5,
  className: ""
};
const backdrop_preClass = "nextui-backdrop";
const Backdrop = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(({
  children,
  onClick,
  onKeyPress,
  visible,
  maxWidth,
  blur,
  animated,
  opacity,
  preventDefault,
  className,
  css,
  ...props
}) => {
  const [, setIsContentMouseDown, IsContentMouseDownRef] = src_use_current_state(false);
  const clickHandler = event => {
    if (IsContentMouseDownRef.current) return;
    onClick && onClick(event);
  };
  const childrenClickHandler = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(event => {
    event.stopPropagation();
  }, []);
  const mouseUpHandler = () => {
    if (!IsContentMouseDownRef.current) return;
    const timer = setTimeout(() => {
      setIsContentMouseDown(false);
      clearTimeout(timer);
    }, 0);
  };
  const {
    bindings
  } = src_use_keyboard(ev => {
    onKeyPress && onKeyPress(ev);
  }, [KeyCode.Escape, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? "open" : "closed";
  }, [visible]);
  const renderChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdrop, {
      "aria-hidden": true,
      className: clsx(backdrop_preClass, `${backdrop_preClass}--${getState}`, className),
      css: {
        $$backdropOpacity: opacity,
        ...css
      },
      "data-state": getState,
      role: "button",
      tabIndex: -1,
      onClick: clickHandler,
      onMouseUp: mouseUpHandler,
      ...bindings,
      ...props,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdropLayer, {
        animated: animated,
        blur: blur,
        className: clsx(`${backdrop_preClass}-layer`, blur ? `${backdrop_preClass}-layer-blur` : `${backdrop_preClass}-layer-default`)
      }, void 0, false, {
        fileName: backdrop_jsxFileName,
        lineNumber: 110,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdropContent, {
        animated: animated,
        className: `${backdrop_preClass}-content`,
        css: {
          maxWidth
        },
        onClick: childrenClickHandler,
        onMouseDown: () => setIsContentMouseDown(true),
        children: children
      }, void 0, false, {
        fileName: backdrop_jsxFileName,
        lineNumber: 118,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: backdrop_jsxFileName,
      lineNumber: 98,
      columnNumber: 9
    }, undefined);
  }, [children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
    children: animated ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      clearTime: 150,
      enterTime: 20,
      leaveTime: 20,
      name: `${backdrop_preClass}-wrapper`,
      visible: visible,
      children: renderChildren
    }, void 0, false, {
      fileName: backdrop_jsxFileName,
      lineNumber: 134,
      columnNumber: 11
    }, undefined) : visible ? renderChildren : null
  }, void 0, false);
});
if (__DEV__) {
  Backdrop.displayName = "NextUI.Backdrop";
}
Backdrop.toString = () => ".nextui-backdrop";
/* harmony default export */ const backdrop = (with_defaults(Backdrop, backdrop_defaultProps));
;// CONCATENATED MODULE: ./src/backdrop/index.ts


/* harmony default export */ const src_backdrop = (backdrop);
;// CONCATENATED MODULE: ./src/user/user.styles.ts


const StyledUser = styled("div", {
  d: "inline-flex",
  p: "0 $sm",
  jc: "center",
  ai: "center",
  w: "max-content",
  maxWidth: "100%",
  transition: "transform 250ms ease 0ms, box-shadow 0.25s ease 0s",
  "@motion": {
    transition: "none"
  }
}, cssFocusVisible);
const StyledUserInfo = styled("div", {
  ml: "$sm",
  d: "inline-flex",
  fd: "column",
  alignItems: "flex-start",
  whiteSpace: "nowrap"
});
const StyledUserName = styled("span", {
  fontSize: "$sm",
  color: "$text",
  lh: "$sm",
  fontWeight: "$medium",
  maxW: "$60",
  to: "ellipsis",
  // text overflow
  ov: "hidden" // overflow
});

const StyledUserDesc = styled("span", {
  fontSize: "$xs",
  color: "$accents7",
  "*:first-child": {
    mt: 0
  },
  "*:last-child": {
    mb: 0
  }
});
;// CONCATENATED MODULE: ./src/user/user.tsx
var user_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/user/user.tsx";








const user_defaultProps = {
  size: "lg",
  squared: false,
  bordered: false
};
const user_preClass = "nextui-user";
const User = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    as,
    css,
    src,
    text,
    name,
    children,
    altText,
    color,
    squared,
    bordered,
    size,
    description,
    zoomed,
    pointer,
    ...otherProps
  } = props;
  const domRef = useDOMRef(ref);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const getAsButtonCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (as !== "button") return;

    // reset button styles
    return {
      borderRadius: "$xs",
      background: "none",
      appearance: "none",
      p: 0,
      m: 0,
      outline: "none",
      border: "none",
      cursor: "pointer"
    };
  }, [as]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUser, {
    ref: domRef,
    as: as,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, focusProps),
    css: {
      ...getAsButtonCss,
      ...css
    },
    isFocusVisible: isFocusVisible,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_avatar, {
      alt: altText,
      bordered: bordered,
      className: `${user_preClass}-avatar`,
      color: color,
      pointer: pointer,
      size: size,
      squared: squared,
      src: src,
      text: text,
      zoomed: zoomed
    }, void 0, false, {
      fileName: user_jsxFileName,
      lineNumber: 95,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserInfo, {
      className: `${user_preClass}-info`,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserName, {
        className: `${user_preClass}-name`,
        children: name
      }, void 0, false, {
        fileName: user_jsxFileName,
        lineNumber: 108,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserDesc, {
        className: `${user_preClass}-desc`,
        children: description || children
      }, void 0, false, {
        fileName: user_jsxFileName,
        lineNumber: 109,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: user_jsxFileName,
      lineNumber: 107,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: user_jsxFileName,
    lineNumber: 88,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  User.displayName = "NextUI.User";
}
User.toString = () => ".nextui-user";
/* harmony default export */ const user = (User);
;// CONCATENATED MODULE: ./src/user/user-link.tsx
var user_link_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/user/user-link.tsx";





const UserLink = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    rel = "noopener",
    color = "primary",
    target = "_blank",
    className,
    children,
    ...otherProps
  } = props;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_link, {
    ref: ref,
    className: clsx("nextui-user-link", className),
    color: color,
    rel: rel,
    target: target,
    ...otherProps,
    children: children
  }, void 0, false, {
    fileName: user_link_jsxFileName,
    lineNumber: 27,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  UserLink.displayName = "NextUI.UserLink";
}
UserLink.toString = () => ".nextui-user-link";
const MemoUserLink = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(UserLink);
/* harmony default export */ const user_link = (MemoUserLink);
;// CONCATENATED MODULE: ./src/user/index.ts


user.Link = user_link;

/* harmony default export */ const src_user = (user);
;// CONCATENATED MODULE: ./src/progress/progress.styles.ts

const indeterminateAnimation = keyframes({
  "0%": {
    left: "-40%"
  },
  "100%": {
    left: "100%"
  }
});
const StyledProgress = styled("div", {
  margin: 0,
  padding: 0,
  width: "100%",
  position: "relative",
  overflow: "hidden",
  variants: {
    color: {
      default: {
        $$progressColor: "$colors$primary",
        $$progressShadowColor: "$colors$primaryShadow"
      },
      primary: {
        $$progressColor: "$colors$primary",
        $$progressShadowColor: "$colors$primaryShadow"
      },
      secondary: {
        $$progressColor: "$colors$secondary",
        $$progressShadowColor: "$colors$secondaryShadow"
      },
      success: {
        $$progressColor: "$colors$success",
        $$progressShadowColor: "$colors$successShadow"
      },
      warning: {
        $$progressColor: "$colors$warning",
        $$progressShadowColor: "$colors$warningShadow"
      },
      error: {
        $$progressColor: "$colors$error",
        $$progressShadowColor: "$colors$errorShadow"
      },
      gradient: {
        $$progressColor: "$colors$gradient",
        $$progressShadowColor: "$colors$primaryShadow"
      }
    },
    status: {
      default: {
        bg: "$accents2"
      },
      primary: {
        bg: "$primaryLight"
      },
      secondary: {
        bg: "$secondaryLight"
      },
      success: {
        bg: "$successLight"
      },
      warning: {
        bg: "$warningLight"
      },
      error: {
        bg: "$errorLight"
      }
    },
    size: {
      xs: {
        $$progressHeight: "$space$2",
        height: "$$progressHeight",
        br: "$$progressHeight"
      },
      sm: {
        $$progressHeight: "$space$4",
        height: "$$progressHeight",
        br: "$$progressHeight"
      },
      md: {
        $$progressHeight: "$space$8",
        height: "$$progressHeight",
        br: "$$progressHeight"
      },
      lg: {
        $$progressHeight: "$space$10",
        height: "$$progressHeight",
        br: "$$progressHeight"
      },
      xl: {
        $$progressHeight: "$space$11",
        height: "$$progressHeight",
        br: "$$progressHeight"
      }
    },
    indeterminated: {
      true: {
        overflow: "hidden"
      }
    },
    squared: {
      true: {
        br: "calc($$progressHeight * 0.25)"
      }
    }
  },
  defaultVariants: {
    color: "default",
    status: "default",
    size: "md"
  }
});
const StyledProgressBar = styled("div", {
  margin: 0,
  padding: 0,
  width: 0,
  opacity: 0,
  height: "100%",
  minWidth: "inherit",
  bg: "$$progressColor",
  br: "inherit",
  transition: "width 0.5s cubic-bezier(0.4, 0, 0.2, 1)",
  "@motion": {
    transition: "none"
  },
  variants: {
    animated: {
      false: {
        transition: "none"
      }
    },
    shadow: {
      true: {
        normalShadowVar: "$$progressShadowColor"
      }
    },
    striped: {
      true: {
        backgroundImage: "linear-gradient(45deg, rgba(0, 0, 0, 0.1) 25%, transparent 25%, transparent 50%, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.1) 75%, transparent 75%, transparent)",
        backgroundSize: "$space$lg $space$lg"
      }
    },
    indeterminated: {
      true: {
        position: "absolute",
        width: "0%",
        transitionProperty: "background-color, width, left, border-color,opacity, shadow, transform",
        transitionDuration: "300ms",
        willChange: "left",
        minWidth: "50%",
        animation: `1s ease 0s infinite normal none running ${indeterminateAnimation}`
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/progress/progress.tsx
var progress_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/progress/progress.tsx";








const progress_defaultProps = {
  striped: false,
  animated: true,
  shadow: false,
  indeterminated: false,
  value: 0,
  min: 0,
  max: 100
};
const progress_preClass = "nextui-progress";
const Progress = ({
  value: valueProp,
  max,
  min,
  striped,
  animated,
  shadow,
  indeterminated,
  css,
  ...props
}) => {
  const value = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => valueProp > max ? max : valueProp < min ? min : valueProp, [valueProp, min, max]);
  const percent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => valueToPercent(value, min, max), [value, min, max]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledProgress, {
    "aria-label": "progress",
    "aria-valuemax": max,
    "aria-valuemin": min,
    "aria-valuenow": value,
    css: {
      "nextui-progress-wrapper-enter": {
        opacity: 0
      },
      ".nextui-progress-wrapper-enter-active": {
        opacity: 1,
        width: `${percent}%`
      },
      ...css
    },
    indeterminated: indeterminated,
    role: "progressbar",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      visible: true,
      clearTime: 300,
      enterTime: 10,
      leaveTime: 20,
      name: `${progress_preClass}-wrapper`,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledProgressBar, {
        animated: animated,
        className: clsx(`${progress_preClass}-bar`, {
          [`${progress_preClass}-striped`]: striped,
          [`${progress_preClass}-indeterminated`]: indeterminated
        }),
        indeterminated: indeterminated,
        shadow: shadow,
        striped: striped,
        ...props
      }, void 0, false, {
        fileName: progress_jsxFileName,
        lineNumber: 89,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: progress_jsxFileName,
      lineNumber: 82,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: progress_jsxFileName,
    lineNumber: 63,
    columnNumber: 5
  }, undefined);
};
if (__DEV__) {
  Progress.displayName = "NextUI.Progress";
}
Progress.toString = () => ".nextui-progress";
const MemoProgress = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Progress);
/* harmony default export */ const progress = (with_defaults(MemoProgress, progress_defaultProps));
;// CONCATENATED MODULE: ./src/progress/index.ts


/* harmony default export */ const src_progress = (progress);
;// CONCATENATED MODULE: ./src/utils/clear-icon.tsx
var clear_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/clear-icon.tsx";



const clear_icon_defaultProps = {
  width: 24,
  height: 24,
  plain: false,
  className: ""
};
const Close = ({
  size,
  fill,
  plain,
  width,
  height,
  className,
  ...props
}) => {
  if (plain) {
    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
      className: className,
      fill: "none",
      height: size || height,
      stroke: fill,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 2,
      viewBox: "0 0 24 24",
      width: size || width,
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M18 6L6 18M6 6l12 12"
      }, void 0, false, {
        fileName: clear_icon_jsxFileName,
        lineNumber: 36,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: clear_icon_jsxFileName,
      lineNumber: 24,
      columnNumber: 7
    }, undefined);
  }
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
    className: className,
    height: size || height,
    viewBox: "0 0 24 24",
    width: size || width,
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M12 2a10 10 0 1010 10A10.016 10.016 0 0012 2zm3.36 12.3a.754.754 0 010 1.06.748.748 0 01-1.06 0l-2.3-2.3-2.3 2.3a.748.748 0 01-1.06 0 .754.754 0 010-1.06l2.3-2.3-2.3-2.3A.75.75 0 019.7 8.64l2.3 2.3 2.3-2.3a.75.75 0 011.06 1.06l-2.3 2.3z",
      fill: fill
    }, void 0, false, {
      fileName: clear_icon_jsxFileName,
      lineNumber: 49,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: clear_icon_jsxFileName,
    lineNumber: 42,
    columnNumber: 5
  }, undefined);
};
const MemoClose = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_.memo(Close);
/* harmony default export */ const clear_icon = (with_defaults(MemoClose, clear_icon_defaultProps));
;// CONCATENATED MODULE: ./src/utils/animations.ts

const reboundAnimation = keyframes({
  "0%": {
    transform: "scale(0.95)"
  },
  "40%": {
    transform: "scale(1.02)"
  },
  "80%": {
    transform: "scale(0.98)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
const animations_appearanceIn = keyframes({
  "0%": {
    opacity: 0,
    transform: "scale(0.95)"
  },
  "60%": {
    opacity: 0.75,
    transform: "scale(1.02)"
  },
  "100%": {
    opacity: 1,
    transform: "scale(1)"
  }
});
const appearanceOut = keyframes({
  "0%": {
    opacity: 1,
    transform: "scale(1)"
  },
  "100%": {
    opacity: 0,
    transform: "scale(0.95)"
  }
});
;// CONCATENATED MODULE: ./src/modal/modal.styles.ts



const StyledModalHideTab = styled("div", {
  outline: "none",
  overflow: "hidden",
  width: 0,
  height: 0,
  opacity: 0
});
const StyledModalCloseButton = styled("button", {
  position: "absolute",
  background: "transparent",
  border: "none",
  zIndex: "$1",
  top: "$space$3",
  right: "$space$2",
  margin: 0,
  d: "inline-flex",
  ai: "center",
  height: "auto",
  cursor: "pointer",
  boxSizing: "border-box",
  transition: "$default",
  padding: "calc($space$sm * 0.5)",
  color: "$accents4",
  br: "$space$5",
  svg: {
    color: "currentColor"
  },
  "&:hover": {
    svg: {
      opacity: 0.8
    }
  },
  variants: {
    disabled: {
      true: {
        cursor: "not-allowed"
      }
    }
  }
}, sharedFocus);
const StyledModalHeader = styled("div", {
  display: "flex",
  flexShrink: 0,
  ai: "center",
  ov: "hidden",
  color: "inherit",
  padding: "$sm $10",
  fs: "$xs",
  variants: {
    noPadding: {
      true: {
        padding: 0
      }
    },
    autoMargin: {
      true: {
        "> *:first-child": {
          mt: 0
        },
        "> *:last-child": {
          mb: 0
        }
      }
    }
  }
});
const StyledModalBody = styled("div", {
  display: "flex",
  flexDirection: "column",
  flex: "1 1 auto",
  padding: "$sm $10",
  oy: "auto",
  position: "relative",
  ta: "left",
  variants: {
    noPadding: {
      true: {
        flex: 1,
        padding: 0
      }
    },
    autoMargin: {
      true: {
        "> *:first-child": {
          mt: 0
        },
        "> *": {
          mb: "$8"
        },
        "> *:last-child": {
          mb: 0
        }
      }
    }
  }
});
const StyledModalFooter = styled("div", {
  d: "flex",
  flexWrap: "wrap",
  flexShrink: 0,
  overflow: "hidden",
  color: "inherit",
  ai: "center",
  fs: "$xs",
  padding: "$sm $lg",
  variants: {
    noPadding: {
      true: {
        padding: 0
      }
    },
    autoMargin: {
      true: {
        "> *": {
          m: "$2"
        }
      }
    }
  }
});
const StyledModal = styled("section", {
  maxWidth: "100%",
  verticalAlign: "middle",
  overflow: "hidden",
  height: "fit-content(20em)",
  maxHeight: "inherit",
  display: "flex",
  outline: "none",
  flexDirection: "column",
  position: "relative",
  boxSizing: "border-box",
  color: "$foreground",
  br: "$lg",
  boxShadow: "$lg",
  bg: "$backgroundContrast",
  animationFillMode: "forwards",
  "@motion": {
    transition: "none"
  },
  "&.nextui-modal-wrapper-enter:not(.nextui-modal-rendered)": {
    animationName: animations_appearanceIn,
    animationDuration: "200ms",
    animationTimingFunction: "ease-in",
    animationDirection: "normal"
  },
  "&.nextui-modal-wrapper-leave": {
    animationName: appearanceOut,
    animationDuration: "50ms",
    animationTimingFunction: "ease-out"
  },
  variants: {
    fullScreen: {
      true: {
        size: "100%",
        maxHeight: "100%"
      },
      false: {
        "&.nextui-modal-rebound": {
          animationDuration: "250ms",
          animationName: reboundAnimation,
          animationTimingFunction: "ease",
          animationFillMode: "forwards"
        }
      }
    },
    scroll: {
      true: {
        maxHeight: "calc(100vh - 200px)"
      }
    },
    closeButton: {
      true: {
        paddingTop: "$lg",
        [`& ${StyledModalCloseButton}`]: {
          svg: {
            size: "$10"
          }
        }
      }
    }
  },
  compoundVariants: [{
    // scroll && fullScreen
    scroll: true,
    fullScreen: true,
    css: {
      maxHeight: "100%"
    }
  }]
});
;// CONCATENATED MODULE: ./src/modal/modal-close-button.tsx
var modal_close_button_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-close-button.tsx";




const ModalCloseButton = ({
  onClick,
  ...props
}) => {
  const clickHandler = event => {
    event.preventDefault();
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
    onClick && onClick(event);
  };
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalCloseButton, {
    "aria-label": "Close",
    className: "nextui-modal-close-icon",
    type: "button",
    onClick: clickHandler,
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(clear_icon, {
      plain: true,
      "aria-hidden": true,
      className: "nextui-modal-close-icon-svg",
      fill: "currentColor",
      size: 18
    }, void 0, false, {
      fileName: modal_close_button_jsxFileName,
      lineNumber: 35,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: modal_close_button_jsxFileName,
    lineNumber: 28,
    columnNumber: 5
  }, undefined);
};
ModalCloseButton.toString = () => ".nextui-modal-close-icon";
const MemoModalCloseButton = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalCloseButton);
/* harmony default export */ const modal_close_button = (MemoModalCloseButton);
;// CONCATENATED MODULE: ./src/modal/modal-wrapper.tsx
var modal_wrapper_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-wrapper.tsx";










const modal_wrapper_defaultProps = {
  className: "",
  visible: false,
  rebound: false
};
const modal_wrapper_preClass = "nextui-modal";
const ModalWrapper = ({
  className,
  children,
  visible,
  fullScreen,
  closeButton,
  rebound,
  animated,
  onCloseButtonClick,
  scroll,
  ...props
}) => {
  const modalContent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const tabStart = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const tabEnd = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [rendered, setRendered] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const timer = setTimeout(() => {
      setRendered(true);
      clearTimeout(timer);
    }, 300);
    return () => clearTimeout(timer);
  }, []);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!visible) return;
    const activeElement = document.activeElement;
    const isChild = isChildElement(modalContent.current, activeElement);
    if (isChild) return;
    tabStart.current && tabStart.current.focus();
  }, [visible]);
  const onKeyDown = event => {
    const isTabDown = event.keyCode === KeyCode.Tab;
    if (!visible || !isTabDown) return;
    const activeElement = document.activeElement;
    if (event.shiftKey) {
      if (activeElement === tabStart.current) {
        tabEnd.current && tabEnd.current.focus();
      }
    } else {
      if (activeElement === tabEnd.current) {
        tabStart.current && tabStart.current.focus();
      }
    }
  };
  const handleClose = () => {
    onCloseButtonClick && onCloseButtonClick();
  };
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? "open" : "closed";
  }, [visible]);
  const renderChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
      (0,jsx_dev_runtime.jsxDEV)(StyledModal, {
        ref: modalContent,
        "aria-modal": visible,
        className: clsx(modal_wrapper_preClass, `${modal_wrapper_preClass}--${getState}`, {
          [`${modal_wrapper_preClass}-fullscreen`]: fullScreen,
          [`${modal_wrapper_preClass}-with-close-button`]: closeButton,
          [`${modal_wrapper_preClass}-rebound`]: rebound,
          [`${modal_wrapper_preClass}-rendered`]: rendered
        }, className),
        closeButton: closeButton,
        "data-state": getState,
        fullScreen: fullScreen,
        role: "dialog",
        scroll: scroll,
        tabIndex: -1,
        ...props,
        onKeyDown: onKeyDown,
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHideTab, {
          ref: tabStart,
          "aria-hidden": "true",
          className: `${modal_wrapper_preClass}-hide-tab`,
          role: "button",
          tabIndex: 0
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 124,
          columnNumber: 9
        }, undefined), closeButton && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(modal_close_button, {
          onClick: handleClose
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 131,
          columnNumber: 25
        }, undefined), children, /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHideTab, {
          ref: tabEnd,
          "aria-hidden": "true",
          className: `${modal_wrapper_preClass}-hide-tab`,
          role: "button",
          tabIndex: 0
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 133,
          columnNumber: 9
        }, undefined)]
      }, void 0, true, {
        fileName: modal_wrapper_jsxFileName,
        lineNumber: 101,
        columnNumber: 7
      }, undefined)
    );
  }, [rebound, children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
    children: animated ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      clearTime: 300,
      enterTime: 20,
      leaveTime: 20,
      name: `${modal_wrapper_preClass}-wrapper`,
      visible: visible,
      children: renderChildren
    }, void 0, false, {
      fileName: modal_wrapper_jsxFileName,
      lineNumber: 147,
      columnNumber: 9
    }, undefined) : visible ? renderChildren : null
  }, void 0, false);
};
ModalWrapper.toString = () => ".nextui-modal-wrapper";
/* harmony default export */ const modal_wrapper = (with_defaults(ModalWrapper, modal_wrapper_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-context.ts

const modal_context_defaultContext = {};
const ModalContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(modal_context_defaultContext);
const useModalContext = () => React.useContext(ModalContext);
;// CONCATENATED MODULE: ./src/modal/modal.tsx
var modal_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal.tsx";











const modal_defaultProps = {
  width: "400px",
  className: "",
  preventClose: false,
  fullScreen: false,
  closeButton: false,
  animated: true,
  blur: false,
  scroll: false,
  noPadding: false
};
const Modal = ({
  children,
  onClose,
  onOpen,
  open,
  autoMargin,
  width: wrapperWidth,
  className,
  preventClose,
  blur,
  animated,
  fullScreen,
  noPadding,
  ...props
}) => {
  const portal = src_use_portal("modal");
  const [, setBodyHidden] = src_use_body_scroll(null, {
    scrollLayer: true
  });
  const [visible, setVisible, visibleRef] = src_use_current_state(false);
  const [rebound, setRebound] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const closeModal = () => {
    onClose && onClose();
    setVisible(false);
    setBodyHidden(false);
  };
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (open === undefined) return;
    if (open) {
      onOpen && onOpen();
    }
    if (!open && visibleRef.current) {
      onClose && onClose();
    }
    setVisible(open);
    setBodyHidden(open);
  }, [open]);
  const toggleRebound = () => {
    setRebound(true);
    const timer = setTimeout(() => {
      setRebound(false);
      clearTimeout(timer);
    }, 300);
  };
  const {
    bindings
  } = src_use_keyboard(() => {
    if (preventClose) {
      toggleRebound();
      return;
    }
    closeModal();
  }, KeyCode.Escape, {
    disableGlobalEvent: true,
    preventDefault: true
  });
  const closeFromBackdrop = () => {
    if (preventClose) {
      toggleRebound();
      return;
    }
    closeModal();
  };
  const modalConfig = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    close: closeModal,
    autoMargin,
    noPadding
  }), []);
  if (!portal) return null;
  return /*#__PURE__*/(0,external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_.createPortal)( /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(ModalContext.Provider, {
    value: modalConfig,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_backdrop, {
      animated: animated,
      blur: blur,
      fullScreen: fullScreen,
      maxWidth: wrapperWidth,
      visible: visible,
      onClick: closeFromBackdrop,
      ...bindings,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(modal_wrapper, {
        animated: animated,
        className: className,
        fullScreen: fullScreen,
        rebound: rebound,
        visible: visible,
        onCloseButtonClick: closeModal,
        ...props,
        children: children
      }, void 0, false, {
        fileName: modal_jsxFileName,
        lineNumber: 143,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: modal_jsxFileName,
      lineNumber: 134,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: modal_jsxFileName,
    lineNumber: 133,
    columnNumber: 5
  }, undefined), portal);
};
if (__DEV__) {
  Modal.displayName = "NextUI.Modal";
}
Modal.toString = () => ".nextui-modal";
Modal.defaultProps = modal_defaultProps;
/* harmony default export */ const modal = (Modal);
;// CONCATENATED MODULE: ./src/modal/modal-header.tsx
var modal_header_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-header.tsx";






const modal_header_defaultProps = {
  className: "",
  justify: "center",
  autoMargin: true
};
const modal_header_preClass = "nextui-modal-header";
const ModalHeader = ({
  children,
  className,
  justify,
  autoMargin: autoMarginProp,
  css,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHeader, {
    autoMargin: autoMargin,
    className: clsx(modal_header_preClass, {
      [`${modal_header_preClass}-auto-margin`]: autoMargin,
      [`${modal_header_preClass}-no-padding`]: noPadding
    }, className),
    css: {
      justifyContent: justify,
      ...css
    },
    noPadding: noPadding,
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_header_jsxFileName,
    lineNumber: 48,
    columnNumber: 5
  }, undefined);
};
ModalHeader.toString = () => ".nextui-modal-header";
const MemoModalHeader = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalHeader);
/* harmony default export */ const modal_header = (with_defaults(MemoModalHeader, modal_header_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-body.tsx
var modal_body_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-body.tsx";






const modal_body_defaultProps = {
  className: "",
  autoMargin: true
};
const modal_body_preClass = "nextui-modal-body";
const ModalBody = ({
  className,
  children,
  autoMargin: autoMarginProp,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalBody, {
    autoMargin: autoMargin,
    className: clsx(modal_body_preClass, {
      [`${modal_body_preClass}-auto-margin`]: autoMargin,
      [`${modal_body_preClass}-no-padding`]: noPadding
    }, className),
    noPadding: noPadding,
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_body_jsxFileName,
    lineNumber: 43,
    columnNumber: 5
  }, undefined);
};
ModalBody.toString = () => ".nextui-modal-body";
const MemoModalBody = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalBody);
/* harmony default export */ const modal_body = (with_defaults(MemoModalBody, modal_body_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-footer.tsx
var modal_footer_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-footer.tsx";






const modal_footer_defaultProps = {
  className: "",
  justify: "flex-end",
  autoMargin: true
};
const modal_footer_preClass = "nextui-modal-footer";
const ModalFooter = ({
  children,
  className,
  justify,
  autoMargin: autoMarginProp,
  css,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalFooter, {
    autoMargin: autoMargin,
    className: clsx(modal_footer_preClass, {
      [`${modal_footer_preClass}-auto-margin`]: autoMargin,
      [`${modal_footer_preClass}-no-padding`]: noPadding
    }, className),
    css: {
      justifyContent: justify,
      ...css
    },
    noPadding: noPadding,
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_footer_jsxFileName,
    lineNumber: 47,
    columnNumber: 5
  }, undefined);
};
ModalFooter.toString = () => ".nextui-modal-footer";
const MemoModalFooter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalFooter);
/* harmony default export */ const modal_footer = (with_defaults(MemoModalFooter, modal_footer_defaultProps));
;// CONCATENATED MODULE: ./src/modal/index.ts




modal.Header = modal_header;
modal.Body = modal_body;
modal.Footer = modal_footer;

/* harmony default export */ const src_modal = (modal);
;// CONCATENATED MODULE: ./src/modal/use-modal.ts

const useModal = (initialVisible = false) => {
  const [visible, setVisible, currentRef] = src_use_current_state(initialVisible);
  return {
    visible,
    setVisible,
    currentRef,
    bindings: {
      open: visible,
      onClose: () => setVisible(false)
    }
  };
};
/* harmony default export */ const use_modal = (useModal);
;// CONCATENATED MODULE: ./src/pagination/pagination.styles.ts


const paginationAnimation = keyframes({
  "0%": {
    transform: "scale(1)"
  },
  "60%": {
    transform: "scale($$paginationScaleTransform)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
const StyledPaginationEllipsis = styled("svg", {
  color: "currentColor",
  stroke: "currentColor",
  variants: {
    isEllipsis: {
      true: {
        transform: "0deg"
      }
    },
    isBefore: {
      true: {}
    }
  },
  compoundVariants: [{
    // isEllipsis && isBefore
    isEllipsis: true,
    isBefore: true,
    css: {
      transform: "rotate(180deg)"
    }
  }]
});
const StyledPaginationIcon = styled("svg", {
  transform: "rotate(180deg)",
  variants: {
    isPrev: {
      true: {
        transform: "rotate(0deg)"
      }
    }
  }
});
const StyledPaginationItemContent = styled("span", {
  position: "relative",
  display: "inline-flex",
  alignItems: "center",
  top: 0,
  left: 0,
  zIndex: "$2"
});
const StyledPaginationItem = styled("button", {
  border: "none",
  position: "relative",
  display: "inline-flex",
  margin: "0 $$paginationItemMargin",
  ai: "center",
  jc: "center",
  padding: 0,
  boxSizing: "border-box",
  tt: "capitalize",
  us: "none",
  whiteSpace: "nowrap",
  ta: "center",
  verticalAlign: "middle",
  bs: "none",
  outline: "none",
  height: "$$paginationSize",
  minWidth: "$$paginationSize",
  fs: "inherit",
  cursor: "pointer",
  br: "$$paginationItemRadius",
  color: "$text",
  bg: "$accents0",
  "@motion": {
    transition: "none"
  },
  "&:hover": {
    bg: "$accents1"
  },
  [`& ${StyledPaginationIcon}`]: {
    size: "$$paginationFontSize"
  },
  [`& ${StyledPaginationEllipsis}`]: {
    size: "$$paginationFontSize"
  },
  variants: {
    active: {
      true: {
        fontWeight: "$bold",
        cursor: "default",
        boxShadow: "$sm",
        [`& ${StyledPaginationItemContent}`]: {
          color: "$white"
        }
      }
    },
    disabled: {
      true: {
        color: "$accents5",
        cursor: "not-allowed"
      }
    },
    bordered: {
      true: {
        bg: "transparent",
        border: "$$paginationItemBorderWeight solid $accents2"
      }
    },
    onlyDots: {
      true: {}
    },
    preserveContent: {
      true: {}
    },
    animated: {
      true: {
        transition: "transform 0.25s ease 0s, background 0.25s ease 0s, box-shadow 0.25s ease 0s"
      },
      false: {
        transition: "none"
      }
    }
  },
  compoundVariants: [
  // onlyDots && !preserveContent
  {
    onlyDots: true,
    preserveContent: false,
    css: {
      [`& ${StyledPaginationItemContent}`]: {
        display: "none"
      }
    }
  },
  // animated && !disabled && !active
  {
    animated: true,
    disabled: false,
    active: false,
    css: {
      "&:active": {
        transform: "scale($$paginationScaleTransform)",
        fs: "calc($$paginationFontSize * 0.9)"
      }
    }
  }]
}, sharedFocus);
const StyledPaginationHighlight = styled("div", {
  position: "absolute",
  contain: "strict",
  top: "0px",
  zIndex: "$1",
  bg: "$$paginationColor",
  br: "$$paginationItemRadius",
  height: "$$paginationSize",
  minWidth: "$$paginationSize",
  animationName: `${paginationAnimation}`,
  animationDirection: "normal",
  "&.nextui-pagination-highlight--moving": {
    transform: "scale($$paginationScaleTransform)"
  },
  "@motion": {
    transition: "none",
    "&.nextui-pagination-highlight--moving": {
      transform: "scale(1)"
    }
  },
  variants: {
    animated: {
      true: {
        animationDuration: "350ms",
        animationTimingFunction: "ease",
        transition: "left 350ms ease 0s, transform 300ms ease 0s"
      },
      false: {
        animationDuration: "none",
        animationTimingFunction: "none",
        transition: "none",
        "&.nextui-pagination-highlight--moving": {
          transform: "scale(1)"
        }
      }
    },
    noMargin: {
      true: {
        br: "$squared"
      }
    },
    rounded: {
      true: {}
    },
    shadow: {
      true: {
        normalShadowVar: "$$paginationShadowColor"
      }
    }
  },
  compoundVariants: [{
    // rounded && noMargin
    rounded: true,
    noMargin: true,
    css: {
      br: "$pill"
    }
  }]
});
const StyledPagination = styled("nav", {
  m: 0,
  p: 0,
  d: "inline-flex",
  position: "relative",
  fontVariant: "tabular-nums",
  fontFeatureSettings: "tnum",
  variants: {
    color: {
      default: {
        $$paginationColor: "$colors$primary",
        $$paginationShadowColor: "$colors$primaryShadow"
      },
      primary: {
        $$paginationColor: "$colors$primary",
        $$paginationShadowColor: "$colors$primaryShadow"
      },
      secondary: {
        $$paginationColor: "$colors$secondary",
        $$paginationShadowColor: "$colors$secondaryShadow"
      },
      success: {
        $$paginationColor: "$colors$success",
        $$paginationShadowColor: "$colors$successShadow"
      },
      warning: {
        $$paginationColor: "$colors$warning",
        $$paginationShadowColor: "$colors$warningShadow"
      },
      error: {
        $$paginationColor: "$colors$error",
        $$paginationShadowColor: "$colors$errorShadow"
      },
      gradient: {
        $$paginationColor: "$colors$gradient",
        $$paginationShadowColor: "$colors$primaryShadow"
      }
    },
    size: {
      xs: {
        $$paginationWidth: "$space$10",
        $$paginationFontSize: "$space$5",
        fs: "$$paginationFontSize"
      },
      sm: {
        $$paginationWidth: "$space$12",
        $$paginationFontSize: "$space$6",
        fs: "$$paginationFontSize"
      },
      md: {
        $$paginationWidth: "$space$13",
        $$paginationFontSize: "$space$7",
        fs: "$$paginationFontSize"
      },
      lg: {
        $$paginationWidth: "$space$14",
        $$paginationFontSize: "$space$8",
        fs: "$$paginationFontSize"
      },
      xl: {
        $$paginationWidth: "$space$15",
        $$paginationFontSize: "$space$9",
        fs: "$$paginationFontSize"
      }
    },
    borderWeight: {
      light: {
        $$paginationItemBorderWeight: "$borderWeights$light"
      },
      normal: {
        $$paginationItemBorderWeight: "$borderWeights$normal"
      },
      bold: {
        $$paginationItemBorderWeight: "$borderWeights$bold"
      },
      extrabold: {
        $$paginationItemBorderWeight: "$borderWeights$extrabold"
      },
      black: {
        $$paginationItemBorderWeight: "$borderWeights$black"
      }
    },
    bordered: {
      true: {}
    },
    onlyDots: {
      true: {
        $$paginationSize: "calc($$paginationWidth / 2)",
        $$paginationItemRadius: "$radii$pill",
        $$paginationScaleTransform: 1.05
      },
      false: {
        $$paginationSize: "$$paginationWidth",
        $$paginationScaleTransform: 1.1
      }
    },
    rounded: {
      true: {
        $$paginationItemRadius: "$radii$pill"
      },
      false: {
        $$paginationItemRadius: "$radii$squared"
      }
    },
    noMargin: {
      true: {
        $$paginationItemRadius: "0px",
        $$paginationItemMargin: "0",
        [`& ${StyledPaginationItem}:first-of-type`]: {
          btlr: "$squared",
          bblr: "$squared"
        },
        [`& ${StyledPaginationItem}:last-of-type`]: {
          btrr: "$squared",
          bbrr: "$squared"
        }
      },
      false: {
        $$paginationItemMargin: "$space$1"
      }
    }
  },
  compoundVariants: [{
    // bordered && noMargin
    bordered: true,
    noMargin: true,
    css: {
      [`& ${StyledPaginationItem}:not(:last-child)`]: {
        borderRight: 0
      }
    }
  }, {
    // noMargin && rounded
    noMargin: true,
    rounded: true,
    css: {
      $$paginationItemRadius: "0px"
    }
  }, {
    // !rounded && noMargin
    rounded: false,
    noMargin: true,
    css: {
      $$paginationItemRadius: "0px"
    }
  }],
  defaultVariants: {
    color: "default",
    size: "md",
    borderWeight: "normal",
    onlyDots: false,
    noMargin: false,
    rounded: false
  }
});
;// CONCATENATED MODULE: ./src/pagination/pagination-item.tsx
var pagination_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-item.tsx";






const pagination_item_defaultProps = {
  preserveContent: false
};
const getItemAriaLabel = page => {
  if (!page) return;
  switch (page) {
    case DOTS:
      return "dots element";
    case "<":
      return "previous page button";
    case ">":
      return "next page button";
    case "first":
      return "first page button";
    case "last":
      return "last page button";
    default:
      return `${page} item`;
  }
};
const pagination_item_preClass = "nextui-pagination-item";
const PaginationItem = ({
  active,
  value,
  children,
  disabled,
  animated,
  bordered,
  onClick,
  onlyDots,
  preserveContent,
  ...props
}) => {
  const ariaLabel = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => active ? `${getItemAriaLabel(value)} active` : getItemAriaLabel(value), [value, active]);
  const clickHandler = event => {
    if (disabled) return;
    onClick && onClick(event);
  };
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationItem, {
    active: active,
    animated: animated,
    "aria-label": ariaLabel,
    bordered: bordered,
    className: clsx(pagination_item_preClass, {
      [`${pagination_item_preClass}-active`]: active,
      [`${pagination_item_preClass}-animated`]: animated,
      [`${pagination_item_preClass}-disabled`]: disabled,
      [`${pagination_item_preClass}-bordered`]: bordered,
      [`${pagination_item_preClass}-only-dots`]: onlyDots,
      [`${pagination_item_preClass}-preserve-content`]: preserveContent
    }),
    disabled: disabled,
    onlyDots: onlyDots,
    preserveContent: preserveContent,
    tabIndex: disabled ? -1 : 0,
    onClick: clickHandler,
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationItemContent, {
      className: `${pagination_item_preClass}-content`,
      children: children
    }, void 0, false, {
      fileName: pagination_item_jsxFileName,
      lineNumber: 98,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: pagination_item_jsxFileName,
    lineNumber: 78,
    columnNumber: 5
  }, undefined);
};
PaginationItem.toString = () => ".nextui-pagination-item";
/* harmony default export */ const pagination_item = (with_defaults(PaginationItem, pagination_item_defaultProps));
;// CONCATENATED MODULE: ./src/pagination/pagination-ellipsis.tsx
var pagination_ellipsis_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-ellipsis.tsx";




const PaginationEllipsis = ({
  value,
  isBefore,
  onlyDots,
  animated,
  bordered,
  onClick
}) => {
  const [showMore, setShowMore] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
    animated: animated,
    bordered: bordered,
    onlyDots: onlyDots,
    value: value,
    onClick: e => onClick && onClick(e),
    onMouseEnter: () => setShowMore(true),
    onMouseLeave: () => setShowMore(false),
    children: showMore ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationEllipsis, {
      className: "nextui-pagination-ellipsis",
      fill: "none",
      focusable: "false",
      isBefore: isBefore,
      isEllipsis: true,
      role: "presentation",
      shapeRendering: "geometricPrecision",
      stroke: "currentColor",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: "1.5",
      viewBox: "0 0 24 24",
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M13 17l5-5-5-5"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 50,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M6 17l5-5-5-5"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 51,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: pagination_ellipsis_jsxFileName,
      lineNumber: 36,
      columnNumber: 9
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationEllipsis, {
      fill: "none",
      isBefore: isBefore,
      isEllipsis: false,
      shapeRendering: "geometricPrecision",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: "1.5",
      viewBox: "0 0 24 24",
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "12",
        cy: "12",
        fill: "currentColor",
        r: "1"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 64,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "19",
        cy: "12",
        fill: "currentColor",
        r: "1"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 65,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "5",
        cy: "12",
        fill: "currentColor",
        r: "1"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 66,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: pagination_ellipsis_jsxFileName,
      lineNumber: 54,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: pagination_ellipsis_jsxFileName,
    lineNumber: 26,
    columnNumber: 5
  }, undefined);
};
/* harmony default export */ const pagination_ellipsis = (PaginationEllipsis);
;// CONCATENATED MODULE: ./src/pagination/pagination-icon.tsx
var pagination_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-icon.tsx";




const PaginationIcon = ({
  isPrev,
  disabled,
  onlyDots,
  animated,
  bordered,
  onClick,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
    preserveContent: true,
    animated: animated,
    bordered: bordered,
    disabled: disabled,
    onlyDots: onlyDots,
    value: isPrev ? "<" : ">",
    onClick: e => onClick && onClick(e),
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationIcon, {
      className: "nextui-pagination-icon",
      fill: "none",
      focusable: "false",
      isPrev: isPrev,
      role: "presentation",
      viewBox: "0 0 24 24",
      xmlns: "http://www.w3.org/2000/svg",
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M15.5 19l-7-7 7-7",
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 1.5
      }, void 0, false, {
        fileName: pagination_icon_jsxFileName,
        lineNumber: 50,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: pagination_icon_jsxFileName,
      lineNumber: 40,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: pagination_icon_jsxFileName,
    lineNumber: 31,
    columnNumber: 5
  }, undefined);
};
PaginationIcon.toString = () => ".nextui-pagination-icon";
const MemoPaginationIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(PaginationIcon);
/* harmony default export */ const pagination_icon = (MemoPaginationIcon);
;// CONCATENATED MODULE: ./src/pagination/pagination-highlight.tsx
var pagination_highlight_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-highlight.tsx";





const pagination_highlight_preClass = "nextui-pagination-highlight";
const PaginationHighlight = ({
  active,
  shadow,
  noMargin,
  rounded,
  css,
  ...props
}) => {
  const [selfActive, setSelfActive] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(active);
  const [moveClassName, setMoveClassName] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)("");
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (active !== selfActive) {
      setSelfActive(active);
      setMoveClassName(`${pagination_highlight_preClass}--moving`);
      const timer = setTimeout(() => {
        setMoveClassName("");
        clearTimeout(timer);
      }, 350);
    }
  }, [active]);
  const leftValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => noMargin ? `var(--nextui--paginationSize) * ${selfActive}` : `var(--nextui--paginationSize) * ${selfActive} + ${selfActive * 4 + 2}px`, [selfActive, noMargin]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationHighlight, {
    "aria-hidden": true,
    className: clsx(pagination_highlight_preClass, moveClassName, {
      [`${pagination_highlight_preClass}--rounded`]: rounded,
      [`${pagination_highlight_preClass}--active`]: active,
      [`${pagination_highlight_preClass}--no-margin`]: noMargin,
      [`${pagination_highlight_preClass}--shadow`]: shadow
    }, props.className),
    css: {
      left: "var(--nextui--paginationLeft)",
      ...css
    },
    noMargin: noMargin,
    rounded: rounded,
    shadow: shadow,
    style: dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928({
      "--nextui--paginationLeft": `calc(${leftValue})`
    }, (props == null ? void 0 : props.style) || {}),
    ...props
  }, void 0, false, {
    fileName: pagination_highlight_jsxFileName,
    lineNumber: 56,
    columnNumber: 5
  }, undefined);
};
PaginationHighlight.toString = () => ".nextui-pagination-highlight";
/* harmony default export */ const pagination_highlight = (PaginationHighlight);
;// CONCATENATED MODULE: ./src/pagination/pagination.tsx
var pagination_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination.tsx";










const pagination_defaultProps = {
  shadow: false,
  controls: true,
  bordered: false,
  initialPage: 1,
  siblings: 1,
  boundaries: 1,
  dotsJump: 5,
  total: 1,
  loop: false,
  animated: true,
  onlyDots: false,
  noMargin: false,
  rounded: false
};
const pagination_preClass = "nextui-pagination";
const Pagination = ({
  page,
  initialPage,
  onlyDots,
  total,
  loop,
  siblings,
  boundaries,
  shadow,
  animated,
  bordered,
  dotsJump,
  controls,
  noMargin,
  onChange,
  rounded,
  ...props
}) => {
  const {
    range,
    active,
    setPage,
    previous,
    next,
    first,
    last
  } = use_pagination({
    page,
    initialPage,
    siblings: onlyDots ? 10 : siblings,
    boundaries: onlyDots ? 10 : boundaries,
    total,
    onChange
  });
  const renderItem = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((value, index) => {
    if (value === DOTS) {
      const isBefore = index < range.indexOf(active);
      return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_ellipsis, {
        animated: animated,
        bordered: bordered,
        isBefore: isBefore,
        onlyDots: onlyDots,
        value: value,
        onClick: () => isBefore ? setPage(active - dotsJump >= 1 ? active - dotsJump : 1) : setPage(active + dotsJump <= total ? active + dotsJump : total)
      }, `${pagination_preClass}-item-${value}-${index}`, false, {
        fileName: pagination_jsxFileName,
        lineNumber: 92,
        columnNumber: 11
      }, undefined);
    }
    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
      active: value === active,
      animated: animated,
      bordered: bordered,
      onlyDots: onlyDots,
      value: value,
      onClick: () => value !== active && setPage(value),
      children: value
    }, `${pagination_preClass}-item-${value}-${index}`, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 109,
      columnNumber: 9
    }, undefined);
  }, [total, onlyDots, active, bordered, animated, setPage]);
  const handleNext = () => {
    if (loop && active === total) {
      return first();
    }
    return next();
  };
  const handlePrevious = () => {
    if (loop && active === 1) {
      return last();
    }
    return previous();
  };
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPagination, {
    bordered: bordered,
    className: clsx(pagination_preClass, {
      [`${pagination_preClass}--no-margin`]: noMargin,
      [`${pagination_preClass}--bordered`]: bordered,
      [`${pagination_preClass}--shadow`]: shadow,
      [`${pagination_preClass}--rounded`]: rounded
    }),
    noMargin: noMargin,
    onlyDots: onlyDots,
    rounded: rounded,
    ...props,
    children: [controls && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_icon, {
      isPrev: true,
      animated: animated,
      bordered: bordered,
      disabled: !loop && active === 1,
      onlyDots: onlyDots,
      onClick: handlePrevious
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 156,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_highlight, {
      active: controls ? range.indexOf(active) + 1 : range.indexOf(active),
      animated: animated,
      noMargin: noMargin,
      rounded: rounded,
      shadow: shadow
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 165,
      columnNumber: 7
    }, undefined), range.map(renderItem), controls && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_icon, {
      animated: animated,
      bordered: bordered,
      disabled: !loop && active === total,
      onlyDots: onlyDots,
      onClick: handleNext
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 174,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: pagination_jsxFileName,
    lineNumber: 142,
    columnNumber: 5
  }, undefined);
};
Pagination.defaultProps = pagination_defaultProps;
if (__DEV__) {
  Pagination.displayName = "NextUI.Pagination";
}
Pagination.toString = () => ".nextui-pagination";
/* harmony default export */ const pagination = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Pagination));
;// CONCATENATED MODULE: ./src/pagination/index.ts


/* harmony default export */ const src_pagination = (pagination);
;// CONCATENATED MODULE: ./node_modules/@react-aria/label/node_modules/@react-aria/ssr/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is
// guarded by a check that it only runs on the client side.
// eslint-disable-next-line rulesdir/useLayoutEffectRule

// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 10000000000)),
  current: 0
};
const node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext);
function node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {
  let cur = (0, $89yE2$useContext)(node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  let value = (0, $89yE2$useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [cur]);
  return /*#__PURE__*/(0, $89yE2$react).createElement(node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext.Provider, {
    value: value
  }, props.children);
}
let node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
function node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {
  let ctx = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  // If we are rendering in a non-DOM environment, and there's no SSRProvider,
  // provide a warning to hint to the developer to add one.
  if (ctx === node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext && !node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$canUseDOM) console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);
}
function node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$535bd6ca7f90a273() {
  let cur = (0, $89yE2$useContext)(node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$SSRContext);
  let isInSSRContext = cur !== node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$var$defaultContext;
  let [isSSR, setIsSSR] = (0, $89yE2$useState)(isInSSRContext);
  // If on the client, and the component was initially server rendered,
  // then schedule a layout effect to update the component after hydration.
  if (typeof window !== "undefined" && isInSSRContext)
    // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, $89yE2$useLayoutEffect)(() => {
      setIsSSR(false);
    }, []);
  return isSSR;
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/label/node_modules/@react-aria/utils/dist/module.js





/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const label_node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).useLayoutEffect : () => {};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function label_node_modules_react_aria_utils_dist_module_$1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0, $12uGp$useState)(defaultValue);
  let valueRef = (0, $12uGp$useRef)(value);
  let effect = (0, $12uGp$useRef)(null);
  valueRef.current = value;
  // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.
  let nextRef = (0, $12uGp$useRef)(null);
  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next();
    // If the generator is done, reset the effect.
    if (newValue.done) {
      effect.current = null;
      return;
    }
    // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.
    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };
  (0, label_node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0, $12uGp$useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}
let label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap = new Map();
function label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultId);
  let nextId = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let res = (0, node_modules_react_aria_ssr_dist_module_$704cf1d3b684cc5c$export$619500959fc48b26)(value);
  let updateValue = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(val => {
    nextId.current = val;
  }, []);
  label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  (0, label_node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let r = res;
    return () => {
      label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  // This cannot cause an infinite loop because the ref is updated first.
  // eslint-disable-next-line
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = (0, label_node_modules_react_aria_utils_dist_module_$1dbecbe27a04f9af$export$14d238f342723f25)(id);
  let updateId = (0, $12uGp$useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : undefined;
    });
  }, [id, setResolvedId]);
  (0, label_node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Calls all functions in the order they were chained with the same arguments.
    */
function label_node_modules_react_aria_utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function label_node_modules_react_aria_utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      // Chain events
      if (typeof a === "function" && typeof b === "function" &&
      // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */65 && key.charCodeAt(2) <= /* 'Z' */90) result[key] = (0, label_node_modules_react_aria_utils_dist_module_$ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = (0, $12uGp$clsx)(a, b);else if (key === "id" && a && b) result.id = (0, label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$cd8c9cb68f842629)(a, b);else result[key] = b !== undefined ? b : a;
    }
  }
  return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$5dc95899b306f630$export$c9058316764c140e(...refs) {
  return value => {
    for (let ref of refs) {
      if (typeof ref === "function") ref(value);else if (ref != null) ref.current = value;
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const label_node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$DOMPropNames = new Set(["id"]);
const label_node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$labelablePropNames = new Set(["aria-label", "aria-labelledby", "aria-describedby", "aria-details"]);
const label_node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function label_node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};
  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && (label_node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && label_node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || label_node_modules_react_aria_utils_dist_module_$65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
  return filteredProps;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if (label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
let label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = null;
function label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScroll() {
  if (label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
      // Ignore
    }
  }
  return label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$supportsPreventScrollCached;
}
function label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function label_node_modules_react_aria_utils_dist_module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === "horizontal" ? rect.right : rect.bottom;
  return orientation === "horizontal" ? rect.left : rect.top;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement = new Map();
// A list of callbacks to call once there are no transitioning elements.
let label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks = new Set();
function label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = new Set();
      label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
      e.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    // If no transitioning elements, call all of the queued callbacks.
    if (label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks) cb();
      label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener("DOMContentLoaded", label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$setupGlobalEvents);
}
function label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if (label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else label_node_modules_react_aria_utils_dist_module_$bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.
const label_node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements = (/* unused pure expression or super */ null && ([]));
function label_node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;
  let getPosition = e => orientation === "horizontal" ? e.clientX : e.clientY;
  let getNextOffset = e => {
    let containerOffset = (0, label_node_modules_react_aria_utils_dist_module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };
  let dragging = (0, $12uGp$useRef)(false);
  let prevPosition = (0, $12uGp$useRef)(0);
  // Keep track of the current handlers in a ref so that the events can access them.
  let handlers = (0, $12uGp$useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;
  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);
    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }
    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };
  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    label_node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.splice(label_node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener("mouseup", onMouseUp, false);
    window.removeEventListener("mousemove", onMouseDragged, false);
  };
  let onMouseDown = e => {
    const target = e.currentTarget;
    // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.
    if (label_node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    label_node_modules_react_aria_utils_dist_module_$9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener("mousemove", onMouseDragged, false);
    window.addEventListener("mouseup", onMouseUp, false);
  };
  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };
  let onMouseOut = () => {
    if (onHover) onHover(false);
  };
  let onKeyDown = e => {
    switch (e.key) {
      case "Left":
      case "ArrowLeft":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Up":
      case "ArrowUp":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }
        break;
      case "Right":
      case "ArrowRight":
        if (orientation === "horizontal") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Down":
      case "ArrowDown":
        if (orientation === "vertical") {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }
        break;
      case "Home":
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;
      case "End":
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;
      case "Enter":
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };
  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, $12uGp$useRef)(new Map());
  let addGlobalListener = (0, $12uGp$useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0, $12uGp$useCallback)((eventTarget, type, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, $12uGp$useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]);
  // eslint-disable-next-line arrow-body-style
  (0, $12uGp$useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  } = props;
  // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.
  id = (0, label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)(id);
  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(" ");
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  // If no labels are provided, use the default
  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function label_node_modules_react_aria_utils_dist_module_$df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, $12uGp$useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */
  (0, label_node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === "function") forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0, $12uGp$useRef)(true);
  (0, $12uGp$useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}
function label_node_modules_react_aria_utils_dist_module_$9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function label_node_modules_react_aria_utils_dist_module_$9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0, $12uGp$useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;
    if (!label_node_modules_react_aria_utils_dist_module_$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, label_node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !label_node_modules_react_aria_utils_dist_module_$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function label_node_modules_react_aria_utils_dist_module_$62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// @ts-ignore
let label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size, setSize] = (0, $12uGp$useState)(() => label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize());
  (0, $12uGp$useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };
    if (!label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport) window.addEventListener("resize", onResize);else label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      if (!label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport) window.removeEventListener("resize", onResize);else label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, []);
  return size;
}
function label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: (label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === null || label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: (label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === null || label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : label_node_modules_react_aria_utils_dist_module_$5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let label_node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionId = 0;
const label_node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes = new Map();
function label_node_modules_react_aria_utils_dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id, setId] = (0, $12uGp$useState)(undefined);
  (0, label_node_modules_react_aria_utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!description) return;
    let desc = label_node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id = `react-aria-description-${label_node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement("div");
      node.id = id;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      label_node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        label_node_modules_react_aria_utils_dist_module_$ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    "aria-describedby": description ? id : undefined
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() {
  return label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$186c6964ca17d99() {
  return label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$7bef049ce92e4224() {
  return label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testPlatform(/^iPad/i) ||
  // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1() {
  return label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$186c6964ca17d99() || label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$7bef049ce92e4224();
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$e1865c3bedcd822b() {
  return label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10() || label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$fedb369cb70207f1();
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$78551043582a6a98() {
  return label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$6446a186d09e379e();
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$6446a186d09e379e() {
  return label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8() {
  return label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$var$testUserAgent(/Android/i);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
  let handlerRef = (0, $12uGp$useRef)(handler);
  handlerRef.current = handler;
  let isDisabled = handler == null;
  (0, $12uGp$useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;
    let handler = e => handlerRef.current.call(this, e);
    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
    * Scrolls `scrollView` so that `element` is visible.
    * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),
    * but doesn't affect parents above `scrollView`.
    */
function label_node_modules_react_aria_utils_dist_module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = label_node_modules_react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = label_node_modules_react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */
function label_node_modules_react_aria_utils_dist_module_$2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function label_node_modules_react_aria_utils_dist_module_$6a7db85432448f7f$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
  // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
  // to detect TalkBack virtual clicks.
  if ((0, label_node_modules_react_aria_utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function label_node_modules_react_aria_utils_dist_module_$6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
  // Talkback double tap from Windows Firefox touch screen press
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

;// CONCATENATED MODULE: ./node_modules/@react-aria/label/dist/module.js

function module_$d191a55c9702f145$export$8467354a121f1b9f(props) {
  let {
    id: id,
    label: label,
    'aria-labelledby': ariaLabelledby,
    'aria-label': ariaLabel,
    labelElementType = 'label'
  } = props;
  id = label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37(id);
  let labelId = label_node_modules_react_aria_utils_dist_module_$bdb11010cef70236$export$f680877a34711e37();
  let labelProps = {};
  if (label) {
    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === 'label' ? id : undefined
    };
  } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');
  let fieldProps = label_node_modules_react_aria_utils_dist_module_$313b98861ee5dd6c$export$d6875122194c7b44({
    id: id,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby
  });
  return {
    labelProps: labelProps,
    fieldProps: fieldProps
  };
}
function module_$2baaea4c71418dea$export$294aa081a6c6f55d(props) {
  let {
    description: description,
    errorMessage: errorMessage,
    validationState: validationState
  } = props;
  let {
    labelProps: labelProps,
    fieldProps: fieldProps
  } = module_$d191a55c9702f145$export$8467354a121f1b9f(props);
  let descriptionId = $iD7q0$useSlotId([Boolean(description), Boolean(errorMessage), validationState]);
  let errorMessageId = $iD7q0$useSlotId([Boolean(description), Boolean(errorMessage), validationState]);
  fieldProps = $iD7q0$mergeProps(fieldProps, {
    'aria-describedby': [descriptionId,
    // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
    errorMessageId, props['aria-describedby']].filter(Boolean).join(' ') || undefined
  });
  return {
    labelProps: labelProps,
    fieldProps: fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}

;// CONCATENATED MODULE: ./src/input/input.styles.ts


const baseInputValues = {
  $$inputColor: "$colors$accents0",
  $$inputTextColor: "$colors$text",
  $$inputPlaceholderColor: "$colors$accents6",
  $$inputShadow: "$shadows$sm",
  $$inputBorderColor: "$colors$border",
  $$inputHoverBorderColor: "$colors$foreground",
  $$inputLabelColor: "$$inputHoverBorderColor"
};
const StyledInputMainContainer = styled("div", {
  ...baseInputValues,
  display: "inline-flex",
  flexDirection: "column",
  justifyContent: "center",
  position: "relative",
  boxSizing: "border-box",
  WebkitBoxAlign: "center",
  variants: {
    color: {
      default: {},
      primary: {
        $$inputHoverBorderColor: "$colors$primary",
        $$inputLabelColor: "$colors$primary"
      },
      secondary: {
        $$inputHoverBorderColor: "$colors$secondary",
        $$inputLabelColor: "$colors$secondary"
      },
      success: {
        $$inputHoverBorderColor: "$colors$success",
        $$inputLabelColor: "$colors$success"
      },
      warning: {
        $$inputHoverBorderColor: "$colors$warning",
        $$inputLabelColor: "$colors$warning"
      },
      error: {
        $$inputHoverBorderColor: "$colors$error",
        $$inputLabelColor: "$colors$error"
      }
    },
    status: {
      default: {},
      primary: {
        $$inputColor: "$colors$primaryLight",
        $$inputPlaceholderColor: "$colors$primaryLightContrast",
        $$inputTextColor: "$colors$primaryLightContrast",
        $$inputLabelColor: "$$inputTextColor",
        $$inputHoverBorderColor: "$colors$primary"
      },
      secondary: {
        $$inputColor: "$colors$secondaryLight",
        $$inputPlaceholderColor: "$colors$secondaryLightContrast",
        $$inputTextColor: "$colors$secondaryLightContrast",
        $$inputLabelColor: "$$inputTextColor",
        $$inputHoverBorderColor: "$colors$secondary"
      },
      success: {
        $$inputColor: "$colors$successLight",
        $$inputPlaceholderColor: "$colors$successLightContrast",
        $$inputTextColor: "$colors$successLightContrast",
        $$inputLabelColor: "$$inputTextColor",
        $$inputHoverBorderColor: "$colors$success"
      },
      warning: {
        $$inputColor: "$colors$warningLight",
        $$inputPlaceholderColor: "$colors$warningLightContrast",
        $$inputTextColor: "$colors$warningLightContrast",
        $$inputLabelColor: "$$inputTextColor",
        $$inputHoverBorderColor: "$colors$warning"
      },
      error: {
        $$inputColor: "$colors$errorLight",
        $$inputPlaceholderColor: "$colors$errorLightContrast",
        $$inputTextColor: "$colors$errorLightContrast",
        $$inputLabelColor: "$$inputTextColor",
        $$inputHoverBorderColor: "$colors$error"
      }
    },
    helperColor: {
      default: {
        $$inputHelperColor: "$colors$text"
      },
      primary: {
        $$inputHelperColor: "$colors$primary"
      },
      secondary: {
        $$inputHelperColor: "$colors$secondary"
      },
      success: {
        $$inputHelperColor: "$colors$success"
      },
      warning: {
        $$inputHelperColor: "$colors$warning"
      },
      error: {
        $$inputHelperColor: "$colors$error"
      }
    },
    borderWeight: {
      light: {
        $$inputBorderWeight: "$borderWeights$light"
      },
      normal: {
        $$inputBorderWeight: "$borderWeights$normal"
      },
      bold: {
        $$inputBorderWeight: "$borderWeights$bold"
      },
      extrabold: {
        $$inputBorderWeight: "$borderWeights$extrabold"
      },
      black: {
        $$inputBorderWeight: "$borderWeights$black"
      }
    },
    size: {
      xs: {
        $$inputBorderRadius: "$space$3",
        $$inputFontSize: "$fontSizes$xs",
        $$inputHeightRatio: "1.2",
        br: "$$inputBorderRadius"
      },
      sm: {
        $$inputBorderRadius: "$space$4",
        $$inputFontSize: "$fontSizes$xs",
        $$inputHeightRatio: "1.6",
        br: "$$inputBorderRadius"
      },
      md: {
        $$inputBorderRadius: "$space$6",
        $$inputFontSize: "$fontSizes$sm",
        $$inputHeightRatio: "2",
        br: "$$inputBorderRadius"
      },
      lg: {
        $$inputBorderRadius: "$space$7",
        $$inputFontSize: "$fontSizes$md",
        $$inputHeightRatio: "2.2",
        br: "$$inputBorderRadius"
      },
      xl: {
        $$inputBorderRadius: "$space$8",
        $$inputFontSize: "$fontSizes$lg",
        $$inputHeightRatio: "2.6",
        br: "$$inputBorderRadius"
      }
    },
    rounded: {
      true: {
        $$inputBorderRadius: "$radii$pill"
      }
    },
    disabled: {
      true: {
        $$inputColor: "$colors$accents1",
        $$inputTextColor: "$colors$accents7",
        $$inputPlaceholderColor: "$colors$accents7",
        $$inputShadow: "$shadows$sm"
      }
    }
  }
});
const inputAutofillStyles = {
  WebkitTextFillColor: "$$inputTextColor",
  WebkitBackgroundClip: "text !important",
  caretColor: "$$inputTextColor"
};
const StyledInputContainer = styled("div", {
  width: "100%",
  br: "$$inputBorderRadius",
  input: {
    "&:-webkit-autofill": {
      ...inputAutofillStyles,
      "&:hover": inputAutofillStyles,
      "&:focus": inputAutofillStyles,
      "&:active": inputAutofillStyles
    }
  },
  "@motion": {
    transition: "none"
  },
  variants: {
    isTextarea: {
      false: {
        display: "inline-flex",
        alignItems: "center",
        height: "calc($$inputHeightRatio * $9)"
      }
    },
    focused: {
      true: {}
    },
    isReadOnly: {
      false: {}
    },
    underlined: {
      true: {}
    },
    animated: {
      true: {
        transition: "$default"
      },
      false: {
        transition: "none"
      }
    }
  },
  compoundVariants: [{
    // underlined && !isReadOnly
    isReadOnly: false,
    underlined: true,
    css: {
      transform: "none"
    }
  }, {
    // focused && animated && !isReadOnly && !underlined
    focused: true,
    animated: true,
    isReadOnly: false,
    underlined: false,
    css: {
      transform: "translateY(-$space$1)"
    }
  }]
});
const StyledInput = styled("input", {
  padding: 0,
  fontSize: "$$inputFontSize",
  bg: "transparent",
  border: "none",
  color: "$$inputTextColor",
  br: 0,
  outline: "none",
  size: "100%",
  minWidth: 0,
  WebkitAppearance: "none",
  "::placeholder": {
    color: "$$inputPlaceholderColor",
    transition: "opacity 0.25s ease 0s",
    MozTransition: "opacity 0.25s ease 0s",
    MsTransition: "opacity 0.25s ease 0s",
    WebkitTransition: "opacity 0.25s ease 0s"
  },
  "@motion": {
    transition: "none",
    "&::placeholder": {
      transition: "none"
    }
  },
  "&:disabled": {
    pe: "none",
    color: "$accents4",
    cursor: "not-allowed"
  },
  variants: {
    isTextarea: {
      true: {
        boxShadow: "none",
        display: "block",
        size: "100%",
        resize: "none",
        border: "none",
        outline: "none"
      }
    },
    focused: {
      true: {
        "&::placeholder": {
          opacity: 0,
          transition: "opacity 0.25s ease 0s"
        }
      }
    },
    bordered: {
      true: {
        padding: "0 $3"
      }
    },
    rounded: {
      true: {
        padding: "0 $3"
      }
    },
    animated: {
      false: {
        transition: "none",
        "::placeholder": {
          transition: "none"
        }
      }
    },
    hasLeftContent: {
      true: {
        ml: 0
      }
    },
    hasRightContent: {
      true: {
        mr: 0
      }
    }
  }
});
const StyledInputWrapper = styled("div", {
  flex: 1,
  position: "relative",
  br: "$$inputBorderRadius",
  bg: "$$inputColor",
  display: "inline-flex",
  verticalAlign: "middle",
  alignItems: "center",
  userSelect: "none",
  "@motion": {
    transition: "none",
    "&:before": {
      transition: "none"
    },
    "&:after": {
      transition: "none"
    }
  },
  variants: {
    focused: {
      true: {}
    },
    isReadOnly: {
      true: {}
    },
    bordered: {
      true: {
        bg: "transparent",
        border: "none",
        boxShadow: "0 0 0 $$inputBorderWeight $$inputBorderColor",
        transition: "box-shadow 0.25s ease"
      }
    },
    shadow: {
      true: {
        transition: "$default"
      }
    },
    disabled: {
      true: {
        cursor: "not-allowed"
      }
    },
    underlined: {
      true: {
        bg: "transparent",
        [`& ${StyledInput}`]: {
          margin: "$2 $3"
        },
        "&:before": {
          content: "",
          position: "absolute",
          zIndex: "$2",
          width: 0,
          bottom: 0,
          height: "$1",
          left: "50%",
          transform: "translate(-50%)",
          background: "$$inputHoverBorderColor",
          transition: "width 0.25s ease"
        },
        "&:after": {
          content: "",
          position: "absolute",
          zIndex: "$1",
          bottom: 0,
          width: "100%",
          height: "$$inputBorderWeight",
          bg: "$$inputBorderColor"
        }
      },
      false: {
        [`& ${StyledInput}`]: {
          margin: "$2 $5"
        }
      }
    },
    animated: {
      false: {
        transition: "none",
        "&:before": {
          transition: "none"
        },
        "&:after": {
          transition: "none"
        }
      }
    },
    isTextarea: {
      true: {
        boxSizing: "border-box",
        width: "100%",
        maxWidth: "100%",
        height: "auto"
      },
      false: {
        height: "100%"
      }
    }
  },
  compoundVariants: [{
    // underlined && bordered
    bordered: true,
    underlined: true,
    css: {
      boxShadow: "0 0 0 0px $$inputBorderColor"
    }
  }, {
    // focused && underlined
    focused: true,
    underlined: true,
    css: {
      "&:before": {
        width: "100%"
      }
    }
  },
  // focused && shadow && !readOnly
  {
    focused: true,
    shadow: true,
    isReadOnly: false,
    underlined: false,
    css: {
      boxShadow: "$$inputShadow"
    }
  },
  // focused && bordered && !readOnly && !underlined
  {
    focused: true,
    bordered: true,
    isReadOnly: false,
    underlined: false,
    css: {
      boxShadow: "0 0 0 $$inputBorderWeight $$inputHoverBorderColor"
    }
  },
  //  bordered && !readOnly && !underlined
  {
    bordered: true,
    isReadOnly: false,
    underlined: false,
    css: {
      "&:hover": {
        boxShadow: "0 0 0 $$inputBorderWeight $$inputHoverBorderColor"
      }
    }
  },
  // isTextarea  && !underlined
  {
    isTextarea: true,
    underlined: false,
    css: {
      [`& ${StyledInput}`]: {
        margin: "$xs $sm"
      }
    }
  }]
});
const StyledHelperTextContainer = styled("div", {
  position: "absolute",
  opacity: 0,
  bottom: "calc($$inputHeightRatio * -$space$5)",
  "@motion": {
    transition: "none"
  },
  variants: {
    animated: {
      true: {
        transition: "opacity 0.25s ease"
      },
      false: {
        transition: "none"
      }
    },
    withValue: {
      true: {
        opacity: 1
      }
    }
  }
});
const StyledHelperText = styled("p", {
  margin: "$1 0 0 $5",
  fontSize: "$space$5",
  color: "$$inputHelperColor"
});
const StyledInputPlaceholder = styled("span", {}, sharedVisuallyHidden);

/// Input accessories
const StyledInputBlockLabel = styled("label", {
  d: "block",
  fontWeight: "$normal",
  color: "$$inputLabelColor",
  p: "0 0 0 $2",
  mb: "$3",
  fs: "$$inputFontSize",
  lh: "$md",
  WebkitTouchCallout: "none" /* iOS Safari */,
  WebkitUserSelect: "none" /* Safari */,
  KhtmlUserSelect: "none" /* Konqueror HTML */,
  MozUserSelect: "none" /* Firefox */,
  MsUserSelect: "none" /* Internet Explorer/Edge */,
  us: "none" /* Non-prefixed version, currently supported by Chrome and Opera */,
  "> *:first-child": {
    marginTop: 0
  },
  "> *:last-child": {
    mb: 0
  },
  "@motion": {
    transition: "none"
  },
  variants: {
    rounded: {
      true: {
        padding: "0 0 0 $3"
      }
    },
    asPlaceholder: {
      true: {
        position: "absolute",
        padding: 0,
        zIndex: "$1",
        left: "$space$6",
        top: "20%",
        mb: 0,
        cursor: "text",
        color: "$$inputPlaceholderColor",
        transition: "left 0.25s ease 0s, color 0.25s ease 0s, top 0.25s ease 0s"
      }
    },
    animated: {
      false: {
        transition: "none"
      }
    },
    focused: {
      true: {
        color: "$$inputHoverBorderColor"
      }
    },
    underlined: {
      true: {}
    },
    withValue: {
      true: {}
    },
    isTextarea: {
      true: {}
    },
    bordered: {
      true: {}
    },
    hasContentLeft: {
      true: {}
    }
  },
  compoundVariants: [
  // underlined && asPlaceholder
  {
    underlined: true,
    asPlaceholder: true,
    css: {
      left: "$space$2"
    }
  },
  // asPlaceholder && focused && !underlined
  {
    asPlaceholder: true,
    focused: true,
    underlined: false,
    isTextarea: false,
    css: {
      top: "-72%",
      left: "$2",
      cursor: "inherit"
    }
  },
  // asPlaceholder && focused && underlined
  {
    asPlaceholder: true,
    focused: true,
    underlined: true,
    isTextarea: false,
    css: {
      top: "-72%",
      left: "0px",
      cursor: "inherit"
    }
  },
  // asPlaceholder && focused && withValue && !underlined
  {
    asPlaceholder: true,
    withValue: true,
    underlined: false,
    isTextarea: false,
    css: {
      color: "$$inputTextColor",
      top: "-72%",
      left: "$2",
      cursor: "inherit"
    }
  },
  // asPlaceholder && focused && withValue && underlined
  {
    asPlaceholder: true,
    withValue: true,
    underlined: true,
    isTextarea: false,
    css: {
      color: "$$inputTextColor",
      top: "-72%",
      left: "0px",
      cursor: "inherit"
    }
  },
  // asPlaceholder && isTextarea
  {
    asPlaceholder: true,
    isTextarea: true,
    css: {
      top: "$5"
    }
  },
  // asPlaceholder && hasContentLeft
  {
    asPlaceholder: true,
    hasContentLeft: true,
    css: {
      left: "calc($space$6 + $$inputHeightRatio * $space$7)"
    }
  },
  // asPlaceholder && isTextarea && focused
  {
    asPlaceholder: true,
    isTextarea: true,
    focused: true,
    css: {
      top: "calc(-$space$10 - $space$3)",
      left: "$2"
    }
  },
  // asPlaceholder && isTextarea && withValue
  {
    asPlaceholder: true,
    isTextarea: true,
    withValue: true,
    css: {
      top: "-$11"
    }
  },
  // focused && asPlaceholder && isTextarea && bordered
  {
    asPlaceholder: true,
    focused: true,
    isTextarea: true,
    bordered: true,
    css: {
      top: "-$12"
    }
  }],
  defaultVariants: {
    asPlaceholder: false
  }
});
const StyledInputLabel = styled("span", {
  position: "relative",
  display: "inline-flex",
  width: "initial",
  height: "100%",
  fontWeight: "$medium",
  ai: "center",
  pe: "none",
  margin: 0,
  padding: "0 $sm",
  color: "$$inputPlaceholderColor",
  fontSize: "$$inputFontSize",
  lineHeight: "$xs",
  variants: {
    isRight: {
      true: {
        btrr: "$$inputBorderRadius",
        bbrr: "$$inputBorderRadius"
      },
      false: {
        btlr: "$$inputBorderRadius",
        bblr: "$$inputBorderRadius"
      }
    },
    isDark: {
      true: {}
    },
    isDefaultStatus: {
      true: {}
    },
    underlined: {
      true: {
        bg: "transparent"
      }
    },
    bordered: {
      true: {
        "&:after": {
          display: "none"
        },
        "&:before": {
          display: "none"
        }
      }
    }
  },
  compoundVariants: [
  // isRight && underlined
  {
    isRight: true,
    underlined: true,
    css: {
      borderLeftColor: "$$inputPlaceholderColor",
      borderLeftStyle: "solid",
      marginLeft: "$2",
      borderLeftWidth: "calc($$inputBorderWeight / 2)",
      height: "40%"
    }
  },
  // !isRight && underlined
  {
    isRight: false,
    underlined: true,
    css: {
      borderRightColor: "$$inputPlaceholderColor",
      borderRightStyle: "solid",
      marginRight: "$2",
      borderRightWidth: "calc($$inputBorderWeight / 1)",
      height: "40%"
    }
  },
  // isDefaultStatus && !bordered && !underlined
  {
    isDefaultStatus: true,
    bordered: false,
    underlined: false,
    css: {
      bg: "$accents2"
    }
  },
  // isDefaultStatus && !bordered && !underlined && isDark
  {
    isDefaultStatus: true,
    bordered: false,
    underlined: false,
    isDark: true,
    css: {
      color: "$accents6"
    }
  },
  // !isDefaultStatus && !bordered && !underlined
  {
    isDefaultStatus: false,
    bordered: true,
    underlined: false,
    css: {
      bg: "$$inputColor"
    }
  },
  // bordered && isRight
  {
    bordered: true,
    isRight: true,
    css: {
      peddingRight: "$sm",
      paddingLeft: 0
    }
  },
  // bordered && !isRight
  {
    bordered: true,
    isRight: false,
    css: {
      peddingLeft: "$sm",
      paddingRight: 0
    }
  }],
  defaultVariants: {
    isRight: false
  }
});
const StyledInputContent = styled("span", {
  variants: {
    applyStyles: {
      true: {
        display: "flex",
        boxSizing: "content-box",
        width: "calc($$inputHeightRatio * $space$4)",
        height: "100%",
        alignItems: "center",
        verticalAlign: "center",
        margin: 0,
        padding: "0 calc($$inputHeightRatio * $3)",
        color: "$$inputTextColor",
        lineHeight: "$xs",
        position: "relative",
        cursor: "default",
        pe: "none"
      }
    },
    clickable: {
      true: {
        cursor: "pointer",
        pe: "auto"
      }
    }
  }
});
const StyledInputClearButton = styled("button", {
  position: "absolute",
  right: 0,
  margin: 0,
  d: "inline-flex",
  ai: "center",
  border: "none",
  bg: "transparent",
  width: "auto",
  height: "auto",
  cursor: "pointer",
  boxSizing: "border-box",
  transition: "color 250ms ease 0s, transform 250ms ease 0s, opacity 250ms ease 0s",
  color: "$$inputPlaceholderColor",
  visibility: "hidden",
  transform: "translateX(20%)",
  opacity: 0,
  "&:hover": {
    opacity: 0.85
  },
  svg: {
    color: "currentColor",
    size: "calc($space$5 * $$inputHeightRatio)"
  },
  "@motion": {
    transition: "none"
  },
  variants: {
    visible: {
      true: {
        visibility: "visible",
        transform: "translateX(0)",
        opacity: 1
      }
    },
    underlined: {
      true: {
        padding: "0 $1"
      }
    },
    animated: {
      false: {
        transition: "none"
      }
    },
    hasContentRight: {
      true: {
        padding: 0,
        position: "relative",
        transform: "translateX(30%)"
      }
    },
    disabled: {
      true: {
        cursor: "not-allowed",
        "&:hover": {
          color: "$accents3"
        }
      }
    }
  }
});
const StyledInputClearButtonIconWrapper = styled('span', {
  display: 'flex',
  br: '100%'
}, cssFocusVisible);

// types
;// CONCATENATED MODULE: ./src/input/input-props.ts
const input_props_defaultProps = {
  disabled: false,
  bordered: false,
  readOnly: false,
  clearable: false,
  rounded: false,
  animated: true,
  underlined: false,
  shadow: true,
  fullWidth: false,
  contentClickable: false,
  contentRightStyling: true,
  contentLeftStyling: true,
  required: false,
  width: "initial",
  size: "md",
  color: "default",
  helperColor: "default",
  status: "default",
  borderWeight: "normal",
  autoComplete: "off",
  className: "",
  placeholder: "",
  initialValue: ""
};
;// CONCATENATED MODULE: ./src/input/input.tsx
var input_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/input.tsx";











const simulateChangeEvent = (el, event) => {
  return {
    ...event,
    target: el,
    currentTarget: el
  };
};
const input_preClass = "nextui-input";
const Input = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  as: Component = "input",
  label,
  labelPlaceholder,
  labelLeft,
  labelRight,
  size,
  helperText,
  color,
  helperColor,
  status,
  contentLeft,
  contentRight,
  contentClickable,
  contentLeftStyling,
  contentRightStyling,
  onContentClick,
  initialValue,
  onChange,
  readOnly,
  value,
  onClearClick,
  clearable,
  shadow,
  animated,
  required,
  width: widthProp,
  className,
  onBlur,
  onFocus,
  autoComplete,
  placeholder,
  fullWidth,
  borderWeight,
  disabled,
  bordered,
  underlined,
  rounded,
  css,
  ...props
}, ref) => {
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => inputRef.current);
  const [selfValue, setSelfValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue);
  const [hover, setHover] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    isDark
  } = src_use_theme();
  const isControlledComponent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => value !== undefined, [value]);
  const inputLabel = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => label || labelPlaceholder, [label, labelPlaceholder]);
  const inputPlaceholder = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => labelPlaceholder ? "" : placeholder, [placeholder, labelPlaceholder]);
  const width = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (fullWidth) return "100%";
    if (widthProp) return widthProp;
    return "initial";
  }, [fullWidth, widthProp]);
  if (underlined && __DEV__) {
    bordered && warn("Using underlined and bordered at the same time will have no effect.");
    rounded && warn("Using underlined and rounded at the same time will have no effect.");
  }
  const changeHandler = event => {
    if (disabled || readOnly) return;
    isControlledComponent || setSelfValue(event.target.value);
    onChange && onChange(event);
  };
  const clearHandler = event => {
    event.preventDefault();
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
    isControlledComponent || setSelfValue("");
    onClearClick && onClearClick(event);
    /* istanbul ignore next */
    if (!inputRef.current) return;
    const changeEvent = simulateChangeEvent(inputRef.current, event);
    changeEvent.target.value = "";
    onChange && onChange(changeEvent);
    inputRef.current.focus();
  };
  const focusHandler = e => {
    setHover(true);
    onFocus && onFocus(e);
  };
  const blurHandler = e => {
    setHover(false);
    onBlur && onBlur(e);
  };
  const contentClickHandler = (key, e) => {
    if (disabled) return;
    onContentClick && onContentClick(key, e);
  };
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isControlledComponent) {
      setSelfValue(value);
    }
  }, [isControlledComponent, value]);
  const isTextarea = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => Component === "textarea", [Component]);
  const controlledValue = isControlledComponent ? {
    value: selfValue
  } : {
    defaultValue: initialValue
  };
  const inputProps = {
    ...props,
    ...controlledValue
  };
  const {
    isFocusVisible: isClearButtonFocusVisible,
    focusProps: clearButtonFocusVisibleFocusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const {
    labelProps,
    fieldProps
  } = module_$d191a55c9702f145$export$8467354a121f1b9f({
    ...inputProps,
    label: inputLabel
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return hover ? "hover" : disabled ? "disabled" : readOnly ? "read-only" : selfValue ? "with-value" : "normal";
  }, [hover, disabled, readOnly, selfValue]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputMainContainer, {
    borderWeight: borderWeight,
    className: clsx(`${input_preClass}-main-container`, `${input_preClass}-main-container--${getState}`),
    color: color,
    css: {
      width,
      ...css
    },
    "data-state": getState,
    disabled: disabled,
    helperColor: helperColor,
    rounded: rounded,
    size: size,
    status: status,
    children: [inputLabel && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputBlockLabel, {
      animated: animated,
      asPlaceholder: !!labelPlaceholder,
      bordered: bordered,
      className: `${input_preClass}-block-label`,
      focused: hover,
      hasContentLeft: !!contentLeft,
      htmlFor: "htmlFor" in labelProps ? labelProps.htmlFor : "",
      id: labelProps.id,
      isTextarea: isTextarea,
      rounded: rounded,
      underlined: underlined,
      withValue: !!selfValue,
      children: inputLabel
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 220,
      columnNumber: 11
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContainer, {
      animated: animated,
      className: clsx(`${input_preClass}-container`, `${input_preClass}-container--${getState}`, {
        [`${input_preClass}-container--input`]: !isTextarea,
        [`${input_preClass}-container--textarea`]: isTextarea,
        [`${input_preClass}-container--read-only`]: readOnly
      }, className),
      focused: hover,
      isReadOnly: readOnly,
      isTextarea: isTextarea,
      underlined: underlined,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputWrapper, {
        animated: animated,
        as: inputLabel ? "div" : "label",
        bordered: bordered,
        className: clsx(`${input_preClass}-wrapper`, `${input_preClass}-wrapper--${getState}`, {
          [`${input_preClass}-wrapper--bordered`]: bordered,
          [`${input_preClass}-wrapper--underlined`]: underlined,
          [`${input_preClass}-wrapper--shadow`]: shadow
        }),
        disabled: disabled,
        focused: hover,
        isReadOnly: readOnly,
        isTextarea: isTextarea,
        shadow: shadow,
        underlined: underlined,
        children: [!inputLabel && placeholder && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputPlaceholder, {
          className: `${input_preClass}-placeholder`,
          children: placeholder
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 271,
          columnNumber: 15
        }, undefined), labelLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputLabel, {
          bordered: bordered,
          className: `${input_preClass}-label--left`,
          isDark: isDark,
          isDefaultStatus: status === "default",
          underlined: underlined,
          children: labelLeft
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 276,
          columnNumber: 15
        }, undefined), contentLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContent, {
          applyStyles: contentLeftStyling,
          className: clsx(`${input_preClass}-content`, `${input_preClass}-content--left`),
          clickable: contentClickable,
          onClick: e => contentClickHandler("left", e),
          children: contentLeft
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 287,
          columnNumber: 15
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInput, {
          ref: inputRef,
          "aria-multiline": isTextarea,
          "aria-placeholder": inputPlaceholder,
          "aria-readonly": readOnly,
          "aria-required": required,
          as: Component,
          autoComplete: autoComplete,
          bordered: bordered,
          className: clsx({
            [`${input_preClass}`]: !isTextarea,
            [`${input_preClass}-textarea`]: isTextarea,
            [`${input_preClass}-disabled`]: disabled,
            [`${input_preClass}-rounded`]: rounded,
            [`${input_preClass}-${input_preClass}-right-content`]: contentRight,
            [`${input_preClass}-left-content`]: contentLeft
          }),
          "data-state": getState,
          disabled: disabled,
          focused: hover,
          hasLeftContent: !!contentLeft,
          hasRightContent: !!contentRight,
          isTextarea: isTextarea,
          placeholder: inputPlaceholder,
          readOnly: readOnly,
          required: required,
          type: "text",
          onBlur: blurHandler,
          onChange: changeHandler,
          onFocus: focusHandler,
          ...inputProps,
          ...fieldProps
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 296,
          columnNumber: 13
        }, undefined), clearable && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputClearButton, {
          animated: animated,
          "aria-label": "clear",
          className: `${input_preClass}-clear-button`,
          disabled: disabled || readOnly,
          hasContentRight: !!contentRight,
          lang: "en",
          type: "button",
          underlined: underlined,
          visible: Boolean(selfValue),
          onClick: clearHandler,
          ...clearButtonFocusVisibleFocusProps,
          children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputClearButtonIconWrapper, {
            isFocusVisible: isClearButtonFocusVisible,
            children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(clear_icon, {
              fill: "currentColor"
            }, void 0, false, {
              fileName: input_jsxFileName,
              lineNumber: 344,
              columnNumber: 19
            }, undefined)
          }, void 0, false, {
            fileName: input_jsxFileName,
            lineNumber: 343,
            columnNumber: 17
          }, undefined)
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 330,
          columnNumber: 15
        }, undefined), contentRight && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContent, {
          applyStyles: contentRightStyling,
          className: clsx(`${input_preClass}-content`, `${input_preClass}-content--right`),
          clickable: contentClickable,
          onClick: e => contentClickHandler("right", e),
          children: contentRight
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 349,
          columnNumber: 15
        }, undefined), labelRight && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputLabel, {
          bordered: bordered,
          className: `${input_preClass}-label--right`,
          isDark: isDark,
          isDefaultStatus: status === "default",
          isRight: true,
          underlined: underlined,
          children: labelRight
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 359,
          columnNumber: 15
        }, undefined)]
      }, void 0, true, {
        fileName: input_jsxFileName,
        lineNumber: 254,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 237,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledHelperTextContainer, {
      className: `${input_preClass}-helper-text-container`,
      withValue: !!helperText,
      children: helperText && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledHelperText, {
        className: `${input_preClass}-helper-text`,
        children: helperText
      }, void 0, false, {
        fileName: input_jsxFileName,
        lineNumber: 377,
        columnNumber: 13
      }, undefined)
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 372,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: input_jsxFileName,
    lineNumber: 207,
    columnNumber: 7
  }, undefined);
});
Input.displayName = "NextUI.Input";
Input.defaultProps = input_props_defaultProps;
Input.toString = () => ".nextui-input";
/* harmony default export */ const input = (Input);
;// CONCATENATED MODULE: ./src/input/password-icon.tsx
var password_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/password-icon.tsx";



const PasswordIcon = ({
  visible
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
    className: "nextui-input-password-icon",
    fill: "none",
    height: "16",
    shapeRendering: "geometricPrecision",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "1.5",
    style: {
      color: "currentColor"
    },
    viewBox: "0 0 24 24",
    width: "16",
    children: !visible ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 24,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "12",
        cy: "12",
        r: "3"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 25,
        columnNumber: 11
      }, undefined)]
    }, void 0, true) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M17.94 17.94A10.07 10.07 0 0112 20c-7 0-11-8-11-8a18.45 18.45 0 015.06-5.94M9.9 4.24A9.12 9.12 0 0112 4c7 0 11 8 11 8a18.5 18.5 0 01-2.16 3.19m-6.72-1.07a3 3 0 11-4.24-4.24"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 29,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M1 1l22 22"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 30,
        columnNumber: 11
      }, undefined)]
    }, void 0, true)
  }, void 0, false, {
    fileName: password_icon_jsxFileName,
    lineNumber: 9,
    columnNumber: 5
  }, undefined);
};
const MemoPasswordIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(PasswordIcon);
/* harmony default export */ const password_icon = (MemoPasswordIcon);
;// CONCATENATED MODULE: ./src/input/input-password.tsx
var input_password_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/input-password.tsx";








const passwordDefaultProps = {
  ...input_props_defaultProps,
  hideToggle: false,
  visibleIcon: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(password_icon, {
    visible: true
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 22,
    columnNumber: 16
  }, undefined),
  hiddenIcon: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(password_icon, {
    visible: false
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 23,
    columnNumber: 15
  }, undefined)
};
const InputPassword = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  hideToggle,
  visibleIcon,
  hiddenIcon,
  children,
  ...props
}, ref) => {
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [visible, setVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => inputRef.current);
  const iconClickHandler = () => {
    setVisible(v => !v);
  };
  const inputProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    ...props,
    ref: inputRef,
    className: clsx("nextui-input-password", props.className),
    contentClickable: true,
    onContentClick: iconClickHandler,
    type: visible ? "text" : "password"
  }), [props, iconClickHandler, visible, inputRef]);
  const icon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (hideToggle) return null;
    return visible ? visibleIcon : hiddenIcon;
  }, [hideToggle, visible, visibleIcon, hiddenIcon]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(input, {
    contentRight: icon,
    ...inputProps,
    children: children
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 63,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  InputPassword.displayName = "NextUI.InputPassword";
}
InputPassword.toString = () => ".nextui-input-password";
/* harmony default export */ const input_password = (with_defaults(InputPassword, passwordDefaultProps));
;// CONCATENATED MODULE: ./src/input/index.ts



input.Password = input_password;
/* harmony default export */ const src_input = (input);
;// CONCATENATED MODULE: ./src/textarea/utils.ts

const SIZING_STYLE = ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "boxSizing", "fontFamily", "fontSize", "fontStyle", "fontWeight", "letterSpacing", "lineHeight", "paddingBottom", "paddingLeft", "paddingRight", "paddingTop", "tabSize", "textIndent", "textRendering", "textTransform", "width", "wordBreak"];
const HIDDEN_TEXTAREA_STYLE = {
  "min-height": "0",
  "max-height": "none",
  height: "0",
  visibility: "hidden",
  overflow: "hidden",
  position: "absolute",
  "z-index": "-1000",
  top: "0",
  right: "0"
};
const isIE = typeof document !== "undefined" ? !!document.documentElement.currentStyle : false;
const forceHiddenStyles = node => {
  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(key => {
    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], "important");
  });
};
const getSizingData = node => {
  const style = window.getComputedStyle(node);
  if (style === null) {
    return null;
  }
  const sizingStyle = pick(SIZING_STYLE, style);
  const {
    boxSizing
  } = sizingStyle;

  // probably node is detached from DOM, can't read computed dimensions
  if (boxSizing === "") {
    return null;
  }

  // IE (Edge has already correct behaviour) returns content width as computed width
  // so we need to add manually padding and border widths
  if (isIE && boxSizing === "border-box") {
    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + "px";
  }
  const paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
  const borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
  return {
    sizingStyle,
    paddingSize,
    borderSize
  };
};

// TODO: use labelled tuples once they are avaiable:
//   export type CalculatedNodeHeights = [height: number, rowHeight: number];
// https://github.com/microsoft/TypeScript/issues/28259

let hiddenTextarea = null;
const getHeight = (node, sizingData) => {
  const height = node.scrollHeight;
  if (sizingData.sizingStyle.boxSizing === "border-box") {
    // border-box: add border, since height = content + padding + border
    return height + sizingData.borderSize;
  }

  // remove padding, since height = content
  return height - sizingData.paddingSize;
};
const calculateNodeHeight = (sizingData, value, minRows = 1, maxRows = Infinity) => {
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    hiddenTextarea.setAttribute("tabindex", "-1");
    hiddenTextarea.setAttribute("aria-hidden", "true");
    forceHiddenStyles(hiddenTextarea);
  }
  if (hiddenTextarea.parentNode === null) {
    document.body.appendChild(hiddenTextarea);
  }
  const {
    paddingSize,
    borderSize,
    sizingStyle
  } = sizingData;
  const {
    boxSizing
  } = sizingStyle;
  Object.keys(sizingStyle).forEach(_key => {
    const key = _key;
    hiddenTextarea.style[key] = sizingStyle[key];
  });
  forceHiddenStyles(hiddenTextarea);
  hiddenTextarea.value = value;
  let height = getHeight(hiddenTextarea, sizingData);

  // measure height of a textarea with a single row
  hiddenTextarea.value = "x";
  const rowHeight = hiddenTextarea.scrollHeight - paddingSize;
  let minHeight = rowHeight * minRows;
  if (boxSizing === "border-box") {
    minHeight = minHeight + paddingSize + borderSize;
  }
  height = Math.max(minHeight, height);
  let maxHeight = rowHeight * maxRows;
  if (boxSizing === "border-box") {
    maxHeight = maxHeight + paddingSize + borderSize;
  }
  height = Math.min(maxHeight, height);
  return [height, rowHeight];
};
;// CONCATENATED MODULE: ./src/textarea/textarea.tsx
var textarea_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/textarea/textarea.tsx";









const textarea_defaultProps = {
  minRows: 3,
  maxRows: 6,
  cacheMeasurements: true,
  initialValue: ""
};
const Textarea = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((textareaProps, ref) => {
  const textareaRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const heightRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef(0);
  const measurementsCacheRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef();
  const {
    cacheMeasurements,
    rows,
    maxRows,
    minRows,
    onChange,
    onHeightChange,
    css,
    ...props
  } = textareaProps;
  Object.keys(props).forEach(propNameKey => {
    if (excludedInputPropsForTextarea.indexOf(propNameKey) > -1) {
      // @ts-ignored
      delete props[propNameKey];
    }
  });
  const isControlled = props.value !== undefined;
  if (__DEV__ && props.style) {
    if ("maxHeight" in props.style) {
      warn("Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.");
    }
    if ("minHeight" in props.style) {
      warn("Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.");
    }
  }
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => textareaRef.current);
  const resizeTextarea = () => {
    const node = textareaRef.current;
    const nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);
    if (!nodeSizingData) {
      return;
    }
    measurementsCacheRef.current = nodeSizingData;
    const [height, rowHeight] = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || "x", rows || minRows, rows || maxRows);
    if (heightRef.current !== height) {
      heightRef.current = height;
      node.style.setProperty("height", `${height}px`, "important");
      onHeightChange && onHeightChange(height, {
        rowHeight
      });
    }
  };
  const handleChange = event => {
    if (!isControlled) {
      resizeTextarea();
    }
    onChange && onChange(event);
  };
  if (typeof document !== "undefined") {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(resizeTextarea);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    src_use_resize(resizeTextarea);
  }
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_input, {
    ref: textareaRef,
    as: "textarea",
    css: css,
    onChange: handleChange,
    ...props
  }, void 0, false, {
    fileName: textarea_jsxFileName,
    lineNumber: 113,
    columnNumber: 12
  }, undefined);
});
if (__DEV__) {
  Textarea.displayName = "NextUI.Textarea";
}
Textarea.toString = () => ".nextui-textarea";
/* harmony default export */ const textarea_textarea = (with_defaults(Textarea, textarea_defaultProps));
;// CONCATENATED MODULE: ./src/textarea/index.ts

/* harmony default export */ const src_textarea = (textarea_textarea);
;// CONCATENATED MODULE: ../../node_modules/@react-stately/virtualizer/dist/module.js




/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
class $c74cda7d31af1253$export$c84671f46d6a1ca {
  /**
  * Returns whether the layout should invalidate in response to
  * visible rectangle changes. By default, it only invalidates
  * when the collection view's size changes. Return true always
  * to make the layout invalidate while scrolling (e.g. sticky headers).
  */
  shouldInvalidate(newRect, oldRect) {
    // By default, invalidate when the size changes
    return newRect.width !== oldRect.width || newRect.height !== oldRect.height;
  }
  /**
  * This method allows the layout to perform any pre-computation
  * it needs to in order to prepare {@link LayoutInfo}s for retrieval.
  * Called by the collection view before {@link getVisibleLayoutInfos}
  * or {@link getLayoutInfo} are called.
  */
  validate(invalidationContext) {}
  /**
  * Returns a {@link DragTarget} describing a view at the given point to be dragged.
  * Return `null` to cancel the drag. The default implementation returns the view at the given point.
  * @param point The point at which the drag occurred.
  */ // getDragTarget(point: Point): DragTarget | null {
  //   let target = this.virtualizer.keyAtPoint(point);
  //   if (!target) {
  //     return null;
  //   }
  //   return {
  //     type: 'item',
  //     key: target
  //   };
  // }
  /**
  * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`
  * to reject the drop. The dropped items will be inserted before the resulting target.
  * @param point The point at which the drop occurred.
  */ // getDropTarget(point: Point): DropTarget | null {
  //   return null;
  // }
  /**
  * Returns the starting attributes for an animated insertion.
  * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.
  * The default implementation just returns its input.
  *
  * @param layoutInfo The proposed LayoutInfo for this view.
  */
  getInitialLayoutInfo(layoutInfo) {
    return layoutInfo;
  }
  /**
  * Returns the ending attributes for an animated removal.
  * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}
  * to the one returned by this method. The default implementation returns its input.
  *
  * @param layoutInfo The original LayoutInfo for this view.
  */
  getFinalLayoutInfo(layoutInfo) {
    return layoutInfo;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $d7fd61009c21d0bb$export$7e0eeb9da702a085 {
  /**
  * Returns a copy of the LayoutInfo.
  */
  copy() {
    let res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());
    res.estimatedSize = this.estimatedSize;
    res.opacity = this.opacity;
    res.transform = this.transform;
    res.parentKey = this.parentKey;
    res.isSticky = this.isSticky;
    res.zIndex = this.zIndex;
    res.allowOverflow = this.allowOverflow;
    return res;
  }
  /**
  * @param type A string representing the view type. Should be `'item'` for item views.
                          Other types are used by supplementary views.
  * @param key The unique key for this view.
  * @param rect The rectangle describing the size and position of this view.
  */
  constructor(type, key, rect) {
    this.type = type;
    this.key = key;
    this.parentKey = null;
    this.rect = rect;
    this.estimatedSize = false;
    this.isSticky = false;
    this.opacity = 1;
    this.transform = null;
    this.zIndex = 0;
    this.allowOverflow = false;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $3041db3296945e6e$export$baf26146a414f24a {
  /**
  * Returns a copy of this point.
  */
  copy() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);
  }
  /**
  * Checks if two points are equal.
  */
  equals(point) {
    return this.x === point.x && this.y === point.y;
  }
  /**
  * Returns true if this point is the origin.
  */
  isOrigin() {
    return this.x === 0 && this.y === 0;
  }
  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $60423f92c7f9ad87$export$c79fc6492f3af13d {
  /**
  * The maximum x-coordinate in the rectangle.
  */
  get maxX() {
    return this.x + this.width;
  }
  /**
  * The maximum y-coordinate in the rectangle.
  */
  get maxY() {
    return this.y + this.height;
  }
  /**
  * The area of the rectangle.
  */
  get area() {
    return this.width * this.height;
  }
  /**
  * The top left corner of the rectangle.
  */
  get topLeft() {
    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.y);
  }
  /**
  * The top right corner of the rectangle.
  */
  get topRight() {
    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.y);
  }
  /**
  * The bottom left corner of the rectangle.
  */
  get bottomLeft() {
    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.maxY);
  }
  /**
  * The bottom right corner of the rectangle.
  */
  get bottomRight() {
    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.maxY);
  }
  /**
  * Returns whether this rectangle intersects another rectangle.
  * @param rect - The rectangle to check.
  */
  intersects(rect) {
    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;
  }
  /**
  * Returns whether this rectangle fully contains another rectangle.
  * @param rect - The rectangle to check.
  */
  containsRect(rect) {
    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;
  }
  /**
  * Returns whether the rectangle contains the given point.
  * @param point - The point to check.
  */
  containsPoint(point) {
    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;
  }
  /**
  * Returns the first corner of this rectangle (from top to bottom, left to right)
  * that is contained in the given rectangle, or null of the rectangles do not intersect.
  * @param rect - The rectangle to check.
  */
  getCornerInRect(rect) {
    for (let key of ["topLeft", "topRight", "bottomLeft", "bottomRight"]) {
      if (rect.containsPoint(this[key])) return key;
    }
    return null;
  }
  equals(rect) {
    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;
  }
  pointEquals(point) {
    return this.x === point.x && this.y === point.y;
  }
  sizeEquals(size) {
    return this.width === size.width && this.height === size.height;
  }
  /**
  * Returns the union of this Rect and another.
  */
  union(other) {
    let x = Math.min(this.x, other.x);
    let y = Math.min(this.y, other.y);
    let width = Math.max(this.maxX, other.maxX) - x;
    let height = Math.max(this.maxY, other.maxY) - y;
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, width, height);
  }
  /**
  * Returns the intersection of this Rect with another.
  * If the rectangles do not intersect, an all zero Rect is returned.
  */
  intersection(other) {
    if (!this.intersects(other)) return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, 0, 0);
    let x = Math.max(this.x, other.x);
    let y = Math.max(this.y, other.y);
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, Math.min(this.maxX, other.maxX) - x, Math.min(this.maxY, other.maxY) - y);
  }
  /**
  * Returns a copy of this rectangle.
  */
  copy() {
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);
  }
  constructor(x = 0, y = 0, width = 0, height = 0) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec {
  /**
  * Returns a copy of this size.
  */
  copy() {
    return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);
  }
  /**
  * Returns whether this size is equal to another one.
  */
  equals(other) {
    return this.width === other.width && this.height === other.height;
  }
  /**
  * The total area of the Size.
  */
  get area() {
    return this.width * this.height;
  }
  constructor(width = 0, height = 0) {
    this.width = width;
    this.height = height;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
let $ad1d98aa8f0c31b4$var$KEY = 0;
class $ad1d98aa8f0c31b4$export$1a5223887c560441 {
  /**
  * Prepares the view for reuse. Called just before the view is removed from the DOM.
  */
  prepareForReuse() {
    this.content = null;
    this.rendered = null;
    this.layoutInfo = null;
  }
  constructor(virtualizer) {
    this.virtualizer = virtualizer;
    this.key = ++$ad1d98aa8f0c31b4$var$KEY;
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
// use high res timer if available
let $3eb131dcf37ad5f8$var$perf = typeof window !== "undefined" ? window.performance : null;
// @ts-ignore
let $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);
let $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {
  return Date.now ? Date.now() : new Date().getTime();
};
let $3eb131dcf37ad5f8$var$fixTs;
function $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {
  let canceled = false;
  let raf_id;
  let promise = new Promise(resolve => {
    let start = $3eb131dcf37ad5f8$var$getTime();
    let diffX = end.x - begin.x;
    let diffY = end.y - begin.y;
    raf_id = requestAnimationFrame(function run(t) {
      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.
      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision
      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1e12 !== $3eb131dcf37ad5f8$var$getTime() > 1e12;
      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime();
      // check if we're done
      let delta = t - start;
      if (delta > duration) {
        fn(end);
        resolve();
      } else {
        // call frame callback after computing eased time and get the next frame
        let proceed = fn(new (0, $3041db3296945e6e$export$baf26146a414f24a)(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));
        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);
      }
    });
  });
  promise.cancel = function () {
    canceled = true;
    cancelAnimationFrame(raf_id);
  };
  return promise;
}
function $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {
  return t;
}
function $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {
  return Math.sin(t * Math.PI / 2);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {
  let res = new Set();
  for (let key of a.keys()) if (!b.has(key)) res.add(key);
  return res;
}
function $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {
  let toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);
  let toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);
  let toUpdate = new Set();
  for (let key of a.keys()) if (b.has(key)) toUpdate.add(key);
  return {
    toRemove: toRemove,
    toAdd: toAdd,
    toUpdate: toUpdate
  };
}
function* $fc36f9a046a9ce79$export$cfc14088dfefce5f(...iterators) {
  for (let iterator of iterators) yield* iterator;
}
function $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {
  let res = {};
  for (let key in object) res[object[key]] = key;
  return res;
}
function $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {
  if (a === b) return true;
  if (a.size !== b.size) return false;
  for (let key of a) {
    if (!b.has(key)) return false;
  }
  return true;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

class $364191b3decf3697$var$RollingAverage {
  addSample(sample) {
    this.count++;
    this.value += (sample - this.value) / this.count;
  }
  constructor() {
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "count", 0);
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "value", 0);
  }
}
class $364191b3decf3697$export$4455ee6afb38dcbb {
  setVisibleRect(rect) {
    let time = performance.now() - this.startTime;
    if (time < 500) {
      this.averageTime.addSample(time);
      if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;
      if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;
    }
    this.startTime = performance.now();
    this.visibleRect = rect;
  }
  collectMetrics() {
    let time = performance.now() - this.startTime;
    if (time < 500) this.averagePerf.addSample(time);
    if (this.visibleRect.height > 0) {
      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));
      this.overscanY.addSample(o);
    }
    if (this.visibleRect.width > 0) {
      let o1 = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));
      this.overscanX.addSample(o1);
    }
  }
  getOverscannedRect() {
    let overscanned = this.visibleRect.copy();
    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;
    if (this.velocity.y > 0) {
      overscanned.y -= overscanY * 0.2;
      overscanned.height += overscanY + overscanY * 0.2;
    } else {
      overscanned.y -= overscanY;
      overscanned.height += overscanY + overscanY * 0.2;
    }
    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;
    if (this.velocity.x > 0) {
      overscanned.x -= overscanX * 0.2;
      overscanned.width += overscanX + overscanX * 0.2;
    } else {
      overscanned.x -= overscanX;
      overscanned.width += overscanX + overscanX * 0.2;
    }
    return overscanned;
  }
  constructor() {
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "startTime", 0);
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "averagePerf", new $364191b3decf3697$var$RollingAverage());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "averageTime", new $364191b3decf3697$var$RollingAverage());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "velocity", new (0, $3041db3296945e6e$export$baf26146a414f24a)(5, 5));
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "overscanX", new $364191b3decf3697$var$RollingAverage());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "overscanY", new $364191b3decf3697$var$RollingAverage());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "visibleRect", new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)());
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $8e135e531d8dcb66$export$febc5573c75cefb0 {
  constructor() {
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "level", 0);
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "actions", []);
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "animated", true);
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "initialMap", new Map());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "finalMap", new Map());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "initialLayoutInfo", new Map());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "finalLayoutInfo", new Map());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "removed", new Map());
    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, "toRemove", new Map());
  }
}
class $38b9490c1cca8fc4$export$89be5a243e59c4b2 {
  _setContentSize(size) {
    this._contentSize = size;
    this.delegate.setContentSize(size);
  }
  _setContentOffset(offset) {
    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);
    this.delegate.setVisibleRect(rect);
  }
  /**
  * Get the size of the scrollable content.
  */
  get contentSize() {
    return this._contentSize;
  }
  /**
  * Get the collection view's currently visible rectangle.
  */
  get visibleRect() {
    return this._visibleRect;
  }
  /**
  * Set the collection view's currently visible rectangle.
  */
  set visibleRect(rect) {
    this._setVisibleRect(rect);
  }
  _setVisibleRect(rect, forceUpdate = false) {
    let current = this._visibleRect;
    // Ignore if the rects are equal
    if (rect.equals(current)) return;
    if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);
    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);
    this._resetAnimatedContentOffset();
    this._visibleRect = rect;
    if (shouldInvalidate) this.relayout({
      offsetChanged: !rect.pointEquals(current),
      sizeChanged: !rect.sizeEquals(current)
    });else this.updateSubviews(forceUpdate);
  }
  get collection() {
    return this._collection;
  }
  set collection(data) {
    this._setData(data);
  }
  _setData(data) {
    if (data === this._collection) return;
    if (this._collection) this._runTransaction(() => {
      this._collection = data;
    }, this.transitionDuration > 0);else {
      this._collection = data;
      this.reloadData();
    }
  }
  /**
  * Reloads the data from the data source and relayouts the collection view.
  * Does not animate any changes. Equivalent to re-assigning the same data source
  * to the collection view.
  */
  reloadData() {
    this.relayout({
      contentChanged: true
    });
  }
  /**
  * Returns the item with the given key.
  */
  getItem(key) {
    return this._collection ? this._collection.getItem(key) : null;
  }
  /** The set of persisted keys are always present in the DOM, even if not currently in view. */
  get persistedKeys() {
    return this._persistedKeys;
  }
  /** The set of persisted keys are always present in the DOM, even if not currently in view. */
  set persistedKeys(persistedKeys) {
    if (!(0, $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64)(persistedKeys, this._persistedKeys)) {
      this._persistedKeys = persistedKeys;
      this.updateSubviews();
    }
  }
  /** Returns whether the given key, or an ancestor, is persisted. */
  isPersistedKey(key) {
    // Quick check if the key is directly in the set of persisted keys.
    if (this._persistedKeys.has(key)) return true;
    // If not, check if the key is an ancestor of any of the persisted keys.
    for (let k of this._persistedKeys) while (k != null) {
      let layoutInfo = this.layout.getLayoutInfo(k);
      if (!layoutInfo) break;
      k = layoutInfo.parentKey;
      if (k === key) return true;
    }
    return false;
  }
  /**
  * Get the collection view's layout.
  */
  get layout() {
    return this._layout;
  }
  /**
  * Set the collection view's layout.
  */
  set layout(layout) {
    this.setLayout(layout);
  }
  /**
  * Sets the collection view's layout, optionally with an animated transition
  * from the current layout to the new layout.
  * @param layout The layout to switch to.
  * @param animated Whether to animate the layout change.
  */
  setLayout(layout, animated = false) {
    if (layout === this._layout) return;
    let applyLayout = () => {
      if (this._layout)
        // @ts-ignore
        this._layout.virtualizer = null;
      layout.virtualizer = this;
      this._layout = layout;
    };
    if (animated)
      // Animated layout transitions are really simple, thanks to our transaction support.
      // We just set the layout inside a transaction action, which runs after the initial
      // layout infos for the animation are retrieved from the previous layout. Then, the
      // final layout infos are retrieved from the new layout, and animations occur.
      this._runTransaction(applyLayout);else {
      applyLayout();
      this.relayout();
    }
  }
  _getReuseType(layoutInfo, content) {
    if (layoutInfo.type === "item" && content) {
      let type = this.delegate.getType ? this.delegate.getType(content) : "item";
      let reuseType = type === "item" ? "item" : layoutInfo.type + "_" + type;
      return {
        type: type,
        reuseType: reuseType
      };
    }
    return {
      type: layoutInfo.type,
      reuseType: layoutInfo.type
    };
  }
  getReusableView(layoutInfo) {
    let content = this.getItem(layoutInfo.key);
    let {
      reuseType: reuseType
    } = this._getReuseType(layoutInfo, content);
    if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];
    let reusable = this._reusableViews[reuseType];
    let view = reusable.length > 0 ? reusable.pop() : new (0, $ad1d98aa8f0c31b4$export$1a5223887c560441)(this);
    view.viewType = reuseType;
    if (!this._animatedContentOffset.isOrigin()) {
      layoutInfo = layoutInfo.copy();
      layoutInfo.rect.x += this._animatedContentOffset.x;
      layoutInfo.rect.y += this._animatedContentOffset.y;
    }
    view.layoutInfo = layoutInfo;
    this._renderView(view);
    return view;
  }
  _renderView(reusableView) {
    let {
      type: type,
      key: key
    } = reusableView.layoutInfo;
    reusableView.content = this.getItem(key);
    reusableView.rendered = this._renderContent(type, reusableView.content);
  }
  _renderContent(type, content) {
    let cached = this._renderedContent.get(content);
    if (cached != null) return cached;
    let rendered = this.delegate.renderView(type, content);
    if (content) this._renderedContent.set(content, rendered);
    return rendered;
  }
  /**
  * Returns an array of all currently visible views, including both
  * item views and supplementary views.
  */
  get visibleViews() {
    return Array.from(this._visibleViews.values());
  }
  /**
  * Gets the visible view for the given type and key. Returns null if
  * the view is not currently visible.
  *
  * @param key The key of the view to retrieve.
  */
  getView(key) {
    return this._visibleViews.get(key) || null;
  }
  /**
  * Returns an array of visible views matching the given type.
  * @param type The view type to find.
  */
  getViewsOfType(type) {
    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);
  }
  /**
  * Returns the key for the given view. Returns null
  * if the view is not currently visible.
  */
  keyForView(view) {
    if (view && view.layoutInfo) return view.layoutInfo.key;
    return null;
  }
  /**
  * Returns the key for the item view currently at the given point.
  */
  keyAtPoint(point) {
    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(point.x, point.y, 1, 1);
    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
    // Layout may return multiple layout infos in the case of
    // persisted keys, so find the first one that actually intersects.
    for (let layoutInfo of layoutInfos) {
      if (layoutInfo.rect.intersects(rect)) return layoutInfo.key;
    }
    return null;
  }
  /**
  * Cleanup for when the Virtualizer will be unmounted.
  */
  willUnmount() {
    cancelAnimationFrame(this._relayoutRaf);
  }
  /**
  * Triggers a layout invalidation, and updates the visible subviews.
  */
  relayout(context = {}) {
    // Ignore relayouts while animating the scroll position
    if (this._scrollAnimation || typeof requestAnimationFrame === "undefined") return;
    // If we already scheduled a relayout, extend the invalidation
    // context so we coalesce multiple relayouts in the same frame.
    if (this._invalidationContext) {
      Object.assign(this._invalidationContext, context);
      return;
    }
    this._invalidationContext = context;
    this._relayoutRaf = requestAnimationFrame(() => {
      this._relayoutRaf = null;
      this.relayoutNow();
    });
  }
  /**
  * Performs a relayout immediately. Prefer {@link relayout} over this method
  * where possible, since it coalesces multiple layout passes in the same tick.
  */
  relayoutNow(context = this._invalidationContext || {}) {
    // Cancel the scheduled relayout, since we're doing it now.
    if (this._relayoutRaf) {
      cancelAnimationFrame(this._relayoutRaf);
      this._relayoutRaf = null;
      // Update the provided context with the current invalidationContext since we are cancelling
      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)
      context = {
        ...this._invalidationContext,
        ...context
      };
    }
    // Reset the invalidation context
    this._invalidationContext = null;
    // Do nothing if we don't have a layout or content, or we are
    // in the middle of an animated scroll transition.
    if (!this.layout || !this._collection || this._scrollAnimation) return;
    let scrollAnchor = this._getScrollAnchor();
    // Trigger the beforeLayout hook, if provided
    if (typeof context.beforeLayout === "function") context.beforeLayout();
    // Validate the layout
    this.layout.validate(context);
    this._setContentSize(this.layout.getContentSize());
    // Trigger the afterLayout hook, if provided
    if (typeof context.afterLayout === "function") context.afterLayout();
    // Adjust scroll position based on scroll anchor, and constrain.
    // If the content changed, scroll to the top.
    let visibleRect = this.getVisibleRect();
    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);
    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;
    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;
    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));
    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));
    let hasLayoutUpdates = false;
    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {
      // If this is an animated relayout, we do not immediately scroll because it would be jittery.
      // Save the difference between the current and new content offsets, and apply it to the
      // individual content items instead. At the end of the animation, we'll reset and set the
      // scroll offset for real. This ensures jitter-free animation since we don't need to sync
      // the scroll animation and the content animation.
      if (context.animated || !this._animatedContentOffset.isOrigin()) {
        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;
        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;
        hasLayoutUpdates = this.updateSubviews(context.contentChanged);
      } else this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(contentOffsetX, contentOffsetY));
    } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);
    // Apply layout infos, unless this is coming from an animated transaction
    if (!(context.transaction && context.animated)) this._applyLayoutInfos();
    // Wait for animations, and apply the afterAnimation hook, if provided
    if (context.animated && hasLayoutUpdates) {
      this._enableTransitions();
      let done = () => {
        this._disableTransitions();
        // Reset scroll position after animations (see above comment).
        if (!this._animatedContentOffset.isOrigin()) {
          // Get the content offset to scroll to, taking _animatedContentOffset into account.
          let {
            x: x,
            y: y
          } = this.getVisibleRect();
          this._resetAnimatedContentOffset();
          this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y));
        }
        if (typeof context.afterAnimation === "function") context.afterAnimation();
      };
      // Sometimes the animation takes slightly longer than expected.
      setTimeout(done, this.transitionDuration + 100);
      return;
    } else if (typeof context.afterAnimation === "function") context.afterAnimation();
  }
  /**
  * Corrects DOM order of visible views to match item order of collection.
  */
  _correctItemOrder() {
    // Defer until after scrolling and animated transactions are complete
    if (this._isScrolling || this._transaction) return;
    for (let key of this._visibleLayoutInfos.keys()) {
      let view = this._visibleViews.get(key);
      this._children.delete(view);
      this._children.add(view);
    }
  }
  _enableTransitions() {
    this.delegate.beginAnimations();
  }
  _disableTransitions() {
    this.delegate.endAnimations();
  }
  _getScrollAnchor() {
    if (!this.anchorScrollPosition) return null;
    let visibleRect = this.getVisibleRect();
    // Ask the delegate to provide a scroll anchor, if possible
    if (this.delegate.getScrollAnchor) {
      let key = this.delegate.getScrollAnchor(visibleRect);
      if (key != null) {
        let layoutInfo = this.layout.getLayoutInfo(key);
        let corner = layoutInfo.rect.getCornerInRect(visibleRect);
        if (corner) {
          let key1 = layoutInfo.key;
          let offset = layoutInfo.rect[corner].y - visibleRect.y;
          return {
            key: key1,
            layoutInfo: layoutInfo,
            corner: corner,
            offset: offset
          };
        }
      }
    }
    // No need to anchor the scroll position if it is at the top
    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;
    // Find a view with a visible corner that has the smallest distance to the top of the collection view
    let cornerAnchor = null;
    for (let [key2, view] of this._visibleViews) {
      let layoutInfo1 = view.layoutInfo;
      if (layoutInfo1 && layoutInfo1.rect.area > 0) {
        let corner1 = layoutInfo1.rect.getCornerInRect(visibleRect);
        if (corner1) {
          let offset1 = layoutInfo1.rect[corner1].y - visibleRect.y;
          if (!cornerAnchor || offset1 < cornerAnchor.offset) cornerAnchor = {
            key: key2,
            layoutInfo: layoutInfo1,
            corner: corner1,
            offset: offset1
          };
        }
      }
    }
    return cornerAnchor;
  }
  _restoreScrollAnchor(scrollAnchor, context) {
    let contentOffset = this.getVisibleRect();
    if (scrollAnchor) {
      var _context_transaction;
      let finalAnchor = ((_context_transaction = context.transaction) === null || _context_transaction === void 0 ? void 0 : _context_transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);
      if (finalAnchor) {
        let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;
        contentOffset.y += adjustment;
      }
    }
    return contentOffset;
  }
  getVisibleRect() {
    let v = this.visibleRect;
    let x = v.x - this._animatedContentOffset.x;
    let y = v.y - this._animatedContentOffset.y;
    return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(x, y, v.width, v.height);
  }
  getVisibleLayoutInfos() {
    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();
    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);
    return this._visibleLayoutInfos;
  }
  _getLayoutInfoMap(rect, copy = false) {
    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
    let map = new Map();
    for (let layoutInfo of layoutInfos) {
      if (copy) layoutInfo = layoutInfo.copy();
      map.set(layoutInfo.key, layoutInfo);
    }
    return map;
  }
  updateSubviews(forceUpdate = false) {
    if (!this._collection) return;
    let visibleLayoutInfos = this.getVisibleLayoutInfos();
    let currentlyVisible = this._visibleViews;
    let toAdd, toRemove, toUpdate;
    // If this is a force update, remove and re-add all views.
    // Otherwise, find and update the diff.
    if (forceUpdate) {
      toAdd = visibleLayoutInfos;
      toRemove = currentlyVisible;
      toUpdate = new Set();
    } else {
      ({
        toAdd: toAdd,
        toRemove: toRemove,
        toUpdate: toUpdate
      } = (0, $fc36f9a046a9ce79$export$acaf96a27438246b)(currentlyVisible, visibleLayoutInfos));
      for (let key of toUpdate) {
        let view = currentlyVisible.get(key);
        if (!view || !view.layoutInfo) continue;
        let item = this.getItem(visibleLayoutInfos.get(key).key);
        if (view.content === item) toUpdate.delete(key);else {
          // If the view type changes, delete and recreate the view instead of updating
          let {
            reuseType: reuseType
          } = this._getReuseType(view.layoutInfo, item);
          if (view.viewType !== reuseType) {
            toUpdate.delete(key);
            toAdd.add(key);
            toRemove.add(key);
          }
        }
      }
      // We are done if the sets are equal
      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {
        if (this._transaction) this._applyLayoutInfos();
        return;
      }
    }
    // Track views that should be removed. They are not removed from
    // the DOM immediately, since we may reuse and need to re-insert
    // them back into the DOM anyway.
    let removed = new Set();
    for (let key1 of toRemove.keys()) {
      let view1 = this._visibleViews.get(key1);
      if (view1) {
        removed.add(view1);
        this._visibleViews.delete(key1);
        // If we are in the middle of a transaction, wait until the end
        // of the animations to remove the views from the DOM. Also means
        // we can't reuse those views immediately.
        if (this._transaction) this._transaction.toRemove.set(key1, view1);else this.reuseView(view1);
      }
    }
    for (let key2 of toAdd.keys()) {
      let layoutInfo = visibleLayoutInfos.get(key2);
      let view2;
      // If we're in a transaction, and a layout change happens
      // during the animations such that a view that was going
      // to be removed is now not, we don't create a new view
      // since the old one is still in the DOM, marked as toRemove.
      if (this._transaction) {
        // if transaction, get initial layout attributes for the animation
        if (this._transaction.initialLayoutInfo.has(key2)) layoutInfo = this._transaction.initialLayoutInfo.get(key2);
        view2 = this._transaction.toRemove.get(key2);
        if (view2) {
          this._transaction.toRemove.delete(key2);
          this._applyLayoutInfo(view2, layoutInfo);
        }
      }
      if (!view2) {
        // Create or reuse a view for this row
        view2 = this.getReusableView(layoutInfo);
        // Add the view to the DOM if needed
        if (!removed.has(view2)) this._children.add(view2);
      }
      this._visibleViews.set(key2, view2);
      removed.delete(view2);
    }
    for (let key3 of toUpdate) {
      let view3 = currentlyVisible.get(key3);
      this._renderedContent.delete(key3);
      this._renderView(view3);
    }
    // Remove the remaining rows to delete from the DOM
    if (!this._transaction) this.removeViews(removed);
    this._correctItemOrder();
    this._flushVisibleViews();
    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());
    if (hasLayoutUpdates) requestAnimationFrame(() => {
      // If we're in a transaction, apply animations to visible views
      // and "to be removed" views, which animate off screen.
      if (this._transaction) requestAnimationFrame(() => this._applyLayoutInfos());
    });
    return hasLayoutUpdates;
  }
  afterRender() {
    if (this.shouldOverscan) this._overscanManager.collectMetrics();
  }
  _flushVisibleViews() {
    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy
    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy
    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper
    // method to build the final tree.
    let viewsByParentKey = new Map([[null, []]]);
    for (let view of this._children) {
      var _view_layoutInfo, _viewsByParentKey_get, _view_layoutInfo1, _view_layoutInfo2, _view_layoutInfo3;
      if (((_view_layoutInfo = view.layoutInfo) === null || _view_layoutInfo === void 0 ? void 0 : _view_layoutInfo.parentKey) != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) viewsByParentKey.set(view.layoutInfo.parentKey, []);
      (_viewsByParentKey_get = viewsByParentKey.get((_view_layoutInfo1 = view.layoutInfo) === null || _view_layoutInfo1 === void 0 ? void 0 : _view_layoutInfo1.parentKey)) === null || _viewsByParentKey_get === void 0 ? void 0 : _viewsByParentKey_get.push(view);
      if (!viewsByParentKey.has((_view_layoutInfo2 = view.layoutInfo) === null || _view_layoutInfo2 === void 0 ? void 0 : _view_layoutInfo2.key)) viewsByParentKey.set((_view_layoutInfo3 = view.layoutInfo) === null || _view_layoutInfo3 === void 0 ? void 0 : _view_layoutInfo3.key, []);
    }
    let buildTree = (parent, views) => views.map(view => {
      let children = viewsByParentKey.get(view.layoutInfo.key);
      return this.delegate.renderWrapper(parent, view, children, childViews => buildTree(view, childViews));
    });
    let children = buildTree(null, viewsByParentKey.get(null));
    this.delegate.setVisibleViews(children);
  }
  _applyLayoutInfo(view, layoutInfo) {
    if (view.layoutInfo === layoutInfo) return false;
    view.layoutInfo = layoutInfo;
    return true;
  }
  _applyLayoutInfos() {
    let updated = false;
    // Apply layout infos to visible views
    for (let view of this._visibleViews.values()) {
      let cur = view.layoutInfo;
      if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {
        let layoutInfo = this.layout.getLayoutInfo(cur.key);
        if (this._applyLayoutInfo(view, layoutInfo)) updated = true;
      }
    }
    // Apply final layout infos for views that will be removed
    if (this._transaction) {
      for (let view1 of this._transaction.toRemove.values()) {
        let cur1 = view1.layoutInfo;
        if ((cur1 === null || cur1 === void 0 ? void 0 : cur1.key) != null) {
          let layoutInfo1 = this.layout.getLayoutInfo(cur1.key);
          if (this._applyLayoutInfo(view1, layoutInfo1)) updated = true;
        }
      }
      for (let view2 of this._transaction.removed.values()) {
        let cur2 = view2.layoutInfo;
        let layoutInfo2 = this._transaction.finalLayoutInfo.get(cur2.key) || cur2;
        layoutInfo2 = this.layout.getFinalLayoutInfo(layoutInfo2.copy());
        if (this._applyLayoutInfo(view2, layoutInfo2)) updated = true;
      }
    }
    if (updated) this._flushVisibleViews();
  }
  _hasLayoutUpdates() {
    if (!this._transaction) return false;
    for (let view of this._visibleViews.values()) {
      let cur = view.layoutInfo;
      if (!cur) return true;
      let layoutInfo = this.layout.getLayoutInfo(cur.key);
      if (
      // Uses equals rather than pointEquals so that width/height changes are taken into account
      !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;
    }
    return false;
  }
  reuseView(view) {
    view.prepareForReuse();
    this._reusableViews[view.viewType].push(view);
  }
  removeViews(toRemove) {
    for (let view of toRemove) this._children.delete(view);
  }
  updateItemSize(key, size) {
    // TODO: we should be able to invalidate a single index path
    // @ts-ignore
    if (!this.layout.updateItemSize) return;
    // If the scroll position is currently animating, add the update
    // to a queue to be processed after the animation is complete.
    if (this._scrollAnimation) {
      this._sizeUpdateQueue.set(key, size);
      return;
    }
    // @ts-ignore
    let changed = this.layout.updateItemSize(key, size);
    if (changed) this.relayout();
  }
  startScrolling() {
    this._isScrolling = true;
  }
  endScrolling() {
    this._isScrolling = false;
    this._correctItemOrder();
    this._flushVisibleViews();
  }
  _resetAnimatedContentOffset() {
    // Reset the animated content offset of subviews. See comment in relayoutNow for details.
    if (!this._animatedContentOffset.isOrigin()) {
      this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);
      this._applyLayoutInfos();
    }
  }
  /**
  * Scrolls the item with the given key into view, optionally with an animation.
  * @param key The key of the item to scroll into view.
  * @param duration The duration of the scroll animation.
  */
  scrollToItem(key, options) {
    // key can be 0, so check if null or undefined
    if (key == null) return;
    let layoutInfo = this.layout.getLayoutInfo(key);
    if (!layoutInfo) return;
    let {
      duration = 300,
      shouldScrollX = true,
      shouldScrollY = true,
      offsetX = 0,
      offsetY = 0
    } = options;
    let x = this.visibleRect.x;
    let y = this.visibleRect.y;
    let minX = layoutInfo.rect.x - offsetX;
    let minY = layoutInfo.rect.y - offsetY;
    let maxX = x + this.visibleRect.width;
    let maxY = y + this.visibleRect.height;
    if (shouldScrollX) {
      if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;
    }
    if (shouldScrollY) {
      if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;
    }
    return this.scrollTo(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y), duration);
  }
  /**
  * Performs an animated scroll to the given offset.
  * @param offset - The offset to scroll to.
  * @param duration The duration of the animation.
  * @returns A promise that resolves when the animation is complete.
  */
  scrollTo(offset, duration = 300) {
    // Cancel the current scroll animation
    if (this._scrollAnimation) {
      this._scrollAnimation.cancel();
      this._scrollAnimation = null;
    }
    // Set the content offset synchronously if the duration is zero
    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {
      this._setContentOffset(offset);
      return Promise.resolve();
    }
    this.startScrolling();
    this._scrollAnimation = (0, $3eb131dcf37ad5f8$export$dc0b63720788090c)(this.visibleRect, offset, duration, (0, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0), offset => {
      this._setContentOffset(offset);
    });
    this._scrollAnimation.then(() => {
      this._scrollAnimation = null;
      // Process view size updates that occurred during the animation.
      // Only views that are still visible will be actually updated.
      for (let [key, size] of this._sizeUpdateQueue) this.updateItemSize(key, size);
      this._sizeUpdateQueue.clear();
      this.relayout();
      this._processTransactionQueue();
      this.endScrolling();
    });
    return this._scrollAnimation;
  }
  _runTransaction(action, animated) {
    this._startTransaction();
    if (this._nextTransaction) this._nextTransaction.actions.push(action);
    this._endTransaction(animated);
  }
  _startTransaction() {
    if (!this._nextTransaction) this._nextTransaction = new (0, $8e135e531d8dcb66$export$febc5573c75cefb0)();
    this._nextTransaction.level++;
  }
  _endTransaction(animated) {
    if (!this._nextTransaction) return false;
    // Save whether the transaction should be animated.
    if (animated != null) this._nextTransaction.animated = animated;
    // If we haven't reached level 0, we are still in a
    // nested transaction. Wait for the parent to end.
    if (--this._nextTransaction.level > 0) return false;
    // Do nothing for empty transactions
    if (this._nextTransaction.actions.length === 0) {
      this._nextTransaction = null;
      return false;
    }
    // Default animations to true
    if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;
    // Enqueue the transaction
    this._transactionQueue.push(this._nextTransaction);
    this._nextTransaction = null;
    this._processTransactionQueue();
    return true;
  }
  _processTransactionQueue() {
    // If the current transaction is animating, wait until the end
    // to process the next transaction.
    if (this._transaction || this._scrollAnimation) return;
    let next = this._transactionQueue.shift();
    if (next) this._performTransaction(next);
  }
  _getContentRect() {
    return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);
  }
  _performTransaction(transaction) {
    this._transaction = transaction;
    this.relayoutNow({
      transaction: transaction,
      animated: transaction.animated,
      beforeLayout: () => {
        // Get the initial layout infos for all views before the updates
        // so we can figure out which views to add and remove.
        if (transaction.animated) transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);
        // Apply the actions that occurred during this transaction
        for (let action of transaction.actions) action();
      },
      afterLayout: () => {
        // Get the final layout infos after the updates
        if (transaction.animated) {
          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());
          this._setupTransactionAnimations(transaction);
        } else this._transaction = null;
      },
      afterAnimation: () => {
        // Remove and reuse views when animations are done
        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) for (let view of (0, $fc36f9a046a9ce79$export$cfc14088dfefce5f)(transaction.toRemove.values(), transaction.removed.values())) {
          this._children.delete(view);
          this.reuseView(view);
        }
        this._transaction = null;
        // Ensure DOM order is correct for accessibility after animations are complete
        this._correctItemOrder();
        this._flushVisibleViews();
        this._processTransactionQueue();
      }
    });
  }
  _setupTransactionAnimations(transaction) {
    let {
      initialMap: initialMap,
      finalMap: finalMap
    } = transaction;
    // Store initial and final layout infos for animations
    for (let [key, layoutInfo] of initialMap) if (finalMap.has(key))
      // Store the initial layout info for use during animations.
      transaction.initialLayoutInfo.set(key, layoutInfo);else
      // This view was removed. Store the layout info for use
      // in Layout#getFinalLayoutInfo during animations.
      transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);
    // Get initial layout infos for views that were added
    for (let [key1, layoutInfo1] of finalMap) if (!initialMap.has(key1)) {
      let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());
      transaction.initialLayoutInfo.set(key1, initialLayoutInfo);
    }
    // Figure out which views were removed.
    for (let [key2, view] of this._visibleViews)
    // If an item has a width of 0, there is no need to remove it from the _visibleViews.
    // Removing an item with  width of 0 can cause a loop where the item gets added, removed,
    // added, removed... etc in a loop.
    if (!finalMap.has(key2) && view.layoutInfo.rect.width > 0) {
      transaction.removed.set(key2, view);
      this._visibleViews.delete(key2);
      // In case something weird happened, where we have a view but no
      // initial layout info, use the one attached to the view.
      if (view.layoutInfo) {
        if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);
      }
    }
  }
  constructor(options = {}) {
    this._contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)();
    this._visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();
    this._reusableViews = {};
    this._visibleLayoutInfos = new Map();
    this._visibleViews = new Map();
    this._renderedContent = new WeakMap();
    this._children = new Set();
    this._invalidationContext = null;
    this._overscanManager = new (0, $364191b3decf3697$export$4455ee6afb38dcbb)();
    this._persistedKeys = new Set();
    this._scrollAnimation = null;
    this._isScrolling = false;
    this._sizeUpdateQueue = new Map();
    this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);
    this._transaction = null;
    this._nextTransaction = null;
    this._transactionQueue = [];
    var _options_transitionDuration;
    // Set options from passed object if given
    this.transitionDuration = (_options_transitionDuration = options.transitionDuration) !== null && _options_transitionDuration !== void 0 ? _options_transitionDuration : 500;
    this.anchorScrollPosition = options.anchorScrollPosition || false;
    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;
    this.shouldOverscan = options.shouldOverscan !== false;
    for (let key of ["delegate", "size", "layout", "collection"]) if (options[key]) this[key] = options[key];
  }
}
function $fc0b13b484ac1194$export$1505db82fe357e65(opts) {
  let [visibleViews, setVisibleViews] = (0, $8D3nr$useState)([]);
  let [contentSize, setContentSize] = (0, $8D3nr$useState)(new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)());
  let [isAnimating, setAnimating] = (0, $8D3nr$useState)(false);
  let [isScrolling, setScrolling] = (0, $8D3nr$useState)(false);
  let virtualizer = (0, $8D3nr$useMemo)(() => new (0, $38b9490c1cca8fc4$export$89be5a243e59c4b2)(), []);
  virtualizer.delegate = {
    setVisibleViews: setVisibleViews,
    setVisibleRect(rect) {
      virtualizer.visibleRect = rect;
      opts.onVisibleRectChange(rect);
    },
    setContentSize: setContentSize,
    renderView: opts.renderView,
    renderWrapper: opts.renderWrapper,
    beginAnimations: () => setAnimating(true),
    endAnimations: () => setAnimating(false),
    getScrollAnchor: opts.getScrollAnchor
  };
  virtualizer.layout = opts.layout;
  virtualizer.collection = opts.collection;
  virtualizer.transitionDuration = opts.transitionDuration;
  (0, $8D3nr$useLayoutEffect)(() => {
    virtualizer.afterRender();
  });
  // eslint-disable-next-line arrow-body-style
  (0, $8D3nr$useEffect)(() => {
    return () => virtualizer.willUnmount();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  let setVisibleRect = (0, $8D3nr$useCallback)(rect => {
    virtualizer.visibleRect = rect;
  }, [virtualizer]);
  let startScrolling = (0, $8D3nr$useCallback)(() => {
    virtualizer.startScrolling();
    setScrolling(true);
  }, [virtualizer]);
  let endScrolling = (0, $8D3nr$useCallback)(() => {
    virtualizer.endScrolling();
    setScrolling(false);
  }, [virtualizer]);
  let state = (0, $8D3nr$useMemo)(() => ({
    virtualizer: virtualizer,
    visibleViews: visibleViews,
    setVisibleRect: setVisibleRect,
    contentSize: contentSize,
    isAnimating: isAnimating,
    isScrolling: isScrolling,
    startScrolling: startScrolling,
    endScrolling: endScrolling
  }), [virtualizer, visibleViews, setVisibleRect, contentSize, isAnimating, isScrolling, startScrolling, endScrolling]);
  return state;
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/selection/dist/module.js






/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $feb5ffebff200149$export$d3e3bd3e26688c04(e) {
  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.
  // On Windows and Ubuntu, Alt + Space has a system wide meaning.
  return (0, utils_dist_module_$c87311424ea30a05$export$e1865c3bedcd822b)() ? e.altKey : e.ctrlKey;
}
function $feb5ffebff200149$export$16792effe837dba3(e) {
  if ((0, utils_dist_module_$c87311424ea30a05$export$9ac100e40613ea10)()) return e.metaKey;
  return e.ctrlKey;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
/**
 * Controls how long to wait before clearing the typeahead buffer.
 */
const $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second
function $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {
  let {
    keyboardDelegate: keyboardDelegate,
    selectionManager: selectionManager,
    onTypeSelect: onTypeSelect
  } = options;
  let state = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    search: "",
    timeout: null
  }).current;
  let onKeyDown = e => {
    let character = $fb3050f43d946246$var$getStringForKey(e.key);
    if (!character || e.ctrlKey || e.metaKey) return;
    // Do not propagate the Spacebar event if it's meant to be part of the search.
    // When we time out, the search term becomes empty, hence the check on length.
    // Trimming is to account for the case of pressing the Spacebar more than once,
    // which should cycle through the selection/deselection of the focused item.
    if (character === " " && state.search.trim().length > 0) {
      e.preventDefault();
      if (!("continuePropagation" in e)) e.stopPropagation();
    }
    state.search += character;
    // Use the delegate to find a key to focus.
    // Prioritize items after the currently focused item, falling back to searching the whole list.
    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);
    // If no key found, search from the top.
    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);
    if (key != null) {
      selectionManager.setFocusedKey(key);
      if (onTypeSelect) onTypeSelect(key);
    }
    clearTimeout(state.timeout);
    state.timeout = setTimeout(() => {
      state.search = "";
    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);
  };
  return {
    typeSelectProps: {
      // Using a capturing listener to catch the keydown event before
      // other hooks in order to handle the Spacebar event.
      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null
    }
  };
}
function $fb3050f43d946246$var$getStringForKey(key) {
  // If the key is of length 1, it is an ASCII value.
  // Otherwise, if there are no ASCII characters in the key name,
  // it is a Unicode character.
  // See https://www.w3.org/TR/uievents-key/
  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;
  return "";
}
function $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {
  let {
    selectionManager: manager,
    keyboardDelegate: delegate,
    ref: ref,
    autoFocus = false,
    shouldFocusWrap = false,
    disallowEmptySelection = false,
    disallowSelectAll = false,
    selectOnFocus = manager.selectionBehavior === "replace",
    disallowTypeAhead = false,
    shouldUseVirtualFocus: shouldUseVirtualFocus,
    allowsTabNavigation = false,
    isVirtualized: isVirtualized,
    // If no scrollRef is provided, assume the collection ref is the scrollable region
    scrollRef = ref
  } = options;
  let {
    direction: direction
  } = (0, dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let onKeyDown = e => {
    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes
    if (e.altKey && e.key === "Tab") e.preventDefault();
    // Keyboard events bubble through portals. Don't handle keyboard events
    // for elements outside the collection (e.g. menus).
    if (!ref.current.contains(e.target)) return;
    const navigateToKey = (key, childFocus) => {
      if (key != null) {
        manager.setFocusedKey(key, childFocus);
        if (e.shiftKey && manager.selectionMode === "multiple") manager.extendSelection(key);else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);
      }
    };
    switch (e.key) {
      case "ArrowDown":
        if (delegate.getKeyBelow) {
          var _delegate_getFirstKey, _delegate_getFirstKey1;
          e.preventDefault();
          let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);
          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "ArrowUp":
        if (delegate.getKeyAbove) {
          var _delegate_getLastKey, _delegate_getLastKey1;
          e.preventDefault();
          let nextKey1 = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);
          if (nextKey1 == null && shouldFocusWrap) nextKey1 = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);
          navigateToKey(nextKey1);
        }
        break;
      case "ArrowLeft":
        if (delegate.getKeyLeftOf) {
          e.preventDefault();
          let nextKey2 = delegate.getKeyLeftOf(manager.focusedKey);
          navigateToKey(nextKey2, direction === "rtl" ? "first" : "last");
        }
        break;
      case "ArrowRight":
        if (delegate.getKeyRightOf) {
          e.preventDefault();
          let nextKey3 = delegate.getKeyRightOf(manager.focusedKey);
          navigateToKey(nextKey3, direction === "rtl" ? "last" : "first");
        }
        break;
      case "Home":
        if (delegate.getFirstKey) {
          e.preventDefault();
          let firstKey = delegate.getFirstKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));
          manager.setFocusedKey(firstKey);
          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === "multiple") manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);
        }
        break;
      case "End":
        if (delegate.getLastKey) {
          e.preventDefault();
          let lastKey = delegate.getLastKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));
          manager.setFocusedKey(lastKey);
          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === "multiple") manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);
        }
        break;
      case "PageDown":
        if (delegate.getKeyPageBelow) {
          e.preventDefault();
          let nextKey4 = delegate.getKeyPageBelow(manager.focusedKey);
          navigateToKey(nextKey4);
        }
        break;
      case "PageUp":
        if (delegate.getKeyPageAbove) {
          e.preventDefault();
          let nextKey5 = delegate.getKeyPageAbove(manager.focusedKey);
          navigateToKey(nextKey5);
        }
        break;
      case "a":
        if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === "multiple" && disallowSelectAll !== true) {
          e.preventDefault();
          manager.selectAll();
        }
        break;
      case "Escape":
        e.preventDefault();
        if (!disallowEmptySelection) manager.clearSelection();
        break;
      case "Tab":
        if (!allowsTabNavigation) {
          // There may be elements that are "tabbable" inside a collection (e.g. in a grid cell).
          // However, collections should be treated as a single tab stop, with arrow key navigation internally.
          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.
          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element
          // in the collection, so that the browser default behavior will apply starting from that element
          // rather than the currently focused one.
          if (e.shiftKey) ref.current.focus();else {
            let walker = (0, module_$9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
              tabbable: true
            });
            let next;
            let last;
            do {
              last = walker.lastChild();
              if (last) next = last;
            } while (last);
            if (next && !next.contains(document.activeElement)) (0, utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3)(next);
          }
          break;
        }
    }
  };
  // Store the scroll position so we can restore it later.
  let scrollPos = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    top: 0,
    left: 0
  });
  (0, utils_dist_module_$e9faafb641e167db$export$90fc3a17d93f704c)(scrollRef, "scroll", isVirtualized ? null : () => {
    scrollPos.current = {
      top: scrollRef.current.scrollTop,
      left: scrollRef.current.scrollLeft
    };
  });
  let onFocus = e => {
    if (manager.isFocused) {
      // If a focus event bubbled through a portal, reset focus state.
      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);
      return;
    }
    // Focus events can bubble through portals. Ignore these events.
    if (!e.currentTarget.contains(e.target)) return;
    manager.setFocused(true);
    if (manager.focusedKey == null) {
      let navigateToFirstKey = key => {
        if (key != null) {
          manager.setFocusedKey(key);
          if (selectOnFocus) manager.replaceSelection(key);
        }
      };
      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.
      // Attempt to detect whether the user is tabbing forward or backward into the collection
      // and either focus the first or last item accordingly.
      let relatedTarget = e.relatedTarget;
      var _manager_lastSelectedKey, _manager_firstSelectedKey;
      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());
    } else if (!isVirtualized) {
      // Restore the scroll position to what it was before.
      scrollRef.current.scrollTop = scrollPos.current.top;
      scrollRef.current.scrollLeft = scrollPos.current.left;
      // Refocus and scroll the focused item into view if it exists within the scrollable region.
      let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
      if (element) {
        // This prevents a flash of focus on the first/last element in the collection
        (0, utils_dist_module_$7215afc6de606d6b$export$de79e2c695e052f3)(element);
        (0, utils_dist_module_$2f04cbc44ee30ce0$export$53a0910f038337bd)(scrollRef.current, element);
      }
    }
  };
  let onBlur = e => {
    // Don't set blurred and then focused again if moving focus within the collection.
    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);
  };
  const autoFocusRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(autoFocus);
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (autoFocusRef.current) {
      let focusedKey = null;
      // Check focus strategy to determine which item to focus
      if (autoFocus === "first") focusedKey = delegate.getFirstKey();
      if (autoFocus === "last") focusedKey = delegate.getLastKey();
      // If there are any selected keys, make the first one the new focus target
      let selectedKeys = manager.selectedKeys;
      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;
      manager.setFocused(true);
      manager.setFocusedKey(focusedKey);
      // If no default focus key is selected, focus the collection itself.
      if (focusedKey == null && !shouldUseVirtualFocus) (0, module_$6a99195332edec8b$export$80f3e147d781571c)(ref.current);
    }
    autoFocusRef.current = false;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  // If not virtualized, scroll the focused element into view when the focusedKey changes.
  // When virtualized, Virtualizer handles this internally.
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!isVirtualized && manager.focusedKey && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {
      let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
      if (element) (0, utils_dist_module_$2f04cbc44ee30ce0$export$53a0910f038337bd)(scrollRef.current, element);
    }
  }, [isVirtualized, scrollRef, manager.focusedKey]);
  let handlers = {
    onKeyDown: onKeyDown,
    onFocus: onFocus,
    onBlur: onBlur,
    onMouseDown(e) {
      // Ignore events that bubbled through portals.
      if (scrollRef.current === e.target)
        // Prevent focus going to the collection when clicking on the scrollbar.
        e.preventDefault();
    }
  };
  let {
    typeSelectProps: typeSelectProps
  } = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({
    keyboardDelegate: delegate,
    selectionManager: manager
  });
  if (!disallowTypeAhead) handlers = (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(typeSelectProps, handlers);
  // If nothing is focused within the collection, make the collection itself tabbable.
  // This will be marshalled to either the first or last item depending on where focus came from.
  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try
  // to move real DOM focus to the element anyway.
  let tabIndex;
  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;
  return {
    collectionProps: {
      ...handlers,
      tabIndex: tabIndex
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $880e95eb8b93ba9a$export$ecf600387e221c37(options) {
  let {
    selectionManager: manager,
    key: key,
    ref: ref,
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    isVirtualized: isVirtualized,
    shouldUseVirtualFocus: shouldUseVirtualFocus,
    focus: focus,
    isDisabled: isDisabled,
    onAction: onAction,
    allowsDifferentPressOrigin: allowsDifferentPressOrigin
  } = options;
  let onSelect = e => {
    if (e.pointerType === "keyboard" && (0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);else {
      if (manager.selectionMode === "none") return;
      if (manager.selectionMode === "single") {
        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);
      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === "toggle" || e && ((0, $feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === "touch" || e.pointerType === "virtual"))
        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys
        manager.toggleSelection(key);else manager.replaceSelection(key);
    }
  };
  // Focus the associated DOM node when this item becomes the focusedKey
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let isFocused = key === manager.focusedKey;
    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {
      if (focus) focus();else (0, module_$6a99195332edec8b$export$80f3e147d781571c)(ref.current);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);
  isDisabled = isDisabled || manager.isDisabled(key);
  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused
  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver
  // on iOS 14 doesn't try to move real DOM focus to the item anyway.
  let itemProps = {};
  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {
    tabIndex: key === manager.focusedKey ? 0 : -1,
    onFocus(e) {
      if (e.target === ref.current) manager.setFocusedKey(key);
    }
  };else if (isDisabled) itemProps.onMouseDown = e => {
    // Prevent focus going to the body when clicking on a disabled item.
    e.preventDefault();
  };
  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.
  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.
  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.
  // With touch, onAction occurs on single tap, and long press enters selection mode.
  let allowsSelection = !isDisabled && manager.canSelectItem(key);
  let allowsActions = onAction && !isDisabled;
  let hasPrimaryAction = allowsActions && (manager.selectionBehavior === "replace" ? !allowsSelection : manager.isEmpty);
  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === "replace";
  let hasAction = hasPrimaryAction || hasSecondaryAction;
  let modality = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let longPressEnabled = hasAction && allowsSelection;
  let longPressEnabledOnPressStart = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  let hadPrimaryActionOnPressStart = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  // By default, selection occurs on pointer down. This can be strange if selecting an
  // item causes the UI to disappear immediately (e.g. menus).
  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.
  // onPress requires a pointer down event on the same element as pointer up. For menus,
  // we want to be able to have the pointer down on the trigger that opens the menu and
  // the pointer up on the menu item rather than requiring a separate press.
  // For keyboard events, selection still occurs on key down.
  let itemPressProps = {};
  if (shouldSelectOnPressUp) {
    itemPressProps.onPressStart = e => {
      modality.current = e.pointerType;
      longPressEnabledOnPressStart.current = longPressEnabled;
      if (e.pointerType === "keyboard" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);
    };
    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)
    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)
    if (!allowsDifferentPressOrigin) itemPressProps.onPress = e => {
      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== "mouse") {
        if (e.pointerType === "keyboard" && !$880e95eb8b93ba9a$var$isActionKey()) return;
        onAction();
      } else if (e.pointerType !== "keyboard") onSelect(e);
    };else {
      itemPressProps.onPressUp = e => {
        if (e.pointerType !== "keyboard") onSelect(e);
      };
      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;
    }
  } else {
    itemPressProps.onPressStart = e => {
      modality.current = e.pointerType;
      longPressEnabledOnPressStart.current = longPressEnabled;
      hadPrimaryActionOnPressStart.current = hasPrimaryAction;
      // Select on mouse down unless there is a primary action which will occur on mouse up.
      // For keyboard, select on key down. If there is an action, the Space key selects on key down,
      // and the Enter key performs onAction on key up.
      if (e.pointerType === "mouse" && !hasPrimaryAction || e.pointerType === "keyboard" && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);
    };
    itemPressProps.onPress = e => {
      // Selection occurs on touch up. Primary actions always occur on pointer up.
      // Both primary and secondary actions occur on Enter key up. The only exception
      // is secondary actions, which occur on double click with a mouse.
      if (e.pointerType === "touch" || e.pointerType === "pen" || e.pointerType === "virtual" || e.pointerType === "keyboard" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === "mouse" && hadPrimaryActionOnPressStart.current) {
        if (hasAction) onAction();else onSelect(e);
      }
    };
  }
  if (!isVirtualized) itemProps["data-key"] = key;
  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;
  let {
    pressProps: pressProps,
    isPressed: isPressed
  } = (0, dist_module_$f6c31cce2adf654f$export$45712eceda6fad21)(itemPressProps);
  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.
  let onDoubleClick = hasSecondaryAction ? e => {
    if (modality.current === "mouse") {
      e.stopPropagation();
      e.preventDefault();
      onAction();
    }
  } : undefined;
  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior
  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to
  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.
  let {
    longPressProps: longPressProps
  } = (0, dist_module_$8a26561d2877236e$export$c24ed0104d07eab9)({
    isDisabled: !longPressEnabled,
    onLongPress(e) {
      if (e.pointerType === "touch") {
        onSelect(e);
        manager.setSelectionBehavior("toggle");
      }
    }
  });
  // Prevent native drag and drop on long press if we also select on long press.
  // Once the user is in selection mode, they can long press again to drag.
  // Use a capturing listener to ensure this runs before useDrag, regardless of
  // the order the props get merged.
  let onDragStartCapture = e => {
    if (modality.current === "touch" && longPressEnabledOnPressStart.current) e.preventDefault();
  };
  return {
    itemProps: (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {
      onDoubleClick: onDoubleClick,
      onDragStartCapture: onDragStartCapture
    }),
    isPressed: isPressed,
    isSelected: manager.isSelected(key),
    isDisabled: isDisabled,
    allowsSelection: allowsSelection,
    hasAction: hasAction
  };
}
function $880e95eb8b93ba9a$var$isActionKey() {
  let event = window.event;
  return (event === null || event === void 0 ? void 0 : event.key) === "Enter";
}
function $880e95eb8b93ba9a$var$isSelectionKey() {
  let event = window.event;
  return (event === null || event === void 0 ? void 0 : event.key) === " " || (event === null || event === void 0 ? void 0 : event.code) === "Space";
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $2a25aae57d74318e$export$a05409b8bb224a5a {
  getKeyBelow(key) {
    key = this.collection.getKeyAfter(key);
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key)) return key;
      key = this.collection.getKeyAfter(key);
    }
  }
  getKeyAbove(key) {
    key = this.collection.getKeyBefore(key);
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key)) return key;
      key = this.collection.getKeyBefore(key);
    }
  }
  getFirstKey() {
    let key = this.collection.getFirstKey();
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key)) return key;
      key = this.collection.getKeyAfter(key);
    }
  }
  getLastKey() {
    let key = this.collection.getLastKey();
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key)) return key;
      key = this.collection.getKeyBefore(key);
    }
  }
  getItem(key) {
    return this.ref.current.querySelector(`[data-key="${key}"]`);
  }
  getKeyPageAbove(key) {
    let menu = this.ref.current;
    let item = this.getItem(key);
    if (!item) return null;
    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);
    while (item && item.offsetTop > pageY) {
      key = this.getKeyAbove(key);
      item = this.getItem(key);
    }
    return key;
  }
  getKeyPageBelow(key) {
    let menu = this.ref.current;
    let item = this.getItem(key);
    if (!item) return null;
    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);
    while (item && item.offsetTop < pageY) {
      key = this.getKeyBelow(key);
      item = this.getItem(key);
    }
    return key;
  }
  getKeyForSearch(search, fromKey) {
    if (!this.collator) return null;
    let collection = this.collection;
    let key = fromKey || this.getFirstKey();
    while (key != null) {
      let item = collection.getItem(key);
      let substring = item.textValue.slice(0, search.length);
      if (item.textValue && this.collator.compare(substring, search) === 0) return key;
      key = this.getKeyBelow(key);
    }
    return null;
  }
  constructor(collection, disabledKeys, ref, collator) {
    this.collection = collection;
    this.disabledKeys = disabledKeys;
    this.ref = ref;
    this.collator = collator;
  }
}
function $982254629710d113$export$b95089534ab7c1fd(props) {
  let {
    selectionManager: selectionManager,
    collection: collection,
    disabledKeys: disabledKeys,
    ref: ref,
    keyboardDelegate: keyboardDelegate,
    autoFocus: autoFocus,
    shouldFocusWrap: shouldFocusWrap,
    isVirtualized: isVirtualized,
    disallowEmptySelection: disallowEmptySelection,
    selectOnFocus = selectionManager.selectionBehavior === "replace",
    disallowTypeAhead: disallowTypeAhead,
    shouldUseVirtualFocus: shouldUseVirtualFocus,
    allowsTabNavigation: allowsTabNavigation
  } = props;
  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
  // When virtualized, the layout object will be passed in as a prop and override this.
  let collator = (0, dist_real_module_$325a3faab7a68acd$export$a16aca283550c30d)({
    usage: "search",
    sensitivity: "base"
  });
  let disabledBehavior = selectionManager.disabledBehavior;
  let delegate = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => keyboardDelegate || new (0, $2a25aae57d74318e$export$a05409b8bb224a5a)(collection, disabledBehavior === "selection" ? new Set() : disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);
  let {
    collectionProps: collectionProps
  } = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({
    ref: ref,
    selectionManager: selectionManager,
    keyboardDelegate: delegate,
    autoFocus: autoFocus,
    shouldFocusWrap: shouldFocusWrap,
    disallowEmptySelection: disallowEmptySelection,
    selectOnFocus: selectOnFocus,
    disallowTypeAhead: disallowTypeAhead,
    shouldUseVirtualFocus: shouldUseVirtualFocus,
    allowsTabNavigation: allowsTabNavigation,
    isVirtualized: isVirtualized,
    scrollRef: ref
  });
  return {
    listProps: collectionProps
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/live-announcer/dist/module.js
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ /* Inspired by https://github.com/AlmeroSteyn/react-aria-live */const $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7000;
let $319e236875307eab$var$liveAnnouncer = null;
function $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = "assertive", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
  if (!$319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer = new $319e236875307eab$var$LiveAnnouncer();
  $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);
}
function $319e236875307eab$export$d10ae4f68404609a(assertiveness) {
  if ($319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer.clear(assertiveness);
}
function $319e236875307eab$export$d8686216b8b81b2f() {
  if ($319e236875307eab$var$liveAnnouncer) {
    $319e236875307eab$var$liveAnnouncer.destroy();
    $319e236875307eab$var$liveAnnouncer = null;
  }
}
// LiveAnnouncer is implemented using vanilla DOM, not React. That's because as of React 18
// ReactDOM.render is deprecated, and the replacement, ReactDOM.createRoot is moved into a
// subpath import `react-dom/client`. That makes it hard for us to support multiple React versions.
// As a global API, we can't use portals without introducing a breaking API change. LiveAnnouncer
// is simple enough to implement without React, so that's what we do here.
// See this discussion for more details: https://github.com/reactwg/react-18/discussions/125#discussioncomment-2382638
class $319e236875307eab$var$LiveAnnouncer {
  createLog(ariaLive) {
    let node = document.createElement("div");
    node.setAttribute("role", "log");
    node.setAttribute("aria-live", ariaLive);
    node.setAttribute("aria-relevant", "additions");
    return node;
  }
  destroy() {
    if (!this.node) return;
    document.body.removeChild(this.node);
    this.node = null;
  }
  announce(message, assertiveness = "assertive", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
    if (!this.node) return;
    let node = document.createElement("div");
    node.textContent = message;
    if (assertiveness === "assertive") this.assertiveLog.appendChild(node);else this.politeLog.appendChild(node);
    if (message !== "") setTimeout(() => {
      node.remove();
    }, timeout);
  }
  clear(assertiveness) {
    if (!this.node) return;
    if (!assertiveness || assertiveness === "assertive") this.assertiveLog.innerHTML = "";
    if (!assertiveness || assertiveness === "polite") this.politeLog.innerHTML = "";
  }
  constructor() {
    this.node = document.createElement("div");
    this.node.dataset.liveAnnouncer = "true";
    // copied from VisuallyHidden
    Object.assign(this.node.style, {
      border: 0,
      clip: "rect(0 0 0 0)",
      clipPath: "inset(50%)",
      height: 1,
      margin: "0 -1px -1px 0",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      width: 1,
      whiteSpace: "nowrap"
    });
    this.assertiveLog = this.createLog("assertive");
    this.node.appendChild(this.assertiveLog);
    this.politeLog = this.createLog("polite");
    this.node.appendChild(this.politeLog);
    document.body.prepend(this.node);
  }
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/grid/dist/module.js








function module_$parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
class $d1c300d9c497e402$export$de9feff04fda126e {
  isCell(node) {
    return node.type === "cell";
  }
  isRow(node) {
    return node.type === "row" || node.type === "item";
  }
  findPreviousKey(fromKey, pred) {
    let key = fromKey != null ? this.collection.getKeyBefore(fromKey) : this.collection.getLastKey();
    while (key != null) {
      let item = this.collection.getItem(key);
      if (!pred || pred(item)) return key;
      key = this.collection.getKeyBefore(key);
    }
  }
  findNextKey(fromKey, pred) {
    let key = fromKey != null ? this.collection.getKeyAfter(fromKey) : this.collection.getFirstKey();
    while (key != null) {
      let item = this.collection.getItem(key);
      if (!pred || pred(item)) return key;
      key = this.collection.getKeyAfter(key);
    }
  }
  getKeyBelow(key) {
    let startItem = this.collection.getItem(key);
    if (!startItem) return;
    // If focus was on a cell, start searching from the parent row
    if (this.isCell(startItem)) key = startItem.parentKey;
    // Find the next item
    key = this.findNextKey(key);
    if (key != null) {
      // If focus was on a cell, focus the cell with the same index in the next row.
      if (this.isCell(startItem)) {
        let item = this.collection.getItem(key);
        return [...item.childNodes][startItem.index].key;
      }
      // Otherwise, focus the next row
      if (this.focusMode === "row") return key;
    }
  }
  getKeyAbove(key) {
    let startItem = this.collection.getItem(key);
    if (!startItem) return;
    // If focus is on a cell, start searching from the parent row
    if (this.isCell(startItem)) key = startItem.parentKey;
    // Find the previous item
    key = this.findPreviousKey(key);
    if (key != null) {
      // If focus was on a cell, focus the cell with the same index in the previous row.
      if (this.isCell(startItem)) {
        let item = this.collection.getItem(key);
        return [...item.childNodes][startItem.index].key;
      }
      // Otherwise, focus the previous row
      if (this.focusMode === "row") return key;
    }
  }
  getKeyRightOf(key) {
    let item = this.collection.getItem(key);
    if (!item) return;
    // If focus is on a row, focus the first child cell.
    if (this.isRow(item)) {
      let children = [...item.childNodes];
      return this.direction === "rtl" ? children[children.length - 1].key : children[0].key;
    }
    // If focus is on a cell, focus the next cell if any,
    // otherwise focus the parent row.
    if (this.isCell(item)) {
      let parent = this.collection.getItem(item.parentKey);
      let children1 = [...parent.childNodes];
      let next = this.direction === "rtl" ? children1[item.index - 1] : children1[item.index + 1];
      if (next) return next.key;
      // focus row only if focusMode is set to row
      if (this.focusMode === "row") return item.parentKey;
      return this.direction === "rtl" ? this.getFirstKey(key) : this.getLastKey(key);
    }
  }
  getKeyLeftOf(key) {
    let item = this.collection.getItem(key);
    if (!item) return;
    // If focus is on a row, focus the last child cell.
    if (this.isRow(item)) {
      let children = [...item.childNodes];
      return this.direction === "rtl" ? children[0].key : children[children.length - 1].key;
    }
    // If focus is on a cell, focus the previous cell if any,
    // otherwise focus the parent row.
    if (this.isCell(item)) {
      let parent = this.collection.getItem(item.parentKey);
      let children1 = [...parent.childNodes];
      let prev = this.direction === "rtl" ? children1[item.index + 1] : children1[item.index - 1];
      if (prev) return prev.key;
      // focus row only if focusMode is set to row
      if (this.focusMode === "row") return item.parentKey;
      return this.direction === "rtl" ? this.getLastKey(key) : this.getFirstKey(key);
    }
  }
  getFirstKey(key, global) {
    let item;
    if (key != null) {
      item = this.collection.getItem(key);
      if (!item) return;
      // If global flag is not set, and a cell is currently focused,
      // move focus to the first cell in the parent row.
      if (this.isCell(item) && !global) {
        let parent = this.collection.getItem(item.parentKey);
        return [...parent.childNodes][0].key;
      }
    }
    // Find the first row
    key = this.findNextKey();
    // If global flag is set (or if focus mode is cell), focus the first cell in the first row.
    if (key != null && item && this.isCell(item) && global || this.focusMode === "cell") {
      let item1 = this.collection.getItem(key);
      key = [...item1.childNodes][0].key;
    }
    // Otherwise, focus the row itself.
    return key;
  }
  getLastKey(key, global) {
    let item;
    if (key != null) {
      item = this.collection.getItem(key);
      if (!item) return;
      // If global flag is not set, and a cell is currently focused,
      // move focus to the last cell in the parent row.
      if (this.isCell(item) && !global) {
        let parent = this.collection.getItem(item.parentKey);
        let children = [...parent.childNodes];
        return children[children.length - 1].key;
      }
    }
    // Find the last row
    key = this.findPreviousKey();
    // If global flag is set (or if focus mode is cell), focus the last cell in the last row.
    if (key != null && item && this.isCell(item) && global || this.focusMode === "cell") {
      let item1 = this.collection.getItem(key);
      let children1 = [...item1.childNodes];
      key = children1[children1.length - 1].key;
    }
    // Otherwise, focus the row itself.
    return key;
  }
  getItem(key) {
    return this.ref.current.querySelector(`[data-key="${key}"]`);
  }
  getItemRect(key) {
    var _this_layout_getLayoutInfo;
    if (this.layout) return (_this_layout_getLayoutInfo = this.layout.getLayoutInfo(key)) === null || _this_layout_getLayoutInfo === void 0 ? void 0 : _this_layout_getLayoutInfo.rect;
    let item = this.getItem(key);
    if (item) return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(item.offsetLeft, item.offsetTop, item.offsetWidth, item.offsetHeight);
  }
  getPageHeight() {
    var _this_layout_virtualizer, _this_ref, _this_ref_current;
    if (this.layout) return (_this_layout_virtualizer = this.layout.virtualizer) === null || _this_layout_virtualizer === void 0 ? void 0 : _this_layout_virtualizer.visibleRect.height;
    return (_this_ref = this.ref) === null || _this_ref === void 0 ? void 0 : (_this_ref_current = _this_ref.current) === null || _this_ref_current === void 0 ? void 0 : _this_ref_current.offsetHeight;
  }
  getContentHeight() {
    var _this_ref, _this_ref_current;
    if (this.layout) return this.layout.getContentSize().height;
    return (_this_ref = this.ref) === null || _this_ref === void 0 ? void 0 : (_this_ref_current = _this_ref.current) === null || _this_ref_current === void 0 ? void 0 : _this_ref_current.scrollHeight;
  }
  getKeyPageAbove(key) {
    let itemRect = this.getItemRect(key);
    if (!itemRect) return null;
    let pageY = Math.max(0, itemRect.maxY - this.getPageHeight());
    while (itemRect && itemRect.y > pageY) {
      key = this.getKeyAbove(key);
      itemRect = this.getItemRect(key);
    }
    return key;
  }
  getKeyPageBelow(key) {
    let itemRect = this.getItemRect(key);
    if (!itemRect) return null;
    let pageHeight = this.getPageHeight();
    let pageY = Math.min(this.getContentHeight(), itemRect.y + pageHeight);
    while (itemRect && itemRect.maxY < pageY) {
      let nextKey = this.getKeyBelow(key);
      itemRect = this.getItemRect(nextKey);
      // Guard against case where maxY of the last key is barely less than pageY due to rounding
      // and thus it attempts to set key to null
      if (nextKey != null) key = nextKey;
    }
    return key;
  }
  getKeyForSearch(search, fromKey) {
    if (!this.collator) return null;
    let collection = this.collection;
    let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey();
    // If the starting key is a cell, search from its parent row.
    let startItem = collection.getItem(key);
    if (startItem.type === "cell") key = startItem.parentKey;
    let hasWrapped = false;
    while (key != null) {
      let item = collection.getItem(key);
      // check row text value for match
      if (item.textValue) {
        let substring = item.textValue.slice(0, search.length);
        if (this.collator.compare(substring, search) === 0) {
          if (this.isRow(item) && this.focusMode === "cell") return [...item.childNodes][0].key;
          return item.key;
        }
      }
      key = this.findNextKey(key);
      // Wrap around when reaching the end of the collection
      if (key == null && !hasWrapped) {
        key = this.getFirstKey();
        hasWrapped = true;
      }
    }
    return null;
  }
  constructor(options) {
    this.collection = options.collection;
    this.disabledKeys = options.disabledKeys;
    this.ref = options.ref;
    this.direction = options.direction;
    this.collator = options.collator;
    this.layout = options.layout;
    this.focusMode = options.focusMode || "row";
  }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const $1af922eb41e03c8f$export$e6235c0d09b995d0 = new WeakMap();

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
var $1dbe5ffd32adb38c$exports = {};
var $682989befd4f478d$exports = {};
$682989befd4f478d$exports = {
  "deselectedItem": args => `${args.item} غير المحدد`,
  "longPressToSelect": `اضغط مطولًا للدخول إلى وضع التحديد.`,
  "select": `تحديد`,
  "selectedAll": `جميع العناصر المحددة.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `لم يتم تحديد عناصر`,
    one: () => `${formatter.number(args.count)} عنصر محدد`,
    other: () => `${formatter.number(args.count)} عنصر محدد`
  })}.`,
  "selectedItem": args => `${args.item} المحدد`
};
var $f7fca02019afd941$exports = {};
$f7fca02019afd941$exports = {
  "deselectedItem": args => `${args.item} не е избран.`,
  "longPressToSelect": `Натиснете и задръжте за да влезете в избирателен режим.`,
  "select": `Изберете`,
  "selectedAll": `Всички елементи са избрани.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Няма избрани елементи`,
    one: () => `${formatter.number(args.count)} избран елемент`,
    other: () => `${formatter.number(args.count)} избрани елементи`
  })}.`,
  "selectedItem": args => `${args.item} избран.`
};
var $8f86f40be75387f1$exports = {};
$8f86f40be75387f1$exports = {
  "deselectedItem": args => `Položka ${args.item} není vybrána.`,
  "longPressToSelect": `Dlouhým stisknutím přejdete do režimu výběru.`,
  "select": `Vybrat`,
  "selectedAll": `Vybrány všechny položky.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nevybrány žádné položky`,
    one: () => `Vybrána ${formatter.number(args.count)} položka`,
    other: () => `Vybráno ${formatter.number(args.count)} položek`
  })}.`,
  "selectedItem": args => `Vybrána položka ${args.item}.`
};
var $db24ba43c8d652ee$exports = {};
$db24ba43c8d652ee$exports = {
  "deselectedItem": args => `${args.item} ikke valgt.`,
  "longPressToSelect": `Lav et langt tryk for at aktivere valgtilstand.`,
  "select": `Vælg`,
  "selectedAll": `Alle elementer valgt.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Ingen elementer valgt`,
    one: () => `${formatter.number(args.count)} element valgt`,
    other: () => `${formatter.number(args.count)} elementer valgt`
  })}.`,
  "selectedItem": args => `${args.item} valgt.`
};
var $f8f1e72c8b5447d6$exports = {};
$f8f1e72c8b5447d6$exports = {
  "deselectedItem": args => `${args.item} nicht ausgewählt.`,
  "longPressToSelect": `Gedrückt halten, um Auswahlmodus zu öffnen.`,
  "select": `Auswählen`,
  "selectedAll": `Alle Elemente ausgewählt.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Keine Elemente ausgewählt`,
    one: () => `${formatter.number(args.count)} Element ausgewählt`,
    other: () => `${formatter.number(args.count)} Elemente ausgewählt`
  })}.`,
  "selectedItem": args => `${args.item} ausgewählt.`
};
var $9a73ed2983c3ab0b$exports = {};
$9a73ed2983c3ab0b$exports = {
  "deselectedItem": args => `Δεν επιλέχθηκε το στοιχείο ${args.item}.`,
  "longPressToSelect": `Πατήστε παρατεταμένα για να μπείτε σε λειτουργία επιλογής.`,
  "select": `Επιλογή`,
  "selectedAll": `Επιλέχθηκαν όλα τα στοιχεία.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Δεν επιλέχθηκαν στοιχεία`,
    one: () => `Επιλέχθηκε ${formatter.number(args.count)} στοιχείο`,
    other: () => `Επιλέχθηκαν ${formatter.number(args.count)} στοιχεία`
  })}.`,
  "selectedItem": args => `Επιλέχθηκε το στοιχείο ${args.item}.`
};
var $583de0b3587601b9$exports = {};
$583de0b3587601b9$exports = {
  "deselectedItem": args => `${args.item} not selected.`,
  "select": `Select`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `No items selected`,
    one: () => `${formatter.number(args.count)} item selected`,
    other: () => `${formatter.number(args.count)} items selected`
  })}.`,
  "selectedAll": `All items selected.`,
  "selectedItem": args => `${args.item} selected.`,
  "longPressToSelect": `Long press to enter selection mode.`
};
var $147159c978043442$exports = {};
$147159c978043442$exports = {
  "deselectedItem": args => `${args.item} no seleccionado.`,
  "longPressToSelect": `Mantenga pulsado para abrir el modo de selección.`,
  "select": `Seleccionar`,
  "selectedAll": `Todos los elementos seleccionados.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Ningún elemento seleccionado`,
    one: () => `${formatter.number(args.count)} elemento seleccionado`,
    other: () => `${formatter.number(args.count)} elementos seleccionados`
  })}.`,
  "selectedItem": args => `${args.item} seleccionado.`
};
var $5cbb62c8a19173ac$exports = {};
$5cbb62c8a19173ac$exports = {
  "deselectedItem": args => `${args.item} pole valitud.`,
  "longPressToSelect": `Valikurežiimi sisenemiseks vajutage pikalt.`,
  "select": `Vali`,
  "selectedAll": `Kõik üksused valitud.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Üksusi pole valitud`,
    one: () => `${formatter.number(args.count)} üksus valitud`,
    other: () => `${formatter.number(args.count)} üksust valitud`
  })}.`,
  "selectedItem": args => `${args.item} valitud.`
};
var $a33d71dc804cc59e$exports = {};
$a33d71dc804cc59e$exports = {
  "deselectedItem": args => `Kohdetta ${args.item} ei valittu.`,
  "longPressToSelect": `Siirry valintatilaan painamalla pitkään.`,
  "select": `Valitse`,
  "selectedAll": `Kaikki kohteet valittu.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Ei yhtään kohdetta valittu`,
    one: () => `${formatter.number(args.count)} kohde valittu`,
    other: () => `${formatter.number(args.count)} kohdetta valittu`
  })}.`,
  "selectedItem": args => `${args.item} valittu.`
};
var $92d800447793d084$exports = {};
$92d800447793d084$exports = {
  "deselectedItem": args => `${args.item} non sélectionné.`,
  "longPressToSelect": `Appuyez de manière prolongée pour passer en mode de sélection.`,
  "select": `Sélectionner`,
  "selectedAll": `Tous les éléments sélectionnés.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Aucun élément sélectionné`,
    one: () => `${formatter.number(args.count)} élément sélectionné`,
    other: () => `${formatter.number(args.count)} éléments sélectionnés`
  })}.`,
  "selectedItem": args => `${args.item} sélectionné.`
};
var $fe732cdb32124ea8$exports = {};
$fe732cdb32124ea8$exports = {
  "deselectedItem": args => `${args.item} לא נבחר.`,
  "longPressToSelect": `הקשה ארוכה לכניסה למצב בחירה.`,
  "select": `בחר`,
  "selectedAll": `כל הפריטים נבחרו.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `לא נבחרו פריטים`,
    one: () => `פריט ${formatter.number(args.count)} נבחר`,
    other: () => `${formatter.number(args.count)} פריטים נבחרו`
  })}.`,
  "selectedItem": args => `${args.item} נבחר.`
};
var $e41234e934efb4f5$exports = {};
$e41234e934efb4f5$exports = {
  "deselectedItem": args => `Stavka ${args.item} nije odabrana.`,
  "longPressToSelect": `Dugo pritisnite za ulazak u način odabira.`,
  "select": `Odaberite`,
  "selectedAll": `Odabrane su sve stavke.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nije odabrana nijedna stavka`,
    one: () => `Odabrana je ${formatter.number(args.count)} stavka`,
    other: () => `Odabrano je ${formatter.number(args.count)} stavki`
  })}.`,
  "selectedItem": args => `Stavka ${args.item} je odabrana.`
};
var $1b0393182473bf9e$exports = {};
$1b0393182473bf9e$exports = {
  "deselectedItem": args => `${args.item} nincs kijelölve.`,
  "longPressToSelect": `Nyomja hosszan a kijelöléshez.`,
  "select": `Kijelölés`,
  "selectedAll": `Az összes elem kijelölve.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Egy elem sincs kijelölve`,
    one: () => `${formatter.number(args.count)} elem kijelölve`,
    other: () => `${formatter.number(args.count)} elem kijelölve`
  })}.`,
  "selectedItem": args => `${args.item} kijelölve.`
};
var $2eed782c1c110ce7$exports = {};
$2eed782c1c110ce7$exports = {
  "deselectedItem": args => `${args.item} non selezionato.`,
  "longPressToSelect": `Premi a lungo per passare alla modalità di selezione.`,
  "select": `Seleziona`,
  "selectedAll": `Tutti gli elementi selezionati.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nessun elemento selezionato`,
    one: () => `${formatter.number(args.count)} elemento selezionato`,
    other: () => `${formatter.number(args.count)} elementi selezionati`
  })}.`,
  "selectedItem": args => `${args.item} selezionato.`
};
var $8b5d459f86e9b23c$exports = {};
$8b5d459f86e9b23c$exports = {
  "deselectedItem": args => `${args.item} が選択されていません。`,
  "longPressToSelect": `長押しして選択モードを開きます。`,
  "select": `選択`,
  "selectedAll": `すべての項目を選択しました。`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `項目が選択されていません`,
    one: () => `${formatter.number(args.count)} 項目を選択しました`,
    other: () => `${formatter.number(args.count)} 項目を選択しました`
  })}。`,
  "selectedItem": args => `${args.item} を選択しました。`
};
var $1949c3ad17295fd4$exports = {};
$1949c3ad17295fd4$exports = {
  "deselectedItem": args => `${args.item}이(가) 선택되지 않았습니다.`,
  "longPressToSelect": `선택 모드로 들어가려면 길게 누르십시오.`,
  "select": `선택`,
  "selectedAll": `모든 항목이 선택되었습니다.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `선택된 항목이 없습니다`,
    one: () => `${formatter.number(args.count)}개 항목이 선택되었습니다`,
    other: () => `${formatter.number(args.count)}개 항목이 선택되었습니다`
  })}.`,
  "selectedItem": args => `${args.item}이(가) 선택되었습니다.`
};
var $f5e3df4dc8aa7b54$exports = {};
$f5e3df4dc8aa7b54$exports = {
  "deselectedItem": args => `${args.item} nepasirinkta.`,
  "longPressToSelect": `Norėdami įjungti pasirinkimo režimą, paspauskite ir palaikykite.`,
  "select": `Pasirinkti`,
  "selectedAll": `Pasirinkti visi elementai.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nepasirinktas nė vienas elementas`,
    one: () => `Pasirinktas ${formatter.number(args.count)} elementas`,
    other: () => `Pasirinkta elementų: ${formatter.number(args.count)}`
  })}.`,
  "selectedItem": args => `Pasirinkta: ${args.item}.`
};
var $9dd86690a5c2b2c5$exports = {};
$9dd86690a5c2b2c5$exports = {
  "deselectedItem": args => `Vienums ${args.item} nav atlasīts.`,
  "longPressToSelect": `Ilgi turiet nospiestu. lai ieslēgtu atlases režīmu.`,
  "select": `Atlasīt`,
  "selectedAll": `Atlasīti visi vienumi.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nav atlasīts neviens vienums`,
    one: () => `Atlasīto vienumu skaits: ${formatter.number(args.count)}`,
    other: () => `Atlasīto vienumu skaits: ${formatter.number(args.count)}`
  })}.`,
  "selectedItem": args => `Atlasīts vienums ${args.item}.`
};
var $843964c3bf9a7d24$exports = {};
$843964c3bf9a7d24$exports = {
  "deselectedItem": args => `${args.item} er ikke valgt.`,
  "longPressToSelect": `Bruk et langt trykk for å gå inn i valgmodus.`,
  "select": `Velg`,
  "selectedAll": `Alle elementer er valgt.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Ingen elementer er valgt`,
    one: () => `${formatter.number(args.count)} element er valgt`,
    other: () => `${formatter.number(args.count)} elementer er valgt`
  })}.`,
  "selectedItem": args => `${args.item} er valgt.`
};
var $73f50e845f9ef3b4$exports = {};
$73f50e845f9ef3b4$exports = {
  "deselectedItem": args => `${args.item} niet geselecteerd.`,
  "longPressToSelect": `Druk lang om de selectiemodus te openen.`,
  "select": `Selecteren`,
  "selectedAll": `Alle items geselecteerd.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Geen items geselecteerd`,
    one: () => `${formatter.number(args.count)} item geselecteerd`,
    other: () => `${formatter.number(args.count)} items geselecteerd`
  })}.`,
  "selectedItem": args => `${args.item} geselecteerd.`
};
var $87f92a7e077514b2$exports = {};
$87f92a7e077514b2$exports = {
  "deselectedItem": args => `Nie zaznaczono ${args.item}.`,
  "longPressToSelect": `Naciśnij i przytrzymaj, aby wejść do trybu wyboru.`,
  "select": `Zaznacz`,
  "selectedAll": `Wszystkie zaznaczone elementy.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nie zaznaczono żadnych elementów`,
    one: () => `${formatter.number(args.count)} zaznaczony element`,
    other: () => `${formatter.number(args.count)} zaznaczonych elementów`
  })}.`,
  "selectedItem": args => `Zaznaczono ${args.item}.`
};
var $c28c98d58ee9ff6f$exports = {};
$c28c98d58ee9ff6f$exports = {
  "deselectedItem": args => `${args.item} não selecionado.`,
  "longPressToSelect": `Mantenha pressionado para entrar no modo de seleção.`,
  "select": `Selecionar`,
  "selectedAll": `Todos os itens selecionados.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nenhum item selecionado`,
    one: () => `${formatter.number(args.count)} item selecionado`,
    other: () => `${formatter.number(args.count)} itens selecionados`
  })}.`,
  "selectedItem": args => `${args.item} selecionado.`
};
var $b6b1503b17b2254d$exports = {};
$b6b1503b17b2254d$exports = {
  "deselectedItem": args => `${args.item} não selecionado.`,
  "longPressToSelect": `Prima continuamente para entrar no modo de seleção.`,
  "select": `Selecionar`,
  "selectedAll": `Todos os itens selecionados.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nenhum item selecionado`,
    one: () => `${formatter.number(args.count)} item selecionado`,
    other: () => `${formatter.number(args.count)} itens selecionados`
  })}.`,
  "selectedItem": args => `${args.item} selecionado.`
};
var $8bdaeb71e50c3e1a$exports = {};
$8bdaeb71e50c3e1a$exports = {
  "deselectedItem": args => `${args.item} neselectat.`,
  "longPressToSelect": `Apăsați lung pentru a intra în modul de selectare.`,
  "select": `Selectare`,
  "selectedAll": `Toate elementele selectate.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Niciun element selectat`,
    one: () => `${formatter.number(args.count)} element selectat`,
    other: () => `${formatter.number(args.count)} elemente selectate`
  })}.`,
  "selectedItem": args => `${args.item} selectat.`
};
var $ec2b852dd7c3d1f2$exports = {};
$ec2b852dd7c3d1f2$exports = {
  "deselectedItem": args => `${args.item} не выбрано.`,
  "longPressToSelect": `Нажмите и удерживайте для входа в режим выбора.`,
  "select": `Выбрать`,
  "selectedAll": `Выбраны все элементы.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Нет выбранных элементов`,
    one: () => `${formatter.number(args.count)} элемент выбран`,
    other: () => `${formatter.number(args.count)} элементов выбрано`
  })}.`,
  "selectedItem": args => `${args.item} выбрано.`
};
var $79e6d900d6a4f82d$exports = {};
$79e6d900d6a4f82d$exports = {
  "deselectedItem": args => `Nevybraté položky: ${args.item}.`,
  "longPressToSelect": `Dlhším stlačením prejdite do režimu výberu.`,
  "select": `Vybrať`,
  "selectedAll": `Všetky vybraté položky.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Žiadne vybraté položky`,
    one: () => `${formatter.number(args.count)} vybratá položka`,
    other: () => `Počet vybratých položiek:${formatter.number(args.count)}`
  })}.`,
  "selectedItem": args => `Vybraté položky: ${args.item}.`
};
var $f4c1f0d5d4d03d80$exports = {};
$f4c1f0d5d4d03d80$exports = {
  "deselectedItem": args => `Element ${args.item} ni izbran.`,
  "longPressToSelect": `Za izbirni način pritisnite in dlje časa držite.`,
  "select": `Izberite`,
  "selectedAll": `Vsi elementi so izbrani.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Noben element ni izbran`,
    one: () => `${formatter.number(args.count)} element je izbran`,
    other: () => `${formatter.number(args.count)} elementov je izbranih`
  })}.`,
  "selectedItem": args => `Element ${args.item} je izbran.`
};
var $46252cd87269b10b$exports = {};
$46252cd87269b10b$exports = {
  "deselectedItem": args => `${args.item} nije izabrano.`,
  "longPressToSelect": `Dugo pritisnite za ulazak u režim biranja.`,
  "select": `Izaberite`,
  "selectedAll": `Izabrane su sve stavke.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Nije izabrana nijedna stavka`,
    one: () => `Izabrana je ${formatter.number(args.count)} stavka`,
    other: () => `Izabrano je ${formatter.number(args.count)} stavki`
  })}.`,
  "selectedItem": args => `${args.item} je izabrano.`
};
var $d4d5d8dab362555c$exports = {};
$d4d5d8dab362555c$exports = {
  "deselectedItem": args => `${args.item} ej markerat.`,
  "longPressToSelect": `Tryck länge när du vill öppna väljarläge.`,
  "select": `Markera`,
  "selectedAll": `Alla markerade objekt.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Inga markerade objekt`,
    one: () => `${formatter.number(args.count)} markerat objekt`,
    other: () => `${formatter.number(args.count)} markerade objekt`
  })}.`,
  "selectedItem": args => `${args.item} markerat.`
};
var $3d55d1f97c377e83$exports = {};
$3d55d1f97c377e83$exports = {
  "deselectedItem": args => `${args.item} seçilmedi.`,
  "longPressToSelect": `Seçim moduna girmek için uzun basın.`,
  "select": `Seç`,
  "selectedAll": `Tüm ögeler seçildi.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Hiçbir öge seçilmedi`,
    one: () => `${formatter.number(args.count)} öge seçildi`,
    other: () => `${formatter.number(args.count)} öge seçildi`
  })}.`,
  "selectedItem": args => `${args.item} seçildi.`
};
var $5368512f1c703a3f$exports = {};
$5368512f1c703a3f$exports = {
  "deselectedItem": args => `${args.item} не вибрано.`,
  "longPressToSelect": `Виконайте довге натиснення, щоб перейти в режим вибору.`,
  "select": `Вибрати`,
  "selectedAll": `Усі елементи вибрано.`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `Жодних елементів не вибрано`,
    one: () => `${formatter.number(args.count)} елемент вибрано`,
    other: () => `Вибрано елементів: ${formatter.number(args.count)}`
  })}.`,
  "selectedItem": args => `${args.item} вибрано.`
};
var $f1316b1074463583$exports = {};
$f1316b1074463583$exports = {
  "deselectedItem": args => `未选择 ${args.item}。`,
  "longPressToSelect": `长按以进入选择模式。`,
  "select": `选择`,
  "selectedAll": `已选择所有项目。`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `未选择项目`,
    one: () => `已选择 ${formatter.number(args.count)} 个项目`,
    other: () => `已选择 ${formatter.number(args.count)} 个项目`
  })}。`,
  "selectedItem": args => `已选择 ${args.item}。`
};
var $7e60654723031b6f$exports = {};
$7e60654723031b6f$exports = {
  "deselectedItem": args => `未選取「${args.item}」。`,
  "longPressToSelect": `長按以進入選擇模式。`,
  "select": `選取`,
  "selectedAll": `已選取所有項目。`,
  "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
    "=0": `未選取任何項目`,
    one: () => `已選取 ${formatter.number(args.count)} 個項目`,
    other: () => `已選取 ${formatter.number(args.count)} 個項目`
  })}。`,
  "selectedItem": args => `已選取「${args.item}」。`
};
$1dbe5ffd32adb38c$exports = {
  "ar-AE": $682989befd4f478d$exports,
  "bg-BG": $f7fca02019afd941$exports,
  "cs-CZ": $8f86f40be75387f1$exports,
  "da-DK": $db24ba43c8d652ee$exports,
  "de-DE": $f8f1e72c8b5447d6$exports,
  "el-GR": $9a73ed2983c3ab0b$exports,
  "en-US": $583de0b3587601b9$exports,
  "es-ES": $147159c978043442$exports,
  "et-EE": $5cbb62c8a19173ac$exports,
  "fi-FI": $a33d71dc804cc59e$exports,
  "fr-FR": $92d800447793d084$exports,
  "he-IL": $fe732cdb32124ea8$exports,
  "hr-HR": $e41234e934efb4f5$exports,
  "hu-HU": $1b0393182473bf9e$exports,
  "it-IT": $2eed782c1c110ce7$exports,
  "ja-JP": $8b5d459f86e9b23c$exports,
  "ko-KR": $1949c3ad17295fd4$exports,
  "lt-LT": $f5e3df4dc8aa7b54$exports,
  "lv-LV": $9dd86690a5c2b2c5$exports,
  "nb-NO": $843964c3bf9a7d24$exports,
  "nl-NL": $73f50e845f9ef3b4$exports,
  "pl-PL": $87f92a7e077514b2$exports,
  "pt-BR": $c28c98d58ee9ff6f$exports,
  "pt-PT": $b6b1503b17b2254d$exports,
  "ro-RO": $8bdaeb71e50c3e1a$exports,
  "ru-RU": $ec2b852dd7c3d1f2$exports,
  "sk-SK": $79e6d900d6a4f82d$exports,
  "sl-SI": $f4c1f0d5d4d03d80$exports,
  "sr-SP": $46252cd87269b10b$exports,
  "sv-SE": $d4d5d8dab362555c$exports,
  "tr-TR": $3d55d1f97c377e83$exports,
  "uk-UA": $5368512f1c703a3f$exports,
  "zh-CN": $f1316b1074463583$exports,
  "zh-TW": $7e60654723031b6f$exports
};
function $92599c3fd427b763$export$137e594ef3218a10(props, state) {
  let {
    getRowText = key => {
      var _state_collection_getItem;
      return (_state_collection_getItem = state.collection.getItem(key)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.textValue;
    }
  } = props;
  let stringFormatter = (0, dist_real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1)((0, /*@__PURE__*/module_$parcel$interopDefault($1dbe5ffd32adb38c$exports)));
  // Many screen readers do not announce when items in a grid are selected/deselected.
  // We do this using an ARIA live region.
  let selection = state.selectionManager.rawSelection;
  let lastSelection = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(selection);
  (0, utils_dist_module_$4f58c5f72bcf79f7$export$496315a1608d9602)(() => {
    var _lastSelection_current;
    if (!state.selectionManager.isFocused) {
      lastSelection.current = selection;
      return;
    }
    let addedKeys = $92599c3fd427b763$var$diffSelection(selection, lastSelection.current);
    let removedKeys = $92599c3fd427b763$var$diffSelection(lastSelection.current, selection);
    // If adding or removing a single row from the selection, announce the name of that item.
    let isReplace = state.selectionManager.selectionBehavior === "replace";
    let messages = [];
    if (state.selectionManager.selectedKeys.size === 1 && isReplace) {
      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {
        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);
        if (currentSelectionText) messages.push(stringFormatter.format("selectedItem", {
          item: currentSelectionText
        }));
      }
    } else if (addedKeys.size === 1 && removedKeys.size === 0) {
      let addedText = getRowText(addedKeys.keys().next().value);
      if (addedText) messages.push(stringFormatter.format("selectedItem", {
        item: addedText
      }));
    } else if (removedKeys.size === 1 && addedKeys.size === 0) {
      if (state.collection.getItem(removedKeys.keys().next().value)) {
        let removedText = getRowText(removedKeys.keys().next().value);
        if (removedText) messages.push(stringFormatter.format("deselectedItem", {
          item: removedText
        }));
      }
    }
    // Announce how many items are selected, except when selecting the first item.
    if (state.selectionManager.selectionMode === "multiple") {
      if (messages.length === 0 || selection === "all" || selection.size > 1 || lastSelection.current === "all" || ((_lastSelection_current = lastSelection.current) === null || _lastSelection_current === void 0 ? void 0 : _lastSelection_current.size) > 1) messages.push(selection === "all" ? stringFormatter.format("selectedAll") : stringFormatter.format("selectedCount", {
        count: selection.size
      }));
    }
    if (messages.length > 0) (0, $319e236875307eab$export$a9b970dcc4ae71a9)(messages.join(" "));
    lastSelection.current = selection;
  }, [selection]);
}
function $92599c3fd427b763$var$diffSelection(a, b) {
  let res = new Set();
  if (a === "all" || b === "all") return res;
  for (let key of a.keys()) if (!b.has(key)) res.add(key);
  return res;
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $5b9b5b5723db6ae1$export$be42ebdab07ae4c2(props) {
  let stringFormatter = (0, dist_real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1)((0, /*@__PURE__*/module_$parcel$interopDefault($1dbe5ffd32adb38c$exports)));
  let modality = (0, dist_module_$507fabe10e71c6fb$export$98e20ec92f614cfe)();
  // null is the default if the user hasn't interacted with the table at all yet or the rest of the page
  let shouldLongPress = (modality === "pointer" || modality === "virtual" || modality == null) && typeof window !== "undefined" && "ontouchstart" in window;
  let interactionDescription = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let selectionMode = props.selectionManager.selectionMode;
    let selectionBehavior = props.selectionManager.selectionBehavior;
    let message = undefined;
    if (shouldLongPress) message = stringFormatter.format("longPressToSelect");
    return selectionBehavior === "replace" && selectionMode !== "none" && props.hasItemActions ? message : undefined;
  }, [props.selectionManager.selectionMode, props.selectionManager.selectionBehavior, props.hasItemActions, stringFormatter, shouldLongPress]);
  let descriptionProps = (0, utils_dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1)(interactionDescription);
  return descriptionProps;
}
function $83c6e2eafa584c67$export$f6b86a04e5d66d90(props, state, ref) {
  let {
    isVirtualized: isVirtualized,
    keyboardDelegate: keyboardDelegate,
    focusMode: focusMode,
    scrollRef: scrollRef,
    getRowText: getRowText,
    onRowAction: onRowAction,
    onCellAction: onCellAction
  } = props;
  if (!props["aria-label"] && !props["aria-labelledby"]) console.warn("An aria-label or aria-labelledby prop is required for accessibility.");
  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
  // When virtualized, the layout object will be passed in as a prop and override this.
  let collator = (0, dist_real_module_$325a3faab7a68acd$export$a16aca283550c30d)({
    usage: "search",
    sensitivity: "base"
  });
  let {
    direction: direction
  } = (0, dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let delegate = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => keyboardDelegate || new (0, $d1c300d9c497e402$export$de9feff04fda126e)({
    collection: state.collection,
    disabledKeys: state.disabledKeys,
    ref: ref,
    direction: direction,
    collator: collator,
    focusMode: focusMode
  }), [keyboardDelegate, state.collection, state.disabledKeys, ref, direction, collator, focusMode]);
  let {
    collectionProps: collectionProps
  } = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({
    ref: ref,
    selectionManager: state.selectionManager,
    keyboardDelegate: delegate,
    isVirtualized: isVirtualized,
    scrollRef: scrollRef
  });
  let id = (0, utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)(props.id);
  (0, $1af922eb41e03c8f$export$e6235c0d09b995d0).set(state, {
    keyboardDelegate: delegate,
    actions: {
      onRowAction: onRowAction,
      onCellAction: onCellAction
    }
  });
  let descriptionProps = (0, $5b9b5b5723db6ae1$export$be42ebdab07ae4c2)({
    selectionManager: state.selectionManager,
    hasItemActions: !!(onRowAction || onCellAction)
  });
  let domProps = (0, utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  let gridProps = (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
    role: "grid",
    id: id,
    "aria-multiselectable": state.selectionManager.selectionMode === "multiple" ? "true" : undefined
  }, state.isKeyboardNavigationDisabled ? {} : collectionProps, descriptionProps);
  if (isVirtualized) {
    gridProps["aria-rowcount"] = state.collection.size;
    gridProps["aria-colcount"] = state.collection.columnCount;
  }
  (0, $92599c3fd427b763$export$137e594ef3218a10)({
    getRowText: getRowText
  }, state);
  return {
    gridProps: gridProps
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $e45487f8ba1cbdbf$export$d3037f5d3f3e51bf() {
  return {
    rowGroupProps: {
      role: "rowgroup"
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $4159a7a9cbb0cc18$export$96357d5a73f686fa(props, state, ref) {
  let {
    node: node,
    isVirtualized: isVirtualized,
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    onAction: onAction
  } = props;
  let {
    actions: {
      onRowAction: onRowAction
    }
  } = (0, $1af922eb41e03c8f$export$e6235c0d09b995d0).get(state);
  let {
    itemProps: itemProps,
    isPressed: isPressed
  } = (0, $880e95eb8b93ba9a$export$ecf600387e221c37)({
    selectionManager: state.selectionManager,
    key: node.key,
    ref: ref,
    isVirtualized: isVirtualized,
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    onAction: onRowAction ? () => onRowAction(node.key) : onAction,
    isDisabled: state.collection.size === 0
  });
  let isSelected = state.selectionManager.isSelected(node.key);
  let rowProps = {
    role: "row",
    "aria-selected": state.selectionManager.selectionMode !== "none" ? isSelected : undefined,
    ...itemProps
  };
  if (isVirtualized) rowProps["aria-rowindex"] = node.index + 1; // aria-rowindex is 1 based
  return {
    rowProps: rowProps,
    isPressed: isPressed
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c(props, state, ref) {
  let {
    node: node,
    isVirtualized: isVirtualized,
    focusMode = "child",
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    onAction: onAction
  } = props;
  let {
    direction: direction
  } = (0, dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let {
    keyboardDelegate: keyboardDelegate,
    actions: {
      onCellAction: onCellAction
    }
  } = (0, $1af922eb41e03c8f$export$e6235c0d09b995d0).get(state);
  // Handles focusing the cell. If there is a focusable child,
  // it is focused, otherwise the cell itself is focused.
  let focus = () => {
    let treeWalker = (0, module_$9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current);
    if (focusMode === "child") {
      // If focus is already on a focusable child within the cell, early return so we don't shift focus
      if (ref.current.contains(document.activeElement) && ref.current !== document.activeElement) return;
      let focusable = state.selectionManager.childFocusStrategy === "last" ? $ab90dcbc1b5466d0$var$last(treeWalker) : treeWalker.firstChild();
      if (focusable) {
        (0, module_$6a99195332edec8b$export$80f3e147d781571c)(focusable);
        return;
      }
    }
    if (!ref.current.contains(document.activeElement)) (0, module_$6a99195332edec8b$export$80f3e147d781571c)(ref.current);
  };
  let {
    itemProps: itemProps,
    isPressed: isPressed
  } = (0, $880e95eb8b93ba9a$export$ecf600387e221c37)({
    selectionManager: state.selectionManager,
    key: node.key,
    ref: ref,
    isVirtualized: isVirtualized,
    focus: focus,
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    onAction: onCellAction ? () => onCellAction(node.key) : onAction,
    isDisabled: state.collection.size === 0
  });
  let onKeyDownCapture = e => {
    if (!e.currentTarget.contains(e.target) || state.isKeyboardNavigationDisabled) return;
    let walker = (0, module_$9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current);
    walker.currentNode = document.activeElement;
    switch (e.key) {
      case "ArrowLeft":
        {
          // Find the next focusable element within the cell.
          let focusable = direction === "rtl" ? walker.nextNode() : walker.previousNode();
          // Don't focus the cell itself if focusMode is "child"
          if (focusMode === "child" && focusable === ref.current) focusable = null;
          if (focusable) {
            e.preventDefault();
            e.stopPropagation();
            (0, module_$6a99195332edec8b$export$80f3e147d781571c)(focusable);
          } else {
            // If there is no next focusable child, then move to the next cell to the left of this one.
            // This will be handled by useSelectableCollection. However, if there is no cell to the left
            // of this one, only one column, and the grid doesn't focus rows, then the next key will be the
            // same as this one. In that case we need to handle focusing either the cell or the first/last
            // child, depending on the focus mode.
            let prev = keyboardDelegate.getKeyLeftOf(node.key);
            if (prev !== node.key) break;
            e.preventDefault();
            e.stopPropagation();
            if (focusMode === "cell" && direction === "rtl") (0, module_$6a99195332edec8b$export$80f3e147d781571c)(ref.current);else {
              walker.currentNode = ref.current;
              focusable = direction === "rtl" ? walker.firstChild() : $ab90dcbc1b5466d0$var$last(walker);
              if (focusable) (0, module_$6a99195332edec8b$export$80f3e147d781571c)(focusable);
            }
          }
          break;
        }
      case "ArrowRight":
        {
          let focusable1 = direction === "rtl" ? walker.previousNode() : walker.nextNode();
          if (focusMode === "child" && focusable1 === ref.current) focusable1 = null;
          if (focusable1) {
            e.preventDefault();
            e.stopPropagation();
            (0, module_$6a99195332edec8b$export$80f3e147d781571c)(focusable1);
          } else {
            let next = keyboardDelegate.getKeyRightOf(node.key);
            if (next !== node.key) break;
            e.preventDefault();
            e.stopPropagation();
            if (focusMode === "cell" && direction === "ltr") (0, module_$6a99195332edec8b$export$80f3e147d781571c)(ref.current);else {
              walker.currentNode = ref.current;
              focusable1 = direction === "rtl" ? $ab90dcbc1b5466d0$var$last(walker) : walker.firstChild();
              if (focusable1) (0, module_$6a99195332edec8b$export$80f3e147d781571c)(focusable1);
            }
          }
          break;
        }
      case "ArrowUp":
      case "ArrowDown":
        // Prevent this event from reaching cell children, e.g. menu buttons. We want arrow keys to navigate
        // to the cell above/below instead. We need to re-dispatch the event from a higher parent so it still
        // bubbles and gets handled by useSelectableCollection.
        if (!e.altKey && ref.current.contains(e.target)) {
          e.stopPropagation();
          e.preventDefault();
          ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));
        }
        break;
    }
  };
  // Grid cells can have focusable elements inside them. In this case, focus should
  // be marshalled to that element rather than focusing the cell itself.
  let onFocus = e => {
    if (e.target !== ref.current) {
      // useSelectableItem only handles setting the focused key when
      // the focused element is the gridcell itself. We also want to
      // set the focused key when a child element receives focus.
      // If focus is currently visible (e.g. the user is navigating with the keyboard),
      // then skip this. We want to restore focus to the previously focused row/cell
      // in that case since the table should act like a single tab stop.
      if (!(0, dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27)()) state.selectionManager.setFocusedKey(node.key);
      return;
    }
    // If the cell itself is focused, wait a frame so that focus finishes propagatating
    // up to the tree, and move focus to a focusable child if possible.
    requestAnimationFrame(() => {
      if (focusMode === "child" && document.activeElement === ref.current) focus();
    });
  };
  let gridCellProps = (0, utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928)(itemProps, {
    role: "gridcell",
    onKeyDownCapture: onKeyDownCapture,
    onFocus: onFocus
  });
  var _node_colIndex;
  if (isVirtualized) gridCellProps["aria-colindex"] = ((_node_colIndex = node.colIndex) !== null && _node_colIndex !== void 0 ? _node_colIndex : node.index) + 1; // aria-colindex is 1-based
  return {
    gridCellProps: gridCellProps,
    isPressed: isPressed
  };
}
function $ab90dcbc1b5466d0$var$last(walker) {
  let next;
  let last;
  do {
    last = walker.lastChild();
    if (last) next = last;
  } while (last);
  return next;
}
function $7cb39d07f245a780$export$70e2eed1a92976ad(props, state) {
  let {
    key: key
  } = props;
  let manager = state.selectionManager;
  let checkboxId = (0, utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)();
  let isDisabled = !state.selectionManager.canSelectItem(key);
  let isSelected = state.selectionManager.isSelected(key);
  let onChange = () => manager.select(key);
  const stringFormatter = (0, dist_real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1)((0, /*@__PURE__*/module_$parcel$interopDefault($1dbe5ffd32adb38c$exports)));
  return {
    checkboxProps: {
      id: checkboxId,
      "aria-label": stringFormatter.format("select"),
      isSelected: isSelected,
      isDisabled: isDisabled,
      onChange: onChange
    }
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/table/dist/module.js







function dist_module_$parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
const $2140fb2337097f2d$export$552312adfd451dab = new WeakMap();
function $2140fb2337097f2d$var$normalizeKey(key) {
  if (typeof key === 'string') return key.replace(/\s*/g, '');
  return '' + key;
}
function $2140fb2337097f2d$export$37cd4213f2ad742e(state, columnKey) {
  let gridId = $2140fb2337097f2d$export$552312adfd451dab.get(state);
  if (!gridId) throw new Error('Unknown grid');
  return `${gridId}-${$2140fb2337097f2d$var$normalizeKey(columnKey)}`;
}
function $2140fb2337097f2d$export$19baff3266315d44(state, rowKey, columnKey) {
  let gridId = $2140fb2337097f2d$export$552312adfd451dab.get(state);
  if (!gridId) throw new Error('Unknown grid');
  return `${gridId}-${$2140fb2337097f2d$var$normalizeKey(rowKey)}-${$2140fb2337097f2d$var$normalizeKey(columnKey)}`;
}
function $2140fb2337097f2d$export$85069b70317f543(state, rowKey) {
  // A row is labelled by it's row headers.
  return [...state.collection.rowHeaderColumnKeys].map(columnKey => $2140fb2337097f2d$export$19baff3266315d44(state, rowKey, columnKey)).join(' ');
}
var $ae7e9c471762b4d3$exports = {};
var $ce3de3ff2fd66848$exports = {};
$ce3de3ff2fd66848$exports = {
  "ascending": `تصاعدي`,
  "ascendingSort": args => `ترتيب حسب العمود ${args.columnName} بترتيب تصاعدي`,
  "columnSize": args => `${args.value} بالبكسل`,
  "descending": `تنازلي`,
  "descendingSort": args => `ترتيب حسب العمود ${args.columnName} بترتيب تنازلي`,
  "select": `تحديد`,
  "selectAll": `تحديد الكل`,
  "sortable": `عمود قابل للترتيب`
};
var $cb80dcce530985b9$exports = {};
$cb80dcce530985b9$exports = {
  "ascending": `възходящ`,
  "ascendingSort": args => `сортирано по колона ${args.columnName} във възходящ ред`,
  "columnSize": args => `${args.value} пиксела`,
  "descending": `низходящ`,
  "descendingSort": args => `сортирано по колона ${args.columnName} в низходящ ред`,
  "select": `Изберете`,
  "selectAll": `Изберете всичко`,
  "sortable": `сортираща колона`
};
var $68ac86749db4c0fb$exports = {};
$68ac86749db4c0fb$exports = {
  "ascending": `vzestupně`,
  "ascendingSort": args => `řazeno vzestupně podle sloupce ${args.columnName}`,
  "columnSize": args => `${args.value} pixelů`,
  "descending": `sestupně`,
  "descendingSort": args => `řazeno sestupně podle sloupce ${args.columnName}`,
  "select": `Vybrat`,
  "selectAll": `Vybrat vše`,
  "sortable": `sloupec s možností řazení`
};
var $9a6cbac08487e661$exports = {};
$9a6cbac08487e661$exports = {
  "ascending": `stigende`,
  "ascendingSort": args => `sorteret efter kolonne ${args.columnName} i stigende rækkefølge`,
  "columnSize": args => `${args.value} pixels`,
  "descending": `faldende`,
  "descendingSort": args => `sorteret efter kolonne ${args.columnName} i faldende rækkefølge`,
  "select": `Vælg`,
  "selectAll": `Vælg alle`,
  "sortable": `sorterbar kolonne`
};
var $c963661d89486e72$exports = {};
$c963661d89486e72$exports = {
  "ascending": `aufsteigend`,
  "ascendingSort": args => `sortiert nach Spalte ${args.columnName} in aufsteigender Reihenfolge`,
  "columnSize": args => `${args.value} Pixel`,
  "descending": `absteigend`,
  "descendingSort": args => `sortiert nach Spalte ${args.columnName} in absteigender Reihenfolge`,
  "select": `Auswählen`,
  "selectAll": `Alles auswählen`,
  "sortable": `sortierbare Spalte`
};
var $ac03861c6e8605f4$exports = {};
$ac03861c6e8605f4$exports = {
  "ascending": `αύξουσα`,
  "ascendingSort": args => `διαλογή ανά στήλη ${args.columnName} σε αύξουσα σειρά`,
  "columnSize": args => `${args.value} pixel`,
  "descending": `φθίνουσα`,
  "descendingSort": args => `διαλογή ανά στήλη ${args.columnName} σε φθίνουσα σειρά`,
  "select": `Επιλογή`,
  "selectAll": `Επιλογή όλων`,
  "sortable": `Στήλη διαλογής`
};
var $09e6b82e0d6e466a$exports = {};
$09e6b82e0d6e466a$exports = {
  "select": `Select`,
  "selectAll": `Select All`,
  "sortable": `sortable column`,
  "ascending": `ascending`,
  "descending": `descending`,
  "ascendingSort": args => `sorted by column ${args.columnName} in ascending order`,
  "descendingSort": args => `sorted by column ${args.columnName} in descending order`,
  "columnSize": args => `${args.value} pixels`
};
var $8cc39eb66c2bf220$exports = {};
$8cc39eb66c2bf220$exports = {
  "ascending": `de subida`,
  "ascendingSort": args => `ordenado por columna ${args.columnName} en orden de subida`,
  "columnSize": args => `${args.value} píxeles`,
  "descending": `de bajada`,
  "descendingSort": args => `ordenado por columna ${args.columnName} en orden de bajada`,
  "select": `Seleccionar`,
  "selectAll": `Seleccionar todos`,
  "sortable": `columna ordenable`
};
var $4e11db3c25a38112$exports = {};
$4e11db3c25a38112$exports = {
  "ascending": `tõusev järjestus`,
  "ascendingSort": args => `sorditud veeru järgi ${args.columnName} tõusvas järjestuses`,
  "columnSize": args => `${args.value} pikslit`,
  "descending": `laskuv järjestus`,
  "descendingSort": args => `sorditud veeru järgi ${args.columnName} laskuvas järjestuses`,
  "select": `Vali`,
  "selectAll": `Vali kõik`,
  "sortable": `sorditav veerg`
};
var $da1e751a92575e02$exports = {};
$da1e751a92575e02$exports = {
  "ascending": `nouseva`,
  "ascendingSort": args => `lajiteltu sarakkeen ${args.columnName} mukaan nousevassa järjestyksessä`,
  "columnSize": args => `${args.value} pikseliä`,
  "descending": `laskeva`,
  "descendingSort": args => `lajiteltu sarakkeen ${args.columnName} mukaan laskevassa järjestyksessä`,
  "select": `Valitse`,
  "selectAll": `Valitse kaikki`,
  "sortable": `lajiteltava sarake`
};
var $1b5d6c6c47d55106$exports = {};
$1b5d6c6c47d55106$exports = {
  "ascending": `croissant`,
  "ascendingSort": args => `trié en fonction de la colonne ${args.columnName} par ordre croissant`,
  "columnSize": args => `${args.value} pixels`,
  "descending": `décroissant`,
  "descendingSort": args => `trié en fonction de la colonne ${args.columnName} par ordre décroissant`,
  "select": `Sélectionner`,
  "selectAll": `Sélectionner tout`,
  "sortable": `colonne triable`
};
var $7c18ba27b86d3308$exports = {};
$7c18ba27b86d3308$exports = {
  "ascending": `עולה`,
  "ascendingSort": args => `מוין לפי עמודה ${args.columnName} בסדר עולה`,
  "columnSize": args => `${args.value} פיקסלים`,
  "descending": `יורד`,
  "descendingSort": args => `מוין לפי עמודה ${args.columnName} בסדר יורד`,
  "select": `בחר`,
  "selectAll": `בחר הכול`,
  "sortable": `עמודה שניתן למיין`
};
var $2cb40998e20e8a46$exports = {};
$2cb40998e20e8a46$exports = {
  "ascending": `rastući`,
  "ascendingSort": args => `razvrstano po stupcima ${args.columnName} rastućem redoslijedom`,
  "columnSize": args => `${args.value} piksela`,
  "descending": `padajući`,
  "descendingSort": args => `razvrstano po stupcima ${args.columnName} padajućim redoslijedom`,
  "select": `Odaberite`,
  "selectAll": `Odaberite sve`,
  "sortable": `stupac koji se može razvrstati`
};
var $189e23eec1d6aa3a$exports = {};
$189e23eec1d6aa3a$exports = {
  "ascending": `növekvő`,
  "ascendingSort": args => `rendezve a(z) ${args.columnName} oszlop szerint, növekvő sorrendben`,
  "columnSize": args => `${args.value} képpont`,
  "descending": `csökkenő`,
  "descendingSort": args => `rendezve a(z) ${args.columnName} oszlop szerint, csökkenő sorrendben`,
  "select": `Kijelölés`,
  "selectAll": `Összes kijelölése`,
  "sortable": `rendezendő oszlop`
};
var $3c5ec8e4f015dfd0$exports = {};
$3c5ec8e4f015dfd0$exports = {
  "ascending": `crescente`,
  "ascendingSort": args => `in ordine crescente in base alla colonna ${args.columnName}`,
  "columnSize": args => `${args.value} pixel`,
  "descending": `decrescente`,
  "descendingSort": args => `in ordine decrescente in base alla colonna ${args.columnName}`,
  "select": `Seleziona`,
  "selectAll": `Seleziona tutto`,
  "sortable": `colonna ordinabile`
};
var $d021d50e6b315ebb$exports = {};
$d021d50e6b315ebb$exports = {
  "ascending": `昇順`,
  "ascendingSort": args => `列 ${args.columnName} を昇順で並べ替え`,
  "columnSize": args => `${args.value} ピクセル`,
  "descending": `降順`,
  "descendingSort": args => `列 ${args.columnName} を降順で並べ替え`,
  "select": `選択`,
  "selectAll": `すべて選択`,
  "sortable": `並べ替え可能な列`
};
var $52535c35c24ec937$exports = {};
$52535c35c24ec937$exports = {
  "ascending": `오름차순`,
  "ascendingSort": args => `${args.columnName} 열을 기준으로 오름차순으로 정렬됨`,
  "columnSize": args => `${args.value} 픽셀`,
  "descending": `내림차순`,
  "descendingSort": args => `${args.columnName} 열을 기준으로 내림차순으로 정렬됨`,
  "select": `선택`,
  "selectAll": `모두 선택`,
  "sortable": `정렬 가능한 열`
};
var $b37ee03672edfd1d$exports = {};
$b37ee03672edfd1d$exports = {
  "ascending": `didėjančia tvarka`,
  "ascendingSort": args => `surikiuota pagal stulpelį ${args.columnName} didėjančia tvarka`,
  "columnSize": args => `${args.value} piks.`,
  "descending": `mažėjančia tvarka`,
  "descendingSort": args => `surikiuota pagal stulpelį ${args.columnName} mažėjančia tvarka`,
  "select": `Pasirinkti`,
  "selectAll": `Pasirinkti viską`,
  "sortable": `rikiuojamas stulpelis`
};
var $c7df6686b4189d56$exports = {};
$c7df6686b4189d56$exports = {
  "ascending": `augošā secībā`,
  "ascendingSort": args => `kārtots pēc kolonnas ${args.columnName} augošā secībā`,
  "columnSize": args => `${args.value} pikseļi`,
  "descending": `dilstošā secībā`,
  "descendingSort": args => `kārtots pēc kolonnas ${args.columnName} dilstošā secībā`,
  "select": `Atlasīt`,
  "selectAll": `Atlasīt visu`,
  "sortable": `kārtojamā kolonna`
};
var $da07fe8ec87e6b68$exports = {};
$da07fe8ec87e6b68$exports = {
  "ascending": `stigende`,
  "ascendingSort": args => `sortert etter kolonne ${args.columnName} i stigende rekkefølge`,
  "columnSize": args => `${args.value} piksler`,
  "descending": `synkende`,
  "descendingSort": args => `sortert etter kolonne ${args.columnName} i synkende rekkefølge`,
  "select": `Velg`,
  "selectAll": `Velg alle`,
  "sortable": `kolonne som kan sorteres`
};
var $64b7e390f5791490$exports = {};
$64b7e390f5791490$exports = {
  "ascending": `oplopend`,
  "ascendingSort": args => `gesorteerd in oplopende volgorde in kolom ${args.columnName}`,
  "columnSize": args => `${args.value} pixels`,
  "descending": `aflopend`,
  "descendingSort": args => `gesorteerd in aflopende volgorde in kolom ${args.columnName}`,
  "select": `Selecteren`,
  "selectAll": `Alles selecteren`,
  "sortable": `sorteerbare kolom`
};
var $2a03621e773f1678$exports = {};
$2a03621e773f1678$exports = {
  "ascending": `rosnąco`,
  "ascendingSort": args => `posortowano według kolumny ${args.columnName} w porządku rosnącym`,
  "columnSize": args => `Liczba pikseli: ${args.value}`,
  "descending": `malejąco`,
  "descendingSort": args => `posortowano według kolumny ${args.columnName} w porządku malejącym`,
  "select": `Zaznacz`,
  "selectAll": `Zaznacz wszystko`,
  "sortable": `kolumna z możliwością sortowania`
};
var $0a79c0aba9e5ecc6$exports = {};
$0a79c0aba9e5ecc6$exports = {
  "ascending": `crescente`,
  "ascendingSort": args => `classificado pela coluna ${args.columnName} em ordem crescente`,
  "columnSize": args => `${args.value} pixels`,
  "descending": `decrescente`,
  "descendingSort": args => `classificado pela coluna ${args.columnName} em ordem decrescente`,
  "select": `Selecionar`,
  "selectAll": `Selecionar tudo`,
  "sortable": `coluna classificável`
};
var $de7b4d0f7dc86fc8$exports = {};
$de7b4d0f7dc86fc8$exports = {
  "ascending": `ascendente`,
  "ascendingSort": args => `Ordenar por coluna ${args.columnName} em ordem ascendente`,
  "columnSize": args => `${args.value} pixels`,
  "descending": `descendente`,
  "descendingSort": args => `Ordenar por coluna ${args.columnName} em ordem descendente`,
  "select": `Selecionar`,
  "selectAll": `Selecionar tudo`,
  "sortable": `Coluna ordenável`
};
var $28ea7e849d77bd1c$exports = {};
$28ea7e849d77bd1c$exports = {
  "ascending": `crescătoare`,
  "ascendingSort": args => `sortate după coloana ${args.columnName} în ordine crescătoare`,
  "columnSize": args => `${args.value} pixeli`,
  "descending": `descrescătoare`,
  "descendingSort": args => `sortate după coloana ${args.columnName} în ordine descrescătoare`,
  "select": `Selectare`,
  "selectAll": `Selectare totală`,
  "sortable": `coloană sortabilă`
};
var $9a09321cf046b187$exports = {};
$9a09321cf046b187$exports = {
  "ascending": `возрастание`,
  "ascendingSort": args => `сортировать столбец ${args.columnName} в порядке возрастания`,
  "columnSize": args => `${args.value} пикс.`,
  "descending": `убывание`,
  "descendingSort": args => `сортировать столбец ${args.columnName} в порядке убывания`,
  "select": `Выбрать`,
  "selectAll": `Выбрать все`,
  "sortable": `сортируемый столбец`
};
var $5afe469a63fcac7b$exports = {};
$5afe469a63fcac7b$exports = {
  "ascending": `vzostupne`,
  "ascendingSort": args => `zoradené zostupne podľa stĺpca ${args.columnName}`,
  "columnSize": args => `Počet pixelov: ${args.value}`,
  "descending": `zostupne`,
  "descendingSort": args => `zoradené zostupne podľa stĺpca ${args.columnName}`,
  "select": `Vybrať`,
  "selectAll": `Vybrať všetko`,
  "sortable": `zoraditeľný stĺpec`
};
var $2956757ac31a7ce2$exports = {};
$2956757ac31a7ce2$exports = {
  "ascending": `naraščajoče`,
  "ascendingSort": args => `razvrščeno po stolpcu ${args.columnName} v naraščajočem vrstnem redu`,
  "columnSize": args => `${args.value} slikovnih pik`,
  "descending": `padajoče`,
  "descendingSort": args => `razvrščeno po stolpcu ${args.columnName} v padajočem vrstnem redu`,
  "select": `Izberite`,
  "selectAll": `Izberite vse`,
  "sortable": `razvrstljivi stolpec`
};
var $cedee0e66b175529$exports = {};
$cedee0e66b175529$exports = {
  "ascending": `rastući`,
  "ascendingSort": args => `sortirano po kolonama ${args.columnName} rastućim redosledom`,
  "descending": `padajući`,
  "descendingSort": args => `sortirano po kolonama ${args.columnName} padajućim redosledom`,
  "select": `Izaberite`,
  "selectAll": `Izaberite sve`,
  "sortable": `kolona koja se može sortirati`
};
var $6db19998ba4427da$exports = {};
$6db19998ba4427da$exports = {
  "ascending": `stigande`,
  "ascendingSort": args => `sorterat på kolumn ${args.columnName} i stigande ordning`,
  "columnSize": args => `${args.value} pixlar`,
  "descending": `fallande`,
  "descendingSort": args => `sorterat på kolumn ${args.columnName} i fallande ordning`,
  "select": `Markera`,
  "selectAll": `Markera allt`,
  "sortable": `sorterbar kolumn`
};
var $166b7c9cc1adb1a1$exports = {};
$166b7c9cc1adb1a1$exports = {
  "ascending": `artan sırada`,
  "ascendingSort": args => `${args.columnName} sütuna göre artan düzende sırala`,
  "columnSize": args => `${args.value} piksel`,
  "descending": `azalan sırada`,
  "descendingSort": args => `${args.columnName} sütuna göre azalan düzende sırala`,
  "select": `Seç`,
  "selectAll": `Tümünü Seç`,
  "sortable": `Sıralanabilir sütun`
};
var $c7ab180b401e49ff$exports = {};
$c7ab180b401e49ff$exports = {
  "ascending": `висхідний`,
  "ascendingSort": args => `відсортовано за стовпцем ${args.columnName} у висхідному порядку`,
  "columnSize": args => `${args.value} пікс.`,
  "descending": `низхідний`,
  "descendingSort": args => `відсортовано за стовпцем ${args.columnName} у низхідному порядку`,
  "select": `Вибрати`,
  "selectAll": `Вибрати все`,
  "sortable": `сортувальний стовпець`
};
var $1648ec00941567f3$exports = {};
$1648ec00941567f3$exports = {
  "ascending": `升序`,
  "ascendingSort": args => `按列 ${args.columnName} 升序排序`,
  "columnSize": args => `${args.value} 像素`,
  "descending": `降序`,
  "descendingSort": args => `按列 ${args.columnName} 降序排序`,
  "select": `选择`,
  "selectAll": `全选`,
  "sortable": `可排序的列`
};
var $b26f22384b3c1526$exports = {};
$b26f22384b3c1526$exports = {
  "ascending": `遞增`,
  "ascendingSort": args => `已依據「${args.columnName}」欄遞增排序`,
  "columnSize": args => `${args.value} 像素`,
  "descending": `遞減`,
  "descendingSort": args => `已依據「${args.columnName}」欄遞減排序`,
  "select": `選取`,
  "selectAll": `全選`,
  "sortable": `可排序的欄`
};
$ae7e9c471762b4d3$exports = {
  "ar-AE": $ce3de3ff2fd66848$exports,
  "bg-BG": $cb80dcce530985b9$exports,
  "cs-CZ": $68ac86749db4c0fb$exports,
  "da-DK": $9a6cbac08487e661$exports,
  "de-DE": $c963661d89486e72$exports,
  "el-GR": $ac03861c6e8605f4$exports,
  "en-US": $09e6b82e0d6e466a$exports,
  "es-ES": $8cc39eb66c2bf220$exports,
  "et-EE": $4e11db3c25a38112$exports,
  "fi-FI": $da1e751a92575e02$exports,
  "fr-FR": $1b5d6c6c47d55106$exports,
  "he-IL": $7c18ba27b86d3308$exports,
  "hr-HR": $2cb40998e20e8a46$exports,
  "hu-HU": $189e23eec1d6aa3a$exports,
  "it-IT": $3c5ec8e4f015dfd0$exports,
  "ja-JP": $d021d50e6b315ebb$exports,
  "ko-KR": $52535c35c24ec937$exports,
  "lt-LT": $b37ee03672edfd1d$exports,
  "lv-LV": $c7df6686b4189d56$exports,
  "nb-NO": $da07fe8ec87e6b68$exports,
  "nl-NL": $64b7e390f5791490$exports,
  "pl-PL": $2a03621e773f1678$exports,
  "pt-BR": $0a79c0aba9e5ecc6$exports,
  "pt-PT": $de7b4d0f7dc86fc8$exports,
  "ro-RO": $28ea7e849d77bd1c$exports,
  "ru-RU": $9a09321cf046b187$exports,
  "sk-SK": $5afe469a63fcac7b$exports,
  "sl-SI": $2956757ac31a7ce2$exports,
  "sr-SP": $cedee0e66b175529$exports,
  "sv-SE": $6db19998ba4427da$exports,
  "tr-TR": $166b7c9cc1adb1a1$exports,
  "uk-UA": $c7ab180b401e49ff$exports,
  "zh-CN": $1648ec00941567f3$exports,
  "zh-TW": $b26f22384b3c1526$exports
};
class $0ba3c81c7f1caedd$export$da43f8f5cb04028d extends $d1c300d9c497e402$export$de9feff04fda126e {
  isCell(node) {
    return node.type === 'cell' || node.type === 'rowheader' || node.type === 'column';
  }
  getKeyBelow(key) {
    let startItem = this.collection.getItem(key);
    if (!startItem) return;
    // If focus was on a column, then focus the first child column if any,
    // or find the corresponding cell in the first row.
    if (startItem.type === 'column') {
      let child = [...startItem.childNodes][0];
      if (child) return child.key;
      let firstKey = this.getFirstKey();
      if (firstKey == null) return;
      let firstItem = this.collection.getItem(firstKey);
      return [...firstItem.childNodes][startItem.index].key;
    }
    return super.getKeyBelow(key);
  }
  getKeyAbove(key) {
    let startItem = this.collection.getItem(key);
    if (!startItem) return;
    // If focus was on a column, focus the parent column if any
    if (startItem.type === 'column') {
      let parent = this.collection.getItem(startItem.parentKey);
      if (parent && parent.type === 'column') return parent.key;
      return;
    }
    // only return above row key if not header row
    let superKey = super.getKeyAbove(key);
    if (superKey != null && this.collection.getItem(superKey).type !== 'headerrow') return superKey;
    // If no item was found, and focus was on a cell, then focus the
    // corresponding column header.
    if (this.isCell(startItem)) return this.collection.columns[startItem.index].key;
    // If focus was on a row, then focus the first column header.
    return this.collection.columns[0].key;
  }
  findNextColumnKey(column) {
    // Search following columns
    let key = this.findNextKey(column.key, item => item.type === 'column');
    if (key != null) return key;
    // Wrap around to the first column
    let row = this.collection.headerRows[column.level];
    for (let item1 of row.childNodes) {
      if (item1.type === 'column') return item1.key;
    }
  }
  findPreviousColumnKey(column) {
    // Search previous columns
    let key = this.findPreviousKey(column.key, item => item.type === 'column');
    if (key != null) return key;
    // Wrap around to the last column
    let row = this.collection.headerRows[column.level];
    let childNodes = [...row.childNodes];
    for (let i = childNodes.length - 1; i >= 0; i--) {
      let item = childNodes[i];
      if (item.type === 'column') return item.key;
    }
  }
  getKeyRightOf(key) {
    let item = this.collection.getItem(key);
    if (!item) return;
    // If focus was on a column, then focus the next column
    if (item.type === 'column') return this.direction === 'rtl' ? this.findPreviousColumnKey(item) : this.findNextColumnKey(item);
    return super.getKeyRightOf(key);
  }
  getKeyLeftOf(key) {
    let item = this.collection.getItem(key);
    if (!item) return;
    // If focus was on a column, then focus the previous column
    if (item.type === 'column') return this.direction === 'rtl' ? this.findNextColumnKey(item) : this.findPreviousColumnKey(item);
    return super.getKeyLeftOf(key);
  }
  getKeyForSearch(search, fromKey) {
    if (!this.collator) return null;
    let collection = this.collection;
    let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey();
    if (key == null) return null;
    // If the starting key is a cell, search from its parent row.
    let startItem = collection.getItem(key);
    if (startItem.type === 'cell') key = startItem.parentKey;
    let hasWrapped = false;
    while (key != null) {
      let item = collection.getItem(key);
      // Check each of the row header cells in this row for a match
      for (let cell of item.childNodes) {
        let column = collection.columns[cell.index];
        if (collection.rowHeaderColumnKeys.has(column.key) && cell.textValue) {
          let substring = cell.textValue.slice(0, search.length);
          if (this.collator.compare(substring, search) === 0) {
            // If we started on a cell, end on the matching cell. Otherwise, end on the row.
            let fromItem = fromKey != null ? collection.getItem(fromKey) : startItem;
            return fromItem.type === 'cell' ? cell.key : item.key;
          }
        }
      }
      key = this.getKeyBelow(key);
      // Wrap around when reaching the end of the collection
      if (key == null && !hasWrapped) {
        key = this.getFirstKey();
        hasWrapped = true;
      }
    }
    return null;
  }
}
function $6e31608fbba75bab$export$25bceaac3c7e4dc7(props, state, ref1) {
  let {
    keyboardDelegate: keyboardDelegate,
    isVirtualized: isVirtualized,
    layout: layout
  } = props;
  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
  // When virtualized, the layout object will be passed in as a prop and override this.
  let collator = dist_real_module_$325a3faab7a68acd$export$a16aca283550c30d({
    usage: 'search',
    sensitivity: 'base'
  });
  let {
    direction: direction
  } = dist_real_module_$18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let delegate = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => keyboardDelegate || new $0ba3c81c7f1caedd$export$da43f8f5cb04028d({
    collection: state.collection,
    disabledKeys: state.disabledKeys,
    ref: ref1,
    direction: direction,
    collator: collator,
    layout: layout
  }), [keyboardDelegate, state.collection, state.disabledKeys, ref1, direction, collator, layout]);
  let id = utils_dist_module_$bdb11010cef70236$export$f680877a34711e37(props.id);
  $2140fb2337097f2d$export$552312adfd451dab.set(state, id);
  let {
    gridProps: gridProps
  } = $83c6e2eafa584c67$export$f6b86a04e5d66d90({
    ...props,
    id: id,
    keyboardDelegate: delegate,
    getRowText(key) {
      let added = state.collection.getItem(key);
      if (!added) return '';
      // If the row has a textValue, use that.
      if (added.textValue != null) return added.textValue;
      // Otherwise combine the text of each of the row header columns.
      let rowHeaderColumnKeys = state.collection.rowHeaderColumnKeys;
      if (rowHeaderColumnKeys) {
        let text = [];
        for (let cell of added.childNodes) {
          let column = state.collection.columns[cell.index];
          if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);
          if (text.length === rowHeaderColumnKeys.size) break;
        }
        return text.join(' ');
      }
      return '';
    }
  }, state, ref1);
  // Override to include header rows
  if (isVirtualized) gridProps['aria-rowcount'] = state.collection.size + state.collection.headerRows.length;
  let {
    column: column1,
    direction: sortDirection
  } = state.sortDescriptor || {};
  let stringFormatter = dist_real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1( /*@__PURE__*/dist_module_$parcel$interopDefault($ae7e9c471762b4d3$exports));
  let sortDescription = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var ref;
    let columnName = (ref = state.collection.columns.find(c => c.key === column1)) === null || ref === void 0 ? void 0 : ref.textValue;
    return sortDirection && column1 ? stringFormatter.format(`${sortDirection}Sort`, {
      columnName: columnName
    }) : undefined;
  }, [sortDirection, column1, state.collection.columns]);
  let descriptionProps = utils_dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1(sortDescription);
  // Only announce after initial render, tabbing to the table will tell you the initial sort info already
  utils_dist_module_$4f58c5f72bcf79f7$export$496315a1608d9602(() => {
    $319e236875307eab$export$a9b970dcc4ae71a9(sortDescription, 'assertive', 500);
  }, [sortDescription]);
  return {
    gridProps: utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(gridProps, descriptionProps,
    // If table is empty, make sure the table is tabbable
    state.collection.size === 0 && {
      tabIndex: 0
    }, {
      // merge sort description with long press information
      'aria-describedby': [descriptionProps['aria-describedby'], gridProps['aria-describedby']].filter(Boolean).join(' ')
    })
  };
}
function $f329116d8ad0aba0$export$9514819a8c81e960(props, state, ref) {
  var ref1, ref2;
  let {
    node: node
  } = props;
  let allowsSorting = node.props.allowsSorting;
  // the selection cell column header needs to focus the checkbox within it but the other columns should focus the cell so that focus doesn't land on the resizer
  let {
    gridCellProps: gridCellProps
  } = $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c({
    ...props,
    focusMode: node.props.isSelectionCell || props.hasMenu || node.props.allowsSorting ? 'child' : 'cell'
  }, state, ref);
  let isSelectionCellDisabled = node.props.isSelectionCell && state.selectionManager.selectionMode === 'single';
  let {
    pressProps: pressProps
  } = dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: !allowsSorting || isSelectionCellDisabled,
    onPress() {
      state.sort(node.key);
    },
    ref: ref
  });
  // Needed to pick up the focusable context, enabling things like Tooltips for example
  let {
    focusableProps: focusableProps
  } = module_$e6afbd83fe6ebbd2$export$4c014de7c8940b4c({}, ref);
  if (props.hasMenu) pressProps = {};
  let ariaSort = null;
  let isSortedColumn = ((ref1 = state.sortDescriptor) === null || ref1 === void 0 ? void 0 : ref1.column) === node.key;
  let sortDirection = (ref2 = state.sortDescriptor) === null || ref2 === void 0 ? void 0 : ref2.direction;
  // aria-sort not supported in Android Talkback
  if (node.props.allowsSorting && !utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8()) ariaSort = isSortedColumn ? sortDirection : 'none';
  let stringFormatter = dist_real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1( /*@__PURE__*/dist_module_$parcel$interopDefault($ae7e9c471762b4d3$exports));
  let sortDescription;
  if (allowsSorting) {
    sortDescription = `${stringFormatter.format('sortable')}`;
    // Android Talkback doesn't support aria-sort so we add sort order details to the aria-described by here
    if (isSortedColumn && sortDirection && utils_dist_module_$c87311424ea30a05$export$a11b0059900ceec8()) sortDescription = `${sortDescription}, ${stringFormatter.format(sortDirection)}`;
  }
  let descriptionProps = utils_dist_module_$ef06256079686ba0$export$f8aeda7b10753fa1(sortDescription);
  return {
    columnHeaderProps: {
      ...utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(gridCellProps, pressProps, focusableProps, descriptionProps,
      // If the table is empty, make all column headers untabbable or programatically focusable
      state.collection.size === 0 && {
        tabIndex: null
      }),
      role: 'columnheader',
      id: $2140fb2337097f2d$export$37cd4213f2ad742e(state, node.key),
      'aria-colspan': node.colspan && node.colspan > 1 ? node.colspan : null,
      'aria-sort': ariaSort
    }
  };
}
function $b2db214c022798eb$export$7f2f6ae19e707aa5(props, state, ref) {
  let {
    node: node
  } = props;
  let {
    rowProps: rowProps,
    isPressed: isPressed
  } = $4159a7a9cbb0cc18$export$96357d5a73f686fa(props, state, ref);
  return {
    rowProps: {
      ...rowProps,
      'aria-labelledby': $2140fb2337097f2d$export$85069b70317f543(state, node.key)
    },
    isPressed: isPressed
  };
}
function $f917ee10f4c32dab$export$1b95a7d2d517b841(props, state, ref) {
  let {
    node: node,
    isVirtualized: isVirtualized
  } = props;
  let rowProps = {
    role: 'row'
  };
  if (isVirtualized) rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based
  return {
    rowProps: rowProps
  };
}
function $7713593715703b24$export$49571c903d73624c(props, state, ref) {
  let {
    gridCellProps: gridCellProps,
    isPressed: isPressed
  } = $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c(props, state, ref);
  let columnKey = props.node.column.key;
  if (state.collection.rowHeaderColumnKeys.has(columnKey)) {
    gridCellProps.role = 'rowheader';
    gridCellProps.id = $2140fb2337097f2d$export$19baff3266315d44(state, props.node.parentKey, columnKey);
  }
  return {
    gridCellProps: gridCellProps,
    isPressed: isPressed
  };
}
function $2a795c53a101c542$export$16ea7f650bd7c1bb(props, state) {
  let {
    key: key
  } = props;
  const {
    checkboxProps: checkboxProps
  } = $7cb39d07f245a780$export$70e2eed1a92976ad(props, state);
  return {
    checkboxProps: {
      ...checkboxProps,
      'aria-labelledby': `${checkboxProps.id} ${$2140fb2337097f2d$export$85069b70317f543(state, key)}`
    }
  };
}
function $2a795c53a101c542$export$1003db6a7e384b99(state) {
  let {
    isEmpty: isEmpty,
    isSelectAll: isSelectAll,
    selectionMode: selectionMode
  } = state.selectionManager;
  const stringFormatter = dist_real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1( /*@__PURE__*/dist_module_$parcel$interopDefault($ae7e9c471762b4d3$exports));
  return {
    checkboxProps: {
      'aria-label': stringFormatter.format(selectionMode === 'single' ? 'select' : 'selectAll'),
      isSelected: isSelectAll,
      isDisabled: selectionMode !== 'multiple' || state.collection.size === 0,
      isIndeterminate: !isEmpty && !isSelectAll,
      onChange: () => state.selectionManager.toggleSelectAll()
    }
  };
}
function $e91ef4e5004e3774$export$52994e973806c219(props, state, columnState, ref) {
  let {
    column: item,
    triggerRef: triggerRef,
    isDisabled: isDisabled
  } = props;
  const stateRef = $lJcFS$useRef(null);
  stateRef.current = columnState;
  const stringFormatter = $lJcFS$useLocalizedStringFormatter( /*@__PURE__*/dist_module_$parcel$interopDefault($ae7e9c471762b4d3$exports));
  let id = $lJcFS$useId();
  let {
    direction: direction
  } = $lJcFS$useLocale();
  let {
    keyboardProps: keyboardProps
  } = $lJcFS$useKeyboard({
    onKeyDown: e => {
      if (e.key === 'Escape' || e.key === 'Enter' || e.key === ' ' || e.key === 'Tab') {
        e.preventDefault();
        // switch focus back to the column header on anything that ends edit mode
        $lJcFS$focusSafely(triggerRef.current);
      }
    }
  });
  const columnResizeWidthRef = $lJcFS$useRef(0);
  const {
    moveProps: moveProps
  } = $lJcFS$useMove({
    onMoveStart() {
      columnResizeWidthRef.current = stateRef.current.getColumnWidth(item.key);
      stateRef.current.onColumnResizeStart(item);
    },
    onMove(e) {
      let {
        deltaX: deltaX,
        deltaY: deltaY,
        pointerType: pointerType
      } = e;
      if (direction === 'rtl') deltaX *= -1;
      if (pointerType === 'keyboard') {
        if (deltaY !== 0 && deltaX === 0) deltaX = deltaY * -1;
        deltaX *= 10;
      }
      // if moving up/down only, no need to resize
      if (deltaX !== 0) {
        columnResizeWidthRef.current += deltaX;
        stateRef.current.onColumnResize(item, columnResizeWidthRef.current);
        props.onMove(e);
      }
    },
    onMoveEnd(e) {
      let {
        pointerType: pointerType
      } = e;
      columnResizeWidthRef.current = 0;
      props.onMoveEnd(e);
      if (pointerType === 'mouse') stateRef.current.onColumnResizeEnd(item);
    }
  });
  let min = Math.floor(stateRef.current.getColumnMinWidth(item.key));
  let max = Math.floor(stateRef.current.getColumnMaxWidth(item.key));
  if (max === Infinity) max = Number.MAX_SAFE_INTEGER;
  let value = Math.floor(stateRef.current.getColumnWidth(item.key));
  let ariaProps = {
    'aria-label': props.label,
    'aria-orientation': 'horizontal',
    'aria-labelledby': `${id} ${$2140fb2337097f2d$export$37cd4213f2ad742e(state, item.key)}`,
    'aria-valuetext': stringFormatter.format('columnSize', {
      value: value
    }),
    min: min,
    max: max,
    value: value
  };
  const focusInput = $lJcFS$useCallback(() => {
    if (ref.current) $lJcFS$focusWithoutScrolling(ref.current);
  }, [ref]);
  let onChange = e => {
    let currentWidth = stateRef.current.getColumnWidth(item.key);
    let nextValue = parseFloat(e.target.value);
    if (nextValue > currentWidth) nextValue = currentWidth + 10;else nextValue = currentWidth - 10;
    stateRef.current.onColumnResize(item, nextValue);
  };
  let {
    pressProps: pressProps
  } = $lJcFS$usePress({
    onPressStart: e => {
      if (e.ctrlKey || e.altKey || e.metaKey || e.shiftKey || e.pointerType === 'keyboard') return;
      if (e.pointerType === 'virtual' && columnState.currentlyResizingColumn != null) {
        stateRef.current.onColumnResizeEnd(item);
        $lJcFS$focusSafely(triggerRef.current);
        return;
      }
      focusInput();
    },
    onPress: e => {
      if (e.pointerType === 'touch') focusInput();else if (e.pointerType !== 'virtual') $lJcFS$focusSafely(triggerRef.current);
    }
  });
  return {
    resizerProps: $lJcFS$mergeProps(keyboardProps, moveProps, pressProps),
    inputProps: $lJcFS$mergeProps({
      id: id,
      onFocus: () => {
        // useMove calls onMoveStart for every keypress, but we want resize start to only be called when we start resize mode
        // call instead during focus and blur
        stateRef.current.onColumnResizeStart(item);
        state.setKeyboardNavigationDisabled(true);
      },
      onBlur: () => {
        stateRef.current.onColumnResizeEnd(item);
        state.setKeyboardNavigationDisabled(false);
      },
      onChange: onChange,
      disabled: isDisabled
    }, ariaProps)
  };
}
function $0047e6c294ea075f$export$6fb1613bd7b28198() {
  return $e45487f8ba1cbdbf$export$d3037f5d3f3e51bf();
}

;// CONCATENATED MODULE: ../../node_modules/@react-stately/collections/dist/module.js



/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
function $c1d7fb2ec91bae71$var$Item(props) {
  return null;
}
$c1d7fb2ec91bae71$var$Item.getCollectionNode = function* getCollectionNode(props, context) {
  let {
    childItems: childItems,
    title: title,
    children: children
  } = props;
  let rendered = props.title || props.children;
  let textValue = props.textValue || (typeof rendered === "string" ? rendered : "") || props["aria-label"] || "";
  // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.
  if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning)) console.warn("<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.");
  yield {
    type: "item",
    props: props,
    rendered: rendered,
    textValue: textValue,
    "aria-label": props["aria-label"],
    hasChildNodes: $c1d7fb2ec91bae71$var$hasChildItems(props),
    *childNodes() {
      if (childItems) for (let child of childItems) yield {
        type: "item",
        value: child
      };else if (title) {
        let items = [];
        (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).Children.forEach(children, child => {
          items.push({
            type: "item",
            element: child
          });
        });
        yield* items;
      }
    }
  };
};
function $c1d7fb2ec91bae71$var$hasChildItems(props) {
  if (props.hasChildItems != null) return props.hasChildItems;
  if (props.childItems) return true;
  if (props.title && (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).Children.count(props.children) > 0) return true;
  return false;
}
// We don't want getCollectionNode to show up in the type definition
let $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 = (/* unused pure expression or super */ null && ($c1d7fb2ec91bae71$var$Item));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
function $9fc4852771d079eb$var$Section(props) {
  return null;
}
$9fc4852771d079eb$var$Section.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children,
    title: title,
    items: items
  } = props;
  yield {
    type: "section",
    props: props,
    hasChildNodes: true,
    rendered: title,
    "aria-label": props["aria-label"],
    *childNodes() {
      if (typeof children === "function") {
        if (!items) throw new Error("props.children was a function but props.items is missing");
        for (let item of items) yield {
          type: "item",
          value: item,
          renderer: children
        };
      } else {
        let items1 = [];
        (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).Children.forEach(children, child => {
          items1.push({
            type: "item",
            element: child
          });
        });
        yield* items1;
      }
    }
  };
};
// We don't want getCollectionNode to show up in the type definition
let $9fc4852771d079eb$export$6e2c8f0811a474ce = (/* unused pure expression or super */ null && ($9fc4852771d079eb$var$Section));

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */

class $eb2240fc39a57fa5$export$bf788dd355e3a401 {
  build(props, context) {
    this.context = context;
    return $eb2240fc39a57fa5$var$iterable(() => this.iterateCollection(props));
  }
  *iterateCollection(props) {
    let {
      children: children,
      items: items
    } = props;
    if (typeof children === "function") {
      if (!items) throw new Error("props.children was a function but props.items is missing");
      for (let item of props.items) yield* this.getFullNode({
        value: item
      }, {
        renderer: children
      });
    } else {
      let items1 = [];
      (0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).Children.forEach(children, child => {
        items1.push(child);
      });
      let index = 0;
      for (let item1 of items1) {
        let nodes = this.getFullNode({
          element: item1,
          index: index
        }, {});
        for (let node of nodes) {
          index++;
          yield node;
        }
      }
    }
  }
  getKey(item, partialNode, state, parentKey) {
    if (item.key != null) return item.key;
    if (partialNode.type === "cell" && partialNode.key != null) return `${parentKey}${partialNode.key}`;
    let v = partialNode.value;
    if (v != null) {
      var _v_key;
      let key = (_v_key = v.key) !== null && _v_key !== void 0 ? _v_key : v.id;
      if (key == null) throw new Error("No key found for item");
      return key;
    }
    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;
  }
  getChildState(state, partialNode) {
    return {
      renderer: partialNode.renderer || state.renderer
    };
  }
  *getFullNode(partialNode, state, parentKey, parentNode) {
    // If there's a value instead of an element on the node, and a parent renderer function is available,
    // use it to render an element for the value.
    let element = partialNode.element;
    if (!element && partialNode.value && state && state.renderer) {
      let cached = this.cache.get(partialNode.value);
      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
        cached.index = partialNode.index;
        cached.parentKey = parentNode ? parentNode.key : null;
        yield cached;
        return;
      }
      element = state.renderer(partialNode.value);
    }
    // If there's an element with a getCollectionNode function on its type, then it's a supported component.
    // Call this function to get a partial node, and recursively build a full node from there.
    if ((0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).isValidElement(element)) {
      let type = element.type;
      if (typeof type !== "function" && typeof type.getCollectionNode !== "function") {
        let name = typeof element.type === "function" ? element.type.name : element.type;
        throw new Error(`Unknown element <${name}> in collection.`);
      }
      let childNodes = type.getCollectionNode(element.props, this.context);
      let index = partialNode.index;
      let result = childNodes.next();
      while (!result.done && result.value) {
        let childNode = result.value;
        partialNode.index = index;
        let nodeKey = childNode.key;
        if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
        let nodes = this.getFullNode({
          ...childNode,
          key: nodeKey,
          index: index,
          wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)
        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);
        let children = [...nodes];
        for (let node of children) {
          // Cache the node based on its value
          node.value = childNode.value || partialNode.value;
          if (node.value) this.cache.set(node.value, node);
          // The partial node may have specified a type for the child in order to specify a constraint.
          // Verify that the full node that was built recursively matches this type.
          if (partialNode.type && node.type !== partialNode.type) throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);
          index++;
          yield node;
        }
        result = childNodes.next(children);
      }
      return;
    }
    // Ignore invalid elements
    if (partialNode.key == null) return;
    // Create full node
    let builder = this;
    let node1 = {
      type: partialNode.type,
      props: partialNode.props,
      key: partialNode.key,
      parentKey: parentNode ? parentNode.key : null,
      value: partialNode.value,
      level: parentNode ? parentNode.level + 1 : 0,
      index: partialNode.index,
      rendered: partialNode.rendered,
      textValue: partialNode.textValue,
      "aria-label": partialNode["aria-label"],
      wrapper: partialNode.wrapper,
      shouldInvalidate: partialNode.shouldInvalidate,
      hasChildNodes: partialNode.hasChildNodes,
      childNodes: $eb2240fc39a57fa5$var$iterable(function* () {
        if (!partialNode.hasChildNodes) return;
        let index = 0;
        for (let child of partialNode.childNodes()) {
          // Ensure child keys are globally unique by prepending the parent node's key
          if (child.key != null)
            // TODO: Remove this line entirely and enforce that users always provide unique keys.
            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`
            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both
            // children having a key of `abc`.
            child.key = `${node1.key}${child.key}`;
          child.index = index;
          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node1.key, node1);
          for (let node of nodes) {
            index++;
            yield node;
          }
        }
      })
    };
    yield node1;
  }
  constructor() {
    (0, _defineProperty)(this, "cache", new WeakMap());
  }
}
// Wraps an iterator function as an iterable object, and caches the results.
function $eb2240fc39a57fa5$var$iterable(iterator) {
  let cache = [];
  let iterable = null;
  return {
    *[Symbol.iterator]() {
      for (let item of cache) yield item;
      if (!iterable) iterable = iterator();
      for (let item1 of iterable) {
        cache.push(item1);
        yield item1;
      }
    }
  };
}
function $eb2240fc39a57fa5$var$compose(outer, inner) {
  if (outer && inner) return element => outer(inner(element));
  if (outer) return outer;
  if (inner) return inner;
}
function $eb2240fc39a57fa5$var$capitalize(str) {
  return str[0].toUpperCase() + str.slice(1);
}
function $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context, invalidators = []) {
  let builder = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new (0, $eb2240fc39a57fa5$export$bf788dd355e3a401)(), []);
  let prev = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  return (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let nodes = builder.build(props, context);
    prev.current = factory(nodes, prev.current);
    return prev.current;
    // Don't invalidate when any prop changes, just the two we care about.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [builder, props.children, props.items, context, ...invalidators]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const $453cc9f0df89c0a5$var$cache = new WeakMap();
function $453cc9f0df89c0a5$export$77d5aafae4e095b2(collection) {
  let count = $453cc9f0df89c0a5$var$cache.get(collection);
  if (count != null) return count;
  count = 0;
  for (let item of collection) if (item.type === "section") count += $453cc9f0df89c0a5$export$77d5aafae4e095b2(item.childNodes);else count++;
  $453cc9f0df89c0a5$var$cache.set(collection, count);
  return count;
}

;// CONCATENATED MODULE: ../../node_modules/@react-stately/selection/dist/module.js



/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $e40ea825a81a3709$export$52baac22726c72bf extends Set {
  constructor(keys, anchorKey, currentKey) {
    super(keys);
    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {
      this.anchorKey = anchorKey || keys.anchorKey;
      this.currentKey = currentKey || keys.currentKey;
    } else {
      this.anchorKey = anchorKey;
      this.currentKey = currentKey;
    }
  }
}
function $7af3f5b51489e0b5$var$equalSets(setA, setB) {
  if (setA.size !== setB.size) return false;
  for (let item of setA) {
    if (!setB.has(item)) return false;
  }
  return true;
}
function $7af3f5b51489e0b5$export$253fe78d46329472(props) {
  let {
    selectionMode = "none",
    disallowEmptySelection: disallowEmptySelection,
    allowDuplicateSelectionEvents: allowDuplicateSelectionEvents,
    selectionBehavior: selectionBehaviorProp = "toggle",
    disabledBehavior = "all"
  } = props;
  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.
  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).
  let isFocusedRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  let [, setFocused] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let focusedKeyRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let childFocusStrategyRef = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let [, setFocusedKey] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  let selectedKeysProp = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [props.selectedKeys]);
  let defaultSelectedKeys = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)()), [props.defaultSelectedKeys]);
  let [selectedKeys, setSelectedKeys] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
  let disabledKeysProp = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);
  let [selectionBehavior, setSelectionBehavior] = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(selectionBehaviorProp);
  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press
  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.
  if (selectionBehaviorProp === "replace" && selectionBehavior === "toggle" && typeof selectedKeys === "object" && selectedKeys.size === 0) setSelectionBehavior("replace");
  // If the selectionBehavior prop changes, update the state as well.
  let lastSelectionBehavior = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(selectionBehaviorProp);
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (selectionBehaviorProp !== lastSelectionBehavior.current) {
      setSelectionBehavior(selectionBehaviorProp);
      lastSelectionBehavior.current = selectionBehaviorProp;
    }
  }, [selectionBehaviorProp]);
  return {
    selectionMode: selectionMode,
    disallowEmptySelection: disallowEmptySelection,
    selectionBehavior: selectionBehavior,
    setSelectionBehavior: setSelectionBehavior,
    get isFocused() {
      return isFocusedRef.current;
    },
    setFocused(f) {
      isFocusedRef.current = f;
      setFocused(f);
    },
    get focusedKey() {
      return focusedKeyRef.current;
    },
    get childFocusStrategy() {
      return childFocusStrategyRef.current;
    },
    setFocusedKey(k, childFocusStrategy = "first") {
      focusedKeyRef.current = k;
      childFocusStrategyRef.current = childFocusStrategy;
      setFocusedKey(k);
    },
    selectedKeys: selectedKeys,
    setSelectedKeys(keys) {
      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);
    },
    disabledKeys: disabledKeysProp,
    disabledBehavior: disabledBehavior
  };
}
function $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {
  if (!selection) return defaultValue;
  return selection === "all" ? "all" : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {
  /**
  * The type of selection that is allowed in the collection.
  */
  get selectionMode() {
    return this.state.selectionMode;
  }
  /**
  * Whether the collection allows empty selection.
  */
  get disallowEmptySelection() {
    return this.state.disallowEmptySelection;
  }
  /**
  * The selection behavior for the collection.
  */
  get selectionBehavior() {
    return this.state.selectionBehavior;
  }
  /**
  * Sets the selection behavior for the collection.
  */
  setSelectionBehavior(selectionBehavior) {
    this.state.setSelectionBehavior(selectionBehavior);
  }
  /**
  * Whether the collection is currently focused.
  */
  get isFocused() {
    return this.state.isFocused;
  }
  /**
  * Sets whether the collection is focused.
  */
  setFocused(isFocused) {
    this.state.setFocused(isFocused);
  }
  /**
  * The current focused key in the collection.
  */
  get focusedKey() {
    return this.state.focusedKey;
  }
  /** Whether the first or last child of the focused key should receive focus. */
  get childFocusStrategy() {
    return this.state.childFocusStrategy;
  }
  /**
  * Sets the focused key.
  */
  setFocusedKey(key, childFocusStrategy) {
    if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);
  }
  /**
  * The currently selected keys in the collection.
  */
  get selectedKeys() {
    return this.state.selectedKeys === "all" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
  }
  /**
  * The raw selection value for the collection.
  * Either 'all' for select all, or a set of keys.
  */
  get rawSelection() {
    return this.state.selectedKeys;
  }
  /**
  * Returns whether a key is selected.
  */
  isSelected(key) {
    if (this.state.selectionMode === "none") return false;
    key = this.getKey(key);
    return this.state.selectedKeys === "all" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);
  }
  /**
  * Whether the selection is empty.
  */
  get isEmpty() {
    return this.state.selectedKeys !== "all" && this.state.selectedKeys.size === 0;
  }
  /**
  * Whether all items in the collection are selected.
  */
  get isSelectAll() {
    if (this.isEmpty) return false;
    if (this.state.selectedKeys === "all") return true;
    if (this._isSelectAll != null) return this._isSelectAll;
    let allKeys = this.getSelectAllKeys();
    let selectedKeys = this.state.selectedKeys;
    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));
    return this._isSelectAll;
  }
  get firstSelectedKey() {
    let first = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;
    }
    return first === null || first === void 0 ? void 0 : first.key;
  }
  get lastSelectedKey() {
    let last = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;
    }
    return last === null || last === void 0 ? void 0 : last.key;
  }
  get disabledKeys() {
    return this.state.disabledKeys;
  }
  get disabledBehavior() {
    return this.state.disabledBehavior;
  }
  /**
  * Extends the selection to the given key.
  */
  extendSelection(toKey) {
    if (this.selectionMode === "none") return;
    if (this.selectionMode === "single") {
      this.replaceSelection(toKey);
      return;
    }
    toKey = this.getKey(toKey);
    let selection;
    // Only select the one key if coming from a select all.
    if (this.state.selectedKeys === "all") selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([toKey], toKey, toKey);else {
      let selectedKeys = this.state.selectedKeys;
      let anchorKey = selectedKeys.anchorKey || toKey;
      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);
      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);
      for (let key1 of this.getKeyRange(toKey, anchorKey)) if (this.canSelectItem(key1)) selection.add(key1);
    }
    this.state.setSelectedKeys(selection);
  }
  getKeyRange(from, to) {
    let fromItem = this.collection.getItem(from);
    let toItem = this.collection.getItem(to);
    if (fromItem && toItem) {
      if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);
      return this.getKeyRangeInternal(to, from);
    }
    return [];
  }
  getKeyRangeInternal(from, to) {
    let keys = [];
    let key = from;
    while (key) {
      let item = this.collection.getItem(key);
      if (item && item.type === "item" || item.type === "cell" && this.allowsCellSelection) keys.push(key);
      if (key === to) return keys;
      key = this.collection.getKeyAfter(key);
    }
    return [];
  }
  getKey(key) {
    let item = this.collection.getItem(key);
    if (!item)
      // ¯\_(ツ)_/¯
      return key;
    // If cell selection is allowed, just return the key.
    if (item.type === "cell" && this.allowsCellSelection) return key;
    // Find a parent item to select
    while (item.type !== "item" && item.parentKey != null) item = this.collection.getItem(item.parentKey);
    if (!item || item.type !== "item") return null;
    return item.key;
  }
  /**
  * Toggles whether the given key is selected.
  */
  toggleSelection(key) {
    if (this.selectionMode === "none") return;
    if (this.selectionMode === "single" && !this.isSelected(key)) {
      this.replaceSelection(key);
      return;
    }
    key = this.getKey(key);
    if (key == null) return;
    let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === "all" ? this.getSelectAllKeys() : this.state.selectedKeys);
    if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {
      keys.add(key);
      keys.anchorKey = key;
      keys.currentKey = key;
    }
    if (this.disallowEmptySelection && keys.size === 0) return;
    this.state.setSelectedKeys(keys);
  }
  /**
  * Replaces the selection with only the given key.
  */
  replaceSelection(key) {
    if (this.selectionMode === "none") return;
    key = this.getKey(key);
    if (key == null) return;
    let selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([key], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();
    this.state.setSelectedKeys(selection);
  }
  /**
  * Replaces the selection with the given keys.
  */
  setSelectedKeys(keys) {
    if (this.selectionMode === "none") return;
    let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();
    for (let key of keys) {
      key = this.getKey(key);
      if (key != null) {
        selection.add(key);
        if (this.selectionMode === "single") break;
      }
    }
    this.state.setSelectedKeys(selection);
  }
  getSelectAllKeys() {
    let keys = [];
    let addKeys = key => {
      while (key) {
        if (this.canSelectItem(key)) {
          let item = this.collection.getItem(key);
          if (item.type === "item") keys.push(key);
          // Add child keys. If cell selection is allowed, then include item children too.
          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== "item")) addKeys([...item.childNodes][0].key);
        }
        key = this.collection.getKeyAfter(key);
      }
    };
    addKeys(this.collection.getFirstKey());
    return keys;
  }
  /**
  * Selects all items in the collection.
  */
  selectAll() {
    if (this.selectionMode === "multiple") this.state.setSelectedKeys("all");
  }
  /**
  * Removes all keys from the selection.
  */
  clearSelection() {
    if (!this.disallowEmptySelection && (this.state.selectedKeys === "all" || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());
  }
  /**
  * Toggles between select all and an empty selection.
  */
  toggleSelectAll() {
    if (this.isSelectAll) this.clearSelection();else this.selectAll();
  }
  select(key, e) {
    if (this.selectionMode === "none") return;
    if (this.selectionMode === "single") {
      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);
    } else if (this.selectionBehavior === "toggle" || e && (e.pointerType === "touch" || e.pointerType === "virtual"))
      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys
      this.toggleSelection(key);else this.replaceSelection(key);
  }
  /**
  * Returns whether the current selection is equal to the given selection.
  */
  isSelectionEqual(selection) {
    if (selection === this.state.selectedKeys) return true;
    // Check if the set of keys match.
    let selectedKeys = this.selectedKeys;
    if (selection.size !== selectedKeys.size) return false;
    for (let key of selection) {
      if (!selectedKeys.has(key)) return false;
    }
    for (let key1 of selectedKeys) {
      if (!selection.has(key1)) return false;
    }
    return true;
  }
  canSelectItem(key) {
    if (this.state.selectionMode === "none" || this.state.disabledKeys.has(key)) return false;
    let item = this.collection.getItem(key);
    if (!item || item.type === "cell" && !this.allowsCellSelection) return false;
    return true;
  }
  isDisabled(key) {
    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === "all";
  }
  constructor(collection, state, options) {
    this.collection = collection;
    this.state = state;
    var _options_allowsCellSelection;
    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;
    this._isSelectAll = null;
  }
}

;// CONCATENATED MODULE: ../../node_modules/@react-stately/grid/dist/module.js




/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $62967d126f3aa823$export$4007ac09ff9c68ed(props) {
  let {
    collection: collection,
    focusMode: focusMode
  } = props;
  let selectionState = (0, $7af3f5b51489e0b5$export$253fe78d46329472)(props);
  let disabledKeys = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);
  let setFocusedKey = selectionState.setFocusedKey;
  selectionState.setFocusedKey = (key, child) => {
    // If focusMode is cell and an item is focused, focus a child cell instead.
    if (focusMode === "cell" && key != null) {
      let item = collection.getItem(key);
      if ((item === null || item === void 0 ? void 0 : item.type) === "item") {
        var _children_, _children_1;
        let children = [...item.childNodes];
        if (child === "last") key = (_children_ = children[children.length - 1]) === null || _children_ === void 0 ? void 0 : _children_.key;else key = (_children_1 = children[0]) === null || _children_1 === void 0 ? void 0 : _children_1.key;
      }
    }
    setFocusedKey(key, child);
  };
  // Reset focused key if that item is deleted from the collection.
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);
  }, [collection, selectionState]);
  return {
    collection: collection,
    disabledKeys: disabledKeys,
    isKeyboardNavigationDisabled: false,
    selectionManager: new (0, $d496c0a20b6e58ec$export$6c8a5aaad13c9852)(collection, selectionState)
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
let $16805b1b18093c5f$var$_Symbol_iterator = Symbol.iterator;
class $16805b1b18093c5f$export$de3fdf6493c353d {
  *[$16805b1b18093c5f$var$_Symbol_iterator]() {
    yield* [...this.rows];
  }
  get size() {
    return [...this.rows].length;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    var _;
    return (_ = [...this.rows][0]) === null || _ === void 0 ? void 0 : _.key;
  }
  getLastKey() {
    var _rows_;
    let rows = [...this.rows];
    return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [...this.getKeys()];
    return this.getItem(keys[idx]);
  }
  constructor(opts) {
    (0, _defineProperty)(this, "keyMap", new Map());
    this.keyMap = new Map();
    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;
    this.rows = [];
    let visit = node => {
      // If the node is the same object as the previous node for the same key,
      // we can skip this node and its children. We always visit columns though,
      // because we depend on order to build the columns array.
      let prevNode = this.keyMap.get(node.key);
      if (opts.visitNode) node = opts.visitNode(node);
      this.keyMap.set(node.key, node);
      let childKeys = new Set();
      let last;
      for (let child of node.childNodes) {
        if (child.type === "cell" && child.parentKey == null)
          // if child is a cell parent key isn't already established by the collection, match child node to parent row
          child.parentKey = node.key;
        childKeys.add(child.key);
        if (last) {
          last.nextKey = child.key;
          child.prevKey = last.key;
        } else child.prevKey = null;
        visit(child);
        last = child;
      }
      if (last) last.nextKey = null;
      // Remove deleted nodes and their children from the key map
      if (prevNode) {
        for (let child1 of prevNode.childNodes) if (!childKeys.has(child1.key)) remove(child1);
      }
    };
    let remove = node => {
      this.keyMap.delete(node.key);
      for (let child of node.childNodes) if (this.keyMap.get(child.key) === child) remove(child);
    };
    let last;
    opts.items.forEach((node, i) => {
      let rowNode = {
        level: 0,
        key: "row-" + i,
        type: "row",
        value: undefined,
        hasChildNodes: true,
        childNodes: [...node.childNodes],
        rendered: undefined,
        textValue: undefined,
        ...node,
        index: i
      };
      if (last) {
        last.nextKey = rowNode.key;
        rowNode.prevKey = last.key;
      } else rowNode.prevKey = null;
      this.rows.push(rowNode);
      visit(rowNode);
      last = rowNode;
    });
    if (last) last.nextKey = null;
  }
}

;// CONCATENATED MODULE: ../../node_modules/@react-stately/table/dist/module.js



function $30561577df230a30$export$f61abf052f87399f(widths) {
  return Array.from(widths).map(e => e[1]).reduce((acc, cur) => acc + cur, 0);
}
function $30561577df230a30$export$1994a077b98ee0d5(width) {
  return width != null && (!isNaN(width) || String(width).match(/^(\d+)(?=%$)/) !== null);
}
function $30561577df230a30$var$parseFractionalUnit(width) {
  if (!width) return 1;
  let match = width.match(/^(\d+)(?=fr$)/);
  // if width is the incorrect format, just deafult it to a 1fr
  if (!match) {
    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, 'defaulting to \'1fr\'');
    return 1;
  }
  return parseInt(match[0], 10);
}
function $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth) {
  if (typeof width === 'string') {
    let match = width.match(/^(\d+)(?=%$)/);
    if (!match) throw new Error('Only percentages or numbers are supported for static column widths');
    return tableWidth * (parseInt(match[0], 10) / 100);
  }
  return width;
}
function $30561577df230a30$export$59185c62a7544aa0(maxWidth, tableWidth) {
  return maxWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;
}
function $30561577df230a30$export$f556054ce4358701(minWidth, tableWidth) {
  return minWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(minWidth, tableWidth) : 75;
}
function $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth) {
  let fractions = dynamicColumns.reduce((sum, column) => sum + $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth), 0);
  let columns = dynamicColumns.map((column, index) => {
    const targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;
    const delta = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth) - targetWidth, targetWidth - $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth));
    return {
      ...column,
      index: index,
      delta: delta
    };
  });
  return columns;
}
function $30561577df230a30$var$findDynamicColumnWidths(dynamicColumns, availableSpace, tableWidth) {
  let fractions = dynamicColumns.reduce((sum, col) => sum + $30561577df230a30$var$parseFractionalUnit(col.props.defaultWidth), 0);
  const columns = dynamicColumns.map(column => {
    const targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;
    let width = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth), Math.min(Math.floor(targetWidth), $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth)));
    column.calculatedWidth = width;
    availableSpace -= width;
    fractions -= $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth);
    return column;
  });
  return columns;
}
function $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, availableSpace, tableWidth) {
  let columns = $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);
  columns.sort((a, b) => b.delta - a.delta);
  columns = $30561577df230a30$var$findDynamicColumnWidths(columns, availableSpace, tableWidth);
  columns.sort((a, b) => a.index - b.index);
  return columns;
}
function $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {
  const {
    getDefaultWidth: getDefaultWidth,
    tableWidth: defaultTableWidth = null
  } = props;
  const {
    columns: columns1
  } = state;
  const columnsRef = $1BfjW$useRef([]);
  const tableWidth = $1BfjW$useRef(defaultTableWidth);
  const isResizing = $1BfjW$useRef(null);
  const startResizeContentWidth = $1BfjW$useRef();
  const [columnWidths, setColumnWidths] = $1BfjW$useState(new Map(columns1.map(col => [col.key, 0])));
  const columnWidthsRef = $1BfjW$useRef(columnWidths);
  const affectedColumnWidthsRef = $1BfjW$useRef([]);
  const [resizedColumns, setResizedColumns] = $1BfjW$useState(new Set());
  const resizedColumnsRef = $1BfjW$useRef(resizedColumns);
  const [currentlyResizingColumn, setCurrentlyResizingColumn] = $1BfjW$useState(null);
  function setColumnWidthsForRef(newWidths) {
    columnWidthsRef.current = newWidths;
    // new map so that change detection is triggered
    setColumnWidths(newWidths);
  }
  /*
  returns the resolved column width in this order:
  previously calculated width -> controlled width prop -> uncontrolled defaultWidth prop -> dev assigned width -> default dynamic width
  */
  let getResolvedColumnWidth = $1BfjW$useCallback(column => {
    let columnProps = column.props;
    var _width, ref, ref1;
    return (resizedColumns === null || resizedColumns === void 0 ? void 0 : resizedColumns.has(column.key)) ? columnWidthsRef.current.get(column.key) : (ref1 = (ref = (_width = columnProps.width) !== null && _width !== void 0 ? _width : columnProps.defaultWidth) !== null && ref !== void 0 ? ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(column.props)) !== null && ref1 !== void 0 ? ref1 : '1fr';
  }, [getDefaultWidth, resizedColumns]);
  let getStaticAndDynamicColumns = $1BfjW$useCallback(columns => columns.reduce((acc, column) => {
    let width = getResolvedColumnWidth(column);
    return $30561577df230a30$export$1994a077b98ee0d5(width) ? {
      ...acc,
      staticColumns: [...acc.staticColumns, column]
    } : {
      ...acc,
      dynamicColumns: [...acc.dynamicColumns, column]
    };
  }, {
    staticColumns: [],
    dynamicColumns: []
  }), [getResolvedColumnWidth]);
  let buildColumnWidths = $1BfjW$useCallback((affectedColumns, availableSpace) => {
    const widths = new Map();
    let remainingSpace = availableSpace;
    const {
      staticColumns: staticColumns,
      dynamicColumns: dynamicColumns
    } = getStaticAndDynamicColumns(affectedColumns);
    staticColumns.forEach(column => {
      let width = getResolvedColumnWidth(column);
      let w = $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth.current);
      widths.set(column.key, w);
      remainingSpace -= w;
    });
    // dynamic columns
    if (dynamicColumns.length > 0) {
      const newColumnWidths = $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, remainingSpace, tableWidth.current);
      for (let column of newColumnWidths) widths.set(column.key, column.calculatedWidth);
    }
    return widths;
  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);
  const prevColKeys = columnsRef.current.map(col => col.key);
  const colKeys = columns1.map(col => col.key);
  // if the columns change, need to rebuild widths.
  if (prevColKeys.length !== colKeys.length || !colKeys.every((col, i) => col === prevColKeys[i])) {
    columnsRef.current = columns1;
    const widths = buildColumnWidths(columns1, tableWidth.current);
    setColumnWidthsForRef(widths);
  }
  function setTableWidth(width) {
    if (width && width !== tableWidth.current) {
      tableWidth.current = width;
      if (!isResizing.current) {
        const widths = buildColumnWidths(columns1, width);
        setColumnWidthsForRef(widths);
      }
    }
  }
  function onColumnResizeStart(column) {
    setCurrentlyResizingColumn(column.key);
    isResizing.current = true;
    startResizeContentWidth.current = $30561577df230a30$export$f61abf052f87399f(columnWidthsRef.current);
  }
  function onColumnResize(column, width) {
    let widthsObj = resizeColumn(column, width);
    affectedColumnWidthsRef.current = widthsObj;
    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function onColumnResizeEnd(column) {
    props.onColumnResizeEnd && isResizing.current && props.onColumnResizeEnd(affectedColumnWidthsRef.current);
    setCurrentlyResizingColumn(null);
    isResizing.current = false;
    affectedColumnWidthsRef.current = [];
    let widths = new Map(columnWidthsRef.current);
    setColumnWidthsForRef(widths);
  }
  function resizeColumn(column1, newWidth) {
    let boundedWidth = Math.max($30561577df230a30$export$f556054ce4358701(column1.props.minWidth, tableWidth.current), Math.min(Math.floor(newWidth), $30561577df230a30$export$59185c62a7544aa0(column1.props.maxWidth, tableWidth.current)));
    // copy the columnWidths map and set the new width for the column being resized
    let widths = new Map(columnWidthsRef.current);
    widths.set(column1.key, boundedWidth);
    // keep track of all columns that have been sized
    resizedColumnsRef.current.add(column1.key);
    setResizedColumns(resizedColumnsRef.current);
    // get the columns affected by resize and remaining space
    const resizeIndex = columnsRef.current.findIndex(col => col.key === column1.key);
    let affectedColumns = columnsRef.current.slice(resizeIndex + 1);
    // we only care about the columns that CAN be resized, we ignore static columns.
    let {
      dynamicColumns: dynamicColumns
    } = getStaticAndDynamicColumns(affectedColumns);
    // available space for affected columns
    let availableSpace = columnsRef.current.reduce((acc, column, index) => {
      if (index <= resizeIndex || $30561577df230a30$export$1994a077b98ee0d5(getResolvedColumnWidth(column))) return acc - widths.get(column.key);
      return acc;
    }, tableWidth.current);
    // merge the unaffected column widths and the recalculated column widths
    let recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);
    widths = new Map([...widths, ...recalculatedColumnWidths]);
    setColumnWidthsForRef(widths);
    /*
    when getting recalculated columns above, the column being resized is not considered "recalculated"
    so we need to add it to the list of affected columns
    */
    let allAffectedColumns = [[column1.key, boundedWidth], ...recalculatedColumnWidths].map(([key, width]) => ({
      key: key,
      width: width
    }));
    return allAffectedColumns;
  }
  var ref2;
  // This function is regenerated whenever columnWidthsRef.current changes in order to get the new correct ref value.
  let getColumnWidth = $1BfjW$useCallback(key => (ref2 = columnWidthsRef.current.get(key)) !== null && ref2 !== void 0 ? ref2 : 0, [columnWidthsRef.current]);
  let getColumnMinWidth = $1BfjW$useCallback(key => {
    const columnIndex = columns1.findIndex(col => col.key === key);
    if (columnIndex === -1) return;
    return $30561577df230a30$export$f556054ce4358701(columns1[columnIndex].props.minWidth, tableWidth.current);
  }, [columns1]);
  let getColumnMaxWidth = $1BfjW$useCallback(key => {
    const columnIndex = columns1.findIndex(col => col.key === key);
    if (columnIndex === -1) return;
    return $30561577df230a30$export$59185c62a7544aa0(columns1[columnIndex].props.maxWidth, tableWidth.current);
  }, [columns1]);
  return {
    columnWidths: columnWidthsRef,
    setTableWidth: setTableWidth,
    onColumnResize: onColumnResize,
    onColumnResizeStart: onColumnResizeStart,
    onColumnResizeEnd: onColumnResizeEnd,
    getColumnWidth: getColumnWidth,
    getColumnMinWidth: getColumnMinWidth,
    getColumnMaxWidth: getColumnMaxWidth,
    currentlyResizingColumn: currentlyResizingColumn
  };
}
const $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);
function $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {
  let columns = [];
  let seen = new Map();
  for (let column of columnNodes) {
    let parentKey = column.parentKey;
    let col = [column];
    while (parentKey) {
      let parent = keyMap.get(parentKey);
      // If we've already seen this parent, than it is shared
      // with a previous column. If the current column is taller
      // than the previous column, than we need to shift the parent
      // in the previous column so it's level with the current column.
      if (seen.has(parent)) {
        parent.colspan++;
        let {
          column: column,
          index: index
        } = seen.get(parent);
        if (index > col.length) break;
        for (let i = index; i < col.length; i++) column.splice(i, 0, null);
        // Adjust shifted indices
        for (let i1 = col.length; i1 < column.length; i1++) if (column[i1] && seen.has(column[i1])) seen.get(column[i1]).index = i1;
      } else {
        parent.colspan = 1;
        col.push(parent);
        seen.set(parent, {
          column: col,
          index: col.length - 1
        });
      }
      parentKey = parent.parentKey;
    }
    columns.push(col);
    column.index = columns.length - 1;
  }
  let maxLength = Math.max(...columns.map(c => c.length));
  let headerRows = Array(maxLength).fill(0).map(() => []);
  // Convert columns into rows.
  let colIndex = 0;
  for (let column1 of columns) {
    let i = maxLength - 1;
    for (let item of column1) {
      if (item) {
        // Fill the space up until the current column with a placeholder
        let row = headerRows[i];
        let rowLength = row.reduce((p, c) => p + c.colspan, 0);
        if (rowLength < colIndex) {
          let placeholder = {
            type: 'placeholder',
            key: 'placeholder-' + item.key,
            colspan: colIndex - rowLength,
            index: rowLength,
            value: null,
            rendered: null,
            level: i,
            hasChildNodes: false,
            childNodes: [],
            textValue: null
          };
          if (row.length > 0) {
            row[row.length - 1].nextKey = placeholder.key;
            placeholder.prevKey = row[row.length - 1].key;
          }
          row.push(placeholder);
        }
        if (row.length > 0) {
          row[row.length - 1].nextKey = item.key;
          item.prevKey = row[row.length - 1].key;
        }
        item.level = i;
        item.colIndex = colIndex;
        row.push(item);
      }
      i--;
    }
    colIndex++;
  }
  // Add placeholders at the end of each row that is shorter than the maximum
  let i = 0;
  for (let row1 of headerRows) {
    let rowLength = row1.reduce((p, c) => p + c.colspan, 0);
    if (rowLength < columnNodes.length) {
      let placeholder = {
        type: 'placeholder',
        key: 'placeholder-' + row1[row1.length - 1].key,
        colspan: columnNodes.length - rowLength,
        index: rowLength,
        value: null,
        rendered: null,
        level: i,
        hasChildNodes: false,
        childNodes: [],
        textValue: null,
        prevKey: row1[row1.length - 1].key
      };
      row1.push(placeholder);
    }
    i++;
  }
  return headerRows.map((childNodes, index) => {
    let row = {
      type: 'headerrow',
      key: 'headerrow-' + index,
      index: index,
      value: null,
      rendered: null,
      level: 0,
      hasChildNodes: true,
      childNodes: childNodes,
      textValue: null
    };
    return row;
  });
}
var tmp = Symbol.iterator;
class $788781baa30117fa$export$596e1b2e2cf93690 extends $16805b1b18093c5f$export$de3fdf6493c353d {
  *[tmp]() {
    yield* this.body.childNodes;
  }
  get size() {
    return [...this.body.childNodes].length;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    var ref;
    return (ref = [...this.body.childNodes][0]) === null || ref === void 0 ? void 0 : ref.key;
  }
  getLastKey() {
    var ref;
    let rows = [...this.body.childNodes];
    return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [...this.getKeys()];
    return this.getItem(keys[idx]);
  }
  constructor(nodes, prev, opts) {
    let rowHeaderColumnKeys = new Set();
    let body;
    let columns = [];
    // Add cell for selection checkboxes if needed.
    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {
      let rowHeaderColumn = {
        type: 'column',
        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,
        value: null,
        textValue: '',
        level: 0,
        index: 0,
        hasChildNodes: false,
        rendered: null,
        childNodes: [],
        props: {
          isSelectionCell: true
        }
      };
      columns.unshift(rowHeaderColumn);
    }
    let rows = [];
    let columnKeyMap = new Map();
    let visit = node => {
      switch (node.type) {
        case 'body':
          body = node;
          break;
        case 'column':
          columnKeyMap.set(node.key, node);
          if (!node.hasChildNodes) {
            columns.push(node);
            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);
          }
          break;
        case 'item':
          rows.push(node);
          return;
        // do not go into childNodes
      }

      for (let child of node.childNodes) visit(child);
    };
    for (let node1 of nodes) visit(node1);
    let headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);
    headerRows.forEach((row, i) => rows.splice(i, 0, row));
    super({
      columnCount: columns.length,
      items: rows,
      visitNode: node => {
        node.column = columns[node.index];
        return node;
      }
    });
    this.columns = columns;
    this.rowHeaderColumnKeys = rowHeaderColumnKeys;
    this.body = body;
    this.headerRows = headerRows;
    // Default row header column to the first one.
    if (this.rowHeaderColumnKeys.size === 0) this.rowHeaderColumnKeys.add(this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);
  }
}
const $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {
  ascending: 'descending',
  descending: 'ascending'
};
function $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {
  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let {
    selectionMode = 'none'
  } = props;
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',
    selectionMode: selectionMode,
    columns: []
  }), [props.children, props.showSelectionCheckboxes, selectionMode]);
  let collection = $7613b1592d41b092$export$6cd28814d92fa9c9(props, (nodes, prev) => new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context), context);
  let {
    disabledKeys: disabledKeys,
    selectionManager: selectionManager
  } = $62967d126f3aa823$export$4007ac09ff9c68ed({
    ...props,
    collection: collection
  });
  return {
    collection: collection,
    disabledKeys: disabledKeys,
    selectionManager: selectionManager,
    showSelectionCheckboxes: props.showSelectionCheckboxes || false,
    sortDescriptor: props.sortDescriptor,
    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,
    setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,
    sort(columnKey, direction) {
      var ref;
      props.onSortChange({
        column: columnKey,
        direction: direction !== null && direction !== void 0 ? direction : ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'
      });
    }
  };
}
function $312ae3b56a94a86e$var$TableHeader(props) {
  return null;
}
$312ae3b56a94a86e$var$TableHeader.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children,
    columns: columns
  } = props;
  if (typeof children === 'function') {
    if (!columns) throw new Error('props.children was a function but props.columns is missing');
    for (let column of columns) yield {
      type: 'column',
      value: column,
      renderer: children
    };
  } else {
    let columns = [];
    external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, column => {
      columns.push({
        type: 'column',
        element: column
      });
    });
    yield* columns;
  }
};
/**
 * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined
 * as children, or generated dynamically using a function based on the data passed to the `columns` prop.
 */ // We don't want getCollectionNode to show up in the type definition
let $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;
function $4ae5314bf50db1a3$var$TableBody(props) {
  return null;
}
$4ae5314bf50db1a3$var$TableBody.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children,
    items: items1
  } = props;
  yield {
    type: 'body',
    hasChildNodes: true,
    props: props,
    *childNodes() {
      if (typeof children === 'function') {
        if (!items1) throw new Error('props.children was a function but props.items is missing');
        for (let item of items1) yield {
          type: 'item',
          value: item,
          renderer: children
        };
      } else {
        let items = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, item => {
          items.push({
            type: 'item',
            element: item
          });
        });
        yield* items;
      }
    }
  };
};
/**
 * A TableBody is a container for the Row elements of a Table. Rows can be statically defined
 * as children, or generated dynamically using a function based on the data passed to the `items` prop.
 */ // We don't want getCollectionNode to show up in the type definition
let $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;
function $1cd244557c2f97d5$var$Column(props) {
  return null;
}
$1cd244557c2f97d5$var$Column.getCollectionNode = function* getCollectionNode(props, context1) {
  let {
    title: title,
    children: children,
    childColumns: childColumns1
  } = props;
  let rendered = title || children;
  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];
  let fullNodes = yield {
    type: 'column',
    hasChildNodes: !!childColumns1 || title && external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) > 0,
    rendered: rendered,
    textValue: textValue,
    props: props,
    *childNodes() {
      if (childColumns1) for (let child1 of childColumns1) yield {
        type: 'column',
        value: child1
      };else if (title) {
        let childColumns = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, child => {
          childColumns.push({
            type: 'column',
            element: child
          });
        });
        yield* childColumns;
      }
    },
    shouldInvalidate(newContext) {
      // This is a bit of a hack, but it works.
      // If this method is called, then there's a cached version of this node available.
      // But, we need to keep the list of columns in the new context up to date.
      updateContext(newContext);
      return false;
    }
  };
  let updateContext = context => {
    // register leaf columns on the context so that <Row> can access them
    for (let node of fullNodes) if (!node.hasChildNodes) context.columns.push(node);
  };
  updateContext(context1);
};
/**
 * A Column represents a field of each item within a Table. Columns may also contain nested
 * Column elements to represent column groups. Nested columns can be statically defined as
 * children, or dynamically generated using a function based on the `childColumns` prop.
 */ // We don't want getCollectionNode to show up in the type definition
let $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;
function $70d70eb16ea48428$var$Row(props) {
  return null;
}
$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {
  let {
    children: children,
    textValue: textValue
  } = props;
  yield {
    type: 'item',
    props: props,
    textValue: textValue,
    'aria-label': props['aria-label'],
    hasChildNodes: true,
    *childNodes() {
      // Process cells first
      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') yield {
        type: 'cell',
        key: 'header',
        props: {
          isSelectionCell: true
        }
      };
      if (typeof children === 'function') for (let column of context.columns) yield {
        type: 'cell',
        element: children(column.key),
        key: column.key // this is combined with the row key by CollectionBuilder
      };else {
        let cells = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, cell => {
          cells.push({
            type: 'cell',
            element: cell
          });
        });
        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);
        yield* cells;
      }
    },
    shouldInvalidate(newContext) {
      // Invalidate all rows if the columns changed.
      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;
    }
  };
};
/**
 * A Row represents a single item in a Table and contains Cell elements for each column.
 * Cells can be statically defined as children, or generated dynamically using a function
 * based on the columns defined in the TableHeader.
 */ // We don't want getCollectionNode to show up in the type definition
let $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;
function $941d1d9a6a28982a$var$Cell(props) {
  return null;
}
$941d1d9a6a28982a$var$Cell.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children
  } = props;
  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';
  yield {
    type: 'cell',
    props: props,
    rendered: children,
    textValue: textValue,
    'aria-label': props['aria-label'],
    hasChildNodes: false
  };
};
/**
 * A Cell represents the value of a single Column within a Table Row.
 */ // We don't want getCollectionNode to show up in the type definition
let $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;

;// CONCATENATED MODULE: ./src/table/table.styles.ts


const StyledTableHeaderRow = styled("tr", {
  ov: "visible"
});
const StyledTableColumnHeader = styled("th", {
  height: "$14",
  cursor: "default",
  bg: "$accents0",
  color: "$accents7",
  fontSize: "$xs",
  textAlign: "left",
  position: "relative",
  "@motion": {
    transition: "none"
  },
  "&:first-child": {
    pl: "$8",
    btlr: "$md",
    bblr: "$md"
  },
  "&:last-child": {
    pr: "$8",
    btrr: "$md",
    bbrr: "$md"
  },
  variants: {
    align: {
      start: {
        textAlign: "left"
      },
      center: {
        textAlign: "center"
      },
      end: {
        textAlign: "right"
      }
    },
    animated: {
      false: {
        transition: "none"
      }
    },
    allowsSorting: {
      true: {
        transition: "background 0.25s ease 0s, color 0.25s ease 0s",
        cursor: "pointer",
        "@motion": {
          transition: "none"
        },
        "&:hover": {
          color: "$accents8",
          bg: "$accents1"
        }
      }
    }
  },
  defaultVariants: {
    align: "left",
    animated: true
  },
  compoundVariants: [
  // !animated & allowsSorting
  {
    animated: false,
    allowsSorting: true,
    css: {
      transition: "none"
    }
  }]
}, cssFocusVisible);
const StyledTableHeaderCell = styled(StyledTableColumnHeader, cssFocusVisible);
const StyledTableFooter = styled("tfoot", {
  height: "$14",
  variants: {
    align: {
      start: {
        textAlign: "left"
      },
      center: {
        textAlign: "center"
      },
      end: {
        textAlign: "right"
      }
    }
  },
  defaultVariants: {
    align: "right"
  }
});
const StyledBaseTableCell = styled("td", {});
const StyledTableCell = styled(StyledBaseTableCell, {
  position: "relative",
  userSelect: "none",
  cursor: "default",
  py: "$5",
  pr: "$5",
  zIndex: "$2",
  ov: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis",
  "&:first-child": {
    pl: "$8"
  },
  "&:last-child": {
    pr: "$8"
  },
  "&:before": {
    zIndex: "-$1",
    transition: "background 0.25s ease 0s, opacity 0.25s ease 0s",
    content: '""',
    position: "absolute",
    size: "100%",
    top: 0,
    left: 0,
    opacity: 0,
    transform: "translateZ(0)",
    backfaceVisibility: "hidden"
  },
  variants: {
    align: {
      start: {
        textAlign: "left"
      },
      center: {
        textAlign: "center"
      },
      end: {
        textAlign: "right"
      }
    },
    isStatic: {
      true: {
        cursor: "text",
        userSelect: "text"
      }
    }
  }
}, cssFocusVisible);
const StyledTableRow = styled("tr", {
  ov: "visible",
  color: "$text",
  variants: {
    isDisabled: {
      true: {
        color: "$accents3",
        pointerEvents: "none",
        cursor: "not-allowed"
      }
    },
    isSelected: {
      true: {
        color: "$$tableRowTextColor",
        [`& ${StyledTableCell}:before`]: {
          opacity: 1,
          bg: "$$tableRowColor"
        }
      }
    }
  }
}, cssFocusVisible);
const StyledTableRowGroup = styled("thead", {
  variants: {
    isFixed: {
      true: {
        display: "table",
        width: "100%",
        tableLayout: "fixed"
      }
    },
    isInfinityScroll: {
      true: {
        display: "block",
        height: "100%",
        overflow: "auto",
        pb: "$10",
        [`& ${StyledTableRow}`]: {
          display: "table",
          width: "100%",
          tableLayout: "fixed"
        }
      }
    }
  },
  defaultVariants: {
    isInfinityScroll: false
  }
});
const StyledTableLoadingRow = styled("tr", {
  width: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  height: "calc(100% - $space$14)",
  variants: {
    isAtEnd: {
      true: {
        height: "$space$18"
      }
    },
    isAbsolute: {
      true: {
        position: "absolute",
        left: "0",
        top: "$10"
      }
    }
  }
});
const StyledTable = styled("table", {
  borderCollapse: "separate",
  borderSpacing: 0,
  width: "100%",
  p: "$md $sm",
  "@motion": {
    [`& ${StyledTableCell}:before`]: {
      transition: "none"
    }
  },
  variants: {
    animated: {
      false: {
        [`& ${StyledTableCell}:before`]: {
          transition: "none"
        }
      }
    },
    color: {
      primary: {
        $$tableRowColor: "$colors$primaryLight",
        $$tableRowTextColor: "$colors$primaryLightContrast"
      },
      secondary: {
        $$tableRowColor: "$colors$secondaryLight",
        $$tableRowTextColor: "$colors$secondaryLightContrast"
      },
      success: {
        $$tableRowColor: "$colors$successLight",
        $$tableRowTextColor: "$colors$successLightContrast"
      },
      warning: {
        $$tableRowColor: "$colors$warningLight",
        $$tableRowTextColor: "$colors$warningLightContrast"
      },
      error: {
        $$tableRowColor: "$colors$errorLight",
        $$tableRowTextColor: "$colors$errorLightContrast"
      }
    },
    striped: {
      true: {
        [`& ${StyledTableRow}[aria-selected=false]:nth-child(even)`]: {
          [`& ${StyledTableCell}`]: {
            bg: "$accents0"
          }
        },
        [`& ${StyledTableRow}:nth-child(even)`]: {
          [`& ${StyledTableCell}:first-child`]: {
            br: "$lg 0 0 $lg"
          },
          [`& ${StyledTableCell}:last-child`]: {
            br: "0 $lg $lg 0"
          }
        }
      }
    },
    sticked: {
      true: {
        p: 0,
        [`& ${StyledTableColumnHeader}:first-child`]: {
          br: "$lg 0 0 0"
        },
        [`& ${StyledTableColumnHeader}:last-child`]: {
          br: "0 $lg 0 0"
        }
      }
    },
    lineWeight: {
      light: {
        $$tableLineWeight: "$borderWeights$light"
      },
      normal: {
        $$tableLineWeight: "$borderWeights$normal"
      },
      bold: {
        $$tableLineWeight: "$borderWeights$bold"
      },
      extrabold: {
        $$tableLineWeight: "$borderWeights$extrabold"
      },
      black: {
        $$tableLineWeight: "$borderWeights$black"
      }
    },
    headerLined: {
      true: {
        [`& ${StyledTableColumnHeader}`]: {
          position: "relative",
          bg: "transparent",
          "&:after": {
            content: "",
            position: "absolute",
            left: 0,
            right: 0,
            bottom: 0,
            height: "calc($$tableLineWeight * 1.5)",
            bg: "$accents1"
          },
          "&:first-child": {
            ml: "$12",
            br: "0",
            "&:after": {
              left: "$space$md"
            }
          },
          "&:last-child": {
            br: "0",
            "&:after": {
              right: "$space$md"
            }
          }
        }
      }
    },
    lined: {
      true: {
        [`& ${StyledTableRow}:not(:last-child)`]: {
          position: "relative",
          [`& ${StyledTableCell}:after`]: {
            content: "",
            position: "absolute",
            bottom: 0,
            left: 0,
            right: 0,
            height: "$$tableLineWeight",
            bg: "$border"
          },
          [`& ${StyledTableCell}:first-child`]: {
            "&:after": {
              left: "$space$md"
            }
          },
          [`& ${StyledTableCell}:last-child`]: {
            "&:after": {
              right: "$space$md"
            }
          }
        },
        [`& ${StyledTableRow}[aria-selected=true]:not(last-child)`]: {
          [`& ${StyledTableCell}:after`]: {
            bg: "$$tableRowTextColor",
            opacity: 0.3
          }
        }
      }
    },
    fixed: {
      true: {
        tableLayout: "fixed"
      }
    },
    hoverable: {
      true: {
        [`& ${StyledTableCell}:first-child`]: {
          br: "$md 0 0 $md"
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: "0 $md $md 0"
        },
        [`& ${StyledTableRow}`]: {
          cursor: "pointer"
        },
        [`& ${StyledTableRow}[aria-selected=false]`]: {
          "&:hover": {
            [`& ${StyledTableCell}:before`]: {
              opacity: 1,
              bg: "$accents0"
            }
          }
        },
        [`& ${StyledTableRow}[aria-selected=true]`]: {
          "&:hover": {
            [`& ${StyledTableCell}:before`]: {
              opacity: 0.8
            }
          }
        }
      }
    },
    isMultiple: {
      true: {}
    },
    hasPagination: {
      true: {}
    },
    shadow: {
      true: {}
    },
    compact: {
      true: {
        [`& ${StyledTableCell}`]: {
          py: "$1"
        },
        [`& ${StyledTableColumnHeader}`]: {
          height: "$12",
          "&:first-child": {
            br: "$sm 0 0 $sm"
          },
          "&:last-child": {
            br: "0 $sm $sm 0"
          }
        }
      }
    }
  },
  compoundVariants: [
  // isMultiple && hoverable
  {
    isMultiple: true,
    hoverable: true,
    css: {
      [`& ${StyledTableRow}:not(:first-child):not(:last-child)`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: 0
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: 0
        }
      },
      [`& ${StyledTableRow}:first-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: "$md 0 0 0"
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: "0 $md 0 0"
        }
      },
      [`& ${StyledTableRow}:last-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: "0 0 0 $md"
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: "0 0 $md 0"
        }
      }
    }
  },
  // isMultiple && hoverable && sticked
  {
    isMultiple: true,
    hoverable: true,
    sticked: true,
    css: {
      [`& ${StyledTableRow}:first-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: "0"
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: "0"
        }
      }
    }
  },
  // compact && shadow
  {
    compact: true,
    shadow: true,
    css: {
      p: "$md $sm"
    }
  },
  // compact && sticked
  {
    compact: true,
    sticked: true,
    css: {
      p: 0
    }
  },
  // sticked && !isMultiple && hoverable && !hasPagination
  {
    sticked: true,
    isMultiple: false,
    hoverable: true,
    hasPagination: false,
    css: {
      [`& ${StyledTableRow}:not(:last-child)`]: {
        [`& ${StyledTableCell}`]: {
          br: "0"
        }
      },
      [`& ${StyledTableRow}:last-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: "0 0 0 $md"
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: "0 0 $md 0"
        }
      }
    }
  },
  // sticked && !isMultiple && hoverable && hasPagination
  {
    sticked: true,
    isMultiple: false,
    hoverable: true,
    hasPagination: true,
    css: {
      [`& ${StyledTableRow}`]: {
        [`& ${StyledTableCell}`]: {
          br: "0"
        }
      }
    }
  },
  // sticked && hasPagination
  {
    sticked: true,
    hasPagination: true,
    css: {
      pb: "$5"
    }
  },
  // sticked && hasPagination && isMultiple && hoverable
  {
    sticked: true,
    hasPagination: true,
    isMultiple: true,
    hoverable: true,
    css: {
      [`& ${StyledTableRow}:last-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: "0"
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: "0"
        }
      }
    }
  }],
  defaultVariants: {
    sticked: false,
    color: "primary",
    lineWeight: "light"
  }
});
const StyledTableContainer = styled("div", {
  display: "flex",
  flexDirection: "column",
  br: "$xl",
  overflowX: "auto",
  overflowY: "hidden",
  variants: {
    shadow: {
      true: {
        bs: "$md"
      }
    },
    bordered: {
      true: {
        borderStyle: "solid",
        borderColor: "$border"
      },
      false: {
        bw: 0
      }
    },
    borderWeight: {
      light: {
        bw: "$light"
      },
      normal: {
        bw: "$normal"
      },
      bold: {
        bw: "$bold"
      },
      extrabold: {
        bw: "$extrabold"
      },
      black: {
        bw: "$black"
      }
    }
  },
  defaultVariants: {
    shadow: true,
    borderWeight: "normal"
  }
});
;// CONCATENATED MODULE: ./src/table/table-row-group.tsx
var table_row_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-row-group.tsx";






const table_row_group_defaultProps = {
  as: "thead"
};
const TableRowGroup = ({
  children,
  ...props
}) => {
  const {
    rowGroupProps
  } = $0047e6c294ea075f$export$6fb1613bd7b28198();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableRowGroup, {
    className: clsx("nextui-table-row-group", props.className),
    ...props,
    ...rowGroupProps,
    children: children
  }, void 0, false, {
    fileName: table_row_group_jsxFileName,
    lineNumber: 31,
    columnNumber: 5
  }, undefined);
};
/* harmony default export */ const table_row_group = (with_defaults(TableRowGroup, table_row_group_defaultProps));
;// CONCATENATED MODULE: ./src/table/table-sort-icon.tsx
var table_sort_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-sort-icon.tsx";



const StyledSortIcon = styled("svg", {
  opacity: 0,
  transition: "$default",
  path: {
    fill: "$$tableRowTextColor"
  },
  variants: {
    visible: {
      true: {
        opacity: 1
      }
    },
    ascending: {
      true: {
        transform: "rotate(180deg)"
      }
    }
  }
});
const ICON_SIZE = 22;
const TableSortIcon = props => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSortIcon, {
  "aria-hidden": "true",
  className: "nextui-table-sort-icon",
  fill: "none",
  focusable: "false",
  height: ICON_SIZE,
  role: "presentation",
  viewBox: "0 0 24 24",
  width: ICON_SIZE,
  xmlns: "http://www.w3.org/2000/svg",
  ...props,
  children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
    d: "M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM16.06 11.27L12.53 14.8C12.38 14.95 12.19 15.02 12 15.02C11.81 15.02 11.62 14.95 11.47 14.8L7.94 11.27C7.65 10.98 7.65 10.5 7.94 10.21C8.23 9.92 8.71 9.92 9 10.21L12 13.21L15 10.21C15.29 9.92 15.77 9.92 16.06 10.21C16.35 10.5 16.35 10.97 16.06 11.27Z"
  }, void 0, false, {
    fileName: table_sort_icon_jsxFileName,
    lineNumber: 46,
    columnNumber: 5
  }, undefined)
}, void 0, false, {
  fileName: table_sort_icon_jsxFileName,
  lineNumber: 34,
  columnNumber: 3
}, undefined);
/* harmony default export */ const table_sort_icon = (TableSortIcon);
;// CONCATENATED MODULE: ./src/table/table-column-header.tsx
var table_column_header_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-column-header.tsx";









const TableColumnHeader = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  column,
  state,
  ...props
}, ref) => {
  var _state$sortDescriptor, _state$sortDescriptor2;
  const tableColumnHeaderRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableColumnHeaderRef == null ? void 0 : tableColumnHeaderRef.current);
  const {
    columnHeaderProps
  } = $f329116d8ad0aba0$export$9514819a8c81e960({
    node: column
  }, state, tableColumnHeaderRef);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const {
    hideHeader,
    ...columnProps
  } = column.props;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableColumnHeader, {
    ref: tableColumnHeaderRef,
    className: clsx("nextui-table-column-header", props.className),
    colSpan: column.colspan,
    isFocusVisible: isFocusVisible,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(props, columnHeaderProps, focusProps, columnProps),
    children: [hideHeader ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(module_$5c3e21d68f1c4674$export$439d29a4e110a164, {
      children: column.rendered
    }, void 0, false, {
      fileName: table_column_header_jsxFileName,
      lineNumber: 50,
      columnNumber: 23
    }, undefined) : column.rendered, columnProps.allowsSorting && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_sort_icon, {
      ascending: ((_state$sortDescriptor = state.sortDescriptor) == null ? void 0 : _state$sortDescriptor.direction) === "ascending",
      css: {
        position: "absolute",
        m: "0 $2",
        bottom: `calc(50% - ${ICON_SIZE / 2}px)`
      },
      visible: ((_state$sortDescriptor2 = state.sortDescriptor) == null ? void 0 : _state$sortDescriptor2.column) === column.key
    }, void 0, false, {
      fileName: table_column_header_jsxFileName,
      lineNumber: 52,
      columnNumber: 11
    }, undefined)]
  }, void 0, true, {
    fileName: table_column_header_jsxFileName,
    lineNumber: 43,
    columnNumber: 7
  }, undefined);
});
TableColumnHeader.displayName = "NextUI.TableColumnHeader";
TableColumnHeader.toString = () => ".nextui-table-column-header";
/* harmony default export */ const table_column_header = (TableColumnHeader);
;// CONCATENATED MODULE: ./src/table/table-header-row.tsx
var table_header_row_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-header-row.tsx";





const TableHeaderRow = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  item,
  state,
  ...props
}, ref) => {
  const tableHeaderRowRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableHeaderRowRef == null ? void 0 : tableHeaderRowRef.current);
  const {
    rowProps
  } = $f917ee10f4c32dab$export$1b95a7d2d517b841({
    node: item
  }, state, tableHeaderRowRef);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableHeaderRow, {
    ref: tableHeaderRowRef,
    className: clsx("nextui-table-header-row", props.className),
    ...props,
    ...rowProps,
    children: children
  }, void 0, false, {
    fileName: table_header_row_jsxFileName,
    lineNumber: 35,
    columnNumber: 7
  }, undefined);
});
TableHeaderRow.displayName = "NextUI.TableHeaderRow";
TableHeaderRow.toString = () => ".nextui-table-header-row";
/* harmony default export */ const table_header_row = (TableHeaderRow);
;// CONCATENATED MODULE: ./src/table/table-select-all-checkbox.tsx
var table_select_all_checkbox_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-select-all-checkbox.tsx";









const TableSelectAllCheckbox = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  column,
  state,
  color,
  animated,
  ...props
}, ref) => {
  const tableCellRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableCellRef == null ? void 0 : tableCellRef.current);
  const isSingleSelectionMode = state.selectionManager.selectionMode === "single";
  const {
    columnHeaderProps
  } = $f329116d8ad0aba0$export$9514819a8c81e960({
    node: column
  }, state, tableCellRef);
  const {
    checkboxProps
  } = $2a795c53a101c542$export$1003db6a7e384b99(state);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableHeaderCell, {
    ref: tableCellRef,
    className: clsx("nextui-table-select-all-checkbox", props.className),
    isFocusVisible: isFocusVisible,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(columnHeaderProps, focusProps, props),
    children: isSingleSelectionMode ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(module_$5c3e21d68f1c4674$export$439d29a4e110a164, {
      children: checkboxProps["aria-label"]
    }, void 0, false, {
      fileName: table_select_all_checkbox_jsxFileName,
      lineNumber: 55,
      columnNumber: 11
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_checkbox, {
      ...checkboxProps,
      color: color,
      css: {
        display: "inherit",
        $$checkboxBorderColor: "$colors$accents3"
      },
      disableAnimation: !animated
    }, void 0, false, {
      fileName: table_select_all_checkbox_jsxFileName,
      lineNumber: 57,
      columnNumber: 11
    }, undefined)
  }, void 0, false, {
    fileName: table_select_all_checkbox_jsxFileName,
    lineNumber: 48,
    columnNumber: 7
  }, undefined);
});
TableSelectAllCheckbox.displayName = "NextUI.TableSelectAllCheckbox";
TableSelectAllCheckbox.toString = () => ".nextui-table-select-all-checkbox";
/* harmony default export */ const table_select_all_checkbox = (TableSelectAllCheckbox);
;// CONCATENATED MODULE: ./src/table/table-context.tsx
var table_context_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-context.tsx";


const table_context_defaultContext = {
  footerAlign: "end",
  rowsPerPage: 0,
  currentPage: 1,
  animated: true
};
const TableContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(table_context_defaultContext);
const useTableContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(TableContext);
const Provider = ({
  children,
  defaultValues
}) => {
  const [footerAlign, setFooterAlign] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState((defaultValues == null ? void 0 : defaultValues.footerAlign) || table_context_defaultContext.footerAlign);
  const [animated, setAnimated] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState((defaultValues == null ? void 0 : defaultValues.animated) === undefined ? table_context_defaultContext.animated : defaultValues == null ? void 0 : defaultValues.animated);
  const [collection, setCollection] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState(defaultValues == null ? void 0 : defaultValues.collection);
  const [rowsPerPage, setRowsPerPage] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState((defaultValues == null ? void 0 : defaultValues.rowsPerPage) === undefined ? table_context_defaultContext.rowsPerPage : defaultValues == null ? void 0 : defaultValues.rowsPerPage);
  const [currentPage, setCurrentPage] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState(table_context_defaultContext.currentPage);
  const [color, setColor] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState(defaultValues == null ? void 0 : defaultValues.color);
  const providerValue = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useMemo(() => ({
    animated,
    footerAlign,
    collection,
    rowsPerPage,
    currentPage,
    color,
    setFooterAlign,
    setCollection,
    setAnimated,
    setRowsPerPage,
    setColor,
    setCurrentPage
  }), [animated, color, collection, footerAlign, rowsPerPage, currentPage]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(TableContext.Provider, {
    value: providerValue,
    children: children
  }, void 0, false, {
    fileName: table_context_jsxFileName,
    lineNumber: 73,
    columnNumber: 10
  }, undefined);
};
/* harmony default export */ const table_context = ({
  Provider,
  Consumer: TableContext.Consumer
});
;// CONCATENATED MODULE: ./src/table/table-pagination.tsx
var table_pagination_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-pagination.tsx";





const TablePagination = ({
  align,
  rowsPerPage: rowsPerPageProp,
  onPageChange,
  ...props
}) => {
  const {
    color,
    animated,
    collection,
    footerAlign,
    rowsPerPage,
    setFooterAlign,
    setRowsPerPage,
    setCurrentPage
  } = useTableContext();
  external_root_React_commonjs2_react_commonjs_react_amd_react_default().useEffect(() => {
    if (align && align !== footerAlign) {
      setFooterAlign == null ? void 0 : setFooterAlign(align);
    }
  }, [align, footerAlign]);
  external_root_React_commonjs2_react_commonjs_react_amd_react_default().useEffect(() => {
    if (rowsPerPageProp && rowsPerPageProp !== rowsPerPage) {
      setRowsPerPage == null ? void 0 : setRowsPerPage(rowsPerPageProp);
    }
  }, [rowsPerPage, rowsPerPageProp]);
  const handlePageChanged = page => {
    setCurrentPage == null ? void 0 : setCurrentPage(page);
    onPageChange == null ? void 0 : onPageChange(page);
  };
  const totalPagination = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _collection$body;
    const rowsCount = collection != null && collection.body ? [...(collection == null ? void 0 : (_collection$body = collection.body) == null ? void 0 : _collection$body.childNodes)].length : 0;
    return rowsPerPage > 0 ? Math.ceil(rowsCount / rowsPerPage) : 1;
  }, [collection, rowsPerPage]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_pagination, {
    animated: animated,
    className: clsx("nextui-table-pagination", props.className),
    color: props.color || color,
    total: totalPagination,
    onChange: handlePageChanged,
    ...props
  }, void 0, false, {
    fileName: table_pagination_jsxFileName,
    lineNumber: 64,
    columnNumber: 5
  }, undefined);
};
TablePagination.displayName = "NextUI.TablePagination";
TablePagination.toString = () => ".nextui-table-pagination";
/* harmony default export */ const table_pagination = (TablePagination);
;// CONCATENATED MODULE: ./src/table/table-footer.tsx
var table_footer_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-footer.tsx";





const TableFooter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  ...props
}, ref) => {
  const tableFooterRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableFooterRef == null ? void 0 : tableFooterRef.current);
  const {
    footerAlign
  } = useTableContext();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableFooter, {
    ref: tableFooterRef,
    align: props.align || footerAlign,
    className: clsx("nextui-table-footer", props.className),
    role: "rowgroup",
    ...props,
    children: children
  }, void 0, false, {
    fileName: table_footer_jsxFileName,
    lineNumber: 26,
    columnNumber: 7
  }, undefined);
});
TableFooter.displayName = "NextUI.TableFooter";
TableFooter.toString = () => ".nextui-table-footer";
/* harmony default export */ const table_footer = (TableFooter);
;// CONCATENATED MODULE: ./src/table/table-row.tsx
var table_row_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-row.tsx";







const TableRow = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  item,
  state,
  ...props
}, ref) => {
  const tableRowRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableRowRef == null ? void 0 : tableRowRef.current);
  const {
    rowProps
  } = $b2db214c022798eb$export$7f2f6ae19e707aa5({
    node: item
  }, state, tableRowRef);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const isDisabled = state.disabledKeys.has(item.key);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableRow, {
    ref: tableRowRef,
    className: clsx("nextui-table-row", {
      "nextui-table-row--selected": rowProps["aria-selected"],
      "nextui-table-row--disabled": isDisabled
    }, props.className),
    css: item.props.css,
    isDisabled: isDisabled,
    isFocusVisible: isFocusVisible,
    isSelected: !!rowProps["aria-selected"],
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(rowProps, focusProps, props),
    children: children
  }, void 0, false, {
    fileName: table_row_jsxFileName,
    lineNumber: 36,
    columnNumber: 7
  }, undefined);
});
TableRow.displayName = "NextUI.TableRow";
TableRow.toString = () => ".nextui-table-row";
/* harmony default export */ const table_row = (TableRow);
;// CONCATENATED MODULE: ./src/table/table-cell.tsx
var table_cell_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-cell.tsx";








const TableCell = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  cell,
  state,
  isStatic,
  ...props
}, ref) => {
  const domRef = useDOMRef(ref);
  const {
    gridCellProps
  } = $7713593715703b24$export$49571c903d73624c({
    node: cell
  }, state, domRef);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const customGridCellProps = isStatic ? {
    ...gridCellProps,
    onMouseDown: e => e.stopPropagation(),
    onPointerDown: e => e.stopPropagation()
  } : gridCellProps;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableCell, {
    ref: domRef,
    className: clsx("nextui-table-cell", props.className),
    css: cell.props.css,
    isFocusVisible: isFocusVisible,
    isStatic: isStatic,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(customGridCellProps, focusProps, props),
    children: cell.rendered
  }, void 0, false, {
    fileName: table_cell_jsxFileName,
    lineNumber: 49,
    columnNumber: 7
  }, undefined);
});
TableCell.displayName = "NextUI.TableCell";
TableCell.toString = () => ".nextui-table-cell";
/* harmony default export */ const table_cell = (TableCell);
;// CONCATENATED MODULE: ./src/table/table-checkbox-cell.tsx
var table_checkbox_cell_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-checkbox-cell.tsx";








const TableCheckboxCell = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  cell,
  state,
  color,
  animated,
  ...props
}, ref) => {
  const tableCellRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableCellRef == null ? void 0 : tableCellRef.current);
  const {
    gridCellProps
  } = $7713593715703b24$export$49571c903d73624c({
    node: cell
  }, state, tableCellRef);
  const {
    checkboxProps
  } = $2a795c53a101c542$export$16ea7f650bd7c1bb({
    key: (cell == null ? void 0 : cell.parentKey) || cell.key
  }, state);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableCell, {
    ref: tableCellRef,
    className: clsx("nextui-table-checkbox-cell", props.className),
    isFocusVisible: isFocusVisible,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(gridCellProps, focusProps, props),
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_checkbox, {
      ...checkboxProps,
      color: color,
      css: {
        display: "inherit"
      },
      disableAnimation: !animated
    }, void 0, false, {
      fileName: table_checkbox_cell_jsxFileName,
      lineNumber: 50,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: table_checkbox_cell_jsxFileName,
    lineNumber: 44,
    columnNumber: 7
  }, undefined);
});
TableCheckboxCell.displayName = "NextUI.TableCheckboxCell";
TableCheckboxCell.toString = () => ".nextui-table-checkbox-cell";
/* harmony default export */ const table_checkbox_cell = (TableCheckboxCell);
;// CONCATENATED MODULE: ./src/table/utils.ts

const hasPaginationChild = (children, child) => {
  const pagination = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.toArray(children).find(item => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item) && item.type === child);
  if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(pagination)) {
    var _pagination$props;
    return {
      hasPagination: true,
      rowsPerPage: (pagination == null ? void 0 : (_pagination$props = pagination.props) == null ? void 0 : _pagination$props.rowsPerPage) || 0
    };
  }
  return {
    hasPagination: false,
    rowsPerPage: 0
  };
};
const isInfinityScroll = collection => {
  var _collection$body;
  const bodyProps = (_collection$body = collection.body) == null ? void 0 : _collection$body.props;
  return (bodyProps == null ? void 0 : bodyProps.loadingState) !== undefined && typeof (bodyProps == null ? void 0 : bodyProps.onLoadMore) === "function";
};
;// CONCATENATED MODULE: ./src/table/table-body.tsx
var table_body_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-body.tsx";












// TODO: Remove this once we have a better way to pass it from the parent
const SCROLL_OFFSET = 40;
const TableBody = ({
  children,
  collection,
  state,
  animated,
  color,
  hasPagination,
  hideLoading,
  isStatic,
  ...props
}) => {
  var _collection$body, _collection$body$prop, _collection$body2, _collection$body2$pro, _collection$body4, _collection$body4$pro;
  const {
    currentPage,
    rowsPerPage,
    collection: collectionContext,
    setCollection
  } = useTableContext();
  const infinityScroll = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => isInfinityScroll(collection), [collection.body.props]);
  external_root_React_commonjs2_react_commonjs_react_amd_react_default().useEffect(() => {
    if (collection !== collectionContext) {
      setCollection == null ? void 0 : setCollection(collection);
    }
  }, [collection, collectionContext]);
  const isLoading = ((_collection$body = collection.body) == null ? void 0 : (_collection$body$prop = _collection$body.props) == null ? void 0 : _collection$body$prop.loadingState) === "loading" || ((_collection$body2 = collection.body) == null ? void 0 : (_collection$body2$pro = _collection$body2.props) == null ? void 0 : _collection$body2$pro.loadingState) === "loadingMore";
  const rows = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const data = [...collection.body.childNodes];
    if (!hasPagination) {
      return data;
    }
    return data == null ? void 0 : data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);
  }, [hasPagination, collection, currentPage, rowsPerPage]);
  const completeSpaces = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const rowsCount = rows.length;
    if (rowsCount >= rowsPerPage && !infinityScroll) {
      return null;
    }
    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("tr", {
      "aria-hidden": "true",
      className: "nextui-table-hidden-row",
      role: "row",
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBaseTableCell, {
        "aria-hidden": "true",
        colSpan: collection.columnCount,
        css: {
          height: "var(--nextui--tableBodyEmptySpaceHeight)"
        },
        style: dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928({
          "--nextui--tableBodyEmptySpaceHeight": infinityScroll ? "var(--nextui-space-10)" : `calc(${rowsPerPage - rowsCount} * var(--nextui-space-15))`
        }, (props == null ? void 0 : props.style) || {})
      }, void 0, false, {
        fileName: table_body_jsxFileName,
        lineNumber: 88,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: table_body_jsxFileName,
      lineNumber: 87,
      columnNumber: 7
    }, undefined);
  }, [collection.columnCount, rows, rowsPerPage, infinityScroll]);

  // handle scroll and call next page on infinity scroll
  const handleScroll = e => {
    if (!infinityScroll) {
      return;
    }
    const element = e.target;
    const isAtBottom = element.scrollHeight - (element.scrollTop + SCROLL_OFFSET) <= element.clientHeight;
    if (isAtBottom && !isLoading) {
      var _collection$body3, _collection$body3$pro;
      (_collection$body3 = collection.body) == null ? void 0 : (_collection$body3$pro = _collection$body3.props) == null ? void 0 : _collection$body3$pro.onLoadMore == null ? void 0 : _collection$body3$pro.onLoadMore();
    }
  };
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_row_group, {
    as: "tbody",
    className: clsx("nextui-table-body", props.className),
    css: {
      position: "relative",
      ...props.css,
      ...((_collection$body4 = collection.body) == null ? void 0 : (_collection$body4$pro = _collection$body4.props) == null ? void 0 : _collection$body4$pro.css)
    },
    isInfinityScroll: infinityScroll,
    onScroll: handleScroll,
    ...props,
    children: [children, rows == null ? void 0 : rows.map(row => {
      if (!row.hasChildNodes) {
        return null;
      }
      return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_row, {
        "aria-hidden": "false",
        item: row,
        state: state,
        children: [...row.childNodes].map(cell => {
          var _cell$props;
          return cell != null && (_cell$props = cell.props) != null && _cell$props.isSelectionCell ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_checkbox_cell, {
            animated: animated,
            cell: cell,
            color: color,
            state: state
          }, cell == null ? void 0 : cell.key, false, {
            fileName: table_body_jsxFileName,
            lineNumber: 144,
            columnNumber: 17
          }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_cell, {
            cell: cell,
            isStatic: isStatic,
            state: state
          }, cell == null ? void 0 : cell.key, false, {
            fileName: table_body_jsxFileName,
            lineNumber: 152,
            columnNumber: 17
          }, undefined);
        })
      }, row == null ? void 0 : row.key, false, {
        fileName: table_body_jsxFileName,
        lineNumber: 141,
        columnNumber: 11
      }, undefined);
    }), !hideLoading && isLoading && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableLoadingRow, {
      "aria-hidden": "true",
      className: "nextui-table-hidden-row",
      isAbsolute: !infinityScroll,
      isAtEnd: rows.length > 0,
      role: "row",
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBaseTableCell, {
        "aria-hidden": "true",
        colSpan: collection.columnCount,
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_loading, {
          color: color
        }, void 0, false, {
          fileName: table_body_jsxFileName,
          lineNumber: 167,
          columnNumber: 13
        }, undefined)
      }, void 0, false, {
        fileName: table_body_jsxFileName,
        lineNumber: 166,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: table_body_jsxFileName,
      lineNumber: 159,
      columnNumber: 9
    }, undefined), completeSpaces]
  }, void 0, true, {
    fileName: table_body_jsxFileName,
    lineNumber: 122,
    columnNumber: 5
  }, undefined);
};
TableBody.displayName = "NextUI.TableBody";
TableBody.toString = () => ".nextui-table-body";
/* harmony default export */ const table_body = (TableBody);
;// CONCATENATED MODULE: ./src/table/table.tsx
var table_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table.tsx";




















const table_defaultProps = {
  animated: true,
  hideLoading: false,
  selectionMode: "none",
  selectionBehavior: "toggle"
};
const Table = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((tableProps, ref) => {
  const {
    css,
    selectionMode,
    selectionBehavior,
    hideLoading,
    children,
    shadow,
    color,
    animated,
    borderWeight,
    bordered,
    hoverable,
    sticked,
    containerCss,
    className,
    ...otherProps
  } = tableProps;
  const [withoutPaginationChildren, paginationChildren] = pickSingleChild(children, table_pagination);
  const {
    hasPagination,
    rowsPerPage
  } = hasPaginationChild(children, table_pagination);
  const state = $4a0dd036d492cee4$export$907bcc6c48325fd6({
    ...tableProps,
    children: withoutPaginationChildren,
    showSelectionCheckboxes: tableProps.showSelectionCheckboxes !== undefined ? tableProps.showSelectionCheckboxes : selectionMode === "multiple" && selectionBehavior !== "replace"
  });
  const domRef = useDOMRef(ref);
  const {
    collection
  } = state;
  const {
    gridProps
  } = $6e31608fbba75bab$export$25bceaac3c7e4dc7(tableProps, state, domRef);
  const initialValues = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useMemo(() => {
    return {
      collection,
      color,
      animated,
      rowsPerPage
    };
  }, [collection, animated, color, rowsPerPage]);
  const isHoverable = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => !!(selectionMode !== "none" || hoverable), [selectionMode, hoverable]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_context.Provider, {
    defaultValues: initialValues,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableContainer, {
      borderWeight: borderWeight,
      bordered: bordered,
      className: "nextui-table-container",
      css: containerCss,
      shadow: shadow,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTable, {
        ref: domRef,
        animated: animated,
        className: clsx("nextui-table", className),
        color: color,
        css: css,
        hasPagination: hasPagination,
        hoverable: isHoverable,
        isMultiple: selectionMode === "multiple",
        shadow: shadow,
        ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(gridProps, otherProps),
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_row_group, {
          as: "thead",
          isFixed: isInfinityScroll(collection),
          children: [collection.headerRows.map(headerRow => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_header_row, {
            item: headerRow,
            state: state,
            children: [...headerRow.childNodes].map(column => {
              var _column$props;
              return column != null && (_column$props = column.props) != null && _column$props.isSelectionCell ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_select_all_checkbox, {
                animated: animated,
                color: color,
                column: column,
                state: state
              }, column == null ? void 0 : column.key, false, {
                fileName: table_jsxFileName,
                lineNumber: 144,
                columnNumber: 23
              }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_column_header, {
                animated: animated,
                column: column,
                state: state
              }, column == null ? void 0 : column.key, false, {
                fileName: table_jsxFileName,
                lineNumber: 152,
                columnNumber: 23
              }, undefined);
            })
          }, headerRow == null ? void 0 : headerRow.key, false, {
            fileName: table_jsxFileName,
            lineNumber: 141,
            columnNumber: 17
          }, undefined)), !sticked && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_spacer, {
            as: "tr",
            className: "nextui-table-hidden-row",
            y: 0.4
          }, void 0, false, {
            fileName: table_jsxFileName,
            lineNumber: 162,
            columnNumber: 28
          }, undefined)]
        }, void 0, true, {
          fileName: table_jsxFileName,
          lineNumber: 139,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_body, {
          animated: animated,
          collection: collection,
          color: color,
          hasPagination: hasPagination,
          hideLoading: hideLoading,
          isStatic: !isHoverable,
          state: state
        }, void 0, false, {
          fileName: table_jsxFileName,
          lineNumber: 164,
          columnNumber: 13
        }, undefined), hasPagination && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_footer, {
          children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_spacer, {
            as: "tr",
            className: "nextui-table-hidden-row",
            y: 0.6
          }, void 0, false, {
            fileName: table_jsxFileName,
            lineNumber: 176,
            columnNumber: 17
          }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("tr", {
            role: "row",
            children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("th", {
              colSpan: collection.columnCount,
              role: "columnheader",
              tabIndex: -1,
              children: paginationChildren
            }, void 0, false, {
              fileName: table_jsxFileName,
              lineNumber: 178,
              columnNumber: 19
            }, undefined)
          }, void 0, false, {
            fileName: table_jsxFileName,
            lineNumber: 177,
            columnNumber: 17
          }, undefined)]
        }, void 0, true, {
          fileName: table_jsxFileName,
          lineNumber: 175,
          columnNumber: 15
        }, undefined)]
      }, void 0, true, {
        fileName: table_jsxFileName,
        lineNumber: 127,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: table_jsxFileName,
      lineNumber: 120,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: table_jsxFileName,
    lineNumber: 119,
    columnNumber: 7
  }, undefined);
});
Table.displayName = "NextUI.Table";
Table.toString = () => ".nextui-table";
/* harmony default export */ const table = (with_defaults(Table, table_defaultProps));
;// CONCATENATED MODULE: ./src/table/base/table-cell.tsx

// Override TS for Cell to support NextUI specific props.
const table_cell_TableCell = $941d1d9a6a28982a$export$f6f0c3fe4ec306ea;
/* harmony default export */ const base_table_cell = (table_cell_TableCell);
;// CONCATENATED MODULE: ./src/table/base/table-column.tsx

// Override TS for Column to support NextUI specific props.
const TableColumn = $1cd244557c2f97d5$export$816b5d811295e6bc;
/* harmony default export */ const table_column = (TableColumn);
;// CONCATENATED MODULE: ./src/table/base/table-header.tsx

const TableHeader = $312ae3b56a94a86e$export$f850895b287ef28e;
/* harmony default export */ const table_header = (TableHeader);
;// CONCATENATED MODULE: ./src/table/base/table-row.tsx

// Override TS for TableRow to support NextUI specific props.
const table_row_TableRow = $70d70eb16ea48428$export$b59bdbef9ce70de2;
/* harmony default export */ const base_table_row = (table_row_TableRow);
;// CONCATENATED MODULE: ./src/table/base/table-body.tsx

// Override TS for Body to support NextUI specific props.
const table_body_TableBody = $4ae5314bf50db1a3$export$76ccd210b9029917;
/* harmony default export */ const base_table_body = (table_body_TableBody);
;// CONCATENATED MODULE: ./src/table/index.ts




table.Cell = base_table_cell;
table.Column = table_column;
table.Header = table_header;
table.Row = base_table_row;
table.Body = base_table_body;
table.Pagination = table_pagination;
/* harmony default export */ const src_table = (table);
;// CONCATENATED MODULE: ./node_modules/@react-stately/overlays/dist/module.js

function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  return {
    isOpen: isOpen,
    setOpen: setOpen,
    open() {
      setOpen(true);
    },
    close() {
      setOpen(false);
    },
    toggle() {
      setOpen(!isOpen);
    }
  };
}

;// CONCATENATED MODULE: ./src/utils/refs.ts

/**
 * Assigns a value to a ref function or object
 *
 * @param ref the ref to assign to
 * @param value the value
 */
function assignRef(ref, value) {
  if (ref == null) return;
  if (isFunction(ref)) {
    ref(value);
    return;
  }
  try {
    // @ts-ignore
    ref.current = value;
  } catch (error) {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}

/**
 * Combine multiple React refs into a single ref function.
 * This is used mostly when you need to allow consumers forward refs to
 * internal components
 *
 * @param refs refs to assign to value to
 */
function mergeRefs(...refs) {
  return node => {
    refs.forEach(ref => assignRef(ref, node));
  };
}
;// CONCATENATED MODULE: ./src/popover/utils.ts
const getAriaPlacement = placement => {
  if (!placement) {
    return "bottom";
  }
  return placement.replace("-", " ");
};
const getPopoverPlacementFromAxis = placementAxis => {
  if (!placementAxis) {
    return "bottom";
  }
  return placementAxis.replace("-", " ");
};
const getPopoverPlacement = ariaPlacement => {
  if (!ariaPlacement) {
    return "bottom";
  }
  return ariaPlacement.replace(" ", "-");
};
const getTransformOrigin = placement => {
  if (!placement) {
    return "bottom";
  }
  switch (placement) {
    case "bottom":
      return "top center";
    case "top":
      return "bottom center";
    case "left":
      return "right center";
    case "right":
      return "left center";
    case "bottom-left":
      return "top left";
    case "bottom-right":
      return "top right";
    case "top-left":
      return "bottom left";
    case "top-right":
      return "bottom right";
    case "left-top":
      return "right top";
    case "left-bottom":
      return "right bottom";
    case "right-top":
      return "left top";
    case "right-bottom":
      return "left bottom";
    default:
      return "top center";
  }
};
;// CONCATENATED MODULE: ./src/popover/use-popover.ts







/**
 * @internal
 */
function usePopover(props = {}) {
  const {
    ref,
    triggerRef: triggerRefProp,
    scrollRef,
    isOpen,
    defaultOpen,
    onOpenChange,
    isBordered,
    borderWeight,
    disableShadow,
    shouldFlip = true,
    offset = 12,
    placement = "bottom",
    onClose,
    triggerType = "dialog",
    isDismissable = true,
    shouldCloseOnBlur = false,
    isKeyboardDismissDisabled = false,
    disableAnimation = false,
    shouldCloseOnInteractOutside
  } = props;
  const domRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const domTriggerRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const overlayRef = ref || domRef;
  const triggerRef = triggerRefProp || domTriggerRef;
  const state = $fc909762b330b746$export$61c6a8c84e605fb6({
    isOpen,
    defaultOpen,
    onOpenChange
  });
  const [exited, setExited] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(!state.isOpen);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (state.isOpen) return "open";
    return "closed";
  }, [state.isOpen]);
  const handleClose = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    onClose == null ? void 0 : onClose();
    state.close();
  }, [state, onClose]);
  const onEntered = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    setExited(false);
  }, []);
  const onExited = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    setExited(true);
  }, []);
  const {
    triggerProps,
    overlayProps
  } = $628037886ba31236$export$f9d5c8beee7d008d({
    type: triggerType
  }, state, triggerRef);
  const overlayPlacement = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => getAriaPlacement(placement), [placement]);
  const {
    overlayProps: positionProps
  } = $2a41e45df1593e64$export$d39e1813b3bdd0e1({
    isOpen: state.isOpen,
    targetRef: triggerRef,
    scrollRef,
    placement: overlayPlacement,
    overlayRef,
    shouldFlip,
    offset
  });
  const isPositioned = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _positionProps$style;
    return !!((_positionProps$style = positionProps.style) != null && _positionProps$style.maxHeight);
  }, [positionProps.style]);
  const getTriggerProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((props = {}, _ref = null) => {
    const realTriggerProps = triggerRefProp != null && triggerRefProp.current ? dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(triggerProps, props) : dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(props, triggerProps);
    return {
      ...realTriggerProps,
      ref: mergeRefs(triggerRef, _ref)
    };
  }, [triggerRef, triggerRefProp, triggerProps]);
  const getPopoverProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((props = {}, css = {}) => {
    const positionKeys = positionProps.style ? Object.keys(positionProps.style) : [];
    let positionCss = {};
    positionKeys.forEach(key => {
      const value = object_isObject(css) && css[key];
      if (value) {
        positionCss = {
          ...positionCss,
          [key]: value
        };
      }
    });
    const realPositionProps = Object.keys(positionCss).length > 0 ? {
      ...positionProps,
      style: {
        ...positionProps.style,
        ...positionCss
      }
    } : positionProps;
    return {
      css,
      ...props,
      ...overlayProps,
      ...realPositionProps,
      "data-state": getState,
      "data-placement": placement
    };
  }, [getState, positionProps, overlayProps, placement]);
  return {
    state,
    exited,
    overlayRef,
    triggerRef,
    placement,
    disableShadow,
    disableAnimation,
    shouldCloseOnBlur,
    isDismissable,
    isBordered,
    borderWeight,
    isKeyboardDismissDisabled,
    shouldCloseOnInteractOutside,
    isOpen: state.isOpen,
    onClose: handleClose,
    onExited,
    onEntered,
    triggerProps,
    overlayProps,
    positionProps,
    getTriggerProps,
    getPopoverProps,
    isPositioned
  };
}
;// CONCATENATED MODULE: ./src/popover/popover-context.ts

const [PopoverProvider, usePopoverContext] = createContext({
  name: "PopoverContext",
  errorMessage: "usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`"
});
;// CONCATENATED MODULE: ./src/popover/popover.tsx
var popover_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/popover/popover.tsx";






const Popover = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    children,
    ...otherProps
  } = props;
  const context = usePopover({
    ref,
    ...otherProps
  });
  const [trigger, content] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.toArray(children);
  const mountOverlay = context.state.isOpen || !context.exited;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(PopoverProvider, {
    value: context,
    children: [trigger, mountOverlay && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)($f57aed4a881a3485$export$b47c3594eab58386, {
      children: content
    }, void 0, false, {
      fileName: popover_jsxFileName,
      lineNumber: 30,
      columnNumber: 24
    }, undefined)]
  }, void 0, true, {
    fileName: popover_jsxFileName,
    lineNumber: 28,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Popover.displayName = "NextUI.Popover";
}
Popover.toString = () => ".nextui-popover";
/* harmony default export */ const popover = (Popover);
;// CONCATENATED MODULE: ./src/popover/popover-trigger.tsx
var popover_trigger_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/popover/popover-trigger.tsx";








/**
 * PopoverTrigger opens the popover's content. It must be an interactive element
 * such as `button` or `a`.
 */
const PopoverTrigger = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, _) => {
  const {
    triggerRef,
    getTriggerProps
  } = usePopoverContext();
  const {
    children,
    ...otherProps
  } = props;

  // enforce a single child
  const child = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (typeof children === "string") return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_text, {
      children: children
    }, void 0, false, {
      fileName: popover_trigger_jsxFileName,
      lineNumber: 28,
      columnNumber: 46
    }, undefined);
    return external_root_React_commonjs2_react_commonjs_react_amd_react_.Children.only(children);
  }, [children]);
  const {
    onPress,
    onKeyDown,
    onPressStart,
    ...rest
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return getTriggerProps(dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(child.props, otherProps), child.ref);
  }, [getTriggerProps, child.props, otherProps, child.ref]);
  const {
    buttonProps
  } = $701a24aa0da5b062$export$ea18c227d4417cc3({
    onPress,
    onKeyDown,
    onPressStart,
    ...rest
  }, triggerRef);

  // validates if contains a NextUI Button as a child
  const [, triggerChildren] = pickChild(props.children, src_button);
  const hasNextUIButton = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return (triggerChildren == null ? void 0 : triggerChildren[0]) !== undefined;
  }, [triggerChildren]);

  // avoid the error that cannot read properties of undefined (reading 'contains')
  const nextUIButtonProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      ...rest,
      onPress,
      onKeyDown,
      onPressStart
    };
  }, [rest, onPress, onKeyDown, onPressStart]);
  return /*#__PURE__*/(0,external_root_React_commonjs2_react_commonjs_react_amd_react_.cloneElement)(child, dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(rest, hasNextUIButton ? nextUIButtonProps : buttonProps));
});
if (__DEV__) {
  PopoverTrigger.displayName = "NextUI.PopoverTrigger";
}
PopoverTrigger.toString = () => ".nextui-popover-trigger";
/* harmony default export */ const popover_trigger = (PopoverTrigger);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/overlays/dist/module.js








function overlays_dist_module_$parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */ /*
       * Copyright 2020 Adobe. All rights reserved.
       * This file is licensed to you under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License. You may obtain a copy
       * of the License at http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software distributed under
       * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
       * OF ANY KIND, either express or implied. See the License for the specific language
       * governing permissions and limitations under the License.
       */
const module_$edcf132a9284368a$var$AXIS = {
  top: "top",
  bottom: "top",
  left: "left",
  right: "left"
};
const module_$edcf132a9284368a$var$FLIPPED_DIRECTION = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
const module_$edcf132a9284368a$var$CROSS_AXIS = {
  top: "left",
  left: "top"
};
const module_$edcf132a9284368a$var$AXIS_SIZE = {
  top: "height",
  left: "width"
};
const module_$edcf132a9284368a$var$PARSED_PLACEMENT_CACHE = {};
// @ts-ignore
let module_$edcf132a9284368a$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function module_$edcf132a9284368a$var$getContainerDimensions(containerNode) {
  let width = 0,
    height = 0,
    top = 0,
    left = 0;
  let scroll = {};
  if (containerNode.tagName === "BODY") {
    let documentElement = document.documentElement;
    var _visualViewport_width;
    width = (_visualViewport_width = module_$edcf132a9284368a$var$visualViewport === null || module_$edcf132a9284368a$var$visualViewport === void 0 ? void 0 : module_$edcf132a9284368a$var$visualViewport.width) !== null && _visualViewport_width !== void 0 ? _visualViewport_width : documentElement.clientWidth;
    var _visualViewport_height;
    height = (_visualViewport_height = module_$edcf132a9284368a$var$visualViewport === null || module_$edcf132a9284368a$var$visualViewport === void 0 ? void 0 : module_$edcf132a9284368a$var$visualViewport.height) !== null && _visualViewport_height !== void 0 ? _visualViewport_height : documentElement.clientHeight;
    scroll.top = documentElement.scrollTop || containerNode.scrollTop;
    scroll.left = documentElement.scrollLeft || containerNode.scrollLeft;
  } else {
    ({
      width: width,
      height: height,
      top: top,
      left: left
    } = module_$edcf132a9284368a$var$getOffset(containerNode));
    scroll.top = containerNode.scrollTop;
    scroll.left = containerNode.scrollLeft;
  }
  return {
    width: width,
    height: height,
    scroll: scroll,
    top: top,
    left: left
  };
}
function module_$edcf132a9284368a$var$getScroll(node) {
  return {
    top: node.scrollTop,
    left: node.scrollLeft,
    width: node.scrollWidth,
    height: node.scrollHeight
  };
}
function module_$edcf132a9284368a$var$getDelta(axis, offset, size, containerDimensions, padding) {
  let containerScroll = containerDimensions.scroll[axis];
  let containerHeight = containerDimensions[module_$edcf132a9284368a$var$AXIS_SIZE[axis]];
  let startEdgeOffset = offset - padding - containerScroll;
  let endEdgeOffset = offset + padding - containerScroll + size;
  if (startEdgeOffset < 0) return -startEdgeOffset;else if (endEdgeOffset > containerHeight) return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);else return 0;
}
function module_$edcf132a9284368a$var$getMargins(node) {
  let style = window.getComputedStyle(node);
  return {
    top: parseInt(style.marginTop, 10) || 0,
    bottom: parseInt(style.marginBottom, 10) || 0,
    left: parseInt(style.marginLeft, 10) || 0,
    right: parseInt(style.marginRight, 10) || 0
  };
}
function module_$edcf132a9284368a$var$parsePlacement(input) {
  if (module_$edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input]) return module_$edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
  let [placement, crossPlacement] = input.split(" ");
  let axis = module_$edcf132a9284368a$var$AXIS[placement] || "right";
  let crossAxis = module_$edcf132a9284368a$var$CROSS_AXIS[axis];
  if (!module_$edcf132a9284368a$var$AXIS[crossPlacement]) crossPlacement = "center";
  let size = module_$edcf132a9284368a$var$AXIS_SIZE[axis];
  let crossSize = module_$edcf132a9284368a$var$AXIS_SIZE[crossAxis];
  module_$edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input] = {
    placement: placement,
    crossPlacement: crossPlacement,
    axis: axis,
    crossAxis: crossAxis,
    size: size,
    crossSize: crossSize
  };
  return module_$edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
}
function module_$edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {
  let {
    placement: placement,
    crossPlacement: crossPlacement,
    axis: axis,
    crossAxis: crossAxis,
    size: size,
    crossSize: crossSize
  } = placementInfo;
  let position = {};
  // button position
  position[crossAxis] = childOffset[crossAxis];
  if (crossPlacement === "center")
    //  + (button size / 2) - (overlay size / 2)
    // at this point the overlay center should match the button center
    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;else if (crossPlacement !== crossAxis)
    //  + (button size) - (overlay size)
    // at this point the overlay bottom should match the button bottom
    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
  /* else {
  the overlay top should match the button top
  } */
  // add the crossOffset from props
  position[crossAxis] += crossOffset;
  // this is button center position - the overlay size + half of the button to align bottom of overlay with button center
  let minViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2 - overlaySize[crossSize];
  // this is button position of center, aligns top of overlay with button center
  let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;
  // clamp it into the range of the min/max positions
  position[crossAxis] = Math.min(Math.max(minViablePosition, position[crossAxis]), maxViablePosition);
  // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.
  if (placement === axis) {
    // If the container is positioned (non-static), then we use the container's actual
    // height, as `bottom` will be relative to this height.  But if the container is static,
    // then it can only be the `document.body`, and `bottom` will be relative to _its_
    // container, which should be as large as boundaryDimensions.
    const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size];
    position[module_$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
  } else position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
  return position;
}
function module_$edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {
  return position.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top // this is the bottom of the boundary
  - (containerOffsetWithBoundary.top + position.top // this is the top of the overlay
  ) - (margins.top + margins.bottom + padding // save additional space for margin and padding
  )) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top // this is the top of the trigger
  - (boundaryDimensions.top + boundaryDimensions.scroll.top // this is the top of the boundary
  ) - (margins.top + margins.bottom + padding // save additional space for margin and padding
  ));
}

function module_$edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
  let {
    placement: placement,
    axis: axis,
    size: size
  } = placementInfo;
  if (placement === axis) return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[module_$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[module_$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
}
function module_$edcf132a9284368a$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, userSetMaxHeight) {
  let placementInfo = module_$edcf132a9284368a$var$parsePlacement(placementInput);
  let {
    size: size,
    crossAxis: crossAxis,
    crossSize: crossSize,
    placement: placement,
    crossPlacement: crossPlacement
  } = placementInfo;
  let position = module_$edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
  let normalizedOffset = offset;
  let space = module_$edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);
  // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip
  if (flip && scrollSize[size] > space) {
    let flippedPlacementInfo = module_$edcf132a9284368a$var$parsePlacement(`${module_$edcf132a9284368a$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
    let flippedPosition = module_$edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
    let flippedSpace = module_$edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);
    // If the available space for the flipped position is greater than the original available space, flip.
    if (flippedSpace > space) {
      placementInfo = flippedPlacementInfo;
      position = flippedPosition;
      normalizedOffset = offset;
    }
  }
  let delta = module_$edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
  position[crossAxis] += delta;
  let maxHeight = module_$edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);
  if (userSetMaxHeight && userSetMaxHeight < maxHeight) maxHeight = userSetMaxHeight;
  overlaySize.height = Math.min(overlaySize.height, maxHeight);
  position = module_$edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
  delta = module_$edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
  position[crossAxis] += delta;
  let arrowPosition = {};
  arrowPosition[crossAxis] = childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;
  return {
    position: position,
    maxHeight: maxHeight,
    arrowOffsetLeft: arrowPosition.left,
    arrowOffsetTop: arrowPosition.top,
    placement: placementInfo.placement
  };
}
function module_$edcf132a9284368a$export$b3ceb0cbf1056d98(opts) {
  let {
    placement: placement,
    targetNode: targetNode,
    overlayNode: overlayNode,
    scrollNode: scrollNode,
    padding: padding,
    shouldFlip: shouldFlip,
    boundaryElement: boundaryElement,
    offset: offset,
    crossOffset: crossOffset,
    maxHeight: maxHeight
  } = opts;
  let container = overlayNode instanceof HTMLElement && overlayNode.offsetParent || document.body;
  let isBodyContainer = container.tagName === "BODY";
  const containerPositionStyle = window.getComputedStyle(container).position;
  let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== "static";
  let childOffset = isBodyContainer ? module_$edcf132a9284368a$var$getOffset(targetNode) : module_$edcf132a9284368a$var$getPosition(targetNode, container);
  if (!isBodyContainer) {
    let {
      marginTop: marginTop,
      marginLeft: marginLeft
    } = window.getComputedStyle(targetNode);
    childOffset.top += parseInt(marginTop, 10) || 0;
    childOffset.left += parseInt(marginLeft, 10) || 0;
  }
  let overlaySize = module_$edcf132a9284368a$var$getOffset(overlayNode);
  let margins = module_$edcf132a9284368a$var$getMargins(overlayNode);
  overlaySize.width += margins.left + margins.right;
  overlaySize.height += margins.top + margins.bottom;
  let scrollSize = module_$edcf132a9284368a$var$getScroll(scrollNode);
  let boundaryDimensions = module_$edcf132a9284368a$var$getContainerDimensions(boundaryElement);
  let containerOffsetWithBoundary = boundaryElement.tagName === "BODY" ? module_$edcf132a9284368a$var$getOffset(container) : module_$edcf132a9284368a$var$getPosition(container, boundaryElement);
  return module_$edcf132a9284368a$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, maxHeight);
}
function module_$edcf132a9284368a$var$getOffset(node) {
  let {
    top: top,
    left: left,
    width: width,
    height: height
  } = node.getBoundingClientRect();
  let {
    scrollTop: scrollTop,
    scrollLeft: scrollLeft,
    clientTop: clientTop,
    clientLeft: clientLeft
  } = document.documentElement;
  return {
    top: top + scrollTop - clientTop,
    left: left + scrollLeft - clientLeft,
    width: width,
    height: height
  };
}
function module_$edcf132a9284368a$var$getPosition(node, parent) {
  let style = window.getComputedStyle(node);
  let offset;
  if (style.position === "fixed") {
    let {
      top: top,
      left: left,
      width: width,
      height: height
    } = node.getBoundingClientRect();
    offset = {
      top: top,
      left: left,
      width: width,
      height: height
    };
  } else {
    offset = module_$edcf132a9284368a$var$getOffset(node);
    let parentOffset = module_$edcf132a9284368a$var$getOffset(parent);
    let parentStyle = window.getComputedStyle(parent);
    parentOffset.top += (parseInt(parentStyle.borderTopWidth, 10) || 0) - parent.scrollTop;
    parentOffset.left += (parseInt(parentStyle.borderLeftWidth, 10) || 0) - parent.scrollLeft;
    offset.top -= parentOffset.top;
    offset.left -= parentOffset.left;
  }
  offset.top -= parseInt(style.marginTop, 10) || 0;
  offset.left -= parseInt(style.marginLeft, 10) || 0;
  return offset;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const module_$dd149f63282afbbf$export$f6211563215e3b37 = new WeakMap();
function module_$dd149f63282afbbf$export$18fc8428861184da(opts) {
  let {
    triggerRef: triggerRef,
    isOpen: isOpen,
    onClose: onClose
  } = opts;
  (0, $k7QOs$useEffect)(() => {
    if (!isOpen || onClose === null) return;
    let onScroll = e => {
      // Ignore if scrolling an scrollable region outside the trigger's tree.
      let target = e.target;
      // window is not a Node and doesn't have contain, but window contains everything
      if (!triggerRef.current || target instanceof Node && !target.contains(triggerRef.current)) return;
      let onCloseHandler = onClose || module_$dd149f63282afbbf$export$f6211563215e3b37.get(triggerRef.current);
      if (onCloseHandler) onCloseHandler();
    };
    window.addEventListener("scroll", onScroll, true);
    return () => {
      window.removeEventListener("scroll", onScroll, true);
    };
  }, [isOpen, onClose, triggerRef]);
}

// @ts-ignore
let module_$2a41e45df1593e64$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function module_$2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {
  let {
    direction: direction
  } = (0, $k7QOs$useLocale)();
  let {
    targetRef: targetRef,
    overlayRef: overlayRef,
    scrollRef = overlayRef,
    placement = "bottom",
    containerPadding = 12,
    shouldFlip = true,
    boundaryElement = typeof document !== "undefined" ? document.body : null,
    offset = 0,
    crossOffset = 0,
    shouldUpdatePosition = true,
    isOpen = true,
    onClose: onClose,
    maxHeight: maxHeight
  } = props;
  let [position, setPosition] = (0, $k7QOs$useState)({
    position: {},
    arrowOffsetLeft: undefined,
    arrowOffsetTop: undefined,
    maxHeight: undefined,
    placement: undefined
  });
  let deps = [shouldUpdatePosition, placement, overlayRef.current, targetRef.current, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction, maxHeight];
  let updatePosition = (0, $k7QOs$useCallback)(() => {
    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) return;
    setPosition((0, module_$edcf132a9284368a$export$b3ceb0cbf1056d98)({
      placement: module_$2a41e45df1593e64$var$translateRTL(placement, direction),
      overlayNode: overlayRef.current,
      targetNode: targetRef.current,
      scrollNode: scrollRef.current,
      padding: containerPadding,
      shouldFlip: shouldFlip,
      boundaryElement: boundaryElement,
      offset: offset,
      crossOffset: crossOffset,
      maxHeight: maxHeight
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
  // Update position when anything changes
  // eslint-disable-next-line react-hooks/exhaustive-deps
  (0, $k7QOs$useLayoutEffect)(updatePosition, deps);
  // Update position on window resize
  module_$2a41e45df1593e64$var$useResize(updatePosition);
  // Update position when the overlay changes size (might need to flip).
  (0, $k7QOs$useResizeObserver)({
    ref: overlayRef,
    onResize: updatePosition
  });
  // Reposition the overlay and do not close on scroll while the visual viewport is resizing.
  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.
  let isResizing = (0, $k7QOs$useRef)(false);
  (0, $k7QOs$useLayoutEffect)(() => {
    let timeout;
    let onResize = () => {
      isResizing.current = true;
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        isResizing.current = false;
      }, 500);
      updatePosition();
    };
    module_$2a41e45df1593e64$var$visualViewport === null || module_$2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : module_$2a41e45df1593e64$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      module_$2a41e45df1593e64$var$visualViewport === null || module_$2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : module_$2a41e45df1593e64$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, [updatePosition]);
  let close = (0, $k7QOs$useCallback)(() => {
    if (!isResizing.current) onClose();
  }, [onClose, isResizing]);
  // When scrolling a parent scrollable region of the trigger (other than the body),
  // we hide the popover. Otherwise, its position would be incorrect.
  (0, module_$dd149f63282afbbf$export$18fc8428861184da)({
    triggerRef: targetRef,
    isOpen: isOpen,
    onClose: onClose && close
  });
  return {
    overlayProps: {
      style: {
        position: "absolute",
        zIndex: 100000,
        ...position.position,
        maxHeight: position.maxHeight
      }
    },
    placement: position.placement,
    arrowProps: {
      style: {
        left: position.arrowOffsetLeft,
        top: position.arrowOffsetTop
      }
    },
    updatePosition: updatePosition
  };
}
function module_$2a41e45df1593e64$var$useResize(onResize) {
  (0, $k7QOs$useLayoutEffect)(() => {
    window.addEventListener("resize", onResize, false);
    return () => {
      window.removeEventListener("resize", onResize, false);
    };
  }, [onResize]);
}
function module_$2a41e45df1593e64$var$translateRTL(position, direction) {
  if (direction === "rtl") return position.replace("start", "right").replace("end", "left");
  return position.replace("start", "left").replace("end", "right");
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const module_$a11501f3d1d39e6c$var$visibleOverlays = (/* unused pure expression or super */ null && ([]));
function module_$a11501f3d1d39e6c$export$ea8f71083e90600f(props, ref) {
  let {
    onClose: onClose,
    shouldCloseOnBlur: shouldCloseOnBlur,
    isOpen: isOpen,
    isDismissable = false,
    isKeyboardDismissDisabled = false,
    shouldCloseOnInteractOutside: shouldCloseOnInteractOutside
  } = props;
  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.
  (0, $k7QOs$useEffect)(() => {
    if (isOpen) module_$a11501f3d1d39e6c$var$visibleOverlays.push(ref);
    return () => {
      let index = module_$a11501f3d1d39e6c$var$visibleOverlays.indexOf(ref);
      if (index >= 0) module_$a11501f3d1d39e6c$var$visibleOverlays.splice(index, 1);
    };
  }, [isOpen, ref]);
  // Only hide the overlay when it is the topmost visible overlay in the stack.
  let onHide = () => {
    if (module_$a11501f3d1d39e6c$var$visibleOverlays[module_$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref && onClose) onClose();
  };
  let onInteractOutsideStart = e => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if (module_$a11501f3d1d39e6c$var$visibleOverlays[module_$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
        e.stopPropagation();
        e.preventDefault();
      }
    }
  };
  let onInteractOutside = e => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if (module_$a11501f3d1d39e6c$var$visibleOverlays[module_$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
        e.stopPropagation();
        e.preventDefault();
      }
      onHide();
    }
  };
  // Handle the escape key
  let onKeyDown = e => {
    if (e.key === "Escape" && !isKeyboardDismissDisabled) {
      e.stopPropagation();
      e.preventDefault();
      onHide();
    }
  };
  // Handle clicking outside the overlay to close it
  (0, $k7QOs$useInteractOutside)({
    ref: ref,
    onInteractOutside: isDismissable ? onInteractOutside : null,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let {
    focusWithinProps: focusWithinProps
  } = (0, $k7QOs$useFocusWithin)({
    isDisabled: !shouldCloseOnBlur,
    onBlurWithin: e => {
      // If focus is moving into a child focus scope (e.g. menu inside a dialog),
      // do not close the outer overlay. At this point, the active scope should
      // still be the outer overlay, since blur events run before focus.
      if (e.relatedTarget && (0, $k7QOs$isElementInChildOfActiveScope)(e.relatedTarget)) return;
      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) onClose();
    }
  });
  let onPointerDownUnderlay = e => {
    // fixes a firefox issue that starts text selection https://bugzilla.mozilla.org/show_bug.cgi?id=1675846
    if (e.target === e.currentTarget) e.preventDefault();
  };
  return {
    overlayProps: {
      onKeyDown: onKeyDown,
      ...focusWithinProps
    },
    underlayProps: {
      onPointerDown: onPointerDownUnderlay
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$628037886ba31236$export$f9d5c8beee7d008d(props, state, ref) {
  let {
    type: type
  } = props;
  let {
    isOpen: isOpen
  } = state;
  // Backward compatibility. Share state close function with useOverlayPosition so it can close on scroll
  // without forcing users to pass onClose.
  (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (ref && ref.current) (0, module_$dd149f63282afbbf$export$f6211563215e3b37).set(ref.current, state.close);
  });
  // Aria 1.1 supports multiple values for aria-haspopup other than just menus.
  // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup
  // However, we only add it for menus for now because screen readers often
  // announce it as a menu even for other values.
  let ariaHasPopup = undefined;
  if (type === "menu") ariaHasPopup = true;else if (type === "listbox") ariaHasPopup = "listbox";
  let overlayId = (0, utils_dist_module_$bdb11010cef70236$export$f680877a34711e37)();
  return {
    triggerProps: {
      "aria-haspopup": ariaHasPopup,
      "aria-expanded": isOpen,
      "aria-controls": isOpen ? overlayId : null,
      onPress: state.toggle
    },
    overlayProps: {
      id: overlayId
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// @ts-ignore
const module_$49c51c25361d4cd2$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
// HTML input types that do not cause the software keyboard to appear.
const module_$49c51c25361d4cd2$var$nonTextInputTypes = new Set(["checkbox", "radio", "range", "color", "file", "image", "button", "submit", "reset"]);
// The number of active usePreventScroll calls. Used to determine whether to revert back to the original page style/scroll position
let $49c51c25361d4cd2$var$preventScrollCount = 0;
let $49c51c25361d4cd2$var$restore;
function module_$49c51c25361d4cd2$export$ee0f7cc6afcd1c18(options = {}) {
  let {
    isDisabled: isDisabled
  } = options;
  (0, $k7QOs$useLayoutEffect)(() => {
    if (isDisabled) return;
    $49c51c25361d4cd2$var$preventScrollCount++;
    if ($49c51c25361d4cd2$var$preventScrollCount === 1) {
      if ((0, $k7QOs$isIOS)()) $49c51c25361d4cd2$var$restore = module_$49c51c25361d4cd2$var$preventScrollMobileSafari();else $49c51c25361d4cd2$var$restore = module_$49c51c25361d4cd2$var$preventScrollStandard();
    }
    return () => {
      $49c51c25361d4cd2$var$preventScrollCount--;
      if ($49c51c25361d4cd2$var$preventScrollCount === 0) $49c51c25361d4cd2$var$restore();
    };
  }, [isDisabled]);
}
// For most browsers, all we need to do is set `overflow: hidden` on the root element, and
// add some padding to prevent the page from shifting when the scrollbar is hidden.
function module_$49c51c25361d4cd2$var$preventScrollStandard() {
  return (0, $k7QOs$chain)(module_$49c51c25361d4cd2$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), module_$49c51c25361d4cd2$var$setStyle(document.documentElement, "overflow", "hidden"));
}
// Mobile Safari is a whole different beast. Even with overflow: hidden,
// it still scrolls the page in many situations:
//
// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.
// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of
//    it, so it becomes scrollable.
// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.
//    This may cause even fixed position elements to scroll off the screen.
// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always
//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.
//
// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:
//
// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling
//    on the window.
// 2. Prevent default on `touchmove` events inside a scrollable element when the scroll position is at the
//    top or bottom. This avoids the whole page scrolling instead, but does prevent overscrolling.
// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.
// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top
//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element
//    into view ourselves, without scrolling the whole page.
// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the
//    same visually, but makes the actual scroll position always zero. This is required to make all of the
//    above work or Safari will still try to scroll the page when focusing an input.
// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting
//    to navigate to an input with the next/previous buttons that's outside a modal.
function module_$49c51c25361d4cd2$var$preventScrollMobileSafari() {
  let scrollable;
  let lastY = 0;
  let onTouchStart = e => {
    // Store the nearest scrollable parent element from the element that the user touched.
    scrollable = (0, $k7QOs$getScrollParent)(e.target);
    if (scrollable === document.documentElement && scrollable === document.body) return;
    lastY = e.changedTouches[0].pageY;
  };
  let onTouchMove = e => {
    // Prevent scrolling the window.
    if (scrollable === document.documentElement || scrollable === document.body) {
      e.preventDefault();
      return;
    }
    // Prevent scrolling up when at the top and scrolling down when at the bottom
    // of a nested scrollable area, otherwise mobile Safari will start scrolling
    // the window instead. Unfortunately, this disables bounce scrolling when at
    // the top but it's the best we can do.
    let y = e.changedTouches[0].pageY;
    let scrollTop = scrollable.scrollTop;
    let bottom = scrollable.scrollHeight - scrollable.clientHeight;
    if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY) e.preventDefault();
    lastY = y;
  };
  let onTouchEnd = e => {
    let target = e.target;
    // Apply this change if we're not already focused on the target element
    if (module_$49c51c25361d4cd2$var$willOpenKeyboard(target) && target !== document.activeElement) {
      e.preventDefault();
      // Apply a transform to trick Safari into thinking the input is at the top of the page
      // so it doesn't try to scroll it into view. When tapping on an input, this needs to
      // be done before the "focus" event, so we have to focus the element ourselves.
      target.style.transform = "translateY(-2000px)";
      target.focus();
      requestAnimationFrame(() => {
        target.style.transform = "";
      });
    }
  };
  let onFocus = e => {
    let target = e.target;
    if (module_$49c51c25361d4cd2$var$willOpenKeyboard(target)) {
      // Transform also needs to be applied in the focus event in cases where focus moves
      // other than tapping on an input directly, e.g. the next/previous buttons in the
      // software keyboard. In these cases, it seems applying the transform in the focus event
      // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️
      target.style.transform = "translateY(-2000px)";
      requestAnimationFrame(() => {
        target.style.transform = "";
        // This will have prevented the browser from scrolling the focused element into view,
        // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.
        if (module_$49c51c25361d4cd2$var$visualViewport) {
          if (module_$49c51c25361d4cd2$var$visualViewport.height < window.innerHeight)
            // If the keyboard is already visible, do this after one additional frame
            // to wait for the transform to be removed.
            requestAnimationFrame(() => {
              module_$49c51c25361d4cd2$var$scrollIntoView(target);
            });else
            // Otherwise, wait for the visual viewport to resize before scrolling so we can
            // measure the correct position to scroll to.
            module_$49c51c25361d4cd2$var$visualViewport.addEventListener("resize", () => module_$49c51c25361d4cd2$var$scrollIntoView(target), {
              once: true
            });
        }
      });
    }
  };
  let onWindowScroll = () => {
    // Last resort. If the window scrolled, scroll it back to the top.
    // It should always be at the top because the body will have a negative margin (see below).
    window.scrollTo(0, 0);
  };
  // Record the original scroll position so we can restore it.
  // Then apply a negative margin to the body to offset it by the scroll position. This will
  // enable us to scroll the window to the top, which is required for the rest of this to work.
  let scrollX = window.pageXOffset;
  let scrollY = window.pageYOffset;
  let restoreStyles = (0, $k7QOs$chain)(module_$49c51c25361d4cd2$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), module_$49c51c25361d4cd2$var$setStyle(document.documentElement, "overflow", "hidden"), module_$49c51c25361d4cd2$var$setStyle(document.body, "marginTop", `-${scrollY}px`));
  // Scroll to the top. The negative margin on the body will make this appear the same.
  window.scrollTo(0, 0);
  let removeEvents = (0, $k7QOs$chain)(module_$49c51c25361d4cd2$var$addEvent(document, "touchstart", onTouchStart, {
    passive: false,
    capture: true
  }), module_$49c51c25361d4cd2$var$addEvent(document, "touchmove", onTouchMove, {
    passive: false,
    capture: true
  }), module_$49c51c25361d4cd2$var$addEvent(document, "touchend", onTouchEnd, {
    passive: false,
    capture: true
  }), module_$49c51c25361d4cd2$var$addEvent(document, "focus", onFocus, true), module_$49c51c25361d4cd2$var$addEvent(window, "scroll", onWindowScroll));
  return () => {
    // Restore styles and scroll the page back to where it was.
    restoreStyles();
    removeEvents();
    window.scrollTo(scrollX, scrollY);
  };
}
// Sets a CSS property on an element, and returns a function to revert it to the previous value.
function module_$49c51c25361d4cd2$var$setStyle(element, style, value) {
  let cur = element.style[style];
  element.style[style] = value;
  return () => {
    element.style[style] = cur;
  };
}
// Adds an event listener to an element, and returns a function to remove it.
function module_$49c51c25361d4cd2$var$addEvent(target, event, handler, options) {
  target.addEventListener(event, handler, options);
  return () => {
    target.removeEventListener(event, handler, options);
  };
}
function module_$49c51c25361d4cd2$var$scrollIntoView(target) {
  let root = document.scrollingElement || document.documentElement;
  while (target && target !== root) {
    // Find the parent scrollable element and adjust the scroll position if the target is not already in view.
    let scrollable = (0, $k7QOs$getScrollParent)(target);
    if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {
      let scrollableTop = scrollable.getBoundingClientRect().top;
      let targetTop = target.getBoundingClientRect().top;
      if (targetTop > scrollableTop + target.clientHeight) scrollable.scrollTop += targetTop - scrollableTop;
    }
    target = scrollable.parentElement;
  }
}
function module_$49c51c25361d4cd2$var$willOpenKeyboard(target) {
  return target instanceof HTMLInputElement && !module_$49c51c25361d4cd2$var$nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const module_$f57aed4a881a3485$var$Context = /*#__PURE__*/(/* unused pure expression or super */ null && ((0, $k7QOs$react).createContext(null)));
function module_$f57aed4a881a3485$export$178405afcd8c5eb(props) {
  let {
    children: children
  } = props;
  let parent = (0, $k7QOs$useContext)(module_$f57aed4a881a3485$var$Context);
  let [modalCount, setModalCount] = (0, $k7QOs$useState)(0);
  let context = (0, $k7QOs$useMemo)(() => ({
    parent: parent,
    modalCount: modalCount,
    addModal() {
      setModalCount(count => count + 1);
      if (parent) parent.addModal();
    },
    removeModal() {
      setModalCount(count => count - 1);
      if (parent) parent.removeModal();
    }
  }), [parent, modalCount]);
  return /*#__PURE__*/(0, $k7QOs$react).createElement(module_$f57aed4a881a3485$var$Context.Provider, {
    value: context
  }, children);
}
function module_$f57aed4a881a3485$export$d9aaed4c3ece1bc0() {
  let context = (0, $k7QOs$useContext)(module_$f57aed4a881a3485$var$Context);
  return {
    modalProviderProps: {
      "aria-hidden": context && context.modalCount > 0 ? true : null
    }
  };
}
/**
 * Creates a root node that will be aria-hidden if there are other modals open.
 */
function module_$f57aed4a881a3485$var$OverlayContainerDOM(props) {
  let {
    modalProviderProps: modalProviderProps
  } = module_$f57aed4a881a3485$export$d9aaed4c3ece1bc0();
  return /*#__PURE__*/(0, $k7QOs$react).createElement("div", {
    "data-overlay-container": true,
    ...props,
    ...modalProviderProps
  });
}
function module_$f57aed4a881a3485$export$bf688221f59024e5(props) {
  return /*#__PURE__*/(0, $k7QOs$react).createElement(module_$f57aed4a881a3485$export$178405afcd8c5eb, null, /*#__PURE__*/(0, $k7QOs$react).createElement(module_$f57aed4a881a3485$var$OverlayContainerDOM, props));
}
function module_$f57aed4a881a3485$export$b47c3594eab58386(props) {
  let isSSR = (0, $k7QOs$useIsSSR)();
  let {
    portalContainer = isSSR ? null : document.body,
    ...rest
  } = props;
  (0, $k7QOs$react).useEffect(() => {
    if (portalContainer === null || portalContainer === void 0 ? void 0 : portalContainer.closest("[data-overlay-container]")) throw new Error("An OverlayContainer must not be inside another container. Please change the portalContainer prop.");
  }, [portalContainer]);
  if (!portalContainer) return null;
  let contents = /*#__PURE__*/(0, $k7QOs$react).createElement(module_$f57aed4a881a3485$export$bf688221f59024e5, rest);
  return /*#__PURE__*/(0, $k7QOs$reactdom).createPortal(contents, portalContainer);
}
function module_$f57aed4a881a3485$export$33ffd74ebf07f060(options) {
  // Add aria-hidden to all parent providers on mount, and restore on unmount.
  let context = (0, $k7QOs$useContext)(module_$f57aed4a881a3485$var$Context);
  if (!context) throw new Error("Modal is not contained within a provider");
  (0, $k7QOs$useEffect)(() => {
    if ((options === null || options === void 0 ? void 0 : options.isDisabled) || !context || !context.parent) return;
    // The immediate context is from the provider containing this modal, so we only
    // want to trigger aria-hidden on its parents not on the modal provider itself.
    context.parent.addModal();
    return () => {
      if (context && context.parent) context.parent.removeModal();
    };
  }, [context, context.parent, options === null || options === void 0 ? void 0 : options.isDisabled]);
  return {
    modalProps: {
      "data-ismodal": !(options === null || options === void 0 ? void 0 : options.isDisabled)
    }
  };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
var module_$61fe14465afefc5e$exports = {};
var module_$773d5888b972f1cf$exports = {};
module_$773d5888b972f1cf$exports = {
  "dismiss": `تجاهل`
};
var module_$d11f19852b941573$exports = {};
module_$d11f19852b941573$exports = {
  "dismiss": `Отхвърляне`
};
var module_$b983974c2ee1efb3$exports = {};
module_$b983974c2ee1efb3$exports = {
  "dismiss": `Odstranit`
};
var module_$5809cc9d4e92de73$exports = {};
module_$5809cc9d4e92de73$exports = {
  "dismiss": `Luk`
};
var module_$c68c2e4fc74398d1$exports = {};
module_$c68c2e4fc74398d1$exports = {
  "dismiss": `Schließen`
};
var module_$0898b4c153db2b77$exports = {};
module_$0898b4c153db2b77$exports = {
  "dismiss": `Απόρριψη`
};
var module_$6d74810286a15183$exports = {};
module_$6d74810286a15183$exports = {
  "dismiss": `Dismiss`
};
var module_$309d73dc65f78055$exports = {};
module_$309d73dc65f78055$exports = {
  "dismiss": `Descartar`
};
var module_$44ad94f7205cf593$exports = {};
module_$44ad94f7205cf593$exports = {
  "dismiss": `Lõpeta`
};
var module_$7c28f5687f0779a9$exports = {};
module_$7c28f5687f0779a9$exports = {
  "dismiss": `Hylkää`
};
var module_$e6d75df4b68bd73a$exports = {};
module_$e6d75df4b68bd73a$exports = {
  "dismiss": `Rejeter`
};
var module_$87505c9dab186d0f$exports = {};
module_$87505c9dab186d0f$exports = {
  "dismiss": `התעלם`
};
var module_$553439c3ffb3e492$exports = {};
module_$553439c3ffb3e492$exports = {
  "dismiss": `Odbaci`
};
var module_$74cf411061b983a2$exports = {};
module_$74cf411061b983a2$exports = {
  "dismiss": `Elutasítás`
};
var module_$e933f298574dc435$exports = {};
module_$e933f298574dc435$exports = {
  "dismiss": `Ignora`
};
var module_$ac91fc9fe02f71f6$exports = {};
module_$ac91fc9fe02f71f6$exports = {
  "dismiss": `閉じる`
};
var module_$52b96f86422025af$exports = {};
module_$52b96f86422025af$exports = {
  "dismiss": `무시`
};
var module_$c0d724c3e51dafa6$exports = {};
module_$c0d724c3e51dafa6$exports = {
  "dismiss": `Atmesti`
};
var module_$c92899672a3fe72e$exports = {};
module_$c92899672a3fe72e$exports = {
  "dismiss": `Nerādīt`
};
var module_$9f576b39d8e7a9d6$exports = {};
module_$9f576b39d8e7a9d6$exports = {
  "dismiss": `Lukk`
};
var module_$9d025808aeec81a7$exports = {};
module_$9d025808aeec81a7$exports = {
  "dismiss": `Negeren`
};
var module_$fce709921e2c0fa6$exports = {};
module_$fce709921e2c0fa6$exports = {
  "dismiss": `Zignoruj`
};
var module_$2599cf0c4ab37f59$exports = {};
module_$2599cf0c4ab37f59$exports = {
  "dismiss": `Descartar`
};
var module_$3c220ae7ef8a35fd$exports = {};
module_$3c220ae7ef8a35fd$exports = {
  "dismiss": `Dispensar`
};
var module_$93562b5094072f54$exports = {};
module_$93562b5094072f54$exports = {
  "dismiss": `Revocare`
};
var module_$cd9e2abd0d06c7b4$exports = {};
module_$cd9e2abd0d06c7b4$exports = {
  "dismiss": `Пропустить`
};
var module_$45375701f409adf1$exports = {};
module_$45375701f409adf1$exports = {
  "dismiss": `Zrušiť`
};
var module_$27fab53a576de9dd$exports = {};
module_$27fab53a576de9dd$exports = {
  "dismiss": `Opusti`
};
var module_$4438748d9952e7c7$exports = {};
module_$4438748d9952e7c7$exports = {
  "dismiss": `Odbaci`
};
var module_$0936d7347ef4da4c$exports = {};
module_$0936d7347ef4da4c$exports = {
  "dismiss": `Avvisa`
};
var module_$29700c92185d38f8$exports = {};
module_$29700c92185d38f8$exports = {
  "dismiss": `Kapat`
};
var module_$662ccaf2be4c25b3$exports = {};
module_$662ccaf2be4c25b3$exports = {
  "dismiss": `Скасувати`
};
var module_$d80a27deda7cdb3c$exports = {};
module_$d80a27deda7cdb3c$exports = {
  "dismiss": `取消`
};
var module_$2b2734393847c884$exports = {};
module_$2b2734393847c884$exports = {
  "dismiss": `關閉`
};
module_$61fe14465afefc5e$exports = {
  "ar-AE": module_$773d5888b972f1cf$exports,
  "bg-BG": module_$d11f19852b941573$exports,
  "cs-CZ": module_$b983974c2ee1efb3$exports,
  "da-DK": module_$5809cc9d4e92de73$exports,
  "de-DE": module_$c68c2e4fc74398d1$exports,
  "el-GR": module_$0898b4c153db2b77$exports,
  "en-US": module_$6d74810286a15183$exports,
  "es-ES": module_$309d73dc65f78055$exports,
  "et-EE": module_$44ad94f7205cf593$exports,
  "fi-FI": module_$7c28f5687f0779a9$exports,
  "fr-FR": module_$e6d75df4b68bd73a$exports,
  "he-IL": module_$87505c9dab186d0f$exports,
  "hr-HR": module_$553439c3ffb3e492$exports,
  "hu-HU": module_$74cf411061b983a2$exports,
  "it-IT": module_$e933f298574dc435$exports,
  "ja-JP": module_$ac91fc9fe02f71f6$exports,
  "ko-KR": module_$52b96f86422025af$exports,
  "lt-LT": module_$c0d724c3e51dafa6$exports,
  "lv-LV": module_$c92899672a3fe72e$exports,
  "nb-NO": module_$9f576b39d8e7a9d6$exports,
  "nl-NL": module_$9d025808aeec81a7$exports,
  "pl-PL": module_$fce709921e2c0fa6$exports,
  "pt-BR": module_$2599cf0c4ab37f59$exports,
  "pt-PT": module_$3c220ae7ef8a35fd$exports,
  "ro-RO": module_$93562b5094072f54$exports,
  "ru-RU": module_$cd9e2abd0d06c7b4$exports,
  "sk-SK": module_$45375701f409adf1$exports,
  "sl-SI": module_$27fab53a576de9dd$exports,
  "sr-SP": module_$4438748d9952e7c7$exports,
  "sv-SE": module_$0936d7347ef4da4c$exports,
  "tr-TR": module_$29700c92185d38f8$exports,
  "uk-UA": module_$662ccaf2be4c25b3$exports,
  "zh-CN": module_$d80a27deda7cdb3c$exports,
  "zh-TW": module_$2b2734393847c884$exports
};
function module_$86ea4cb521eb2e37$export$2317d149ed6f78c4(props) {
  let {
    onDismiss: onDismiss,
    ...otherProps
  } = props;
  let stringFormatter = (0, $k7QOs$useLocalizedStringFormatter)((0, /*@__PURE__*/overlays_dist_module_$parcel$interopDefault(module_$61fe14465afefc5e$exports)));
  let labels = (0, $k7QOs$useLabels)(otherProps, stringFormatter.format("dismiss"));
  let onClick = () => {
    if (onDismiss) onDismiss();
  };
  return /*#__PURE__*/(0, $k7QOs$react).createElement((0, $k7QOs$VisuallyHidden), null, /*#__PURE__*/(0, $k7QOs$react).createElement("button", {
    ...labels,
    tabIndex: -1,
    onClick: onClick
  }));
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Keeps a ref count of all hidden elements. Added to when hiding an element, and
// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.
let module_$5e3802645cc19319$var$refCountMap = new WeakMap();
let $5e3802645cc19319$var$observerStack = (/* unused pure expression or super */ null && ([]));
function module_$5e3802645cc19319$export$1c3ebcada18427bf(targets, root = document.body) {
  let visibleNodes = new Set(targets);
  let hiddenNodes = new Set();
  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      // If this node is a live announcer, add it to the set of nodes to keep visible.
      if ((node instanceof HTMLElement || node instanceof SVGElement) && node.dataset.liveAnnouncer === "true") visibleNodes.add(node);
      // Skip this node and its children if it is one of the target nodes, or a live announcer.
      // Also skip children of already hidden nodes, as aria-hidden is recursive. An exception is
      // made for elements with role="row" since VoiceOver on iOS has issues hiding elements with role="row".
      // For that case we want to hide the cells inside as well (https://bugs.webkit.org/show_bug.cgi?id=222623).
      if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute("role") !== "row") return NodeFilter.FILTER_REJECT;
      // Skip this node but continue to children if one of the targets is inside the node.
      if (targets.some(target => node.contains(target))) return NodeFilter.FILTER_SKIP;
      return NodeFilter.FILTER_ACCEPT;
    }
  });
  let hide = node => {
    var _refCountMap_get;
    let refCount = (_refCountMap_get = module_$5e3802645cc19319$var$refCountMap.get(node)) !== null && _refCountMap_get !== void 0 ? _refCountMap_get : 0;
    // If already aria-hidden, and the ref count is zero, then this element
    // was already hidden and there's nothing for us to do.
    if (node.getAttribute("aria-hidden") === "true" && refCount === 0) return;
    if (refCount === 0) node.setAttribute("aria-hidden", "true");
    hiddenNodes.add(node);
    module_$5e3802645cc19319$var$refCountMap.set(node, refCount + 1);
  };
  // If there is already a MutationObserver listening from a previous call,
  // disconnect it so the new on takes over.
  if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].disconnect();
  let node = walker.nextNode();
  while (node != null) {
    hide(node);
    node = walker.nextNode();
  }
  let observer = new MutationObserver(changes => {
    for (let change of changes) {
      if (change.type !== "childList" || change.addedNodes.length === 0) continue;
      // If the parent element of the added nodes is not within one of the targets,
      // and not already inside a hidden node, hide all of the new children.
      if (![...visibleNodes, ...hiddenNodes].some(node => node.contains(change.target))) for (let node of change.addedNodes) {
        if ((node instanceof HTMLElement || node instanceof SVGElement) && node.dataset.liveAnnouncer === "true") visibleNodes.add(node);else if (node instanceof Element) hide(node);
      }
    }
  });
  observer.observe(root, {
    childList: true,
    subtree: true
  });
  let observerWrapper = {
    observe() {
      observer.observe(root, {
        childList: true,
        subtree: true
      });
    },
    disconnect() {
      observer.disconnect();
    }
  };
  $5e3802645cc19319$var$observerStack.push(observerWrapper);
  return () => {
    observer.disconnect();
    for (let node of hiddenNodes) {
      let count = module_$5e3802645cc19319$var$refCountMap.get(node);
      if (count === 1) {
        node.removeAttribute("aria-hidden");
        module_$5e3802645cc19319$var$refCountMap.delete(node);
      } else module_$5e3802645cc19319$var$refCountMap.set(node, count - 1);
    }
    // Remove this observer from the stack, and start the previous one.
    if (observerWrapper === $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1]) {
      $5e3802645cc19319$var$observerStack.pop();
      if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].observe();
    } else $5e3802645cc19319$var$observerStack.splice($5e3802645cc19319$var$observerStack.indexOf(observerWrapper), 1);
  };
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$f2f8a6077418541e$export$542a6fd13ac93354(props, state) {
  let {
    triggerRef: triggerRef,
    popoverRef: popoverRef,
    isNonModal: isNonModal,
    isKeyboardDismissDisabled: isKeyboardDismissDisabled,
    ...otherProps
  } = props;
  let {
    overlayProps: overlayProps,
    underlayProps: underlayProps
  } = (0, module_$a11501f3d1d39e6c$export$ea8f71083e90600f)({
    isOpen: state.isOpen,
    onClose: state.close,
    shouldCloseOnBlur: true,
    isDismissable: !isNonModal,
    isKeyboardDismissDisabled: isKeyboardDismissDisabled
  }, popoverRef);
  let {
    overlayProps: positionProps,
    arrowProps: arrowProps,
    placement: placement
  } = (0, module_$2a41e45df1593e64$export$d39e1813b3bdd0e1)({
    ...otherProps,
    targetRef: triggerRef,
    overlayRef: popoverRef,
    isOpen: state.isOpen,
    onClose: null
  });
  // Delay preventing scroll until popover is positioned to avoid extra scroll padding.
  // This requires a layout effect so that positioning has been committed to the DOM
  // by the time usePreventScroll measures the element.
  let [isPositioned, setPositioned] = (0, $k7QOs$useState)(false);
  (0, $k7QOs$useLayoutEffect)(() => {
    if (!isNonModal && placement) setPositioned(true);
  }, [isNonModal, placement]);
  (0, module_$49c51c25361d4cd2$export$ee0f7cc6afcd1c18)({
    isDisabled: isNonModal || !isPositioned
  });
  (0, $k7QOs$useLayoutEffect)(() => {
    if (state.isOpen && !isNonModal && popoverRef.current) return (0, module_$5e3802645cc19319$export$1c3ebcada18427bf)([popoverRef.current]);
  }, [isNonModal, state.isOpen, popoverRef]);
  return {
    popoverProps: (0, $k7QOs$mergeProps)(overlayProps, positionProps),
    arrowProps: arrowProps,
    underlayProps: underlayProps,
    placement: placement
  };
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const $337b884510726a0d$export$a2200b96afd16271 = /*#__PURE__*/(0, (external_root_React_commonjs2_react_commonjs_react_amd_react_default())).createContext(null);
function module_$337b884510726a0d$export$c6fdb837b070b4ff(props) {
  let isSSR = (0, $k7QOs$useIsSSR)();
  let {
    portalContainer = isSSR ? null : document.body
  } = props;
  let [contain, setContain] = (0, $k7QOs$useState)(false);
  let contextValue = (0, $k7QOs$useMemo)(() => ({
    contain: contain,
    setContain: setContain
  }), [contain, setContain]);
  if (!portalContainer) return null;
  let contents = /*#__PURE__*/(0, $k7QOs$react).createElement($337b884510726a0d$export$a2200b96afd16271.Provider, {
    value: contextValue
  }, /*#__PURE__*/(0, $k7QOs$react).createElement((0, $k7QOs$FocusScope), {
    restoreFocus: true,
    contain: contain
  }, props.children));
  return /*#__PURE__*/(0, $k7QOs$reactdom).createPortal(contents, portalContainer);
}
function module_$337b884510726a0d$export$14c98a7594375490() {
  let ctx = (0, external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($337b884510726a0d$export$a2200b96afd16271);
  let setContain = ctx === null || ctx === void 0 ? void 0 : ctx.setContain;
  (0, utils_dist_module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    setContain === null || setContain === void 0 ? void 0 : setContain(true);
  }, [setContain]);
}
function module_$8ac8429251c45e4b$export$dbc0f175b25fb0fb(props, state, ref) {
  let {
    overlayProps: overlayProps,
    underlayProps: underlayProps
  } = (0, module_$a11501f3d1d39e6c$export$ea8f71083e90600f)({
    ...props,
    isOpen: state.isOpen,
    onClose: state.close
  }, ref);
  (0, module_$49c51c25361d4cd2$export$ee0f7cc6afcd1c18)({
    isDisabled: !state.isOpen
  });
  (0, module_$337b884510726a0d$export$14c98a7594375490)();
  (0, $k7QOs$useEffect)(() => {
    if (state.isOpen) return (0, module_$5e3802645cc19319$export$1c3ebcada18427bf)([ref.current]);
  }, [state.isOpen, ref]);
  return {
    modalProps: (0, $k7QOs$mergeProps)(overlayProps),
    underlayProps: underlayProps
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-aria/dialog/dist/module.js




function $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {
  let {
    role = 'dialog'
  } = props;
  let titleId = utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8();
  titleId = props['aria-label'] ? undefined : titleId;
  let isRefocusing = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  // Focus the dialog itself on mount, unless a child element is already focused.
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (ref.current && !ref.current.contains(document.activeElement)) {
      module_$6a99195332edec8b$export$80f3e147d781571c(ref.current);
      // Safari on iOS does not move the VoiceOver cursor to the dialog
      // or announce that it has opened until it has rendered. A workaround
      // is to wait for half a second, then blur and re-focus the dialog.
      let timeout = setTimeout(() => {
        if (document.activeElement === ref.current) {
          isRefocusing.current = true;
          ref.current.blur();
          module_$6a99195332edec8b$export$80f3e147d781571c(ref.current);
          isRefocusing.current = false;
        }
      }, 500);
      return () => {
        clearTimeout(timeout);
      };
    }
  }, [ref]);
  module_$337b884510726a0d$export$14c98a7594375490();
  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused
  // on mount when inside an iframe, no matter which element we programmatically focus.
  // See https://bugs.webkit.org/show_bug.cgi?id=211934.
  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal
  // even without aria-modal on the dialog itself.
  return {
    dialogProps: {
      ...utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
        labelable: true
      }),
      role: role,
      tabIndex: -1,
      'aria-labelledby': props['aria-labelledby'] || titleId,
      // Prevent blur events from reaching useOverlay, which may cause
      // popovers to close. Since focus is contained within the dialog,
      // we don't want this to occur due to the above useEffect.
      onBlur: e => {
        if (isRefocusing.current) e.stopPropagation();
      }
    },
    titleProps: {
      id: titleId
    }
  };
}

;// CONCATENATED MODULE: ./src/popover/popover.styles.ts


const popover_styles_appearanceIn = keyframes({
  "0%": {
    opacity: 0,
    transform: "translateZ(0)  scale(0.95)"
  },
  "60%": {
    opacity: 0.75,
    /* Avoid blurriness */
    backfaceVisibility: "hidden",
    webkitFontSmoothing: "antialiased",
    transform: "translateZ(0) scale(1.05)"
  },
  "100%": {
    opacity: 1,
    transform: "translateZ(0) scale(1)"
  }
});
const popover_styles_appearanceOut = keyframes({
  "0%": {
    opacity: 1,
    transform: "scale(1)"
  },
  "100%": {
    opacity: 0,
    transform: "scale(0.5)"
  }
});
const StyledPopoverContentContainer = styled("div", {
  /* variables */
  $$popoverMinWidth: "$space$fit",
  $$popoverMinHeight: "$space$fit",
  $$popoverBorderRadius: "$radii$lg",
  $$popoverBackground: "$colors$backgroundContrast",
  $$popoverBoxShadow: "$shadows$md",
  $$popoverBorderColor: "$colors$border",
  boxShadow: "$$popoverBoxShadow",
  outline: "none" /* Hide focus outline */,
  overflow: "hidden auto",
  bg: "$$popoverBackground",
  /* Be a flexbox to allow a full sized content area that scrolls */
  display: "inline-flex",
  flexDirection: "column",
  boxSizing: "border-box",
  minWidth: "$$popoverMinWidth",
  minHeight: "$$popoverMinHeight",
  maxWidth: "calc(100% - $$popoverMinWidth)",
  maxHeight: "calc(100% - $$popoverMinWidth)",
  borderRadius: "$$popoverBorderRadius",
  animationFillMode: "forwards",
  willChange: "transform, opacity",
  "@motion": {
    transition: "none"
  },
  "&.nextui-popover-content-enter": {
    animationName: popover_styles_appearanceIn,
    animationTimingFunction: "ease-out",
    animationDirection: "normal",
    animationDuration: "300ms",
    animationFillMode: "both"
  },
  "&.nextui-popover-content-leave": {
    animationName: popover_styles_appearanceOut,
    animationTimingFunction: "ease-in",
    animationDuration: "60ms",
    animationFillMode: "both"
  },
  variants: {
    disableShadow: {
      true: {
        boxShadow: "none"
      }
    },
    isBordered: {
      true: {
        borderStyle: "solid",
        borderColor: "$$popoverBorderColor"
      }
    },
    borderWeight: {
      light: {
        bw: "$light",
        $$popoverBorderWeight: "$borderWeights$light"
      },
      normal: {
        bw: "$normal",
        $$popoverBorderWeight: "$borderWeights$normal"
      },
      bold: {
        bw: "$bold",
        $$popoverBorderWeight: "$borderWeights$bold"
      },
      extrabold: {
        bw: "$extrabold",
        $$popoverBorderWeight: "$borderWeights$extrabold"
      },
      black: {
        bw: "$black",
        $$popoverBorderWeight: "$borderWeights$black"
      }
    },
    isPositioned: {
      true: {
        visibility: "visible"
      },
      false: {
        visibility: "hidden"
      }
    },
    disableAnimation: {
      true: {
        transition: "none",
        "&.nextui-popover-content-enter": {
          animation: "none"
        },
        "&.nextui-popover-content-leave": {
          animation: "none"
        }
      }
    }
  },
  defaultVariants: {
    isBordered: false,
    borderWeight: "light"
  }
}, cssFocusVisible);
const StyledPopoverContent = styled("div", {});
;// CONCATENATED MODULE: ./src/popover/popover-content.tsx
var popover_content_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/popover/popover-content.tsx";














const PopoverContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    children,
    as,
    css,
    className,
    ...otherProps
  } = props;
  const {
    state,
    placement,
    overlayRef,
    disableAnimation,
    disableShadow,
    shouldCloseOnBlur,
    isDismissable,
    isKeyboardDismissDisabled,
    shouldCloseOnInteractOutside,
    getPopoverProps,
    isBordered,
    borderWeight,
    onClose,
    onEntered,
    onExited,
    isPositioned
  } = usePopoverContext();
  const transformOrigin = getTransformOrigin(placement);
  const popoverCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      transformOrigin,
      ...css
    };
  }, [transformOrigin, css]);

  // Hide content outside the modal from screen readers.
  const {
    modalProps
  } = $f57aed4a881a3485$export$33ffd74ebf07f060({
    isDisabled: true
  });
  const {
    dialogProps
  } = $40df3f8667284809$export$d55e7ee900f34e93({
    role: "dialog"
  }, overlayRef);
  const {
    overlayProps
  } = $a11501f3d1d39e6c$export$ea8f71083e90600f({
    onClose,
    isOpen: state.isOpen,
    isDismissable: isDismissable && state.isOpen,
    shouldCloseOnBlur,
    isKeyboardDismissDisabled,
    shouldCloseOnInteractOutside
  }, overlayRef);
  const completeProps = dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928({
    isBordered,
    disableShadow,
    borderWeight
  }, otherProps);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const transitionProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      clearTime: disableAnimation ? 0 : 300,
      enterTime: disableAnimation ? 0 : 20,
      leaveTime: disableAnimation ? 0 : 60,
      name: "nextui-popover-content",
      visible: state.isOpen,
      onEntered: onEntered,
      onExited: onExited
    };
  }, [disableAnimation, state.isOpen]);
  const contents = /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPopoverContentContainer, {
    ref: mergeRefs(overlayRef, ref),
    ...getPopoverProps(dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(overlayProps, modalProps, dialogProps, focusProps, completeProps), popoverCss),
    as: as,
    className: clsx("nextui-popover-content-container", className),
    disableAnimation: disableAnimation,
    isFocusVisible: isFocusVisible,
    isPositioned: isPositioned,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)($86ea4cb521eb2e37$export$2317d149ed6f78c4, {
      onDismiss: onClose
    }, void 0, false, {
      fileName: popover_content_jsxFileName,
      lineNumber: 114,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPopoverContent, {
      className: "nextui-popover-content",
      children: children
    }, void 0, false, {
      fileName: popover_content_jsxFileName,
      lineNumber: 115,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)($86ea4cb521eb2e37$export$2317d149ed6f78c4, {
      onDismiss: onClose
    }, void 0, false, {
      fileName: popover_content_jsxFileName,
      lineNumber: 116,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: popover_content_jsxFileName,
    lineNumber: 102,
    columnNumber: 7
  }, undefined);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)($9bf71ea28793e738$export$20e40289641fbbb6, {
      restoreFocus: true,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
        ...transitionProps,
        children: contents
      }, void 0, false, {
        fileName: popover_content_jsxFileName,
        lineNumber: 123,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: popover_content_jsxFileName,
      lineNumber: 122,
      columnNumber: 9
    }, undefined)
  }, void 0, false);
});
if (__DEV__) {
  PopoverContent.displayName = "NextUI.PopoverContent";
}
PopoverContent.toString = () => ".nextui-popover-content";
/* harmony default export */ const popover_content = (PopoverContent);
;// CONCATENATED MODULE: ./src/popover/index.ts




popover.Content = popover_content;
popover.Trigger = popover_trigger;
/* harmony default export */ const src_popover = (popover);
;// CONCATENATED MODULE: ./node_modules/@react-stately/collections/dist/module.js

function module_$c1d7fb2ec91bae71$var$Item(props) {
  return null;
}
module_$c1d7fb2ec91bae71$var$Item.getCollectionNode = function* getCollectionNode(props, context) {
  let {
    childItems: childItems,
    title: title,
    children: children
  } = props;
  let rendered = props.title || props.children;
  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || '';
  // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.
  if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning)) console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');
  yield {
    type: 'item',
    props: props,
    rendered: rendered,
    textValue: textValue,
    'aria-label': props['aria-label'],
    hasChildNodes: module_$c1d7fb2ec91bae71$var$hasChildItems(props),
    *childNodes() {
      if (childItems) for (let child1 of childItems) yield {
        type: 'item',
        value: child1
      };else if (title) {
        let items = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, child => {
          items.push({
            type: 'item',
            element: child
          });
        });
        yield* items;
      }
    }
  };
};
function module_$c1d7fb2ec91bae71$var$hasChildItems(props) {
  if (props.hasChildItems != null) return props.hasChildItems;
  if (props.childItems) return true;
  if (props.title && external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(props.children) > 0) return true;
  return false;
}
// We don't want getCollectionNode to show up in the type definition
let module_$c1d7fb2ec91bae71$export$6d08773d2e66f8f2 = module_$c1d7fb2ec91bae71$var$Item;
function module_$9fc4852771d079eb$var$Section(props) {
  return null;
}
module_$9fc4852771d079eb$var$Section.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children,
    title: title,
    items: items1
  } = props;
  yield {
    type: 'section',
    hasChildNodes: true,
    rendered: title,
    'aria-label': props['aria-label'],
    *childNodes() {
      if (typeof children === 'function') {
        if (!items1) throw new Error('props.children was a function but props.items is missing');
        for (let item of items1) yield {
          type: 'item',
          value: item,
          renderer: children
        };
      } else {
        let items = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, child => {
          items.push({
            type: 'item',
            element: child
          });
        });
        yield* items;
      }
    }
  };
};
// We don't want getCollectionNode to show up in the type definition
let module_$9fc4852771d079eb$export$6e2c8f0811a474ce = module_$9fc4852771d079eb$var$Section;
class module_$eb2240fc39a57fa5$export$bf788dd355e3a401 {
  build(props, context) {
    this.context = context;
    return module_$eb2240fc39a57fa5$var$iterable(() => this.iterateCollection(props));
  }
  *iterateCollection(props) {
    let {
      children: children,
      items: items
    } = props;
    if (typeof children === 'function') {
      if (!items) throw new Error('props.children was a function but props.items is missing');
      for (let item of props.items) yield* this.getFullNode({
        value: item
      }, {
        renderer: children
      });
    } else {
      let items = [];
      $tyW6A$react.Children.forEach(children, child => {
        items.push(child);
      });
      let index = 0;
      for (let item of items) {
        let nodes = this.getFullNode({
          element: item,
          index: index
        }, {});
        for (let node of nodes) {
          index++;
          yield node;
        }
      }
    }
  }
  getKey(item, partialNode, state, parentKey) {
    if (item.key != null) return item.key;
    if (partialNode.type === 'cell' && partialNode.key != null) return `${parentKey}${partialNode.key}`;
    let v = partialNode.value;
    if (v != null) {
      var _key;
      let key = (_key = v.key) !== null && _key !== void 0 ? _key : v.id;
      if (key == null) throw new Error('No key found for item');
      return key;
    }
    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;
  }
  getChildState(state, partialNode) {
    return {
      renderer: partialNode.renderer || state.renderer
    };
  }
  *getFullNode(partialNode, state, parentKey, parentNode) {
    // If there's a value instead of an element on the node, and a parent renderer function is available,
    // use it to render an element for the value.
    let element = partialNode.element;
    if (!element && partialNode.value && state && state.renderer) {
      let cached = this.cache.get(partialNode.value);
      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
        cached.index = partialNode.index;
        cached.parentKey = parentNode ? parentNode.key : null;
        yield cached;
        return;
      }
      element = state.renderer(partialNode.value);
    }
    // If there's an element with a getCollectionNode function on its type, then it's a supported component.
    // Call this function to get a partial node, and recursively build a full node from there.
    if ($tyW6A$react.isValidElement(element)) {
      let type = element.type;
      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {
        let name = typeof element.type === 'function' ? element.type.name : element.type;
        throw new Error(`Unknown element <${name}> in collection.`);
      }
      let childNodes = type.getCollectionNode(element.props, this.context);
      let index = partialNode.index;
      let result = childNodes.next();
      while (!result.done && result.value) {
        let childNode = result.value;
        partialNode.index = index;
        let nodeKey = childNode.key;
        if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
        let nodes = this.getFullNode({
          ...childNode,
          key: nodeKey,
          index: index,
          wrapper: module_$eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)
        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);
        let children = [...nodes];
        for (let node of children) {
          // Cache the node based on its value
          node.value = childNode.value || partialNode.value;
          if (node.value) this.cache.set(node.value, node);
          // The partial node may have specified a type for the child in order to specify a constraint.
          // Verify that the full node that was built recursively matches this type.
          if (partialNode.type && node.type !== partialNode.type) throw new Error(`Unsupported type <${module_$eb2240fc39a57fa5$var$capitalize(node.type)}> in <${module_$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${module_$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);
          index++;
          yield node;
        }
        result = childNodes.next(children);
      }
      return;
    }
    // Ignore invalid elements
    if (partialNode.key == null) return;
    // Create full node
    let builder = this;
    let node = {
      type: partialNode.type,
      props: partialNode.props,
      key: partialNode.key,
      parentKey: parentNode ? parentNode.key : null,
      value: partialNode.value,
      level: parentNode ? parentNode.level + 1 : 0,
      index: partialNode.index,
      rendered: partialNode.rendered,
      textValue: partialNode.textValue,
      'aria-label': partialNode['aria-label'],
      wrapper: partialNode.wrapper,
      shouldInvalidate: partialNode.shouldInvalidate,
      hasChildNodes: partialNode.hasChildNodes,
      childNodes: module_$eb2240fc39a57fa5$var$iterable(function* () {
        if (!partialNode.hasChildNodes) return;
        let index = 0;
        for (let child of partialNode.childNodes()) {
          // Ensure child keys are globally unique by prepending the parent node's key
          if (child.key != null)
            // TODO: Remove this line entirely and enforce that users always provide unique keys.
            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`
            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both
            // children having a key of `abc`.
            child.key = `${node.key}${child.key}`;
          child.index = index;
          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);
          for (let node1 of nodes) {
            index++;
            yield node1;
          }
        }
      })
    };
    yield node;
  }
  constructor() {
    this.cache = new WeakMap();
  }
}
// Wraps an iterator function as an iterable object, and caches the results.
function module_$eb2240fc39a57fa5$var$iterable(iterator) {
  let cache = [];
  let iterable = null;
  return {
    *[Symbol.iterator]() {
      for (let item of cache) yield item;
      if (!iterable) iterable = iterator();
      for (let item1 of iterable) {
        cache.push(item1);
        yield item1;
      }
    }
  };
}
function module_$eb2240fc39a57fa5$var$compose(outer, inner) {
  if (outer && inner) return element => outer(inner(element));
  if (outer) return outer;
  if (inner) return inner;
}
function module_$eb2240fc39a57fa5$var$capitalize(str) {
  return str[0].toUpperCase() + str.slice(1);
}
function module_$7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context, invalidators = []) {
  let builder = $tyW6A$useMemo(() => new module_$eb2240fc39a57fa5$export$bf788dd355e3a401(), []);
  let prev = $tyW6A$useRef(null);
  return $tyW6A$useMemo(() => {
    let nodes = builder.build(props, context);
    prev.current = factory(nodes, prev.current);
    return prev.current;
    // Don't invalidate when any prop changes, just the two we care about.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [builder, props.children, props.items, context, ...invalidators]);
}
const module_$453cc9f0df89c0a5$var$cache = new WeakMap();
function module_$453cc9f0df89c0a5$export$77d5aafae4e095b2(collection) {
  let count = module_$453cc9f0df89c0a5$var$cache.get(collection);
  if (count != null) return count;
  count = 0;
  for (let item of collection) if (item.type === 'section') count += module_$453cc9f0df89c0a5$export$77d5aafae4e095b2(item.childNodes);else count++;
  module_$453cc9f0df89c0a5$var$cache.set(collection, count);
  return count;
}

;// CONCATENATED MODULE: ./src/dropdown/base/dropdown-item-base.tsx

const DropdownItem = module_$c1d7fb2ec91bae71$export$6d08773d2e66f8f2;
DropdownItem.toString = () => ".nextui-dropdown-item-base";
/* harmony default export */ const dropdown_item_base = (DropdownItem);
;// CONCATENATED MODULE: ./src/dropdown/dropdown-context.tsx

const [DropdownProvider, useDropdownContext] = createContext({
  name: "DropdownContext",
  errorMessage: "useDropdownContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Dropdown />`"
});
;// CONCATENATED MODULE: ./src/dropdown/dropdown-trigger.tsx
var dropdown_trigger_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/dropdown/dropdown-trigger.tsx";





/**
 * DropdownTrigger opens the popover's content. It must be an interactive element
 * such as `button` or `a`.
 */
const DropdownTrigger = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, _) => {
  const {
    children,
    ...otherProps
  } = props;
  const {
    getMenuTriggerProps
  } = useDropdownContext();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_popover.Trigger, {
    ...getMenuTriggerProps(otherProps),
    children: children
  }, void 0, false, {
    fileName: dropdown_trigger_jsxFileName,
    lineNumber: 25,
    columnNumber: 12
  }, undefined);
});
if (__DEV__) {
  DropdownTrigger.displayName = "NextUI.DropdownTrigger";
}
DropdownTrigger.toString = () => ".nextui-dropdown-trigger";
/* harmony default export */ const dropdown_trigger = (DropdownTrigger);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/menu/dist/module.js






function menu_dist_module_$parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $9bdd31893c9700c3$exports = {};
var $c0398ad35c3639b7$exports = {};
$c0398ad35c3639b7$exports = {
  "longPressMessage": `اضغط مطولاً أو اضغط على Alt + السهم لأسفل لفتح القائمة`
};
var $7af657c4165927c3$exports = {};
$7af657c4165927c3$exports = {
  "longPressMessage": `Натиснете продължително или натиснете Alt+ стрелка надолу, за да отворите менюто`
};
var $d95d4da6d531ab81$exports = {};
$d95d4da6d531ab81$exports = {
  "longPressMessage": `Dlouhým stiskem nebo stisknutím kláves Alt + šipka dolů otevřete nabídku`
};
var $24ebda9c775dca17$exports = {};
$24ebda9c775dca17$exports = {
  "longPressMessage": `Langt tryk eller tryk på Alt + pil ned for at åbne menuen`
};
var $743e0dfca6cab1e9$exports = {};
$743e0dfca6cab1e9$exports = {
  "longPressMessage": `Drücken Sie lange oder drücken Sie Alt + Nach-unten, um das Menü zu öffnen`
};
var $a2f41026e05f1c84$exports = {};
$a2f41026e05f1c84$exports = {
  "longPressMessage": `Πιέστε παρατεταμένα ή πατήστε Alt + κάτω βέλος για να ανοίξετε το μενού`
};
var $43b800e97c901737$exports = {};
$43b800e97c901737$exports = {
  "longPressMessage": `Long press or press Alt + ArrowDown to open menu`
};
var $442f5f6ac211e29f$exports = {};
$442f5f6ac211e29f$exports = {
  "longPressMessage": `Mantenga pulsado o pulse Alt + flecha abajo para abrir el menú`
};
var $dff280acfeb2d8ac$exports = {};
$dff280acfeb2d8ac$exports = {
  "longPressMessage": `Menüü avamiseks vajutage pikalt või vajutage klahve Alt + allanool`
};
var $51608325613944d7$exports = {};
$51608325613944d7$exports = {
  "longPressMessage": `Avaa valikko painamalla pohjassa tai näppäinyhdistelmällä Alt + Alanuoli`
};
var $c4a1b1eabeaa87be$exports = {};
$c4a1b1eabeaa87be$exports = {
  "longPressMessage": `Appuyez de manière prolongée ou appuyez sur Alt + Flèche vers le bas pour ouvrir le menu.`
};
var $8c74815cdee18d1b$exports = {};
$8c74815cdee18d1b$exports = {
  "longPressMessage": `לחץ לחיצה ארוכה או הקש Alt + ArrowDown כדי לפתוח את התפריט`
};
var $fd0e9ef6a7fe0ec9$exports = {};
$fd0e9ef6a7fe0ec9$exports = {
  "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika`
};
var $a89a74a39eba465a$exports = {};
$a89a74a39eba465a$exports = {
  "longPressMessage": `Nyomja meg hosszan, vagy nyomja meg az Alt + lefele nyíl gombot a menü megnyitásához`
};
var $edc7c66594a0ae8a$exports = {};
$edc7c66594a0ae8a$exports = {
  "longPressMessage": `Premere a lungo o premere Alt + Freccia giù per aprire il menu`
};
var $f1ab51510712db52$exports = {};
$f1ab51510712db52$exports = {
  "longPressMessage": `長押しまたは Alt+下矢印キーでメニューを開く`
};
var $f9b672d9b82fa3d6$exports = {};
$f9b672d9b82fa3d6$exports = {
  "longPressMessage": `길게 누르거나 Alt + 아래쪽 화살표를 눌러 메뉴 열기`
};
var $a385f3910feda499$exports = {};
$a385f3910feda499$exports = {
  "longPressMessage": `Norėdami atidaryti meniu, nuspaudę palaikykite arba paspauskite „Alt + ArrowDown“.`
};
var $4f1bde932c441789$exports = {};
$4f1bde932c441789$exports = {
  "longPressMessage": `Lai atvērtu izvēlni, turiet nospiestu vai nospiediet taustiņu kombināciju Alt + lejupvērstā bultiņa`
};
var $914a51a8a594d5be$exports = {};
$914a51a8a594d5be$exports = {
  "longPressMessage": `Langt trykk eller trykk Alt + PilNed for å åpne menyen`
};
var $89aaf803103bb500$exports = {};
$89aaf803103bb500$exports = {
  "longPressMessage": `Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen`
};
var $c685891476dbaaca$exports = {};
$c685891476dbaaca$exports = {
  "longPressMessage": `Naciśnij i przytrzymaj lub naciśnij klawisze Alt + Strzałka w dół, aby otworzyć menu`
};
var $885879b9b10c2959$exports = {};
$885879b9b10c2959$exports = {
  "longPressMessage": `Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu`
};
var $6b39616688a51692$exports = {};
$6b39616688a51692$exports = {
  "longPressMessage": `Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu`
};
var $f26362aed63f47e2$exports = {};
$f26362aed63f47e2$exports = {
  "longPressMessage": `Apăsați lung sau apăsați pe Alt + săgeată în jos pentru a deschide meniul`
};
var $06cbade644558bf0$exports = {};
$06cbade644558bf0$exports = {
  "longPressMessage": `Нажмите и удерживайте или нажмите Alt + Стрелка вниз, чтобы открыть меню`
};
var $0a391ff68f9d59b1$exports = {};
$0a391ff68f9d59b1$exports = {
  "longPressMessage": `Ponuku otvoríte dlhým stlačením alebo stlačením klávesu Alt + klávesu so šípkou nadol`
};
var $8193cf0e649c7928$exports = {};
$8193cf0e649c7928$exports = {
  "longPressMessage": `Za odprtje menija pritisnite in držite gumb ali pritisnite Alt+puščica navzdol`
};
var $f398debcce5a5c55$exports = {};
$f398debcce5a5c55$exports = {
  "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni`
};
var $9e9fef000aa4c013$exports = {};
$9e9fef000aa4c013$exports = {
  "longPressMessage": `Håll nedtryckt eller tryck på Alt + pil nedåt för att öppna menyn`
};
var $c016c8183bbe3d68$exports = {};
$c016c8183bbe3d68$exports = {
  "longPressMessage": `Menüyü açmak için uzun basın veya Alt + Aşağı Ok tuşuna basın`
};
var $ca4f6c8462244e62$exports = {};
$ca4f6c8462244e62$exports = {
  "longPressMessage": `Довго або звичайно натисніть комбінацію клавіш Alt і стрілка вниз, щоб відкрити меню`
};
var $2d9960c02ccac927$exports = {};
$2d9960c02ccac927$exports = {
  "longPressMessage": `长按或按 Alt + 向下方向键以打开菜单`
};
var $f1b682a4c8c5631c$exports = {};
$f1b682a4c8c5631c$exports = {
  "longPressMessage": `長按或按 Alt+向下鍵以開啟功能表`
};
$9bdd31893c9700c3$exports = {
  "ar-AE": $c0398ad35c3639b7$exports,
  "bg-BG": $7af657c4165927c3$exports,
  "cs-CZ": $d95d4da6d531ab81$exports,
  "da-DK": $24ebda9c775dca17$exports,
  "de-DE": $743e0dfca6cab1e9$exports,
  "el-GR": $a2f41026e05f1c84$exports,
  "en-US": $43b800e97c901737$exports,
  "es-ES": $442f5f6ac211e29f$exports,
  "et-EE": $dff280acfeb2d8ac$exports,
  "fi-FI": $51608325613944d7$exports,
  "fr-FR": $c4a1b1eabeaa87be$exports,
  "he-IL": $8c74815cdee18d1b$exports,
  "hr-HR": $fd0e9ef6a7fe0ec9$exports,
  "hu-HU": $a89a74a39eba465a$exports,
  "it-IT": $edc7c66594a0ae8a$exports,
  "ja-JP": $f1ab51510712db52$exports,
  "ko-KR": $f9b672d9b82fa3d6$exports,
  "lt-LT": $a385f3910feda499$exports,
  "lv-LV": $4f1bde932c441789$exports,
  "nb-NO": $914a51a8a594d5be$exports,
  "nl-NL": $89aaf803103bb500$exports,
  "pl-PL": $c685891476dbaaca$exports,
  "pt-BR": $885879b9b10c2959$exports,
  "pt-PT": $6b39616688a51692$exports,
  "ro-RO": $f26362aed63f47e2$exports,
  "ru-RU": $06cbade644558bf0$exports,
  "sk-SK": $0a391ff68f9d59b1$exports,
  "sl-SI": $8193cf0e649c7928$exports,
  "sr-SP": $f398debcce5a5c55$exports,
  "sv-SE": $9e9fef000aa4c013$exports,
  "tr-TR": $c016c8183bbe3d68$exports,
  "uk-UA": $ca4f6c8462244e62$exports,
  "zh-CN": $2d9960c02ccac927$exports,
  "zh-TW": $f1b682a4c8c5631c$exports
};
function $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {
  let {
    type = 'menu',
    isDisabled: isDisabled,
    trigger = 'press'
  } = props;
  let menuTriggerId = utils_dist_module_$bdb11010cef70236$export$f680877a34711e37();
  let {
    triggerProps: triggerProps,
    overlayProps: overlayProps
  } = module_$628037886ba31236$export$f9d5c8beee7d008d({
    type: type
  }, state, ref);
  let onKeyDown = e => {
    if (isDisabled) return;
    if (trigger === 'longPress' && !e.altKey) return;
    if (ref && ref.current) switch (e.key) {
      case 'Enter':
      case ' ':
        if (trigger === 'longPress') return;
      // fallthrough
      case 'ArrowDown':
        // Stop propagation, unless it would already be handled by useKeyboard.
        if (!('continuePropagation' in e)) e.stopPropagation();
        e.preventDefault();
        state.toggle('first');
        break;
      case 'ArrowUp':
        if (!('continuePropagation' in e)) e.stopPropagation();
        e.preventDefault();
        state.toggle('last');
        break;
    }
  };
  let stringFormatter = dist_real_module_$fca6afa0e843324b$export$f12b703ca79dfbb1( /*@__PURE__*/menu_dist_module_$parcel$interopDefault($9bdd31893c9700c3$exports));
  let {
    longPressProps: longPressProps
  } = dist_module_$8a26561d2877236e$export$c24ed0104d07eab9({
    isDisabled: isDisabled || trigger !== 'longPress',
    accessibilityDescription: stringFormatter.format('longPressMessage'),
    onLongPressStart() {
      state.close();
    },
    onLongPress() {
      state.open('first');
    }
  });
  let pressProps = {
    onPressStart(e) {
      // For consistency with native, open the menu on mouse/key down, but touch up.
      if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled)
        // If opened with a screen reader, auto focus the first item.
        // Otherwise, the menu itself will be focused.
        state.toggle(e.pointerType === 'virtual' ? 'first' : null);
    },
    onPress(e) {
      if (e.pointerType === 'touch' && !isDisabled) state.toggle();
    }
  };
  // omit onPress from triggerProps since we override it above.
  delete triggerProps.onPress;
  return {
    menuTriggerProps: {
      ...triggerProps,
      ...(trigger === 'press' ? pressProps : longPressProps),
      id: menuTriggerId,
      onKeyDown: onKeyDown
    },
    menuProps: {
      ...overlayProps,
      'aria-labelledby': menuTriggerId,
      autoFocus: state.focusStrategy,
      onClose: state.close
    }
  };
}
const $d5336fe17ce95402$export$6f49b4016bfc8d56 = new WeakMap();
function $d5336fe17ce95402$export$38eaa17faae8f579(props, state, ref) {
  let {
    shouldFocusWrap = true,
    ...otherProps
  } = props;
  if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');
  let domProps = utils_dist_module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  let {
    listProps: listProps
  } = $982254629710d113$export$b95089534ab7c1fd({
    ...otherProps,
    ref: ref,
    selectionManager: state.selectionManager,
    collection: state.collection,
    disabledKeys: state.disabledKeys,
    shouldFocusWrap: shouldFocusWrap
  });
  $d5336fe17ce95402$export$6f49b4016bfc8d56.set(state, {
    onClose: props.onClose,
    onAction: props.onAction
  });
  return {
    menuProps: utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      role: 'menu',
      ...listProps
    })
  };
}
function $a2e5df62f93c7633$export$9d32628fc2aea7da(props, state, ref) {
  let {
    key: key,
    closeOnSelect: closeOnSelect,
    isVirtualized: isVirtualized
  } = props;
  var _isDisabled;
  let isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);
  var _isSelected;
  let isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);
  let isFocused = state.selectionManager.focusedKey === key;
  let data = $d5336fe17ce95402$export$6f49b4016bfc8d56.get(state);
  let onClose = props.onClose || data.onClose;
  let onAction = props.onAction || data.onAction;
  let role = 'menuitem';
  if (state.selectionManager.selectionMode === 'single') role = 'menuitemradio';else if (state.selectionManager.selectionMode === 'multiple') role = 'menuitemcheckbox';
  let labelId = utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8();
  let descriptionId = utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8();
  let keyboardId = utils_dist_module_$bdb11010cef70236$export$b4cc09c592e8fdb8();
  let ariaProps = {
    'aria-disabled': isDisabled,
    role: role,
    'aria-label': props['aria-label'],
    'aria-labelledby': labelId,
    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined
  };
  if (state.selectionManager.selectionMode !== 'none') ariaProps['aria-checked'] = isSelected;
  if (isVirtualized) {
    ariaProps['aria-posinset'] = state.collection.getItem(key).index;
    ariaProps['aria-setsize'] = $453cc9f0df89c0a5$export$77d5aafae4e095b2(state.collection);
  }
  let onKeyDown = e => {
    // Ignore repeating events, which may have started on the menu trigger before moving
    // focus to the menu item. We want to wait for a second complete key press sequence.
    if (e.repeat) return;
    switch (e.key) {
      case ' ':
        if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) onClose();
        break;
      case 'Enter':
        // The Enter key should always close on select, except if overridden.
        if (!isDisabled && closeOnSelect !== false && onClose) onClose();
        break;
    }
  };
  let onPressStart = e => {
    if (e.pointerType === 'keyboard' && onAction) onAction(key);
  };
  let onPressUp = e => {
    if (e.pointerType !== 'keyboard') {
      if (onAction) onAction(key);
      // Pressing a menu item should close by default in single selection mode but not multiple
      // selection mode, except if overridden by the closeOnSelect prop.
      if (onClose && (closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : state.selectionManager.selectionMode !== 'multiple')) onClose();
    }
  };
  let {
    itemProps: itemProps
  } = $880e95eb8b93ba9a$export$ecf600387e221c37({
    selectionManager: state.selectionManager,
    key: key,
    ref: ref,
    shouldSelectOnPressUp: true,
    allowsDifferentPressOrigin: true
  });
  let {
    pressProps: pressProps,
    isPressed: isPressed
  } = dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    onPressStart: onPressStart,
    onPressUp: onPressUp,
    isDisabled: isDisabled
  });
  let {
    hoverProps: hoverProps
  } = dist_module_$6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled: isDisabled,
    onHoverStart() {
      if (!dist_module_$507fabe10e71c6fb$export$b9b3dfddab17db27()) {
        state.selectionManager.setFocused(true);
        state.selectionManager.setFocusedKey(key);
      }
    }
  });
  return {
    menuItemProps: {
      ...ariaProps,
      ...utils_dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(itemProps, pressProps, hoverProps, {
        onKeyDown: onKeyDown
      })
    },
    labelProps: {
      id: labelId
    },
    descriptionProps: {
      id: descriptionId
    },
    keyboardShortcutProps: {
      id: keyboardId
    },
    isFocused: isFocused,
    isSelected: isSelected,
    isPressed: isPressed,
    isDisabled: isDisabled
  };
}
function $3e5eb2498db5b506$export$73f7a44322579622(props) {
  let {
    heading: heading,
    'aria-label': ariaLabel
  } = props;
  let headingId = utils_dist_module_$bdb11010cef70236$export$f680877a34711e37();
  return {
    itemProps: {
      role: 'presentation'
    },
    headingProps: heading ? {
      // Techincally, menus cannot contain headings according to ARIA.
      // We hide the heading from assistive technology, and only use it
      // as a label for the nested group.
      id: headingId,
      'aria-hidden': true
    } : {},
    groupProps: {
      role: 'group',
      'aria-label': ariaLabel,
      'aria-labelledby': heading ? headingId : undefined
    }
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-stately/tree/dist/module.js




var module_tmp = Symbol.iterator;
class $05ca4cd7c4a5a999$export$863faf230ee2118a {
  *[module_tmp]() {
    yield* this.iterable;
  }
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [...this.getKeys()];
    return this.getItem(keys[idx]);
  }
  constructor(nodes, {
    expandedKeys: expandedKeys
  } = {}) {
    this.keyMap = new Map();
    this.iterable = nodes;
    expandedKeys = expandedKeys || new Set();
    let visit = node => {
      this.keyMap.set(node.key, node);
      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) for (let child of node.childNodes) visit(child);
    };
    for (let node2 of nodes) visit(node2);
    let last;
    let index = 0;
    for (let [key, node1] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node1.prevKey = last.key;
      } else {
        this.firstKey = key;
        node1.prevKey = undefined;
      }
      if (node1.type === 'item') node1.index = index++;
      last = node1;
      // Set nextKey as undefined since this might be the last node
      // If it isn't the last node, last.nextKey will properly set at start of new loop
      last.nextKey = undefined;
    }
    this.lastKey = last === null || last === void 0 ? void 0 : last.key;
  }
}
function $875d6693e12af071$export$728d6ba534403756(props) {
  let [expandedKeys, setExpandedKeys] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange);
  let selectionState = $7af3f5b51489e0b5$export$253fe78d46329472(props);
  let disabledKeys = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);
  let tree = $7613b1592d41b092$export$6cd28814d92fa9c9(props, nodes => new $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes, {
    expandedKeys: expandedKeys
  }), null, [expandedKeys]);
  // Reset focused key if that item is deleted from the collection.
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);
  }, [tree, selectionState.focusedKey]);
  let onToggle = key => {
    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));
  };
  return {
    collection: tree,
    expandedKeys: expandedKeys,
    disabledKeys: disabledKeys,
    toggleKey: onToggle,
    selectionManager: new $d496c0a20b6e58ec$export$6c8a5aaad13c9852(tree, selectionState)
  };
}
function $875d6693e12af071$var$toggleKey(set, key) {
  let res = new Set(set);
  if (res.has(key)) res.delete(key);else res.add(key);
  return res;
}

;// CONCATENATED MODULE: ./src/dropdown/dropdown.styles.ts


const StyledDropdownMenu = styled("ul", {
  $$dropdownItemHeight: "$space$13",
  $$dropdownMenuPadding: "$space$4",
  $$dropdownMenuWidth: "250px",
  $$dropdownMenuMinWidth: "250px",
  listStyle: "none",
  position: "relative",
  maxWidth: "$$dropdownMenuWidth",
  minWidth: "$$dropdownMenuMinWidth",
  width: "100%",
  p: "$$dropdownMenuPadding",
  m: 0,
  outline: "none"
});
const StyledDropdownItemIconWrapper = styled("span", {
  dflex: "center",
  flexShrink: 0,
  mr: "$4"
});
const StyledDropdownItemKbd = styled("kbd", {
  opacity: 0.8,
  ml: "$4",
  mr: 0,
  dflex: "center",
  color: "$$dropdownItemKeyboardColor",
  fontSize: "$xs",
  fontFamily: "$sans",
  boxShadow: "none",
  bg: "transparent",
  transition: "border 0.12s ease 0s"
});
const StyledDropdownItemContentWrapper = styled("div", {
  d: "flex",
  flex: "1 1 0%",
  flexDirection: "column",
  alignItems: "flex-start",
  lineHeight: 1.2
});
const StyledDropdownItemContent = styled("span", {
  flex: "1 1 0%"
});
const StyledDropdownItemDescription = styled("span", {
  fontSize: "$xs",
  color: "$$dropdownItemDescriptionColor",
  truncateText: "calc($$dropdownMenuWidth * 0.9)",
  transition: "color 0.12s ease 0s",
  variants: {
    hasIcon: {
      true: {
        truncateText: "calc($$dropdownMenuWidth * 0.7)"
      }
    },
    hasCommand: {
      true: {
        truncateText: "calc($$dropdownMenuWidth * 0.7)"
      }
    }
  },
  compoundVariants: [
  // hasIcon && hasCommand
  {
    hasIcon: true,
    hasCommand: true,
    css: {
      truncateText: "calc($$dropdownMenuWidth * 0.6)"
    }
  }]
});
const StyledDropdownItem = styled("li", {
  $$dropdownItemPressedScale: 0.97,
  $$dropdownItemTextColor: "$colors$text",
  $$dropdownItemBorderRadius: "$radii$sm",
  $$dropdownItemKeyboardColor: "$colors$accents8",
  $$dropdownItemDescriptionColor: "$colors$accents8",
  dflex: "center",
  outline: "none",
  cursor: "pointer",
  justifyContent: "space-between",
  bg: "transparent",
  position: "relative",
  height: "$$dropdownItemHeight",
  px: "$6",
  br: "$$dropdownItemBorderRadius",
  color: "$$dropdownItemTextColor",
  mb: 0,
  transition: "$dropdownItem",
  /* Avoid blurriness */
  transform: "translateZ(0)",
  backfaceVisibility: "hidden",
  $$dropdownItemShadow: "$colors$primaryShadow",
  "@motion": {
    transition: "none",
    [`& ${StyledDropdownItemKbd}`]: {
      transition: "none"
    },
    [`& ${StyledDropdownItemDescription}`]: {
      transition: "none"
    }
  },
  variants: {
    color: {
      default: {
        $$dropdownItemHoverBackground: "$colors$neutralLight",
        $$dropdownItemHoverTextColor: "$colors$neutralLightContrast",
        $$dropdownItemActiveBackground: "$colors$neutralLightActive",
        $$dropdownItemSolidHoverBackground: "$colors$neutral",
        $$dropdownItemSolidHoverTextColor: "$colors$neutralSolidContrast",
        $$dropdownItemShadow: "$colors$neutralShadow",
        $$dropdownItemHoverBorderColor: "$colors$neutralBorder"
      },
      primary: {
        $$dropdownItemHoverBackground: "$colors$primaryLight",
        $$dropdownItemHoverTextColor: "$colors$primaryLightContrast",
        $$dropdownItemActiveBackground: "$colors$primaryLightActive",
        $$dropdownItemSolidHoverBackground: "$colors$primary",
        $$dropdownItemSolidHoverTextColor: "$colors$primarySolidContrast",
        $$dropdownItemShadow: "$colors$primaryShadow",
        $$dropdownItemHoverBorderColor: "$colors$primaryBorder"
      },
      secondary: {
        $$dropdownItemHoverBackground: "$colors$secondaryLight",
        $$dropdownItemHoverTextColor: "$colors$secondaryLightContrast",
        $$dropdownItemActiveBackground: "$colors$secondaryLightActive",
        $$dropdownItemSolidHoverBackground: "$colors$secondary",
        $$dropdownItemSolidHoverTextColor: "$colors$secondarySolidContrast",
        $$dropdownItemShadow: "$colors$secondaryShadow",
        $$dropdownItemHoverBorderColor: "$colors$secondaryBorder"
      },
      success: {
        $$dropdownItemHoverBackground: "$colors$successLight",
        $$dropdownItemHoverTextColor: "$colors$successLightContrast",
        $$dropdownItemActiveBackground: "$colors$successLightActive",
        $$dropdownItemSolidHoverBackground: "$colors$success",
        $$dropdownItemSolidHoverTextColor: "$colors$successSolidContrast",
        $$dropdownItemShadow: "$colors$successShadow",
        $$dropdownItemHoverBorderColor: "$colors$successBorder"
      },
      warning: {
        $$dropdownItemHoverBackground: "$colors$warningLight",
        $$dropdownItemHoverTextColor: "$colors$warningLightContrast",
        $$dropdownItemActiveBackground: "$colors$warningLightActive",
        $$dropdownItemSolidHoverBackground: "$colors$warning",
        $$dropdownItemSolidHoverTextColor: "$colors$warningSolidContrast",
        $$dropdownItemShadow: "$colors$warningShadow",
        $$dropdownItemHoverBorderColor: "$colors$warningBorder"
      },
      error: {
        $$dropdownItemHoverBackground: "$colors$errorLight",
        $$dropdownItemHoverTextColor: "$colors$errorLightContrast",
        $$dropdownItemActiveBackground: "$colors$errorLightActive",
        $$dropdownItemSolidHoverBackground: "$colors$error",
        $$dropdownItemSolidHoverTextColor: "$colors$errorSolidContrast",
        $$dropdownItemShadow: "$colors$errorShadow",
        $$dropdownItemHoverBorderColor: "$colors$errorBorder"
      }
    },
    textColor: {
      default: {},
      primary: {
        $$dropdownItemTextColor: "$colors$primaryLightContrast",
        $$dropdownItemHoverTextColor: "$colors$primaryLightContrast"
      },
      secondary: {
        $$dropdownItemTextColor: "$colors$secondaryLightContrast",
        $$dropdownItemHoverTextColor: "$colors$secondaryLightContrast"
      },
      success: {
        $$dropdownItemTextColor: "$colors$successLightContrast",
        $$dropdownItemHoverTextColor: "$colors$successLightContrast"
      },
      warning: {
        $$dropdownItemTextColor: "$colors$warningLightContrast",
        $$dropdownItemHoverTextColor: "$colors$warningLightContrast"
      },
      error: {
        $$dropdownItemTextColor: "$colors$errorLightContrast",
        $$dropdownItemHoverTextColor: "$colors$errorLightContrast"
      }
    },
    variant: {
      flat: {
        true: {}
      },
      light: {
        true: {}
      },
      solid: {
        true: {}
      },
      shadow: {
        true: {}
      }
    },
    isPressed: {
      true: {
        bg: "$$dropdownItemActiveBackground"
      }
    },
    isFocused: {
      true: {
        bg: "$$dropdownItemHoverBackground",
        color: "$$dropdownItemHoverTextColor",
        zIndex: "$1",
        [`& ${StyledDropdownItemKbd}`]: {
          color: "$$dropdownItemHoverTextColor",
          borderColor: "$$dropdownItemHoverBorderColor"
        },
        [`& ${StyledDropdownItemDescription}`]: {
          color: "currentColor"
        }
      }
    },
    isHovered: {
      true: {
        bg: "$$dropdownItemHoverBackground",
        color: "$$dropdownItemHoverTextColor",
        [`& ${StyledDropdownItemKbd}`]: {
          color: "$$dropdownItemHoverTextColor",
          borderColor: "$$dropdownItemHoverBorderColor"
        },
        [`& ${StyledDropdownItemDescription}`]: {
          color: "currentColor"
        }
      }
    },
    shouldShowOutline: {
      true: {
        outline: "solid 2px $$dropdownItemActiveBackground"
      }
    },
    isSelected: {
      true: {}
    },
    isSelectable: {
      true: {}
    },
    isDisabled: {
      true: {
        color: "$accents5",
        cursor: "default"
      }
    },
    withDescription: {
      true: {
        height: "calc($$dropdownItemHeight * 1.2)"
      }
    },
    withDivider: {
      true: {
        mt: "$6",
        "&:before": {
          content: '""',
          position: "absolute",
          top: "-$3",
          left: "-$$dropdownMenuPadding",
          right: "-$$dropdownMenuPadding",
          height: "$$dropdownItemBorderWeight",
          bg: "$border"
        }
      }
    },
    dividerWeight: {
      light: {
        $$dropdownItemBorderWeight: "$borderWeights$light"
      },
      normal: {
        $$dropdownItemBorderWeight: "$borderWeights$normal"
      },
      bold: {
        $$dropdownItemBorderWeight: "$borderWeights$bold"
      },
      extrabold: {
        $$dropdownItemBorderWeight: "$borderWeights$extrabold"
      },
      black: {
        $$dropdownItemBorderWeight: "$borderWeights$black"
      }
    },
    showFullDescription: {
      true: {
        [`& ${StyledDropdownItemDescription}`]: {
          mt: "$2",
          overflow: "visible",
          textOverflow: "visible",
          whiteSpace: "normal"
        }
      }
    },
    disableAnimation: {
      true: {
        transition: "none",
        [`& ${StyledDropdownItemKbd}`]: {
          transition: "none"
        },
        [`& ${StyledDropdownItemDescription}`]: {
          transition: "none"
        }
      }
    }
  },
  compoundVariants: [
  // !disableAnimation && isPressed
  {
    isPressed: true,
    disableAnimation: false,
    css: {
      transform: "scale($$dropdownItemPressedScale)"
    }
  },
  // isHovered & variant === 'light'
  {
    isHovered: true,
    variant: "light",
    css: {
      bg: "transparent"
    }
  },
  // isFocused & variant === 'light'
  {
    isFocused: true,
    variant: "light",
    css: {
      bg: "transparent"
    }
  },
  // isHovered && variant === 'solid'
  {
    isHovered: true,
    variant: "solid",
    css: {
      bg: "$$dropdownItemSolidHoverBackground",
      color: "$$dropdownItemSolidHoverTextColor",
      [`& ${StyledDropdownItemKbd}`]: {
        color: "$$dropdownItemSolidHoverTextColor"
      }
    }
  },
  // isFocused && variant === 'solid'
  {
    isFocused: true,
    variant: "solid",
    css: {
      bg: "$$dropdownItemSolidHoverBackground",
      color: "$$dropdownItemSolidHoverTextColor",
      [`& ${StyledDropdownItemKbd}`]: {
        color: "$$dropdownItemSolidHoverTextColor"
      }
    }
  },
  // isHovered && variant === 'shadow'
  {
    isHovered: true,
    variant: "shadow",
    css: {
      bg: "$$dropdownItemSolidHoverBackground",
      color: "$$dropdownItemSolidHoverTextColor",
      boxShadow: `0 3px 10px 0 $$dropdownItemShadow`,
      [`& ${StyledDropdownItemKbd}`]: {
        color: "$$dropdownItemSolidHoverTextColor"
      }
    }
  },
  // isFocused && variant === 'shadow'
  {
    isFocused: true,
    variant: "shadow",
    css: {
      bg: "$$dropdownItemSolidHoverBackground",
      color: "$$dropdownItemSolidHoverTextColor",
      boxShadow: `0 3px 10px 0 $$dropdownItemShadow`,
      [`& ${StyledDropdownItemKbd}`]: {
        color: "$$dropdownItemSolidHoverTextColor"
      }
    }
  },
  // variant === 'flat' && color === 'default'
  {
    variant: "flat",
    color: "default",
    css: {
      $$dropdownItemHoverTextColor: "$colors$foreground"
    }
  }],
  defaultVariants: {
    color: "default",
    textColor: "default",
    dividerWeight: "light",
    variant: "flat"
  }
}, cssFocusVisible);
const StyledDropdownSectionWrapper = styled("li", {
  mb: 0
});
const StyledDropdownSection = styled("ul", {
  m: 0,
  p: 0,
  listStyle: "none"
});
const StyledDropdownSectionTitle = styled("span", {
  fontWeight: "$medium",
  fontSize: "$xs",
  padding: "0 $4",
  color: "$accents8"
});
;// CONCATENATED MODULE: ./src/utils/checkmark.tsx
var checkmark_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/checkmark.tsx";





const stroke = keyframes({
  "100%": {
    strokeDashoffset: 0
  }
});
const StyledCheckmark = styled("svg", {
  d: "block",
  path: {
    transformOrigin: "50% 50%",
    strokeDasharray: 48,
    strokeDashoffset: 48,
    animation: `${stroke} .25s cubic-bezier(0.650, 0.000, 0.450, 1.000) forwards`
  }
});
const Checkmark = props => {
  const {
    width = 24,
    height = 24,
    size,
    strokeWidth = 3,
    fill = "currentColor",
    css,
    className
  } = props;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckmark, {
    className: clsx("nextui-checkmark", className),
    css: css,
    height: size || height,
    role: "img",
    viewBox: "0 0 52 52",
    width: size || width,
    xmlns: "http://www.w3.org/2000/svg",
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M14.1 27.2l7.1 7.2 16.7-16.8",
      fill: "none",
      stroke: fill,
      strokeWidth: strokeWidth
    }, void 0, false, {
      fileName: checkmark_jsxFileName,
      lineNumber: 61,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: checkmark_jsxFileName,
    lineNumber: 52,
    columnNumber: 5
  }, undefined);
};
if (__DEV__) {
  Checkmark.displayName = "NextUI.Checkmark";
}
Checkmark.toString = () => ".nextui-checkmark";
/* harmony default export */ const checkmark = (Checkmark);
;// CONCATENATED MODULE: ./src/dropdown/dropdown-item.tsx
var dropdown_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/dropdown/dropdown-item.tsx";











const dropdown_item_DropdownItem = ({
  as,
  css,
  item,
  state,
  color,
  icon,
  command,
  description,
  textColor,
  variant,
  autoFocus,
  isVirtualized,
  withDivider,
  dividerWeight,
  showFullDescription,
  className,
  onAction
}) => {
  const {
    onClose,
    closeOnSelect,
    disableAnimation,
    borderWeight
  } = useDropdownContext();
  const {
    rendered,
    key
  } = item;
  const isSelected = state.selectionManager.isSelected(key);
  const isFocused = state.selectionManager.focusedKey === item.key;
  const isDisabled = state.disabledKeys.has(key);
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const {
    pressProps,
    isPressed
  } = interactions_dist_module_$f6c31cce2adf654f$export$45712eceda6fad21({
    ref,
    isDisabled
  });
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    autoFocus
  });
  const {
    hoverProps,
    isHovered
  } = interactions_dist_module_$6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled
  });
  const isSelectable = state.selectionManager.selectionMode !== "none" && !isDisabled;
  const {
    menuItemProps,
    labelProps,
    descriptionProps,
    keyboardShortcutProps
  } = $a2e5df62f93c7633$export$9d32628fc2aea7da({
    key,
    onClose,
    isSelected,
    isDisabled,
    "aria-label": item["aria-label"],
    closeOnSelect,
    isVirtualized,
    onAction
  }, state, ref);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isHovered) return "hovered";
    if (isSelected) return "selected";
    if (isPressed) return "pressed";
    return isDisabled ? "disabled" : "ready";
  }, [isSelected, isDisabled, isHovered, isPressed]);
  const getTextColor = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (item.props.textColor) {
      return item.props.textColor;
    }
    if (item.props.color && textColor === "default") {
      return item.props.color;
    }
    return textColor;
  }, [textColor, item.props.color, item.props.textColor]);
  const withDescription = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => description || item.props.description, [description, item.props.description]);
  const withCommand = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => command || item.props.command, [command, item.props.command]);
  const withIcon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => icon || item.props.icon, [icon, item.props.icon]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownItem, {
    ref: ref,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(menuItemProps, hoverProps, pressProps, focusProps),
    as: item.props.as || as,
    className: clsx("nextui-dropdown-item", {
      "is-disabled": isDisabled,
      "is-selected": isSelected,
      "is-selectable": isSelectable,
      "is-hovered": isHovered,
      "is-focused": isFocused,
      "is-pressed": isPressed
    }, className, item.props.className),
    color: item.props.color || color,
    css: {
      ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(css, item.props.css)
    },
    "data-state": getState,
    disableAnimation: disableAnimation,
    dividerWeight: dividerWeight || item.props.dividerWeight || borderWeight,
    isDisabled: isDisabled,
    isFocusVisible: isFocusVisible,
    isFocused: isFocused,
    isHovered: isHovered,
    isPressed: isPressed,
    isSelectable: isSelectable,
    isSelected: isSelected,
    shouldShowOutline: isFocusVisible && variant === "shadow",
    showFullDescription: showFullDescription || item.props.showFullDescription,
    textColor: getTextColor,
    variant: item.props.variant || variant,
    withDescription: !!withDescription,
    withDivider: withDivider || item.props.withDivider,
    children: [withIcon && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownItemIconWrapper, {
      className: "nextui-dropdown-item-icon-wrapper",
      children: withIcon
    }, void 0, false, {
      fileName: dropdown_item_jsxFileName,
      lineNumber: 176,
      columnNumber: 9
    }, undefined), withDescription ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownItemContentWrapper, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownItemContent, {
        className: "nextui-dropdown-item-content",
        ...labelProps,
        children: rendered
      }, void 0, false, {
        fileName: dropdown_item_jsxFileName,
        lineNumber: 182,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownItemDescription, {
        className: "nextui-dropdown-item-description",
        hasCommand: !!withCommand,
        hasIcon: !!withIcon,
        ...descriptionProps,
        children: withDescription
      }, void 0, false, {
        fileName: dropdown_item_jsxFileName,
        lineNumber: 185,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: dropdown_item_jsxFileName,
      lineNumber: 181,
      columnNumber: 9
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownItemContent, {
      className: "nextui-dropdown-item-content",
      ...labelProps,
      children: rendered
    }, void 0, false, {
      fileName: dropdown_item_jsxFileName,
      lineNumber: 195,
      columnNumber: 9
    }, undefined), withCommand && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownItemKbd, {
      className: "nextui-dropdown-item-command",
      ...keyboardShortcutProps,
      children: withCommand
    }, void 0, false, {
      fileName: dropdown_item_jsxFileName,
      lineNumber: 201,
      columnNumber: 9
    }, undefined), isSelected && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(checkmark, {
      css: {
        ml: "$4"
      }
    }, void 0, false, {
      fileName: dropdown_item_jsxFileName,
      lineNumber: 206,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: dropdown_item_jsxFileName,
    lineNumber: 139,
    columnNumber: 5
  }, undefined);
};
if (__DEV__) {
  dropdown_item_DropdownItem.displayName = "NextUI.DropdownItem";
}
dropdown_item_DropdownItem.toString = () => ".nextui-dropdown-item";
/* harmony default export */ const dropdown_item = (dropdown_item_DropdownItem);
;// CONCATENATED MODULE: ./src/dropdown/dropdown-section.tsx
var dropdown_section_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/dropdown/dropdown-section.tsx";









const DropdownSection = props => {
  var _item$props, _item$props2;
  const {
    item,
    state,
    css,
    as,
    color,
    textColor,
    variant,
    withDivider = true,
    className,
    onAction
  } = props;
  const {
    itemProps,
    headingProps,
    groupProps
  } = $3e5eb2498db5b506$export$73f7a44322579622({
    heading: item.rendered,
    "aria-label": item["aria-label"]
  });
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(external_root_React_commonjs2_react_commonjs_react_amd_react_.Fragment, {
    children: [item.key !== state.collection.getFirstKey() && withDivider && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_divider, {
      as: "li",
      className: "nextui-dropdown-section-divider",
      css: {
        my: "$2"
      }
    }, void 0, false, {
      fileName: dropdown_section_jsxFileName,
      lineNumber: 65,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownSectionWrapper, {
      ...itemProps,
      className: "nextui-dropdown-section-wrapper",
      children: [item.rendered && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownSectionTitle, {
        ...headingProps,
        className: "nextui-dropdown-section-title",
        children: item.rendered
      }, void 0, false, {
        fileName: dropdown_section_jsxFileName,
        lineNumber: 69,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownSection, {
        ...groupProps,
        as: ((_item$props = item.props) == null ? void 0 : _item$props.as) || as,
        className: clsx("nextui-dropdown-section", className),
        css: {
          ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(css, (_item$props2 = item.props) == null ? void 0 : _item$props2.css)
        },
        children: [...item.childNodes].map(node => {
          let item = /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(dropdown_item, {
            color: color,
            item: node,
            state: state,
            textColor: textColor,
            variant: variant,
            onAction: onAction
          }, node.key, false, {
            fileName: dropdown_section_jsxFileName,
            lineNumber: 81,
            columnNumber: 15
          }, undefined);
          if (node.wrapper) {
            item = node.wrapper(item);
          }
          return item;
        })
      }, void 0, false, {
        fileName: dropdown_section_jsxFileName,
        lineNumber: 73,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: dropdown_section_jsxFileName,
      lineNumber: 67,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: dropdown_section_jsxFileName,
    lineNumber: 63,
    columnNumber: 5
  }, undefined);
};
if (__DEV__) {
  DropdownSection.displayName = "NextUI.DropdownSection";
}
DropdownSection.toString = () => ".nextui-dropdown-section";
/* harmony default export */ const dropdown_section = (DropdownSection);
;// CONCATENATED MODULE: ./src/dropdown/dropdown-menu.tsx
var dropdown_menu_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/dropdown/dropdown-menu.tsx";













const DropdownMenu = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    as,
    css,
    color = "default",
    textColor = "default",
    variant = "flat",
    containerCss,
    ...otherProps
  } = props;
  const context = useDropdownContext();
  const completeProps = {
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(context, otherProps)
  };
  const domRef = useDOMRef(ref);
  const state = $875d6693e12af071$export$728d6ba534403756(completeProps);
  const {
    menuProps
  } = $d5336fe17ce95402$export$38eaa17faae8f579(completeProps, state, domRef);
  useSyncRef(context, domRef);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_popover.Content, {
    css: containerCss,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDropdownMenu, {
      ref: domRef,
      as: as,
      className: clsx("nextui-dropdown-menu", props.className),
      css: css,
      ...menuProps,
      children: [...state.collection].map(item => {
        if (item.type === "section") {
          return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(dropdown_section, {
            color: color,
            item: item,
            state: state,
            textColor: textColor,
            variant: variant,
            onAction: completeProps.onAction
          }, item.key, false, {
            fileName: dropdown_menu_jsxFileName,
            lineNumber: 80,
            columnNumber: 17
          }, undefined);
        }
        let dropdownItem = /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(dropdown_item, {
          color: color,
          item: item,
          state: state,
          textColor: textColor,
          variant: variant,
          onAction: completeProps.onAction
        }, item.key, false, {
          fileName: dropdown_menu_jsxFileName,
          lineNumber: 92,
          columnNumber: 15
        }, undefined);
        if (item.wrapper) {
          dropdownItem = item.wrapper(dropdownItem);
        }
        return dropdownItem;
      })
    }, void 0, false, {
      fileName: dropdown_menu_jsxFileName,
      lineNumber: 70,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: dropdown_menu_jsxFileName,
    lineNumber: 69,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  DropdownMenu.displayName = "NextUI.DropdownMenu";
}
DropdownMenu.toString = () => ".nextui-dropdown-menu";
/* harmony default export */ const dropdown_menu = (DropdownMenu);
;// CONCATENATED MODULE: ./src/dropdown/dropdown-icon.tsx
var dropdown_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/dropdown/dropdown-icon.tsx";



const DropdownIcon = ({
  fill,
  size,
  height,
  width,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
    fill: "none",
    height: size || height || 24,
    viewBox: "0 0 24 24",
    width: size || width || 24,
    xmlns: "http://www.w3.org/2000/svg",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M17.9188 8.17969H11.6888H6.07877C5.11877 8.17969 4.63877 9.33969 5.31877 10.0197L10.4988 15.1997C11.3288 16.0297 12.6788 16.0297 13.5088 15.1997L15.4788 13.2297L18.6888 10.0197C19.3588 9.33969 18.8788 8.17969 17.9188 8.17969Z",
      fill: fill
    }, void 0, false, {
      fileName: dropdown_icon_jsxFileName,
      lineNumber: 22,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: dropdown_icon_jsxFileName,
    lineNumber: 14,
    columnNumber: 5
  }, undefined);
};
if (__DEV__) {
  DropdownIcon.displayName = "NextUI.DropdownIcon";
}
DropdownIcon.toString = () => ".nextui-dropdown-icon";
/* harmony default export */ const dropdown_icon = (DropdownIcon);
;// CONCATENATED MODULE: ./src/dropdown/dropdown-button.tsx
var dropdown_button_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/dropdown/dropdown-button.tsx";









const DropdownButton = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((props, ref) => {
  const {
    css,
    children,
    className,
    iconRight,
    iconRightCss,
    auto = true,
    animated,
    ...otherProps
  } = props;
  const {
    disableAnimation
  } = useDropdownContext();
  const buttonRef = useDOMRef(ref);
  const getIconRight = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return iconRight || /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(dropdown_icon, {
      fill: "currentColor",
      size: 14
    }, void 0, false, {
      fileName: dropdown_button_jsxFileName,
      lineNumber: 32,
      columnNumber: 27
    }, undefined);
  }, [iconRight]);
  const isAnimated = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => animated || !disableAnimation, [animated, disableAnimation]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(dropdown_trigger, {
    css: {
      "& .nextui-button-icon-right, & .nextui-button-text-right": {
        pointerEvents: "none"
      },
      ...css
    },
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_button, {
      ref: buttonRef,
      animated: isAnimated,
      auto: auto,
      className: clsx("nextui-dropdown-button", className),
      iconRight: getIconRight,
      iconRightCss: {
        mt: "$1",
        ...iconRightCss
      },
      ...otherProps,
      children: children
    }, void 0, false, {
      fileName: dropdown_button_jsxFileName,
      lineNumber: 46,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: dropdown_button_jsxFileName,
    lineNumber: 38,
    columnNumber: 7
  }, undefined);
});
if (__DEV__) {
  DropdownButton.displayName = "NextUI.DropdownButton";
}
DropdownButton.toString = () => ".nextui-dropdown-button";
/* harmony default export */ const dropdown_button = (DropdownButton);
;// CONCATENATED MODULE: ../../node_modules/@react-stately/overlays/dist/module.js


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
    * Copyright 2020 Adobe. All rights reserved.
    * This file is licensed to you under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License. You may obtain a copy
    * of the License at http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under
    * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    * OF ANY KIND, either express or implied. See the License for the specific language
    * governing permissions and limitations under the License.
    */
function module_$fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  return {
    isOpen: isOpen,
    setOpen: setOpen,
    open() {
      setOpen(true);
    },
    close() {
      setOpen(false);
    },
    toggle() {
      setOpen(!isOpen);
    }
  };
}

;// CONCATENATED MODULE: ../../node_modules/@react-stately/menu/dist/module.js


function $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {
  let overlayTriggerState = module_$fc909762b330b746$export$61c6a8c84e605fb6(props);
  let [focusStrategy1, setFocusStrategy] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  return {
    focusStrategy: focusStrategy1,
    ...overlayTriggerState,
    open(focusStrategy = null) {
      setFocusStrategy(focusStrategy);
      overlayTriggerState.open();
    },
    toggle(focusStrategy = null) {
      setFocusStrategy(focusStrategy);
      overlayTriggerState.toggle();
    }
  };
}

;// CONCATENATED MODULE: ./src/dropdown/use-dropdown.ts





/**
 * @internal
 */
function useDropdown(props = {}) {
  const {
    triggerRef: triggerRefProp,
    type = "menu",
    trigger = "press",
    isDisabled = false,
    borderWeight,
    closeOnSelect,
    disableAnimation = false,
    disableTriggerPressedAnimation = false,
    isOpen,
    defaultOpen,
    onOpenChange,
    ...popoverProps
  } = props;
  const triggerRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const menuTriggerRef = triggerRefProp || triggerRef;
  const menuRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const menuPopoverRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const state = $a28c903ee9ad8dc5$export$79fefeb1c2091ac3({
    ...props,
    isOpen,
    defaultOpen,
    onOpenChange
  });
  const {
    menuTriggerProps,
    menuProps
  } = $168583247155ddda$export$dc9c12ed27dd1b49({
    type,
    trigger,
    isDisabled
  }, state, menuTriggerRef);
  const handleClose = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    state.close();
    popoverProps.onClose == null ? void 0 : popoverProps.onClose();
  }, [state.close, popoverProps.onClose]);
  const getMenuTriggerProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((props = {}, _ref = null) => {
    const {
      css,
      ...realTriggerProps
    } = triggerRefProp != null && triggerRefProp.current ? dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(menuTriggerProps, props) : dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(props, menuTriggerProps);
    return {
      ref: mergeRefs(triggerRef, _ref),
      css: !disableTriggerPressedAnimation ? {
        '&[aria-haspopup="true"]&[aria-expanded="true"]': {
          opacity: 0.7,
          backfaceVisibility: "hidden",
          transform: "translateZ(0) scale(0.97)"
        },
        ...css
      } : css,
      ...realTriggerProps
    };
  }, [triggerRef, triggerRefProp, menuTriggerProps, disableTriggerPressedAnimation]);
  return {
    ...menuProps,
    popoverProps,
    state,
    ref: menuRef,
    onClose: handleClose,
    autoFocus: state.focusStrategy || true,
    disableAnimation,
    disableTriggerPressedAnimation,
    menuRef,
    borderWeight,
    menuPopoverRef,
    menuTriggerRef,
    closeOnSelect,
    getMenuTriggerProps
  };
}
;// CONCATENATED MODULE: ./src/dropdown/dropdown.tsx
var dropdown_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/dropdown/dropdown.tsx";






const Dropdown = props => {
  const {
    children,
    ...otherProps
  } = props;
  const context = useDropdown(otherProps);
  const [menuTrigger, menu] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.toArray(children);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(DropdownProvider, {
    value: context,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_popover, {
      ref: context.menuPopoverRef,
      ...context.popoverProps,
      borderWeight: context.borderWeight,
      disableAnimation: context.disableAnimation,
      isOpen: context.state.isOpen,
      scrollRef: context.menuRef,
      triggerRef: context.menuTriggerRef,
      onClose: context.onClose,
      children: [menuTrigger, menu]
    }, void 0, true, {
      fileName: dropdown_jsxFileName,
      lineNumber: 33,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: dropdown_jsxFileName,
    lineNumber: 32,
    columnNumber: 5
  }, undefined);
};
if (__DEV__) {
  Dropdown.displayName = "NextUI.Dropdown";
}
Dropdown.toString = () => ".nextui-dropdown";
/* harmony default export */ const dropdown = (Dropdown);
;// CONCATENATED MODULE: ./src/dropdown/index.ts






dropdown.Trigger = dropdown_trigger;
dropdown.Button = dropdown_button;
dropdown.Menu = dropdown_menu;
dropdown.Section = module_$9fc4852771d079eb$export$6e2c8f0811a474ce;
dropdown.Item = dropdown_item_base;

// export styled components


// export types

/* harmony default export */ const src_dropdown = (dropdown);
;// CONCATENATED MODULE: ./src/badge/badge.animations.ts

const pointAnimation = keyframes({
  "0%": {
    opacity: 1
  },
  "50%": {
    opacity: "0.4",
    transform: "scale(0.5)"
  },
  "100%": {
    opacity: 1
  }
});
const appearanceInTopRight = keyframes({
  "0%": {
    opacity: 0,
    transform: "scale(0.2) translate(50%, -50%)"
  },
  "60%": {
    opacity: 0.75,
    transform: "scale(1.2) translate(50%, -50%)"
  },
  "100%": {
    opacity: 1,
    transform: "scale(1) translate(50%, -50%)"
  }
});
const appearanceOutTopRight = keyframes({
  "0%": {
    opacity: 1,
    transform: "scale(1) translate(50%, -50%)"
  },
  "100%": {
    opacity: 0,
    transform: "scale(0.2) translate(50%, -50%)"
  }
});
const appearanceInTopLeft = keyframes({
  "0%": {
    opacity: 0,
    transform: "scale(0.2) translate(-50%, -50%)"
  },
  "60%": {
    opacity: 0.75,
    transform: "scale(1.2) translate(-50%, -50%)"
  },
  "100%": {
    opacity: 1,
    transform: "scale(1) translate(-50%, -50%)"
  }
});
const appearanceOutTopLeft = keyframes({
  "0%": {
    opacity: 1,
    transform: "scale(1) translate(-50%, -50%)"
  },
  "100%": {
    opacity: 0,
    transform: "scale(0.2) translate(-50%, -50%)"
  }
});
const appearanceInBottomRight = keyframes({
  "0%": {
    opacity: 0,
    transform: "scale(0.2) translate(50%, 50%)"
  },
  "60%": {
    opacity: 0.75,
    transform: "scale(1.2) translate(50%, 50%)"
  },
  "100%": {
    opacity: 1,
    transform: "scale(1) translate(50%, 50%)"
  }
});
const appearanceOutBottomRight = keyframes({
  "0%": {
    opacity: 1,
    transform: "scale(1) translate(50%, 50%)"
  },
  "100%": {
    opacity: 0,
    transform: "scale(0.2) translate(50%, 50%)"
  }
});
const appearanceInBottomLeft = keyframes({
  "0%": {
    opacity: 0,
    transform: "scale(0.2) translate(-50%, 50%)"
  },
  "60%": {
    opacity: 0.75,
    transform: "scale(1.2) translate(-50%, 50%)"
  },
  "100%": {
    opacity: 1,
    transform: "scale(1) translate(-50%, 50%)"
  }
});
const appearanceOutBottomLeft = keyframes({
  "0%": {
    opacity: 1,
    transform: "scale(1) translate(-50%, 50%)"
  },
  "100%": {
    opacity: 0,
    transform: "scale(0.2) translate(-50%, 50%)"
  }
});
;// CONCATENATED MODULE: ./src/badge/badge.styles.ts


const StyledBadgeRoot = styled("span", {
  d: "inline-flex",
  flexShrink: 0,
  verticalAlign: "middle",
  position: "relative",
  overflow: "visible"
});
const StyledBadge = styled("span", {
  $$badgePlacementHOffset: "0%",
  $$badgePlacementVOffset: "0%",
  lineHeight: 1,
  display: "flex",
  flexFlow: "row wrap",
  placeContent: "center",
  alignItems: "center",
  boxSizing: "border-box",
  whiteSpace: "nowrap",
  bg: "$$badgeBackgroundColor",
  color: "$$badgeTextColor",
  fontWeight: "$bold",
  fontSize: "$$badgeFontSize",
  p: "$$badgeVPadding $$badgeHPadding",
  "@motion": {
    animation: "none",
    transition: "none",
    "&.nextui-badge--is-invisible": {
      animation: "none",
      transition: "none"
    }
  },
  variants: {
    size: {
      xs: {
        $$badgeVPadding: "$space$2",
        $$badgeHPadding: "$space$2",
        $$badgeFontSize: "0.65rem"
      },
      sm: {
        $$badgeVPadding: "$space$2",
        $$badgeHPadding: "$space$3",
        $$badgeFontSize: "0.73rem"
      },
      md: {
        $$badgeVPadding: "$space$3",
        $$badgeHPadding: "$space$4",
        $$badgeFontSize: "$fontSizes$xs"
      },
      lg: {
        $$badgeVPadding: "$space$4",
        $$badgeHPadding: "$space$5",
        $$badgeFontSize: "$fontSizes$base"
      },
      xl: {
        $$badgeVPadding: "$space$5",
        $$badgeHPadding: "$space$6",
        $$badgeFontSize: "$fontSizes$xl"
      }
    },
    shape: {
      circle: {},
      rectangle: {}
    },
    asChild: {
      true: {
        zIndex: "$2",
        position: "absolute",
        lineHeight: 1.5
      }
    },
    isOneChar: {
      true: {}
    },
    color: {
      default: {
        $$badgeBackgroundColor: "$colors$neutral",
        $$badgeTextColor: "$colors$neutralSolidContrast",
        $$badgeShadowColor: "$colors$neutralShadow"
      },
      primary: {
        $$badgeBackgroundColor: "$colors$primary",
        $$badgeTextColor: "$colors$primarySolidContrast",
        $$badgeShadowColor: "$colors$primaryShadow"
      },
      secondary: {
        $$badgeBackgroundColor: "$colors$secondary",
        $$badgeTextColor: "$colors$secondarySolidContrast",
        $$badgeShadowColor: "$colors$secondaryShadow"
      },
      success: {
        $$badgeBackgroundColor: "$colors$success",
        $$badgeTextColor: "$colors$successSolidContrast",
        $$badgeShadowColor: "$colors$successShadow"
      },
      warning: {
        $$badgeBackgroundColor: "$colors$warning",
        $$badgeTextColor: "$colors$warningSolidContrast",
        $$badgeShadowColor: "$colors$warningShadow"
      },
      error: {
        $$badgeBackgroundColor: "$colors$error",
        $$badgeTextColor: "$colors$errorSolidContrast",
        $$badgeShadowColor: "$colors$errorShadow"
      }
    },
    enableShadow: {
      true: {
        boxShadow: "0 2px 10px 0 $$badgeShadowColor"
      }
    },
    isSquared: {
      true: {
        borderRadius: "calc($$badgeFontSize * 0.45)"
      },
      false: {
        borderRadius: "$pill"
      }
    },
    placement: {
      "top-right": {
        animation: `${appearanceInTopRight} 0.25s ease-out`,
        "&.nextui-badge--is-invisible": {
          opacity: 0,
          animation: `${appearanceOutTopRight} 0.2s ease-in`
        }
      },
      "top-left": {
        animation: `${appearanceInTopLeft} 0.25s ease-out`,
        "&.nextui-badge--is-invisible": {
          opacity: 0,
          animation: `${appearanceOutTopLeft} 0.2s ease-in`
        }
      },
      "bottom-right": {
        animation: `${appearanceInBottomRight} 0.25s ease-out`,
        "&.nextui-badge--is-invisible": {
          opacity: 0,
          animation: `${appearanceOutBottomRight} 0.2s ease-in`
        }
      },
      "bottom-left": {
        animation: `${appearanceInBottomLeft} 0.25s ease-out`,
        "&.nextui-badge--is-invisible": {
          opacity: 0,
          animation: `${appearanceOutBottomLeft} 0.2s ease-in`
        }
      }
    },
    variant: {
      default: {},
      flat: {},
      dot: {
        p: 0,
        dflex: "center",
        minSize: "$$badgeFontSize",
        boxSizing: "border-box"
      },
      points: {
        p: "calc($$badgeFontSize * 0.4)",
        boxSizing: "border-box",
        $$badgePlacementHOffset: "calc($$badgeFontSize * 0.8)"
      },
      bordered: {
        $$badgeBackgroundColor: "$colors$background",
        bg: "$background",
        bw: "$$badgeBorderWeight",
        borderStyle: "solid",
        borderColor: "$$badgeTextColor"
      }
    },
    borderWeight: {
      light: {
        $$badgeBorderWeight: "$borderWeights$light"
      },
      normal: {
        $$badgeBorderWeight: "$borderWeights$normal"
      },
      bold: {
        $$badgeBorderWeight: "$borderWeights$bold"
      },
      extrabold: {
        $$badgeBorderWeight: "$borderWeights$extrabold"
      },
      black: {
        $$badgeBorderWeight: "$borderWeights$black"
      }
    },
    disableOutline: {
      true: {
        border: "2px solid transparent"
      },
      false: {
        border: "2px solid $colors$background"
      }
    },
    disableAnimation: {
      true: {
        animation: "none",
        transition: "none",
        "&.nextui-badge--is-invisible": {
          animation: "none",
          transition: "none"
        }
      }
    }
  },
  compoundVariants: [
  /***
   * @variant flat
   * @color {default, primary, secondary, success, warning, error}
   */
  // variant=flat && color=default
  {
    variant: "flat",
    color: "default",
    css: {
      $$badgeBackgroundColor: "$colors$neutralLight",
      $$badgeTextColor: "$colors$neutralLightContrast"
    }
  },
  // variant=flat && color=primary
  {
    variant: "flat",
    color: "primary",
    css: {
      $$badgeBackgroundColor: "$colors$primaryLight",
      $$badgeTextColor: "$colors$primaryLightContrast"
    }
  },
  // variant=flat && color=secondary
  {
    variant: "flat",
    color: "secondary",
    css: {
      $$badgeBackgroundColor: "$colors$secondaryLight",
      $$badgeTextColor: "$colors$secondaryLightContrast"
    }
  },
  // variant=flat && color=success
  {
    variant: "flat",
    color: "success",
    css: {
      $$badgeBackgroundColor: "$colors$successLight",
      $$badgeTextColor: "$colors$successLightContrast"
    }
  },
  // variant=flat && color=warning
  {
    variant: "flat",
    color: "warning",
    css: {
      $$badgeBackgroundColor: "$colors$warningLight",
      $$badgeTextColor: "$colors$warningLightContrast"
    }
  },
  // variant=flat && color=error
  {
    variant: "flat",
    color: "error",
    css: {
      $$badgeBackgroundColor: "$colors$errorLight",
      $$badgeTextColor: "$colors$errorLightContrast"
    }
  },
  /***
   * @variant bordered
   * @color {default, primary, secondary, success, warning, error}
   */
  // variant=bordered && color=default
  {
    variant: "bordered",
    color: "default",
    css: {
      $$badgeTextColor: "$colors$neutral"
    }
  },
  // variant=bordered && color=primary
  {
    variant: "bordered",
    color: "primary",
    css: {
      $$badgeTextColor: "$colors$primary"
    }
  },
  // variant=bordered && color=secondary
  {
    variant: "bordered",
    color: "secondary",
    css: {
      $$badgeTextColor: "$colors$secondary"
    }
  },
  // variant=bordered && color=success
  {
    variant: "bordered",
    color: "success",
    css: {
      $$badgeTextColor: "$colors$success"
    }
  },
  // variant=bordered && color=warning
  {
    variant: "bordered",
    color: "warning",
    css: {
      $$badgeTextColor: "$colors$warning"
    }
  },
  // variant=bordered && color=error
  {
    variant: "bordered",
    color: "error",
    css: {
      $$badgeTextColor: "$colors$error"
    }
  },
  /***
   * @asChild true
   * @shape {rectangle, circle}
   * @placement {top-right, top-left, bottom-right, bottom-left}
   */
  // placement=top-right && shape=rectangle
  {
    asChild: true,
    shape: "rectangle",
    placement: "top-right",
    css: {
      top: "calc(5% + $$badgePlacementVOffset)",
      right: "calc(5% + $$badgePlacementHOffset)",
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%"
    }
  },
  // placement=top-left && shape=rectangle
  {
    asChild: true,
    shape: "rectangle",
    placement: "top-left",
    css: {
      top: "calc(5% + $$badgePlacementVOffset)",
      left: "calc(5% + $$badgePlacementHOffset)",
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%"
    }
  },
  // placement=bottom-right && shape=rectangle
  {
    asChild: true,
    shape: "rectangle",
    placement: "bottom-right",
    css: {
      bottom: "calc(5% + $$badgePlacementVOffset)",
      right: "calc(5% + $$badgePlacementHOffset)",
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%"
    }
  },
  // placement=bottom-left && shape=rectangle
  {
    asChild: true,
    shape: "rectangle",
    placement: "bottom-left",
    css: {
      bottom: "calc(5% + $$badgePlacementVOffset)",
      left: "calc(5% + $$badgePlacementHOffset)",
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%"
    }
  },
  // placement=top-right && shape=circle
  {
    asChild: true,
    shape: "circle",
    placement: "top-right",
    css: {
      top: "calc(15% + $$badgePlacementVOffset)",
      right: "calc(15% + $$badgePlacementHOffset)",
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%"
    }
  },
  // placement=top-left && shape=circle
  {
    asChild: true,
    shape: "circle",
    placement: "top-left",
    css: {
      top: "calc(15% + $$badgePlacementVOffset)",
      left: "calc(15% + $$badgePlacementHOffset)",
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%"
    }
  },
  // placement=bottom-right && shape=circle
  {
    asChild: true,
    shape: "circle",
    placement: "bottom-right",
    css: {
      bottom: "calc(15% + $$badgePlacementVOffset)",
      right: "calc(15% + $$badgePlacementHOffset)",
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%"
    }
  },
  // placement=bottom-left && shape=circle
  {
    asChild: true,
    shape: "circle",
    placement: "bottom-left",
    css: {
      bottom: "calc(15% + $$badgePlacementVOffset)",
      left: "calc(15% + $$badgePlacementHOffset)",
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%"
    }
  },
  /**
   * @variant dot
   * @shape rectangle
   */
  {
    variant: "dot",
    shape: "rectangle",
    css: {
      $$badgePlacementHOffset: "calc($$badgeFontSize * 0.2)",
      $$badgePlacementVOffset: "calc($$badgeFontSize * 0.1)"
    }
  },
  /**
   * @isOneChar {true, false}
   * @asChild {true, false}
   */
  {
    isOneChar: true,
    asChild: true,
    css: {
      p: 0,
      size: "calc($$badgeFontSize + $$badgeHPadding)"
    }
  }, {
    isOneChar: false,
    asChild: true,
    css: {
      $$badgeVPadding: "0px",
      $$badgeHPadding: "$space$2"
    }
  },
  /**
   * @isOneChar false
   * @asChild true
   * @size {md, lg, xl}
   */
  // size = md
  {
    isOneChar: false,
    asChild: true,
    size: "md",
    css: {
      $$badgeHPadding: "$space$3"
    }
  },
  // size = lg
  {
    isOneChar: false,
    asChild: true,
    size: "lg",
    css: {
      $$badgeHPadding: "$space$4"
    }
  },
  // size = xl
  {
    isOneChar: false,
    asChild: true,
    size: "xl",
    css: {
      $$badgeHPadding: "$space$5"
    }
  },
  /**
   * @disableOutline true
   * @variant bordered
   */
  {
    disableOutline: true,
    variant: "bordered",
    css: {
      borderColor: "$$badgeTextColor"
    }
  }],
  defaultVariants: {
    size: "md",
    color: "default",
    variant: "default",
    borderWeight: "normal",
    placement: "top-right",
    shape: "rectangle",
    enableShadow: false,
    disableOutline: false,
    isSquared: false
  }
});
const StyledBadgePoints = styled("div", {
  position: "relative",
  dflex: "center",
  "& .nextui-badge-point": {
    size: "calc($$badgeFontSize * 0.3)",
    background: "$$badgeTextColor",
    margin: "0 2px",
    borderRadius: "$pill",
    "&:nth-child(1)": {
      animation: `${pointAnimation} 1.2s ease infinite`
    },
    "&:nth-child(2)": {
      animation: `${pointAnimation} 1.2s ease infinite 0.4s`
    },
    "&:nth-child(3)": {
      animation: `${pointAnimation} 1.2s ease infinite 0.8s`
    }
  }
});
;// CONCATENATED MODULE: ./src/badge/badge.tsx
var badge_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/badge/badge.tsx";







const Badge = forwardRef((props, ref) => {
  const {
    css,
    children,
    content,
    isInvisible = false,
    disableOutline,
    placement = "top-right",
    variant = "default",
    verticalOffset,
    horizontalOffset,
    disableAnimation = false,
    className,
    ...otherProps
  } = props;
  const domRef = useDOMRef(ref);
  const asChild = content !== undefined && !!children;
  const isOneChar = external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo(() => {
    if (asChild && content && variant !== "points" && variant !== "dot") {
      var _String;
      return ((_String = String(content)) == null ? void 0 : _String.length) === 1;
    }
    if (children && typeof children === "string") {
      return children.length === 1;
    }
    return false;
  }, [asChild, children, variant, content]);
  const badgeChildren = external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo(() => {
    if (variant === "dot") {
      return null;
    }
    if (variant === "points") {
      return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBadgePoints, {
        className: "nextui-badge-points",
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
          className: "nextui-badge-point",
          "data-testid": "badge-point"
        }, void 0, false, {
          fileName: badge_jsxFileName,
          lineNumber: 59,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
          className: "nextui-badge-point",
          "data-testid": "badge-point"
        }, void 0, false, {
          fileName: badge_jsxFileName,
          lineNumber: 60,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
          className: "nextui-badge-point",
          "data-testid": "badge-point"
        }, void 0, false, {
          fileName: badge_jsxFileName,
          lineNumber: 61,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: badge_jsxFileName,
        lineNumber: 58,
        columnNumber: 9
      }, undefined);
    }
    return asChild ? content : children;
  }, [variant, isOneChar, asChild, content, children]);
  const badgeCss = external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo(() => {
    const isHOffsetNumber = typeof horizontalOffset === "number";
    const isVOffsetNumber = typeof verticalOffset === "number";
    if (verticalOffset && horizontalOffset) {
      return {
        $$badgePlacementHOffset: isHOffsetNumber ? `${horizontalOffset}px` : horizontalOffset,
        $$badgePlacementVOffset: isVOffsetNumber ? `${verticalOffset}px` : verticalOffset,
        ...css
      };
    }
    if (verticalOffset) {
      return {
        $$badgePlacementVOffset: isVOffsetNumber ? `${verticalOffset}px` : verticalOffset,
        ...css
      };
    }
    if (horizontalOffset) {
      return {
        $$badgePlacementHOffset: isHOffsetNumber ? `${horizontalOffset}px` : horizontalOffset,
        ...css
      };
    }
    return css;
  }, [verticalOffset, horizontalOffset, css]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBadgeRoot, {
    ref: domRef,
    className: clsx("nextui-badge-root", className),
    children: [asChild && children, /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBadge, {
      asChild: asChild,
      className: clsx("nextui-badge", {
        "nextui-badge--is-invisible": isInvisible
      }),
      css: badgeCss,
      disableAnimation: disableAnimation || !asChild,
      disableOutline: variant === "bordered" || disableOutline,
      isOneChar: isOneChar,
      placement: placement,
      variant: variant,
      ...otherProps,
      children: badgeChildren
    }, void 0, false, {
      fileName: badge_jsxFileName,
      lineNumber: 99,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: badge_jsxFileName,
    lineNumber: 97,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Badge.displayName = "NextUI.Badge";
}
Badge.toString = () => ".nextui-badge";
/* harmony default export */ const badge = (Badge);
;// CONCATENATED MODULE: ./src/badge/index.ts


// export styled components


// export types

/* harmony default export */ const src_badge = (badge);
;// CONCATENATED MODULE: ./src/navbar/navbar.styles.ts


const itemColors = {
  default: {
    $$navbarItemActiveColor: "$colors$link",
    $$navbarItemHighlightBackgroundColor: "$colors$primaryLight",
    $$navbarItemHighlightTextColor: "$colors$primaryLightContrast",
    $$navbarItemHighlightSolidBackgroundColor: "$colors$primary",
    $$navbarItemHighlightSolidTextColor: "$colors$primarySolidContrast"
  },
  neutral: {
    $$navbarItemActiveColor: "$colors$neutral",
    $$navbarItemHighlightBackgroundColor: "$colors$neutralLight",
    $$navbarItemHighlightTextColor: "$colors$text",
    $$navbarItemHighlightSolidBackgroundColor: "$colors$neutral",
    $$navbarItemHighlightSolidTextColor: "$colors$neutralSolidContrast"
  },
  primary: {
    $$navbarItemActiveColor: "$colors$primary",
    $$navbarItemHighlightBackgroundColor: "$colors$primaryLight",
    $$navbarItemHighlightTextColor: "$colors$primaryLightContrast",
    $$navbarItemHighlightSolidBackgroundColor: "$colors$primary",
    $$navbarItemHighlightSolidTextColor: "$colors$primarySolidContrast"
  },
  secondary: {
    $$navbarItemActiveColor: "$colors$secondary",
    $$navbarItemHighlightBackgroundColor: "$colors$secondaryLight",
    $$navbarItemHighlightTextColor: "$colors$secondaryLightContrast",
    $$navbarItemHighlightSolidBackgroundColor: "$colors$secondary",
    $$navbarItemHighlightSolidTextColor: "$colors$secondarySolidContrast"
  },
  success: {
    $$navbarItemActiveColor: "$colors$success",
    $$navbarItemHighlightBackgroundColor: "$colors$successLight",
    $$navbarItemHighlightTextColor: "$colors$successLightContrast",
    $$navbarItemHighlightSolidBackgroundColor: "$colors$success",
    $$navbarItemHighlightSolidTextColor: "$colors$successSolidContrast"
  },
  warning: {
    $$navbarItemActiveColor: "$colors$warning",
    $$navbarItemHighlightBackgroundColor: "$colors$warningLight",
    $$navbarItemHighlightTextColor: "$colors$warningLightContrast",
    $$navbarItemHighlightSolidBackgroundColor: "$colors$warning",
    $$navbarItemHighlightSolidTextColor: "$colors$warningSolidContrast"
  },
  error: {
    $$navbarItemActiveColor: "$colors$error",
    $$navbarItemHighlightBackgroundColor: "$colors$errorLight",
    $$navbarItemHighlightTextColor: "$colors$errorLightContrast",
    $$navbarItemHighlightSolidBackgroundColor: "$colors$error",
    $$navbarItemHighlightSolidTextColor: "$colors$errorSolidContrast"
  }
};
const StyledBaseNavbarItem = styled("li", {
  mb: 0,
  display: "flex",
  alignItems: "center",
  listStyleType: "none",
  lineHeight: "inherit"
});
const StyledBaseNavbarList = styled("ul", {
  m: 0,
  listStyle: "none",
  lineHeight: "$xs",
  li: {
    mb: 0
  }
});
const StyledNavbarCollapseItem = styled(StyledBaseNavbarItem, {
  opacity: 0,
  paddingBottom: "$6",
  fontSize: "$lg",
  lineHeight: "$lg",
  fontWeight: "$normal",
  transformOrigin: "top",
  variants: {
    activeColor: itemColors,
    isActive: {
      true: {
        color: "$$navbarItemActiveColor",
        fontWeight: "$semibold"
      }
    },
    disableAnimation: {
      true: {
        transition: "none"
      }
    }
  },
  defaultVariants: {
    activeColor: "default"
  }
});
const StyledNavbarCollapseWrapper = styled(StyledBaseNavbarList, {
  py: "$8",
  px: "$$navbarPadding",
  overflowY: "scroll",
  maxHeight: "100%"
});
const StyledNavbarCollapse = styled("div", {
  $$navbarListColor: "$colors$text",
  $$navbarListBackgroundColor: "$colors$background",
  $$navbarListBlurBackgroundColor: "$colors$backgroundAlpha",
  $$navbarListBlur: "16px",
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  background: "$$navbarListBackgroundColor",
  width: "100%",
  height: "0px",
  zIndex: "$4",
  boxSizing: "border-box",
  overflow: "hidden",
  variants: {
    isOpen: {
      true: {
        top: "$$navbarHeight",
        pb: "$$navbarHeight",
        height: "100vh"
      }
    },
    disableBlur: {
      false: {
        "@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none))": {
          bg: "$$navbarListBlurBackgroundColor",
          backdropFilter: "saturate(180%) blur($$navbarListBlur)",
          // safari
          "@media screen and (-webkit-min-device-pixel-ratio:0)": {
            [`& ${StyledNavbarCollapseWrapper}`]: {
              bg: "$$navbarListBlurBackgroundColor",
              backdropFilter: "saturate(180%) blur($$navbarListBlur)"
            }
          }
        }
      }
    },
    disableAnimation: {
      true: {
        [`& ${StyledNavbarCollapseItem}`]: {
          transition: "none"
        }
      }
    }
  },
  defaultVariants: {
    disableBlur: "false"
  }
}, cssHideShowIn);
const StyledNavbarToggleIconContainer = styled("div", {
  dflex: "center",
  flexDirection: "column",
  pointerEvents: "none",
  size: "22px",
  "& .line": {
    height: "1px",
    width: "100%",
    backgroundColor: "$$navbarTextColor",
    transition: "transform 0.3s ease",
    "&.top": {
      transform: "translateY(-4px) rotate(0deg)"
    },
    "&.bottom": {
      transform: "translateY(4px) rotate(0deg)"
    }
  },
  variants: {
    isExpanded: {
      true: {
        "& .line": {
          "&.top": {
            transform: "translateY(1px) rotate(45deg)"
          },
          "&.bottom": {
            transform: "translateY(0px) rotate(-45deg)"
          }
        }
      }
    }
  }
});
const StyledNavbarToggle = styled("button", {
  // reset button styles
  appearance: "none",
  background: "transparent",
  border: "none",
  cursor: "pointer",
  p: "$2",
  transition: "box-shadow 0.25s ease 0s, opacity 0.25s ease 0s",
  variants: {
    isPressed: {
      true: {
        opacity: 0.7
      }
    }
  }
}, cssHideShowIn, cssFocusVisible);
const StyledNavbarBrand = styled("span", {
  display: "flex",
  flexWrap: "nowrap",
  flexDirection: "row",
  justifyContent: "flex-start",
  bg: "transparent",
  alignItems: "center",
  textDecoration: "none",
  fontSize: "$base",
  whiteSpace: "nowrap",
  boxSizing: "border-box"
}, cssHideShowIn);
const StyledNavbarItem = styled(StyledBaseNavbarItem, {
  $$navbarItemFontSize: "inherit",
  $$navbarItemFontWeight: "$fontWeights$normal",
  fontSize: "$$navbarItemFontSize",
  fontWeight: "$$navbarItemFontWeight",
  position: "relative",
  "> *": {
    zIndex: "$2",
    fontSize: "inherit !important",
    fontWeight: "inherit !important"
  },
  ":first-child": {
    boxSizing: "content-box"
  },
  "&:before": {
    opacity: 0,
    zIndex: "$1",
    content: '""',
    display: "block",
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderRadius: "$sm"
  },
  "&:after": {
    opacity: 0,
    zIndex: "$1",
    content: '""',
    display: "block",
    position: "absolute",
    left: "0",
    right: "0",
    bottom: "0",
    height: "$$navbarItemUnderlineHeight",
    borderRadius: "0px",
    background: "$$navbarItemActiveColor"
  },
  variants: {
    activeColor: itemColors,
    isActive: {
      true: {
        color: "$$navbarItemActiveColor",
        $$navbarItemFontWeight: "$fontWeights$semibold"
      }
    },
    variant: {
      default: {},
      underline: {
        color: "inherit",
        height: "100%"
      },
      "underline-rounded": {
        color: "inherit",
        height: "100%"
      },
      highlight: {},
      "highlight-solid": {},
      "highlight-rounded": {},
      "highlight-solid-rounded": {}
    },
    underlineHeight: {
      light: {
        $$navbarItemUnderlineHeight: "2px"
      },
      normal: {
        $$navbarItemUnderlineHeight: "4px"
      },
      bold: {
        $$navbarItemUnderlineHeight: "6px"
      },
      extrabold: {
        $$navbarItemUnderlineHeight: "8px"
      },
      black: {
        $$navbarItemUnderlineHeight: "10px"
      }
    },
    isDisabled: {
      true: {
        opacity: 0.5,
        cursor: "not-allowed"
      }
    }
  },
  compoundVariants: [
  /**
   * @isActive true
   * @variant underline
   */
  {
    isActive: true,
    variant: "underline",
    css: {
      color: "inherit",
      "&:after": {
        opacity: 1
      }
    }
  },
  /**
   * @isActive true
   * @variant underline
   */
  {
    isActive: true,
    variant: "underline-rounded",
    css: {
      color: "inherit",
      "&:after": {
        opacity: 1,
        borderRadius: "calc($$navbarItemUnderlineHeight / 2)"
      }
    }
  },
  /**
   * @isActive true
   * @variant highlight
   */
  {
    isActive: true,
    variant: "highlight",
    css: {
      color: "$$navbarItemHighlightTextColor",
      "*:first-child": {
        color: "inherit"
      },
      "&:before": {
        opacity: 1,
        background: "$$navbarItemHighlightBackgroundColor"
      }
    }
  },
  /**
   * @isActive true
   * @variant highlight-solid
   */
  {
    isActive: true,
    variant: "highlight-solid",
    css: {
      color: "$$navbarItemHighlightSolidTextColor",
      "*:first-child": {
        color: "inherit"
      },
      "&:before": {
        opacity: 1,
        background: "$$navbarItemHighlightSolidBackgroundColor"
      }
    }
  },
  /**
   * @isActive true
   * @variant highlight-rounded
   */
  {
    isActive: true,
    variant: "highlight-rounded",
    css: {
      color: "$$navbarItemHighlightTextColor",
      "*:first-child": {
        color: "inherit"
      },
      "&:before": {
        opacity: 1,
        background: "$$navbarItemHighlightBackgroundColor"
      }
    }
  },
  /**
   * @isActive true
   * @variant highlight-solid
   */
  {
    isActive: true,
    variant: "highlight-solid-rounded",
    css: {
      color: "$$navbarItemHighlightSolidTextColor",
      "*:first-child": {
        color: "inherit"
      },
      "&:before": {
        opacity: 1,
        background: "$$navbarItemHighlightSolidBackgroundColor"
      }
    }
  }],
  defaultVariants: {
    variant: "default",
    activeColor: "default",
    underlineHeight: "normal"
  }
}, cssHideShowIn);

// @internal
const StyledCursorHighlight = styled(StyledBaseNavbarItem, {
  position: "absolute",
  top: "calc(50% - $$navbarItemMaxHeight * 0.5)",
  height: "$$navbarItemMaxHeight",
  background: "$neutralLight",
  borderRadius: "$sm",
  transition: "width 0.2s ease 0s, transform 0.2s ease 0s, opacity 0.2s ease 0s",
  variants: {
    color: itemColors,
    isHighlightVariant: {
      true: {
        background: "$$navbarItemHighlightBackgroundColor"
      }
    },
    isHighlightSolidVariant: {
      true: {
        background: "$$navbarItemHighlightSolidBackgroundColor"
      }
    },
    isRounded: {
      true: {
        borderRadius: "$pill"
      }
    }
  }
});
const StyledNavbarContent = styled(StyledBaseNavbarList, {
  $$navbarContentItemGap: "$space$10",
  $$navbarContentItemHorizontalPadding: "$space$10",
  d: "flex",
  height: "100%",
  flexWrap: "nowrap",
  alignItems: "center",
  gap: "$$navbarContentItemGap",
  color: "inherit",
  variants: {
    enableCursorHighlight: {
      true: {
        zIndex: "$2",
        position: "relative"
      }
    }
  }
}, cssHideShowIn);
const StyledNavbarContainer = styled("div", {
  width: "100%",
  height: "$$navbarHeight",
  minHeight: "$$navbarHeight",
  display: "flex",
  flexWrap: "nowrap",
  justifyContent: "space-between",
  alignItems: "center",
  position: "relative",
  boxSizing: "border-box",
  color: "inherit",
  px: "$$navbarPadding",
  bg: "$$navbarBackgroundColor",
  maxW: "$$navbarContainerMaxWidth",
  zIndex: "$5",
  "@xsMax": {
    $$navbarPadding: "$space$6",
    $$navbarFloatingMargin: "$space$6"
  }
});
const StyledNavbar = styled("nav", {
  width: "100%",
  dflex: "center",
  position: "relative",
  height: "auto",
  color: "$$navbarTextColor",
  zIndex: "$2",
  variants: {
    variant: {
      static: {
        position: "static"
      },
      sticky: {
        top: 0,
        right: 0,
        left: 0,
        position: "sticky"
      },
      floating: {
        top: 0,
        right: 0,
        left: 0,
        position: "sticky",
        "@safari": {
          top: "-5px"
        },
        [`& ${StyledNavbarContainer}`]: {
          mt: "calc($$navbarFloatingMargin * 0.5)",
          mx: "$$navbarFloatingMargin",
          borderRadius: "$$navbarBorderRadius"
        },
        [`& ${StyledNavbarCollapseWrapper}`]: {
          px: "calc($$navbarFloatingMargin + $space$4)"
        }
      }
    },
    maxWidth: {
      xs: {
        $$navbarContainerMaxWidth: "$breakpoints$xs"
      },
      sm: {
        $$navbarContainerMaxWidth: "$breakpoints$sm"
      },
      md: {
        $$navbarContainerMaxWidth: "$breakpoints$md"
      },
      lg: {
        $$navbarContainerMaxWidth: "$breakpoints$lg"
      },
      xl: {
        $$navbarContainerMaxWidth: "$breakpoints$xl"
      },
      fluid: {
        $$navbarContainerMaxWidth: "100%"
      }
    },
    isBordered: {
      true: {
        [`& ${StyledNavbarContainer}`]: {
          borderBottom: "$$navbarBorderWeight solid $$navbarBorderColor"
        }
      }
    },
    isCompact: {
      true: {
        $$navbarHeight: "$$navbarCompactHeight",
        $$navbarItemMaxHeight: "$$navbarCompactItemMaxHeight",
        $$navbarBorderRadius: "$radii$md"
      }
    },
    disableShadow: {
      false: {
        boxShadow: "$$navbarShadow"
      }
    },
    disableBlur: {
      false: {
        "@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none))": {
          [`& ${StyledNavbarContainer}`]: {
            bg: "$$navbarBlurBackgroundColor",
            backdropFilter: "saturate(180%) blur($$navbarBlur)"
          }
        }
      }
    }
  },
  compoundVariants: [
  /**
   * @isBordered true
   * @variant floating
   */
  {
    isBordered: true,
    variant: "floating",
    css: {
      [`& ${StyledNavbarContainer}`]: {
        border: "$$navbarBorderWeight solid $$navbarBorderColor"
      }
    }
  },
  /**
   * @variant floating
   * @disableShadow true
   */
  {
    variant: "floating",
    disableShadow: false,
    css: {
      boxShadow: "none",
      [`& ${StyledNavbarContainer}`]: {
        boxShadow: "$$navbarShadow"
      }
    }
  }],
  defaultVariants: {
    variant: "static",
    maxWidth: "lg",
    isBordered: false,
    disableShadow: false,
    disableBlur: false
  }
});
;// CONCATENATED MODULE: ./src/navbar/navbar-brand.tsx
var navbar_brand_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar-brand.tsx";







const NavbarBrand = forwardRef((props, ref) => {
  const domRef = useDOMRef(ref);
  const {
    children,
    className,
    ...otherProps
  } = props;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarBrand, {
    ref: domRef,
    className: clsx("nextui-navbar-brand", className),
    ...otherProps,
    children: children
  }, void 0, false, {
    fileName: navbar_brand_jsxFileName,
    lineNumber: 22,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  NavbarBrand.displayName = "NextUI.NavbarBrand";
}
NavbarBrand.toString = () => ".nextui-navbar-brand";
/* harmony default export */ const navbar_brand = (NavbarBrand);
;// CONCATENATED MODULE: ./src/navbar/navbar-content-context.ts

const [NavbarContentProvider, useNavbarContentContext] = createContext({
  strict: false,
  name: "NavbarContentContext"
});
;// CONCATENATED MODULE: ./src/navbar/use-navbar-content.ts


/**
 * @internal
 */
function useNavbarContent(props = {}) {
  const {
    gap = "$10",
    variant = "default",
    activeColor = "default",
    underlineHeight = "normal",
    enableCursorHighlight = false,
    isCursorHighlightRounded = false,
    css,
    style,
    className,
    ...otherProps
  } = props;
  const [itemBoundingBox, setItemBoundingBox] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  const [wrapperBoundingBox, setWrapperBoundingBox] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  const [highlightedItem, setHighlightedItem] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  const [activeItem, setActiveItem] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  const [isHoveredFromNull, setIsHoveredFromNull] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(true);
  const cursorHighlightRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const wrapperRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const stringVariant = variant == null ? void 0 : variant.toString == null ? void 0 : variant.toString();
  const isHighlightVariant = stringVariant.includes == null ? void 0 : stringVariant.includes("highlight");
  const isHighlightSolidVariant = stringVariant.includes == null ? void 0 : stringVariant.includes("highlight-solid");
  const isRounded = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return isCursorHighlightRounded || (stringVariant.includes == null ? void 0 : stringVariant.includes("rounded"));
  }, [isCursorHighlightRounded, stringVariant]);
  const contentGap = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isHighlightVariant && gap === "$10") {
      return "0px";
    }
    return gap;
  }, [isHighlightVariant, gap]);
  const transitionDurationValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => isHoveredFromNull ? "0ms" : "200ms", [isHoveredFromNull]);
  const opacityValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => highlightedItem || activeItem ? 1 : 0, [activeItem, highlightedItem]);
  const widthValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!itemBoundingBox) {
      return "0px";
    }
    if (isHighlightVariant) {
      return `${itemBoundingBox.width}px`;
    }
    return `calc(${itemBoundingBox.width}px + var(--nextui--navbarContentItemHorizontalPadding))`;
  }, [stringVariant, itemBoundingBox]);
  const transformValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => itemBoundingBox && wrapperBoundingBox && `translate(${itemBoundingBox.left - wrapperBoundingBox.left}px)`, [itemBoundingBox, wrapperBoundingBox]);
  const leftValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isHighlightVariant) {
      return "0px";
    }
    return "calc(var(--nextui--navbarContentItemHorizontalPadding) * 0.5 * -1)";
  }, [isHighlightVariant]);
  const contentStyle = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928({
      "--nextui--transitionDuration": transitionDurationValue,
      "--nextui--opacity": opacityValue,
      "--nextui--width": widthValue,
      "--nextui--transform": transformValue,
      "--nextui--left": leftValue
    }, style || {});
  }, [transitionDurationValue, leftValue, opacityValue, widthValue, transformValue, style]);
  const cursorHighlightCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (itemBoundingBox && wrapperBoundingBox && enableCursorHighlight) {
      return {
        transitionDuration: "var(--nextui--transitionDuration)",
        opacity: "var(--nextui--opacity)",
        width: "var(--nextui--width)",
        transform: "var(--nextui--transform)",
        left: "var(--nextui--left)"
      };
    }
    return {};
  }, [itemBoundingBox, wrapperBoundingBox, enableCursorHighlight]);
  const repositionHighlight = (event, item) => {
    var _event$target, _wrapperRef$current;
    if (!((event == null ? void 0 : event.target) instanceof Element)) return;
    setItemBoundingBox((_event$target = event.target) == null ? void 0 : _event$target.getBoundingClientRect == null ? void 0 : _event$target.getBoundingClientRect());
    setWrapperBoundingBox((_wrapperRef$current = wrapperRef.current) == null ? void 0 : _wrapperRef$current.getBoundingClientRect == null ? void 0 : _wrapperRef$current.getBoundingClientRect());
    setIsHoveredFromNull(!highlightedItem);
    setHighlightedItem(item);
  };
  const resetHighlight = () => {
    if (!activeItem) {
      setHighlightedItem(null);
      return;
    }
    setHighlightedItem(activeItem);
    setItemBoundingBox(activeItem == null ? void 0 : activeItem.getBoundingClientRect == null ? void 0 : activeItem.getBoundingClientRect());
  };
  const updateActiveItem = item => {
    var _wrapperRef$current2;
    setActiveItem(item);
    setHighlightedItem(item);
    setItemBoundingBox(item == null ? void 0 : item.getBoundingClientRect == null ? void 0 : item.getBoundingClientRect());
    setWrapperBoundingBox((_wrapperRef$current2 = wrapperRef.current) == null ? void 0 : _wrapperRef$current2.getBoundingClientRect == null ? void 0 : _wrapperRef$current2.getBoundingClientRect());
  };
  return {
    css,
    gap: contentGap,
    variant,
    activeColor,
    activeItem,
    updateActiveItem,
    highlightedItem,
    underlineHeight,
    cursorHighlightRef,
    isRounded,
    isHighlightVariant,
    isHighlightSolidVariant,
    isCursorHighlightRounded,
    enableCursorHighlight,
    cursorHighlightCss,
    repositionHighlight,
    resetHighlight,
    wrapperRef,
    className,
    style: contentStyle,
    otherProps
  };
}
;// CONCATENATED MODULE: ./src/navbar/navbar-content.tsx
var navbar_content_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar-content.tsx";










const NavbarContent = forwardRef((props, ref) => {
  const {
    children,
    ...otherProps
  } = props;
  const context = useNavbarContent(otherProps);
  const domRef = useDOMRef(ref);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(NavbarContentProvider, {
    value: context,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarContent, {
      ref: mergeRefs(context.wrapperRef, domRef),
      className: clsx("nextui-navbar-content", context.className),
      css: {
        gap: context.gap,
        ...context.css
      },
      enableCursorHighlight: context.enableCursorHighlight,
      style: context.style,
      onMouseLeave: context.resetHighlight,
      ...context.otherProps,
      children: [context.enableCursorHighlight && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCursorHighlight, {
        ref: context.cursorHighlightRef,
        className: "nextui-navbar-cursor-highlight",
        color: context.activeColor,
        css: context.cursorHighlightCss,
        isHighlightSolidVariant: context.isHighlightSolidVariant,
        isHighlightVariant: context.isHighlightVariant,
        isRounded: context.isRounded
      }, void 0, false, {
        fileName: navbar_content_jsxFileName,
        lineNumber: 44,
        columnNumber: 11
      }, undefined), children]
    }, void 0, true, {
      fileName: navbar_content_jsxFileName,
      lineNumber: 31,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: navbar_content_jsxFileName,
    lineNumber: 30,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  NavbarContent.displayName = "NextUI.NavbarContent";
}
NavbarContent.toString = () => ".nextui-navbar-content";
/* harmony default export */ const navbar_content = (NavbarContent);
;// CONCATENATED MODULE: ./src/navbar/navbar-item.tsx
var navbar_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar-item.tsx";












const NavbarItem = forwardRef((props, ref) => {
  var _child$props;
  const {
    id,
    css,
    children,
    variant,
    activeColor,
    isActive,
    underlineHeight,
    onMouseEnter,
    onMouseLeave,
    isDisabled,
    className,
    ...otherProps
  } = props;
  const contentProps = useNavbarContentContext();
  const domRef = useDOMRef(ref);
  const itemVariant = variant || (contentProps == null ? void 0 : contentProps.variant);
  const stringVariant = itemVariant == null ? void 0 : itemVariant.toString();
  const isHighlightVariant = stringVariant.includes == null ? void 0 : stringVariant.includes("highlight");
  const isHighlightSolidVariant = stringVariant.includes == null ? void 0 : stringVariant.includes("highlight-solid");
  const {
    hoverProps,
    isHovered
  } = interactions_dist_module_$6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled
  });
  const itemId = dist_module_$bdb11010cef70236$export$f680877a34711e37(id);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!domRef.current) {
      return;
    }
    if (contentProps && contentProps != null && contentProps.enableCursorHighlight && isActive && isHighlightVariant) {
      contentProps.updateActiveItem(domRef == null ? void 0 : domRef.current);
    }
  }, [domRef, isHighlightVariant, isActive]);
  const isActiveAndHighlighted = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _contentProps$highlig;
    if (!contentProps) {
      return false;
    }
    return ((_contentProps$highlig = contentProps.highlightedItem) == null ? void 0 : _contentProps$highlig.id) === itemId;
  }, [itemId, contentProps]);
  const shouldUseActiveTextColor = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _contentProps$activeI;
    if (!isActiveAndHighlighted && contentProps != null && contentProps.enableCursorHighlight && isHighlightSolidVariant && itemId === (contentProps == null ? void 0 : (_contentProps$activeI = contentProps.activeItem) == null ? void 0 : _contentProps$activeI.id)) {
      return true;
    }
    return false;
  }, [contentProps, itemId, isActiveAndHighlighted, isHighlightSolidVariant]);
  const itemCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const customCss = [];
    const isStringChildren = typeof children === "string";
    const isHighlightSolidVariant = stringVariant.includes == null ? void 0 : stringVariant.includes("highlight-solid");
    if (!contentProps) {
      customCss.push({
        $$navbarContentItemGap: "$space$8"
      });
    }
    if (isHighlightVariant) {
      customCss.push({
        dflex: "center",
        height: "$$navbarItemMaxHeight"
      });
      if (isStringChildren) {
        customCss.push({
          px: "calc($$navbarContentItemHorizontalPadding * 0.5)"
        });
      } else {
        customCss.push({
          "*:first-child": {
            size: "100%",
            px: "calc($$navbarContentItemHorizontalPadding * 0.5)"
          }
        });
      }
    }
    if (isHighlightVariant && stringVariant.includes != null && stringVariant.includes("rounded") && !contentProps.enableCursorHighlight) {
      customCss.push({
        "&:before": {
          borderRadius: "$pill"
        }
      });
    }
    if (contentProps.enableCursorHighlight) {
      customCss.push({
        "&:before": {
          display: "none"
        }
      });
    }
    if (isActive && !isHighlightVariant) {
      customCss.push({
        $$navbarItemFontWeight: "$fontWeights$semibold"
      });
    }
    if (isHovered && contentProps.enableCursorHighlight) {
      if (isHighlightVariant) {
        customCss.push({
          color: "$$navbarItemHighlightTextColor"
        });
      }
      if (isHighlightSolidVariant) {
        customCss.push({
          color: "$$navbarItemHighlightSolidTextColor"
        });
      }
    }
    if (shouldUseActiveTextColor) {
      customCss.push({
        color: "$$navbarItemActiveColor"
      });
    }
    const customCssObject = arrayToObject(customCss);
    return {
      ...customCssObject,
      ...css
    };
  }, [children, css, contentProps, stringVariant, shouldUseActiveTextColor, isActive, isHovered, isHighlightVariant]);
  const handleOnMouseLeave = event => {
    if (!(contentProps != null && contentProps.resetHighlight) || !contentProps.enableCursorHighlight || !isHighlightVariant) {
      onMouseLeave == null ? void 0 : onMouseLeave(event);
      return;
    }
    contentProps.resetHighlight();
    onMouseLeave == null ? void 0 : onMouseLeave(event);
  };
  const handleOnMouseEnter = event => {
    var _event$target;
    if (!(contentProps != null && contentProps.repositionHighlight)) {
      onMouseEnter == null ? void 0 : onMouseEnter(event);
      return;
    }
    const targetId = (_event$target = event.target) == null ? void 0 : _event$target.id;
    if (targetId === itemId) {
      contentProps.repositionHighlight(event, domRef == null ? void 0 : domRef.current);
    }
    onMouseEnter == null ? void 0 : onMouseEnter(event);
  };

  // enforce a single child
  const child = typeof children === "string" ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_text, {
    children: children
  }, void 0, false, {
    fileName: navbar_item_jsxFileName,
    lineNumber: 205,
    columnNumber: 36
  }, undefined) : external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.only(children);

  // add event listeners to the children
  const childrenWithEventListeners = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(child, {
    id: ((_child$props = child.props) == null ? void 0 : _child$props.id) || itemId,
    onMouseEnter: handleOnMouseEnter,
    onMouseLeave: handleOnMouseLeave
  });
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarItem, {
    ref: domRef,
    activeColor: activeColor || (contentProps == null ? void 0 : contentProps.activeColor),
    className: clsx("nextui-navbar-item", className),
    css: itemCss,
    id: itemId,
    isActive: isActive,
    underlineHeight: underlineHeight || (contentProps == null ? void 0 : contentProps.underlineHeight),
    variant: itemVariant,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(hoverProps, otherProps),
    children: childrenWithEventListeners
  }, void 0, false, {
    fileName: navbar_item_jsxFileName,
    lineNumber: 215,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  NavbarItem.displayName = "NextUI.NavbarItem";
}
NavbarItem.toString = () => ".nextui-navbar-item";
/* harmony default export */ const navbar_item = (NavbarItem);
;// CONCATENATED MODULE: ./src/navbar/navbar-link.tsx
var navbar_link_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar-link.tsx";








const NavbarLink = forwardRef((props, ref) => {
  const domRef = useDOMRef(ref);
  const {
    css,
    children,
    isActive,
    color,
    activeColor,
    underlineHeight,
    itemCss,
    itemClassName,
    isDisabled,
    hideIn,
    showIn,
    variant,
    className,
    ...otherProps
  } = props;
  const linkCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (color || css != null && css["$$linkColor"]) {
      return {
        ...css
      };
    }
    return {
      color: "inherit",
      height: "100%",
      width: "fit-content",
      ...css
    };
  }, [color, css]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(navbar_item, {
    activeColor: activeColor,
    className: itemClassName,
    css: itemCss,
    hideIn: hideIn,
    isActive: isActive,
    isDisabled: isDisabled,
    showIn: showIn,
    underlineHeight: underlineHeight,
    variant: variant,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_link, {
      ref: domRef,
      className: clsx("nextui-navbar-link", className),
      color: color,
      css: linkCss,
      ...otherProps,
      children: children
    }, void 0, false, {
      fileName: navbar_link_jsxFileName,
      lineNumber: 66,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: navbar_link_jsxFileName,
    lineNumber: 55,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  NavbarLink.displayName = "NextUI.NavbarLink";
}
NavbarLink.toString = () => ".nextui-navbar-link";
/* harmony default export */ const navbar_link = (NavbarLink);
;// CONCATENATED MODULE: ./src/navbar/navbar-context.ts

const [NavbarProvider, useNavbarContext] = createContext({
  strict: true,
  name: "NavbarContext",
  errorMessage: "useNavbarContext: `context` is undefined. Seems you forgot to wrap all navbar components within `<Navbar />`"
});
;// CONCATENATED MODULE: ./src/navbar/navbar-toggle-icon.tsx
var navbar_toggle_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar-toggle-icon.tsx";





const NavbarToggleIcon = props => {
  const {
    isExpanded = false,
    className,
    ...otherProps
  } = props;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarToggleIconContainer, {
    "aria-hidden": true,
    className: clsx("nextui-navbar-toggle-icon", className),
    isExpanded: isExpanded,
    tabIndex: -1,
    ...otherProps,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "line top"
    }, void 0, false, {
      fileName: navbar_toggle_icon_jsxFileName,
      lineNumber: 30,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "line bottom"
    }, void 0, false, {
      fileName: navbar_toggle_icon_jsxFileName,
      lineNumber: 31,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: navbar_toggle_icon_jsxFileName,
    lineNumber: 23,
    columnNumber: 5
  }, undefined);
};
if (__DEV__) {
  NavbarToggleIcon.displayName = "NextUI.NavbarToggleIcon";
}
NavbarToggleIcon.toString = () => ".nextui-navbar-toggle-icon";
/* harmony default export */ const navbar_toggle_icon = (NavbarToggleIcon);
;// CONCATENATED MODULE: ./src/navbar/navbar-toggle.tsx
var navbar_toggle_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar-toggle.tsx";














const NavbarToggle = forwardRef((props, ref) => {
  const {
    children,
    className,
    autoFocus,
    onChange,
    as,
    css,
    ...otherProps
  } = props;
  const {
    parentRef,
    setIsCollapseOpen
  } = useNavbarContext();
  const [, setBodyHidden] = src_use_body_scroll(parentRef, {
    scrollLayer: true
  });
  const handleChange = isOpen => {
    setIsCollapseOpen(isOpen);
    onChange == null ? void 0 : onChange(isOpen);
    setBodyHidden(isOpen);
  };
  const domRef = useDOMRef(ref);
  const state = $3017fa7ffdddec74$export$8042c6c013fd5226({
    ...props,
    onChange: handleChange
  });
  const {
    buttonProps,
    isPressed
  } = $55f54f7887471b58$export$51e84d46ca0bc451(props, state, domRef);
  const {
    isFocusVisible,
    focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    autoFocus
  });
  const child = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return children || /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(navbar_toggle_icon, {
      isExpanded: state.isSelected
    }, void 0, false, {
      fileName: navbar_toggle_jsxFileName,
      lineNumber: 46,
      columnNumber: 24
    }, undefined);
  }, [children, state.isSelected]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarToggle, {
    ref: domRef,
    as: as,
    className: clsx("nextui-navbar-toggle", className),
    css: css,
    isFocusVisible: isFocusVisible,
    isPressed: isPressed,
    ...dist_module_$3ef42575df84b30b$export$9d1611c77c2fe928(buttonProps, focusProps, otherProps),
    children: child
  }, void 0, false, {
    fileName: navbar_toggle_jsxFileName,
    lineNumber: 50,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  NavbarToggle.displayName = "NextUI.NavbarToggle";
}
NavbarToggle.toString = () => ".nextui-navbar-toggle";
/* harmony default export */ const navbar_toggle = (NavbarToggle);
;// CONCATENATED MODULE: ./src/navbar/navbar-collapse-context.ts

const [NavbarCollapseProvider, useNavbarCollapseContext] = createContext({
  strict: false,
  name: "NavbarCollapseContext"
});
;// CONCATENATED MODULE: ./src/navbar/navbar-collapse-item.tsx
var navbar_collapse_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar-collapse-item.tsx";










const NavbarCollapseItem = forwardRef((props, ref) => {
  var _context$parentRef;
  const {
    children,
    className,
    transitionDelay,
    transitionTime,
    transitionMatrix,
    disableAnimation,
    style,
    css,
    ...otherProps
  } = props;
  const context = useNavbarContext();
  const collapseContext = useNavbarCollapseContext();
  const domRef = useDOMRef(ref);
  const {
    isVisible,
    setEntry
  } = src_use_intersection_observer(domRef, {
    root: context == null ? void 0 : (_context$parentRef = context.parentRef) == null ? void 0 : _context$parentRef.current,
    freezeOnceVisible: context.isCollapseOpen
  });
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!context.isCollapseOpen && isVisible) {
      setEntry(null);
    }
  }, [isVisible, context.isCollapseOpen]);
  const index = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (collapseContext != null && collapseContext.items) {
      var _collapseContext$item;
      return (_collapseContext$item = collapseContext.items) == null ? void 0 : _collapseContext$item.findIndex(item => {
        var _item$props;
        return (item == null ? void 0 : (_item$props = item.props) == null ? void 0 : _item$props.children) === children;
      });
    }
    return -1;
  }, [collapseContext == null ? void 0 : collapseContext.items]);
  const itemTransitions = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _ref, _ref2, _ref3;
    return {
      transitionDelay: (_ref = transitionDelay != null ? transitionDelay : collapseContext == null ? void 0 : collapseContext.transitionDelay) != null ? _ref : 0,
      transitionTime: (_ref2 = transitionTime != null ? transitionTime : collapseContext == null ? void 0 : collapseContext.transitionTime) != null ? _ref2 : 0,
      transitionMatrix: (_ref3 = transitionMatrix != null ? transitionMatrix : collapseContext == null ? void 0 : collapseContext.transitionMatrix) != null ? _ref3 : {
        in: "matrix(1, 0, 0, 1, 0, 0)",
        out: "matrix(0.97, 0, 0, 1, 0, 20)"
      }
    };
  }, [transitionDelay, transitionTime, transitionMatrix, collapseContext.transitionMatrix, collapseContext.transitionDelay, collapseContext.transitionTime]);
  const defaultDelay = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => collapseContext.items && index > -1 ? index / collapseContext.items.length * 0.5 * 1000 + itemTransitions.transitionDelay : 0.1, [index, itemTransitions.transitionDelay, collapseContext == null ? void 0 : collapseContext.items]);
  const itemStyle = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const timeDelay = isVisible && !collapseContext.hasScrolled ? defaultDelay : 0;
    return {
      "--nextui--collapseItemOpacity": isVisible ? 1 : 0,
      "--nextui--collapseItemTransform": isVisible ? itemTransitions.transitionMatrix.in : itemTransitions.transitionMatrix.out,
      "--netxui--collapseItemTransition": !disableAnimation && context.isCollapseOpen ? `opacity ${itemTransitions.transitionTime}ms cubic-bezier(0.5, 0, 0, 1) ${timeDelay}ms, transform ${itemTransitions.transitionTime}ms cubic-bezier(0.5, 0, 0, 1) ${timeDelay}ms` : "none"
    };
  }, [index, isVisible, disableAnimation, defaultDelay, itemTransitions.transitionMatrix, itemTransitions.transitionTime, context.isCollapseOpen, collapseContext.hasScrolled]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarCollapseItem, {
    ref: domRef,
    className: clsx("nextui-navbar-collapse-item", className),
    css: {
      opacity: "var(--nextui--collapseItemOpacity)",
      transition: "var(--netxui--collapseItemTransition)",
      transform: "var(--nextui--collapseItemTransform)",
      ...css
    },
    disableAnimation: disableAnimation,
    style: {
      ...style,
      ...itemStyle
    },
    ...otherProps,
    children: children
  }, void 0, false, {
    fileName: navbar_collapse_item_jsxFileName,
    lineNumber: 112,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  NavbarCollapseItem.displayName = "NextUI.NavbarCollapseItem";
}
NavbarCollapseItem.toString = () => ".nextui-navbar-collapse-item";
/* harmony default export */ const navbar_collapse_item = (NavbarCollapseItem);
;// CONCATENATED MODULE: ./src/navbar/use-navbar-collapse.ts







/**
 * @internal
 */
function useNavbarCollapse(props = {}) {
  var _context$parentRef;
  const {
    css,
    children,
    ref,
    transitionDelay = 0,
    transitionTime = 350,
    transitionMatrix = {
      in: "matrix(1, 0, 0, 1, 0, 0)",
      out: "matrix(0.97, 0, 0, 1, 0, 20)"
    },
    className,
    ...otherProps
  } = props;
  const [hasScrolled, setHasScrolled] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const context = useNavbarContext();
  const domRef = useDOMRef(ref);
  const [, items] = pickChild(children, navbar_collapse_item);
  const [, setBodyHidden] = src_use_body_scroll(null, {
    scrollLayer: true
  });
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    var _domRef$current3;
    if (!context.isCollapseOpen) {
      var _domRef$current;
      // restore scroll to the top of the collapse
      domRef.current && ((_domRef$current = domRef.current) == null ? void 0 : _domRef$current.scrollTo == null ? void 0 : _domRef$current.scrollTo({
        top: 0
      }));
      setHasScrolled(false);
      setBodyHidden(false);
    } else {
      setBodyHidden(true);
    }
    const handleScroll = () => {
      var _domRef$current2;
      if (domRef.current && ((_domRef$current2 = domRef.current) == null ? void 0 : _domRef$current2.scrollTop) > 0 && !hasScrolled) {
        setHasScrolled(true);
      }
    };
    (_domRef$current3 = domRef.current) == null ? void 0 : _domRef$current3.addEventListener("scroll", handleScroll);
    return () => {
      var _domRef$current4;
      (_domRef$current4 = domRef.current) == null ? void 0 : _domRef$current4.removeEventListener("scroll", handleScroll);
    };
  }, [context.isCollapseOpen]);
  const collpaseCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const customCss = [];
    if (context.parentRef && context.parentRef.current) {
      var _context$parentRef$cu;
      customCss.push({
        maxHeight: (_context$parentRef$cu = context.parentRef.current) == null ? void 0 : _context$parentRef$cu.clientHeight
      });
    }
    const customCssObject = arrayToObject(customCss);
    return {
      ...customCssObject,
      ...css
    };
  }, [(_context$parentRef = context.parentRef) == null ? void 0 : _context$parentRef.current, css]);
  return {
    css,
    domRef,
    children,
    items,
    collpaseCss,
    isOpen: context.isCollapseOpen,
    hasScrolled,
    transitionDelay,
    transitionTime,
    transitionMatrix,
    className,
    otherProps
  };
}
;// CONCATENATED MODULE: ./src/navbar/navbar-collapse.tsx
var navbar_collapse_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar-collapse.tsx";








const NavbarCollapse = forwardRef((props, ref) => {
  const context = useNavbarCollapse({
    ref,
    ...props
  });
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(NavbarCollapseProvider, {
    value: context,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarCollapse, {
      className: clsx("nextui-navbar-collapse", context.className),
      css: context.collpaseCss,
      isOpen: context.isOpen,
      ...context.otherProps,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarCollapseWrapper, {
        ref: context.domRef,
        className: "nextui-navbar-collapse-wrapper",
        children: context.children
      }, void 0, false, {
        fileName: navbar_collapse_jsxFileName,
        lineNumber: 24,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: navbar_collapse_jsxFileName,
      lineNumber: 18,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: navbar_collapse_jsxFileName,
    lineNumber: 17,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  NavbarCollapse.displayName = "NextUI.NavbarCollapse";
}
NavbarCollapse.toString = () => ".nextui-navbar-collapse";
/* harmony default export */ const navbar_collapse = (NavbarCollapse);
;// CONCATENATED MODULE: ./src/navbar/use-navbar.ts






/**
 * @internal
 */
function useNavbar(props = {}) {
  const {
    css,
    containerCss,
    parentRef,
    isBordered,
    variant = "static",
    height = "76px",
    borderWeight = "light",
    shouldHideOnScroll = false,
    disableScrollHandler = false,
    onScrollPositionChange,
    disableBlur: disableBlurProp = false,
    className,
    ...otherProps
  } = props;
  const [sticky, setSticky] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const [isCollapseOpen, setIsCollapseOpen] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    theme
  } = src_use_theme();
  const borderWeightValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!isBordered) {
      return "0px";
    }
    return `$borderWeights$${borderWeight}`;
  }, [isBordered, borderWeight]);
  const disableBlur = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => disableBlurProp || isCollapseOpen, [disableBlurProp, isCollapseOpen]);
  const navbarHeight = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (typeof height === "number") {
      return `${height}px`;
    }
    return height;
  }, [height]);
  const navbarGlobalCss = globalCss({
    ":root": {
      $$navbarHeight: navbarHeight,
      $$navbarCompactHeight: "calc($$navbarHeight * 0.7)",
      $$navbarTextColor: "$colors$text",
      $$navbarBackgroundColor: "$colors$background",
      $$navbarBlurBackgroundColor: "$colors$backgroundAlpha",
      $$navbarItemMaxHeight: "calc($$navbarHeight * 0.5)",
      $$navbarCompactItemMaxHeight: "calc($$navbarHeight * 0.5)",
      $$navbarBorderColor: "$colors$border",
      $$navbarBorderRadius: "$radii$lg",
      $$navbarPadding: "$space$10",
      $$navbarFloatingMargin: "$space$10",
      $$navbarContainerMaxWidth: "$breakpoints$lg",
      $$navbarShadow: "$shadows$md",
      $$navbarBorderWeight: borderWeightValue,
      $$navbarBlur: "10px"
    }
  });
  navbarGlobalCss();
  src_use_scroll_position({
    elementRef: parentRef,
    enabled: shouldHideOnScroll || !disableScrollHandler,
    callback: ({
      prevPos,
      currPos
    }) => {
      onScrollPositionChange == null ? void 0 : onScrollPositionChange(currPos.y);
      if (shouldHideOnScroll) {
        setSticky(prevSticky => {
          const next = currPos.y > prevPos.y;
          return next !== prevSticky ? next : prevSticky;
        });
      }
    }
  });
  const navbarCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const customCss = [];
    if (variant === "floating") {
      var _theme$colors, _theme$colors$backgro, _theme$colors2, _theme$colors2$backgr, _theme$colors3, _theme$colors3$backgr;
      // linear gradient behind the navbar
      customCss.push({
        bg: `linear-gradient(180deg, ${addColorAlpha(theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : (_theme$colors$backgro = _theme$colors.background) == null ? void 0 : _theme$colors$backgro.value, 0.95)} 44%, ${addColorAlpha(theme == null ? void 0 : (_theme$colors2 = theme.colors) == null ? void 0 : (_theme$colors2$backgr = _theme$colors2.background) == null ? void 0 : _theme$colors2$backgr.value, 0.46)} 73%, ${addColorAlpha(theme == null ? void 0 : (_theme$colors3 = theme.colors) == null ? void 0 : (_theme$colors3$backgr = _theme$colors3.background) == null ? void 0 : _theme$colors3$backgr.value, 0)})`
      });
    }
    if (shouldHideOnScroll) {
      customCss.push({
        position: "sticky",
        top: 0,
        right: 0,
        left: 0,
        transform: sticky ? "translateY(-100%)" : "translateY(0)",
        transition: "transform 400ms ease"
      });
    }
    const customCssObject = arrayToObject(customCss);
    return {
      ...customCssObject,
      ...css
    };
  }, [css, theme == null ? void 0 : theme.colors, variant, shouldHideOnScroll, sticky]);
  return {
    css,
    variant,
    sticky,
    isBordered,
    containerCss,
    navbarCss,
    parentRef,
    borderWeight,
    shouldHideOnScroll,
    disableBlur,
    isCollapseOpen,
    setIsCollapseOpen,
    className,
    otherProps
  };
}
;// CONCATENATED MODULE: ./src/navbar/navbar.tsx
var navbar_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/navbar/navbar.tsx";











const Navbar = forwardRef((props, ref) => {
  const {
    children,
    ...otherProps
  } = props;
  const domRef = useDOMRef(ref);
  const context = useNavbar(otherProps);

  // validates if contains a NextUI Navbar Collapse as a child
  const [withoutCollapseChildren, collapseChildren] = pickChild(children, navbar_collapse);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(NavbarProvider, {
    value: context,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbar, {
      ref: domRef,
      className: clsx("nextui-navbar", context.className),
      css: context.navbarCss,
      disableBlur: context.disableBlur,
      isBordered: context.isBordered,
      variant: context.variant,
      ...context.otherProps,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledNavbarContainer, {
        className: "nextui-navbar-container",
        css: context.containerCss,
        children: withoutCollapseChildren
      }, void 0, false, {
        fileName: navbar_jsxFileName,
        lineNumber: 46,
        columnNumber: 9
      }, undefined), collapseChildren]
    }, void 0, true, {
      fileName: navbar_jsxFileName,
      lineNumber: 37,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: navbar_jsxFileName,
    lineNumber: 36,
    columnNumber: 5
  }, undefined);
});
if (__DEV__) {
  Navbar.displayName = "NextUI.Navbar";
}
Navbar.toString = () => ".nextui-navbar";
/* harmony default export */ const navbar = (Navbar);
;// CONCATENATED MODULE: ./src/navbar/index.ts








navbar.Brand = navbar_brand;
navbar.Content = navbar_content;
navbar.Item = navbar_item;
navbar.Link = navbar_link;
navbar.Toggle = navbar_toggle;
navbar.Collapse = navbar_collapse;
navbar.CollapseItem = navbar_collapse_item;

// export styled components


// export types

/* harmony default export */ const src_navbar = (navbar);
;// CONCATENATED MODULE: ./src/index.ts
//Utils


// Hooks
















// miscs & types





// Third party



//Theme






// Components
































































})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});