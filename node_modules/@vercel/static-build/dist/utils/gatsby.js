"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectPlugins = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const semver_1 = __importDefault(require("semver"));
const _shared_1 = require("./_shared");
const PLUGINS = {
    GATSBY_PLUGIN_VERCEL_ANALYTICS: '@vercel/gatsby-plugin-vercel-analytics',
    GATSBY_PLUGIN_VERCEL_BUILDER: '@vercel/gatsby-plugin-vercel-builder',
};
const GATSBY_CONFIG_FILE = 'gatsby-config';
async function injectPlugins(detectedVersion, dir) {
    const pluginsToInject = [];
    if (process.env.VERCEL_GATSBY_BUILDER_PLUGIN && detectedVersion) {
        const version = semver_1.default.coerce(detectedVersion);
        if (version && semver_1.default.satisfies(version, '>=4.0.0')) {
            pluginsToInject.push(PLUGINS.GATSBY_PLUGIN_VERCEL_BUILDER);
        }
    }
    if (process.env.VERCEL_ANALYTICS_ID) {
        process.env.GATSBY_VERCEL_ANALYTICS_ID = process.env.VERCEL_ANALYTICS_ID;
        pluginsToInject.push(PLUGINS.GATSBY_PLUGIN_VERCEL_ANALYTICS);
    }
    if (pluginsToInject.length === 0) {
        return false;
    }
    await addGatsbyPackage(dir, pluginsToInject);
    const gatsbyConfigPathTs = path.join(dir, `${GATSBY_CONFIG_FILE}.ts`);
    const gatsbyConfigPathMjs = path.join(dir, `${GATSBY_CONFIG_FILE}.mjs`);
    const gatsbyConfigPathJs = path.join(dir, `${GATSBY_CONFIG_FILE}.js`);
    if (await _shared_1.fileExists(gatsbyConfigPathTs)) {
        printInjectingPlugins(pluginsToInject, gatsbyConfigPathTs);
        await updateGatsbyTsConfig(gatsbyConfigPathTs, pluginsToInject);
    }
    else if (await _shared_1.fileExists(gatsbyConfigPathMjs)) {
        printInjectingPlugins(pluginsToInject, gatsbyConfigPathMjs);
        await updateGatsbyMjsConfig(gatsbyConfigPathMjs, pluginsToInject);
    }
    else {
        printInjectingPlugins(pluginsToInject, gatsbyConfigPathJs);
        if (await _shared_1.fileExists(gatsbyConfigPathJs)) {
            await updateGatsbyJsConfig(gatsbyConfigPathJs, pluginsToInject);
        }
        else {
            await fs_1.promises.writeFile(gatsbyConfigPathJs, `module.exports = ${JSON.stringify({
                plugins: pluginsToInject,
            })}`);
        }
    }
    return true;
}
exports.injectPlugins = injectPlugins;
function printInjectingPlugins(plugins, configPath) {
    let pluginsStr = 'plugin';
    if (plugins.length > 1) {
        pluginsStr += 's';
    }
    console.log(`Injecting Gatsby.js ${pluginsStr} ${plugins
        .map(p => `"${p}"`)
        .join(', ')} to \`${configPath}\``);
}
async function addGatsbyPackage(dir, plugins) {
    const pkgJson = (await _shared_1.readPackageJson(dir));
    if (!pkgJson.dependencies) {
        pkgJson.dependencies = {};
    }
    for (const plugin of plugins) {
        if (!pkgJson.dependencies[plugin]) {
            console.log(`Adding "${plugin}" to \`package.json\` "dependencies"`);
            pkgJson.dependencies[plugin] = 'latest';
        }
    }
    await _shared_1.writePackageJson(dir, pkgJson);
}
async function updateGatsbyTsConfig(configPath, plugins) {
    await fs_1.promises.rename(configPath, configPath + '.__vercel_builder_backup__.ts');
    await fs_1.promises.writeFile(configPath, `import userConfig from "./gatsby-config.ts.__vercel_builder_backup__.ts";
import type { PluginRef } from "gatsby";

// https://github.com/gatsbyjs/gatsby/blob/354003fb2908e02ff12109ca3a02978a5a6e608c/packages/gatsby/src/bootstrap/prefer-default.ts
const preferDefault = (m: any) => (m && m.default) || m;

const vercelConfig = Object.assign(
  {},
  // https://github.com/gatsbyjs/gatsby/blob/a6ecfb2b01d761e8a3612b8ea132c698659923d9/packages/gatsby/src/services/initialize.ts#L113-L117
  preferDefault(userConfig)
);

if (!vercelConfig.plugins) {
  vercelConfig.plugins = [];
}

for (const plugin of ${JSON.stringify(plugins)}) {
  const hasPlugin = vercelConfig.plugins.find(
    (p: PluginRef) =>
      p && (p === plugin || p.resolve === plugin)
  );

  if (!hasPlugin) {
    vercelConfig.plugins = vercelConfig.plugins.slice();
    vercelConfig.plugins.push(plugin);
  }
}

export default vercelConfig;
`);
}
async function updateGatsbyMjsConfig(configPath, plugins) {
    await fs_1.promises.rename(configPath, configPath + '.__vercel_builder_backup__.mjs');
    await fs_1.promises.writeFile(configPath, `import userConfig from "./gatsby-config.mjs.__vercel_builder_backup__.mjs";

// https://github.com/gatsbyjs/gatsby/blob/354003fb2908e02ff12109ca3a02978a5a6e608c/packages/gatsby/src/bootstrap/prefer-default.ts
const preferDefault = (m) => (m && m.default) || m;

const vercelConfig = Object.assign(
  {},
  // https://github.com/gatsbyjs/gatsby/blob/a6ecfb2b01d761e8a3612b8ea132c698659923d9/packages/gatsby/src/services/initialize.ts#L113-L117
  preferDefault(userConfig)
);
if (!vercelConfig.plugins) {
  vercelConfig.plugins = [];
}

for (const plugin of ${JSON.stringify(plugins)}) {
  const hasPlugin = vercelConfig.plugins.find(
    (p) => p && (p === plugin || p.resolve === plugin)
  );

  if (!hasPlugin) {
    vercelConfig.plugins = vercelConfig.plugins.slice();
    vercelConfig.plugins.push(plugin);
  }
}

export default vercelConfig;
`);
}
async function updateGatsbyJsConfig(configPath, plugins) {
    await fs_1.promises.rename(configPath, configPath + '.__vercel_builder_backup__.js');
    await fs_1.promises.writeFile(configPath, `const userConfig = require("./gatsby-config.js.__vercel_builder_backup__.js");

// https://github.com/gatsbyjs/gatsby/blob/354003fb2908e02ff12109ca3a02978a5a6e608c/packages/gatsby/src/bootstrap/prefer-default.ts
const preferDefault = m => (m && m.default) || m;

const vercelConfig = Object.assign(
  {},
  // https://github.com/gatsbyjs/gatsby/blob/a6ecfb2b01d761e8a3612b8ea132c698659923d9/packages/gatsby/src/services/initialize.ts#L113-L117
  preferDefault(userConfig)
);
if (!vercelConfig.plugins) {
  vercelConfig.plugins = [];
}

for (const plugin of ${JSON.stringify(plugins)}) {
  const hasPlugin = vercelConfig.plugins.find(
    (p) => p && (p === plugin || p.resolve === plugin)
  );

  if (!hasPlugin) {
    vercelConfig.plugins = vercelConfig.plugins.slice();
    vercelConfig.plugins.push(plugin);
  }
}
module.exports = vercelConfig;
`);
}
