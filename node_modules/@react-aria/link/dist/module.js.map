{"mappings":";;;;;;;SCyCgB,yCAAO,CAAC,KAAsB,EAAE,GAAgC,EAAY,CAAC;IAC3F,GAAG,CAAC,CAAC,cACH,WAAW,GAAG,CAAG,cACjB,OAAO,iBACP,YAAY,eACZ,UAAU,GACV,EAAa,AAAb,WAAa;IACb,OAAO,EAAE,iBAAiB,eAC1B,UAAU,MACP,UAAU,CACf,CAAC,GAAG,KAAK;IAET,GAAG,CAAC,SAAS;IACb,EAAE,EAAE,WAAW,KAAK,CAAG,IACrB,SAAS,GAAG,CAAC;QACX,IAAI,EAAE,CAAM;QACZ,QAAQ,GAAG,UAAU,GAAG,CAAC,GAAG,SAAS;IACvC,CAAC;IAEH,GAAG,CAAC,CAAC,iBAAA,cAAc,EAAA,CAAC,GAAG,mBAAY,CAAC,KAAK,EAAE,GAAG;IAC9C,GAAG,CAAC,CAAC,aAAA,UAAU,cAAE,SAAS,EAAA,CAAC,GAAG,eAAQ,CAAC,CAAC;iBAAA,OAAO;sBAAE,YAAY;oBAAE,UAAU;oBAAE,UAAU;aAAE,GAAG;IAAA,CAAC;IAC3F,GAAG,CAAC,QAAQ,GAAG,qBAAc,CAAC,UAAU,EAAE,CAAC;QAAA,SAAS,EAAE,IAAI;IAAA,CAAC;IAC3D,GAAG,CAAC,mBAAmB,GAAG,iBAAU,CAAC,cAAc,EAAE,UAAU;IAE/D,MAAM,CAAC,CAAC;mBACN,SAAS;QACT,SAAS,EAAE,iBAAU,CAAC,QAAQ,EAAE,CAAC;eAC5B,mBAAmB;eACnB,SAAS;YACZ,CAAe,gBAAE,UAAU,IAAI,SAAS;YACxC,OAAO,GAAG,CAAC,GAAK,CAAC;gBACf,UAAU,CAAC,OAAO,CAAC,CAAC;gBACpB,EAAE,EAAE,iBAAiB,EAAE,CAAC;oBACtB,iBAAiB,CAAC,CAAC;oBACnB,OAAO,CAAC,IAAI,CAAC,CAA2C;gBAC1D,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sources":["packages/@react-aria/link/src/index.ts","packages/@react-aria/link/src/useLink.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport type {AriaLinkOptions, LinkAria} from './useLink';\nexport {useLink} from './useLink';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLinkProps} from '@react-types/link';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {RefObject} from 'react';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface AriaLinkOptions extends AriaLinkProps {\n  /** Whether the link is disabled. */\n  isDisabled?: boolean,\n  /**\n   * The HTML element used to render the link, e.g. 'a', or 'span'.\n   * @default 'a'\n   */\n  elementType?: string\n}\n\nexport interface LinkAria {\n  /** Props for the link element. */\n  linkProps: DOMAttributes,\n  /** Whether the link is currently pressed. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a link component.\n * A link allows a user to navigate to another page or resource within a web page\n * or application.\n */\nexport function useLink(props: AriaLinkOptions, ref: RefObject<FocusableElement>): LinkAria {\n  let {\n    elementType = 'a',\n    onPress,\n    onPressStart,\n    onPressEnd,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    isDisabled,\n    ...otherProps\n  } = props;\n\n  let linkProps: DOMAttributes;\n  if (elementType !== 'a') {\n    linkProps = {\n      role: 'link',\n      tabIndex: !isDisabled ? 0 : undefined\n    };\n  }\n  let {focusableProps} = useFocusable(props, ref);\n  let {pressProps, isPressed} = usePress({onPress, onPressStart, onPressEnd, isDisabled, ref});\n  let domProps = filterDOMProps(otherProps, {labelable: true});\n  let interactionHandlers = mergeProps(focusableProps, pressProps);\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    linkProps: mergeProps(domProps, {\n      ...interactionHandlers,\n      ...linkProps,\n      'aria-disabled': isDisabled || undefined,\n      onClick: (e) => {\n        pressProps.onClick(e);\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n"],"names":[],"version":3,"file":"module.js.map"}