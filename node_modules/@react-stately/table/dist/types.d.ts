import { GridNode } from "@react-types/grid";
import { Key, MutableRefObject } from "react";
import { CollectionBase, Node, SelectionMode, Sortable, SortDescriptor } from "@react-types/shared";
import { GridState } from "@react-stately/grid";
import { TableCollection, TableHeaderProps, TableBodyProps, ColumnProps, RowProps, CellProps } from "@react-types/table";
import { MultipleSelectionStateProps } from "@react-stately/selection";
interface AffectedColumnWidth {
    /** The column key. */
    key: Key;
    /** The column width. */
    width: number;
}
interface AffectedColumnWidths extends Array<AffectedColumnWidth> {
}
export interface TableColumnResizeState<T> {
    /** A ref whose current value is the state of all the column widths. */
    columnWidths: MutableRefObject<Map<Key, number>>;
    /** Setter for the table width. */
    setTableWidth: (width: number) => void;
    /** Trigger a resize and recalculation. */
    onColumnResize: (column: GridNode<T>, width: number) => void;
    /** Callback for when onColumnResize has started. */
    onColumnResizeStart: (column: GridNode<T>) => void;
    /** Callback for when onColumnResize has ended. */
    onColumnResizeEnd: (column: GridNode<T>) => void;
    /** Getter for column width. */
    getColumnWidth: (key: Key) => number;
    /** Getter for column min width. */
    getColumnMinWidth: (key: Key) => number;
    /** Getter for column max widths. */
    getColumnMaxWidth: (key: Key) => number;
    /** Key of column currently being resized. */
    currentlyResizingColumn: Key | null;
}
export interface TableColumnResizeStateProps {
    /** Callback to determine what the default width of a column should be. */
    getDefaultWidth?: (props: any) => string | number;
    /** Callback that is invoked during the entirety of the resize event. */
    onColumnResize?: (affectedColumnWidths: AffectedColumnWidths) => void;
    /** Callback that is invoked when the resize event is ended. */
    onColumnResizeEnd?: (affectedColumnWidths: AffectedColumnWidths) => void;
    /** The default table width. */
    tableWidth?: number;
}
interface ColumnState<T> {
    columns: GridNode<T>[];
}
export function useTableColumnResizeState<T>(props: TableColumnResizeStateProps, state: ColumnState<T>): TableColumnResizeState<T>;
export interface TableState<T> extends GridState<T, TableCollection<T>> {
    /** A collection of rows and columns in the table. */
    collection: TableCollection<T>;
    /** Whether the row selection checkboxes should be displayed. */
    showSelectionCheckboxes: boolean;
    /** The current sorted column and direction. */
    sortDescriptor: SortDescriptor;
    /** Calls the provided onSortChange handler with the provided column key and sort direction. */
    sort(columnKey: Key, direction?: 'ascending' | 'descending'): void;
    /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */
    isKeyboardNavigationDisabled: boolean;
    /** Set whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */
    setKeyboardNavigationDisabled: (val: boolean) => void;
}
export interface CollectionBuilderContext<T> {
    showSelectionCheckboxes: boolean;
    selectionMode: SelectionMode;
    columns: Node<T>[];
}
export interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {
    /** Whether the row selection checkboxes should be displayed. */
    showSelectionCheckboxes?: boolean;
}
/**
 * Provides state management for a table component. Handles building a collection
 * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.
 */
export function useTableState<T extends object>(props: TableStateProps<T>): TableState<T>;
/**
 * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined
 * as children, or generated dynamically using a function based on the data passed to the `columns` prop.
 */
export let TableHeader: <T>(props: TableHeaderProps<T>) => JSX.Element;
/**
 * A TableBody is a container for the Row elements of a Table. Rows can be statically defined
 * as children, or generated dynamically using a function based on the data passed to the `items` prop.
 */
export let TableBody: <T>(props: TableBodyProps<T>) => JSX.Element;
/**
 * A Column represents a field of each item within a Table. Columns may also contain nested
 * Column elements to represent column groups. Nested columns can be statically defined as
 * children, or dynamically generated using a function based on the `childColumns` prop.
 */
export let Column: <T>(props: ColumnProps<T>) => JSX.Element;
/**
 * A Row represents a single item in a Table and contains Cell elements for each column.
 * Cells can be statically defined as children, or generated dynamically using a function
 * based on the columns defined in the TableHeader.
 */
export let Row: (props: RowProps) => JSX.Element;
/**
 * A Cell represents the value of a single Column within a Table Row.
 */
export let Cell: (props: CellProps) => JSX.Element;
export type { TableHeaderProps, TableBodyProps, ColumnProps, RowProps, CellProps } from '@react-types/table';
export { Section } from '@react-stately/collections';

//# sourceMappingURL=types.d.ts.map
